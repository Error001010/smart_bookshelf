
board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  24000010  08009434  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e8  08009434  000201e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001104b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f2e  00000000  00000000  00031089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000af8  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a50  00000000  00000000  00033ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ed19  00000000  00000000  00034500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001024e  00000000  00000000  00063219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001326c9  00000000  00000000  00073467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5b30  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cf0  00000000  00000000  001a5b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080093bc 	.word	0x080093bc

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080093bc 	.word	0x080093bc

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a49      	ldr	r2, [pc, #292]	; (8000724 <HAL_UARTEx_RxEventCallback+0x134>)
 8000600:	4293      	cmp	r3, r2
 8000602:	f040 808a 	bne.w	800071a <HAL_UARTEx_RxEventCallback+0x12a>
		HAL_UART_Transmit_DMA(&huart3, receiveData, Size);
 8000606:	887b      	ldrh	r3, [r7, #2]
 8000608:	461a      	mov	r2, r3
 800060a:	4947      	ldr	r1, [pc, #284]	; (8000728 <HAL_UARTEx_RxEventCallback+0x138>)
 800060c:	4845      	ldr	r0, [pc, #276]	; (8000724 <HAL_UARTEx_RxEventCallback+0x134>)
 800060e:	f006 fdcd 	bl	80071ac <HAL_UART_Transmit_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000612:	4b46      	ldr	r3, [pc, #280]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a46      	ldr	r2, [pc, #280]	; (8000730 <HAL_UARTEx_RxEventCallback+0x140>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d04a      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800061c:	4b43      	ldr	r3, [pc, #268]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a44      	ldr	r2, [pc, #272]	; (8000734 <HAL_UARTEx_RxEventCallback+0x144>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d045      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000626:	4b41      	ldr	r3, [pc, #260]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a43      	ldr	r2, [pc, #268]	; (8000738 <HAL_UARTEx_RxEventCallback+0x148>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d040      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000630:	4b3e      	ldr	r3, [pc, #248]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a41      	ldr	r2, [pc, #260]	; (800073c <HAL_UARTEx_RxEventCallback+0x14c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d03b      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a40      	ldr	r2, [pc, #256]	; (8000740 <HAL_UARTEx_RxEventCallback+0x150>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d036      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000644:	4b39      	ldr	r3, [pc, #228]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a3e      	ldr	r2, [pc, #248]	; (8000744 <HAL_UARTEx_RxEventCallback+0x154>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d031      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a3d      	ldr	r2, [pc, #244]	; (8000748 <HAL_UARTEx_RxEventCallback+0x158>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d02c      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000658:	4b34      	ldr	r3, [pc, #208]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a3b      	ldr	r2, [pc, #236]	; (800074c <HAL_UARTEx_RxEventCallback+0x15c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d027      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000662:	4b32      	ldr	r3, [pc, #200]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a3a      	ldr	r2, [pc, #232]	; (8000750 <HAL_UARTEx_RxEventCallback+0x160>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d022      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <HAL_UARTEx_RxEventCallback+0x164>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01d      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a37      	ldr	r2, [pc, #220]	; (8000758 <HAL_UARTEx_RxEventCallback+0x168>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d018      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a35      	ldr	r2, [pc, #212]	; (800075c <HAL_UARTEx_RxEventCallback+0x16c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d013      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <HAL_UARTEx_RxEventCallback+0x170>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d00e      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a32      	ldr	r2, [pc, #200]	; (8000764 <HAL_UARTEx_RxEventCallback+0x174>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d009      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <HAL_UARTEx_RxEventCallback+0x178>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d004      	beq.n	80006b2 <HAL_UARTEx_RxEventCallback+0xc2>
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <HAL_UARTEx_RxEventCallback+0x17c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d108      	bne.n	80006c4 <HAL_UARTEx_RxEventCallback+0xd4>
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f022 0208 	bic.w	r2, r2, #8
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e007      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xe4>
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_UARTEx_RxEventCallback+0x13c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0204 	bic.w	r2, r2, #4
 80006d2:	601a      	str	r2, [r3, #0]
		GPIO_PinState state = GPIO_PIN_SET;
 80006d4:	2301      	movs	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
		if (receiveData[1] == '0') {
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <HAL_UARTEx_RxEventCallback+0x138>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	2b30      	cmp	r3, #48	; 0x30
 80006de:	d101      	bne.n	80006e4 <HAL_UARTEx_RxEventCallback+0xf4>
		  state = GPIO_PIN_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
		}
		if (receiveData[0] == 'R') {
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_UARTEx_RxEventCallback+0x138>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b52      	cmp	r3, #82	; 0x52
 80006ea:	d107      	bne.n	80006fc <HAL_UARTEx_RxEventCallback+0x10c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, state);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	461a      	mov	r2, r3
 80006f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <HAL_UARTEx_RxEventCallback+0x180>)
 80006f6:	f003 fef7 	bl	80044e8 <HAL_GPIO_WritePin>
 80006fa:	e009      	b.n	8000710 <HAL_UARTEx_RxEventCallback+0x120>
		} else if (receiveData[0] == 'G') {
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_UARTEx_RxEventCallback+0x138>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b47      	cmp	r3, #71	; 0x47
 8000702:	d105      	bne.n	8000710 <HAL_UARTEx_RxEventCallback+0x120>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, state);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	461a      	mov	r2, r3
 8000708:	2101      	movs	r1, #1
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <HAL_UARTEx_RxEventCallback+0x180>)
 800070c:	f003 feec 	bl	80044e8 <HAL_GPIO_WritePin>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receiveData, sizeof(receiveData));
 8000710:	2232      	movs	r2, #50	; 0x32
 8000712:	4905      	ldr	r1, [pc, #20]	; (8000728 <HAL_UARTEx_RxEventCallback+0x138>)
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <HAL_UARTEx_RxEventCallback+0x134>)
 8000716:	f008 fd83 	bl	8009220 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2400002c 	.word	0x2400002c
 8000728:	240001b0 	.word	0x240001b0
 800072c:	24000138 	.word	0x24000138
 8000730:	40020010 	.word	0x40020010
 8000734:	40020028 	.word	0x40020028
 8000738:	40020040 	.word	0x40020040
 800073c:	40020058 	.word	0x40020058
 8000740:	40020070 	.word	0x40020070
 8000744:	40020088 	.word	0x40020088
 8000748:	400200a0 	.word	0x400200a0
 800074c:	400200b8 	.word	0x400200b8
 8000750:	40020410 	.word	0x40020410
 8000754:	40020428 	.word	0x40020428
 8000758:	40020440 	.word	0x40020440
 800075c:	40020458 	.word	0x40020458
 8000760:	40020470 	.word	0x40020470
 8000764:	40020488 	.word	0x40020488
 8000768:	400204a0 	.word	0x400204a0
 800076c:	400204b8 	.word	0x400204b8
 8000770:	58020400 	.word	0x58020400

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 fc84 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077c:	f000 f896 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 f986 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000784:	f000 f95c 	bl	8000a40 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000788:	f000 f906 	bl	8000998 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800078c:	f000 f950 	bl	8000a30 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receiveData, sizeof(receiveData));
 8000790:	2232      	movs	r2, #50	; 0x32
 8000792:	4933      	ldr	r1, [pc, #204]	; (8000860 <main+0xec>)
 8000794:	4833      	ldr	r0, [pc, #204]	; (8000864 <main+0xf0>)
 8000796:	f008 fd43 	bl	8009220 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <main+0xf4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a33      	ldr	r2, [pc, #204]	; (800086c <main+0xf8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d04a      	beq.n	800083a <main+0xc6>
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <main+0xf4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a31      	ldr	r2, [pc, #196]	; (8000870 <main+0xfc>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d045      	beq.n	800083a <main+0xc6>
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <main+0xf4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <main+0x100>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d040      	beq.n	800083a <main+0xc6>
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <main+0xf4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <main+0x104>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d03b      	beq.n	800083a <main+0xc6>
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <main+0xf4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a2d      	ldr	r2, [pc, #180]	; (800087c <main+0x108>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d036      	beq.n	800083a <main+0xc6>
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <main+0xf4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <main+0x10c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d031      	beq.n	800083a <main+0xc6>
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0xf4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <main+0x110>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d02c      	beq.n	800083a <main+0xc6>
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <main+0xf4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a28      	ldr	r2, [pc, #160]	; (8000888 <main+0x114>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d027      	beq.n	800083a <main+0xc6>
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <main+0xf4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <main+0x118>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d022      	beq.n	800083a <main+0xc6>
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <main+0xf4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a25      	ldr	r2, [pc, #148]	; (8000890 <main+0x11c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d01d      	beq.n	800083a <main+0xc6>
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <main+0xf4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a24      	ldr	r2, [pc, #144]	; (8000894 <main+0x120>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d018      	beq.n	800083a <main+0xc6>
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <main+0xf4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <main+0x124>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d013      	beq.n	800083a <main+0xc6>
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <main+0xf4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <main+0x128>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d00e      	beq.n	800083a <main+0xc6>
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <main+0xf4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <main+0x12c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d009      	beq.n	800083a <main+0xc6>
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <main+0xf4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <main+0x130>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d004      	beq.n	800083a <main+0xc6>
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <main+0xf4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <main+0x134>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d108      	bne.n	800084c <main+0xd8>
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <main+0xf4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <main+0xf4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0208 	bic.w	r2, r2, #8
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e007      	b.n	800085c <main+0xe8>
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <main+0xf4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <main+0xf4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f022 0204 	bic.w	r2, r2, #4
 800085a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0xe8>
 800085e:	bf00      	nop
 8000860:	240001b0 	.word	0x240001b0
 8000864:	2400002c 	.word	0x2400002c
 8000868:	24000138 	.word	0x24000138
 800086c:	40020010 	.word	0x40020010
 8000870:	40020028 	.word	0x40020028
 8000874:	40020040 	.word	0x40020040
 8000878:	40020058 	.word	0x40020058
 800087c:	40020070 	.word	0x40020070
 8000880:	40020088 	.word	0x40020088
 8000884:	400200a0 	.word	0x400200a0
 8000888:	400200b8 	.word	0x400200b8
 800088c:	40020410 	.word	0x40020410
 8000890:	40020428 	.word	0x40020428
 8000894:	40020440 	.word	0x40020440
 8000898:	40020458 	.word	0x40020458
 800089c:	40020470 	.word	0x40020470
 80008a0:	40020488 	.word	0x40020488
 80008a4:	400204a0 	.word	0x400204a0
 80008a8:	400204b8 	.word	0x400204b8

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 fd76 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 fd70 	bl	80093ac <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <SystemClock_Config+0xe4>)
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295
 80008d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008d6:	2004      	movs	r0, #4
 80008d8:	f003 fe20 	bl	800451c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <SystemClock_Config+0xe8>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <SystemClock_Config+0xe8>)
 80008e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xe8>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f8:	bf00      	nop
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <SystemClock_Config+0xe8>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000906:	d1f8      	bne.n	80008fa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000908:	2321      	movs	r3, #33	; 0x21
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000912:	2301      	movs	r3, #1
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	2302      	movs	r3, #2
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000922:	2310      	movs	r3, #16
 8000924:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000932:	230c      	movs	r3, #12
 8000934:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000936:	2300      	movs	r3, #0
 8000938:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fe44 	bl	80045d0 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094e:	f000 f9b9 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	233f      	movs	r3, #63	; 0x3f
 8000954:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2303      	movs	r3, #3
 8000958:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000962:	2340      	movs	r3, #64	; 0x40
 8000964:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f004 fa5b 	bl	8004e34 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000984:	f000 f99e 	bl	8000cc4 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	; 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024400 	.word	0x58024400
 8000994:	58024800 	.word	0x58024800

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_USART3_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009e2:	f006 fb93 	bl	800710c <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f96a 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 80009f4:	f008 fb98 	bl	8009128 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f961 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a06:	f008 fbcd 	bl	80091a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f958 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a16:	f008 fb4e 	bl	80090b6 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f950 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2400002c 	.word	0x2400002c
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_DMA_Init+0x4c>)
 8000a48:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a4c:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <MX_DMA_Init+0x4c>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_DMA_Init+0x4c>)
 8000a58:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200b      	movs	r0, #11
 8000a6a:	f000 fc78 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a6e:	200b      	movs	r0, #11
 8000a70:	f000 fc8f 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	200c      	movs	r0, #12
 8000a7a:	f000 fc70 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a7e:	200c      	movs	r0, #12
 8000a80:	f000 fc87 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	58024400 	.word	0x58024400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b80      	ldr	r3, [pc, #512]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000aa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aac:	4a7e      	ldr	r2, [pc, #504]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab6:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac4:	4b78      	ldr	r3, [pc, #480]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aca:	4a77      	ldr	r2, [pc, #476]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad4:	4b74      	ldr	r3, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae8:	4a6f      	ldr	r2, [pc, #444]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af2:	4b6d      	ldr	r3, [pc, #436]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b69      	ldr	r3, [pc, #420]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b06:	4a68      	ldr	r2, [pc, #416]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b10:	4b65      	ldr	r3, [pc, #404]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	4b62      	ldr	r3, [pc, #392]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b24:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b42:	4a59      	ldr	r2, [pc, #356]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4c:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b60:	4a51      	ldr	r2, [pc, #324]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b78:	4b4b      	ldr	r3, [pc, #300]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7e:	4a4a      	ldr	r2, [pc, #296]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b88:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <MX_GPIO_Init+0x218>)
 8000b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	4843      	ldr	r0, [pc, #268]	; (8000cac <MX_GPIO_Init+0x21c>)
 8000b9e:	f003 fca3 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ba8:	4841      	ldr	r0, [pc, #260]	; (8000cb0 <MX_GPIO_Init+0x220>)
 8000baa:	f003 fc9d 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4840      	ldr	r0, [pc, #256]	; (8000cb4 <MX_GPIO_Init+0x224>)
 8000bb4:	f003 fc98 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	483a      	ldr	r0, [pc, #232]	; (8000cb8 <MX_GPIO_Init+0x228>)
 8000bce:	f003 fadb 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4830      	ldr	r0, [pc, #192]	; (8000cac <MX_GPIO_Init+0x21c>)
 8000bec:	f003 facc 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bf0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4829      	ldr	r0, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0x220>)
 8000c0a:	f003 fabd 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4826      	ldr	r0, [pc, #152]	; (8000cbc <MX_GPIO_Init+0x22c>)
 8000c24:	f003 fab0 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4820      	ldr	r0, [pc, #128]	; (8000cc0 <MX_GPIO_Init+0x230>)
 8000c3e:	f003 faa3 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c54:	230a      	movs	r3, #10
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0x230>)
 8000c60:	f003 fa92 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <MX_GPIO_Init+0x230>)
 8000c7e:	f003 fa83 	bl	8004188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c82:	2302      	movs	r3, #2
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x224>)
 8000c9a:	f003 fa75 	bl	8004188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	; 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58021400 	.word	0x58021400
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58021000 	.word	0x58021000
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	58020000 	.word	0x58020000

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_MspInit+0x30>)
 8000cd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cdc:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x30>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x30>)
 8000ce8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	58024400 	.word	0x58024400

08000d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ba      	sub	sp, #232	; 0xe8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	22c0      	movs	r2, #192	; 0xc0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f008 fb41 	bl	80093ac <memset>
  if(huart->Instance==USART3)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a59      	ldr	r2, [pc, #356]	; (8000e94 <HAL_UART_MspInit+0x190>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	f040 80aa 	bne.w	8000e8a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d36:	f04f 0202 	mov.w	r2, #2
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 fbfd 	bl	800554c <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000d58:	f7ff ffb4 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d62:	4a4d      	ldr	r2, [pc, #308]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d6c:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d80:	4a45      	ldr	r2, [pc, #276]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8a:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <HAL_UART_MspInit+0x194>)
 8000d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db2:	2307      	movs	r3, #7
 8000db4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4837      	ldr	r0, [pc, #220]	; (8000e9c <HAL_UART_MspInit+0x198>)
 8000dc0:	f003 f9e2 	bl	8004188 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dc6:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <HAL_UART_MspInit+0x1a0>)
 8000dc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000dca:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dcc:	222e      	movs	r2, #46	; 0x2e
 8000dce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dd2:	2240      	movs	r2, #64	; 0x40
 8000dd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd6:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ddc:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e02:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000e04:	f000 fae0 	bl	80013c8 <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000e0e:	f7ff ff59 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000e16:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_UART_MspInit+0x19c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e20:	4a22      	ldr	r2, [pc, #136]	; (8000eac <HAL_UART_MspInit+0x1a8>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e26:	222d      	movs	r2, #45	; 0x2d
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e5e:	f000 fab3 	bl	80013c8 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8000e68:	f7ff ff2c 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_UART_MspInit+0x1a4>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2027      	movs	r0, #39	; 0x27
 8000e80:	f000 fa6d 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e84:	2027      	movs	r0, #39	; 0x27
 8000e86:	f000 fa84 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	37e8      	adds	r7, #232	; 0xe8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40004800 	.word	0x40004800
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	58020c00 	.word	0x58020c00
 8000ea0:	240000c0 	.word	0x240000c0
 8000ea4:	40020010 	.word	0x40020010
 8000ea8:	24000138 	.word	0x24000138
 8000eac:	40020028 	.word	0x40020028

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f934 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA1_Stream0_IRQHandler+0x10>)
 8000f0a:	f001 fdbb 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240000c0 	.word	0x240000c0

08000f18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream1_IRQHandler+0x10>)
 8000f1e:	f001 fdb1 	bl	8002a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000138 	.word	0x24000138

08000f2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <USART3_IRQHandler+0x10>)
 8000f32:	f006 f9bb 	bl	80072ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2400002c 	.word	0x2400002c

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <SystemInit+0xd0>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <SystemInit+0xd0>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f54:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <SystemInit+0xd4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d807      	bhi.n	8000f70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <SystemInit+0xd4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 030f 	bic.w	r3, r3, #15
 8000f68:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <SystemInit+0xd4>)
 8000f6a:	f043 0303 	orr.w	r3, r3, #3
 8000f6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <SystemInit+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a28      	ldr	r2, [pc, #160]	; (8001018 <SystemInit+0xd8>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <SystemInit+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemInit+0xd8>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4924      	ldr	r1, [pc, #144]	; (8001018 <SystemInit+0xd8>)
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <SystemInit+0xdc>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <SystemInit+0xd4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <SystemInit+0xd4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 030f 	bic.w	r3, r3, #15
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <SystemInit+0xd4>)
 8000fa4:	f043 0303 	orr.w	r3, r3, #3
 8000fa8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <SystemInit+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <SystemInit+0xd8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <SystemInit+0xd8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <SystemInit+0xd8>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <SystemInit+0xe0>)
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <SystemInit+0xd8>)
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <SystemInit+0xe4>)
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <SystemInit+0xd8>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <SystemInit+0xe8>)
 8000fcc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SystemInit+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <SystemInit+0xd8>)
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <SystemInit+0xe8>)
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <SystemInit+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <SystemInit+0xd8>)
 8000fe2:	4a11      	ldr	r2, [pc, #68]	; (8001028 <SystemInit+0xe8>)
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <SystemInit+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <SystemInit+0xd8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a09      	ldr	r2, [pc, #36]	; (8001018 <SystemInit+0xd8>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <SystemInit+0xd8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <SystemInit+0xec>)
 8001000:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001004:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	52002000 	.word	0x52002000
 8001018:	58024400 	.word	0x58024400
 800101c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001020:	02020200 	.word	0x02020200
 8001024:	01ff0000 	.word	0x01ff0000
 8001028:	01010280 	.word	0x01010280
 800102c:	52004000 	.word	0x52004000

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff ff84 	bl	8000f40 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800105e:	f008 f981 	bl	8009364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fb87 	bl	8000774 <main>
  bx  lr
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800106c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001070:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001074:	08009424 	.word	0x08009424
  ldr r2, =_sbss
 8001078:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800107c:	240001e8 	.word	0x240001e8

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f95c 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001090:	f004 f886 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8001094:	4602      	mov	r2, r0
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <HAL_Init+0x6c>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_Init+0x6c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_Init+0x70>)
 80010c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c8:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_Init+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f814 	bl	80010fc <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e002      	b.n	80010e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fdf7 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400
 80010f0:	080093d4 	.word	0x080093d4
 80010f4:	24000004 	.word	0x24000004
 80010f8:	24000000 	.word	0x24000000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e021      	b.n	8001154 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_InitTick+0x64>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_InitTick+0x60>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f941 	bl	80013ae <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00e      	b.n	8001154 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d80a      	bhi.n	8001152 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f000 f90b 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <HAL_InitTick+0x68>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2400000c 	.word	0x2400000c
 8001160:	24000000 	.word	0x24000000
 8001164:	24000008 	.word	0x24000008

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x24>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4413      	add	r3, r2
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_IncTick+0x24>)
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2400000c 	.word	0x2400000c
 800118c:	240001e4 	.word	0x240001e4

08001190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_GetTick+0x14>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	240001e4 	.word	0x240001e4

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	05fa0000 	.word	0x05fa0000

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff40 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff33 	bl	800120c <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa4 	bl	8001304 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fede 	bl	8001190 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e37f      	b.n	8001ae0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a66      	ldr	r2, [pc, #408]	; (8001580 <HAL_DMA_Init+0x1b8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d04a      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a65      	ldr	r2, [pc, #404]	; (8001584 <HAL_DMA_Init+0x1bc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d045      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a63      	ldr	r2, [pc, #396]	; (8001588 <HAL_DMA_Init+0x1c0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d040      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a62      	ldr	r2, [pc, #392]	; (800158c <HAL_DMA_Init+0x1c4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d03b      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a60      	ldr	r2, [pc, #384]	; (8001590 <HAL_DMA_Init+0x1c8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d036      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5f      	ldr	r2, [pc, #380]	; (8001594 <HAL_DMA_Init+0x1cc>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d031      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a5d      	ldr	r2, [pc, #372]	; (8001598 <HAL_DMA_Init+0x1d0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02c      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a5c      	ldr	r2, [pc, #368]	; (800159c <HAL_DMA_Init+0x1d4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d027      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a5a      	ldr	r2, [pc, #360]	; (80015a0 <HAL_DMA_Init+0x1d8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d022      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a59      	ldr	r2, [pc, #356]	; (80015a4 <HAL_DMA_Init+0x1dc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d01d      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <HAL_DMA_Init+0x1e0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d018      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a56      	ldr	r2, [pc, #344]	; (80015ac <HAL_DMA_Init+0x1e4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d013      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_DMA_Init+0x1e8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00e      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <HAL_DMA_Init+0x1ec>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d009      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_DMA_Init+0x1f0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d004      	beq.n	8001480 <HAL_DMA_Init+0xb8>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_DMA_Init+0x1f4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_DMA_Init+0xbc>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_DMA_Init+0xbe>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 813c 	beq.w	8001704 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_DMA_Init+0x1b8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d04a      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a36      	ldr	r2, [pc, #216]	; (8001584 <HAL_DMA_Init+0x1bc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d045      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a34      	ldr	r2, [pc, #208]	; (8001588 <HAL_DMA_Init+0x1c0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d040      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_DMA_Init+0x1c4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d03b      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_DMA_Init+0x1c8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d036      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a30      	ldr	r2, [pc, #192]	; (8001594 <HAL_DMA_Init+0x1cc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d031      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <HAL_DMA_Init+0x1d0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d02c      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <HAL_DMA_Init+0x1d4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d027      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <HAL_DMA_Init+0x1d8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d022      	beq.n	800153c <HAL_DMA_Init+0x174>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_DMA_Init+0x1dc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d01d      	beq.n	800153c <HAL_DMA_Init+0x174>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <HAL_DMA_Init+0x1e0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d018      	beq.n	800153c <HAL_DMA_Init+0x174>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_DMA_Init+0x1e4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_DMA_Init+0x174>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a25      	ldr	r2, [pc, #148]	; (80015b0 <HAL_DMA_Init+0x1e8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00e      	beq.n	800153c <HAL_DMA_Init+0x174>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <HAL_DMA_Init+0x1ec>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d009      	beq.n	800153c <HAL_DMA_Init+0x174>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <HAL_DMA_Init+0x1f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d004      	beq.n	800153c <HAL_DMA_Init+0x174>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <HAL_DMA_Init+0x1f4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d108      	bne.n	800154e <HAL_DMA_Init+0x186>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e007      	b.n	800155e <HAL_DMA_Init+0x196>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0201 	bic.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800155e:	e02f      	b.n	80015c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001560:	f7ff fe16 	bl	8001190 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b05      	cmp	r3, #5
 800156c:	d928      	bls.n	80015c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e2af      	b.n	8001ae0 <HAL_DMA_Init+0x718>
 8001580:	40020010 	.word	0x40020010
 8001584:	40020028 	.word	0x40020028
 8001588:	40020040 	.word	0x40020040
 800158c:	40020058 	.word	0x40020058
 8001590:	40020070 	.word	0x40020070
 8001594:	40020088 	.word	0x40020088
 8001598:	400200a0 	.word	0x400200a0
 800159c:	400200b8 	.word	0x400200b8
 80015a0:	40020410 	.word	0x40020410
 80015a4:	40020428 	.word	0x40020428
 80015a8:	40020440 	.word	0x40020440
 80015ac:	40020458 	.word	0x40020458
 80015b0:	40020470 	.word	0x40020470
 80015b4:	40020488 	.word	0x40020488
 80015b8:	400204a0 	.word	0x400204a0
 80015bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1c8      	bne.n	8001560 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <HAL_DMA_Init+0x3e0>)
 80015da:	4013      	ands	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2b04      	cmp	r3, #4
 8001612:	d107      	bne.n	8001624 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4313      	orrs	r3, r2
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b28      	cmp	r3, #40	; 0x28
 800162a:	d903      	bls.n	8001634 <HAL_DMA_Init+0x26c>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b2e      	cmp	r3, #46	; 0x2e
 8001632:	d91f      	bls.n	8001674 <HAL_DMA_Init+0x2ac>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b3e      	cmp	r3, #62	; 0x3e
 800163a:	d903      	bls.n	8001644 <HAL_DMA_Init+0x27c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b42      	cmp	r3, #66	; 0x42
 8001642:	d917      	bls.n	8001674 <HAL_DMA_Init+0x2ac>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b46      	cmp	r3, #70	; 0x46
 800164a:	d903      	bls.n	8001654 <HAL_DMA_Init+0x28c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b48      	cmp	r3, #72	; 0x48
 8001652:	d90f      	bls.n	8001674 <HAL_DMA_Init+0x2ac>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b4e      	cmp	r3, #78	; 0x4e
 800165a:	d903      	bls.n	8001664 <HAL_DMA_Init+0x29c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b52      	cmp	r3, #82	; 0x52
 8001662:	d907      	bls.n	8001674 <HAL_DMA_Init+0x2ac>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b73      	cmp	r3, #115	; 0x73
 800166a:	d905      	bls.n	8001678 <HAL_DMA_Init+0x2b0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b77      	cmp	r3, #119	; 0x77
 8001672:	d801      	bhi.n	8001678 <HAL_DMA_Init+0x2b0>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_DMA_Init+0x2b2>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001684:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f023 0307 	bic.w	r3, r3, #7
 800169c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d117      	bne.n	80016e0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00e      	beq.n	80016e0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f002 fbd6 	bl	8003e74 <DMA_CheckFifoParam>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e1ff      	b.n	8001ae0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f002 fb11 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 80016ee:	4603      	mov	r3, r0
 80016f0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	223f      	movs	r2, #63	; 0x3f
 80016fc:	409a      	lsls	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	e0fe      	b.n	8001902 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <HAL_DMA_Init+0x3e4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d04a      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_DMA_Init+0x3e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d045      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_DMA_Init+0x3ec>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d040      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a24      	ldr	r2, [pc, #144]	; (80017b8 <HAL_DMA_Init+0x3f0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d03b      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_DMA_Init+0x3f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d036      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <HAL_DMA_Init+0x3f8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d031      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_DMA_Init+0x3fc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d02c      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_DMA_Init+0x400>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d027      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <HAL_DMA_Init+0x404>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d022      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_DMA_Init+0x408>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d01d      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_DMA_Init+0x40c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d018      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <HAL_DMA_Init+0x410>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d013      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_DMA_Init+0x414>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00e      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_DMA_Init+0x418>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d009      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <HAL_DMA_Init+0x41c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d004      	beq.n	80017a4 <HAL_DMA_Init+0x3dc>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_DMA_Init+0x420>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d123      	bne.n	80017ec <HAL_DMA_Init+0x424>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e022      	b.n	80017ee <HAL_DMA_Init+0x426>
 80017a8:	fe10803f 	.word	0xfe10803f
 80017ac:	48022c08 	.word	0x48022c08
 80017b0:	48022c1c 	.word	0x48022c1c
 80017b4:	48022c30 	.word	0x48022c30
 80017b8:	48022c44 	.word	0x48022c44
 80017bc:	48022c58 	.word	0x48022c58
 80017c0:	48022c6c 	.word	0x48022c6c
 80017c4:	48022c80 	.word	0x48022c80
 80017c8:	48022c94 	.word	0x48022c94
 80017cc:	58025408 	.word	0x58025408
 80017d0:	5802541c 	.word	0x5802541c
 80017d4:	58025430 	.word	0x58025430
 80017d8:	58025444 	.word	0x58025444
 80017dc:	58025458 	.word	0x58025458
 80017e0:	5802546c 	.word	0x5802546c
 80017e4:	58025480 	.word	0x58025480
 80017e8:	58025494 	.word	0x58025494
 80017ec:	2300      	movs	r3, #0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d07e      	beq.n	80018f0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a80      	ldr	r2, [pc, #512]	; (80019f8 <HAL_DMA_Init+0x630>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d021      	beq.n	8001840 <HAL_DMA_Init+0x478>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_DMA_Init+0x634>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01c      	beq.n	8001840 <HAL_DMA_Init+0x478>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7d      	ldr	r2, [pc, #500]	; (8001a00 <HAL_DMA_Init+0x638>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d017      	beq.n	8001840 <HAL_DMA_Init+0x478>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <HAL_DMA_Init+0x63c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d012      	beq.n	8001840 <HAL_DMA_Init+0x478>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a7a      	ldr	r2, [pc, #488]	; (8001a08 <HAL_DMA_Init+0x640>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00d      	beq.n	8001840 <HAL_DMA_Init+0x478>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a78      	ldr	r2, [pc, #480]	; (8001a0c <HAL_DMA_Init+0x644>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Init+0x478>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_DMA_Init+0x648>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Init+0x478>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a75      	ldr	r2, [pc, #468]	; (8001a14 <HAL_DMA_Init+0x64c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <HAL_DMA_Init+0x650>)
 800185e:	4013      	ands	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d008      	beq.n	800187c <HAL_DMA_Init+0x4b4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b80      	cmp	r3, #128	; 0x80
 8001870:	d102      	bne.n	8001878 <HAL_DMA_Init+0x4b0>
 8001872:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001876:	e002      	b.n	800187e <HAL_DMA_Init+0x4b6>
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_DMA_Init+0x4b6>
 800187c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800188c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800189c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <HAL_DMA_Init+0x654>)
 80018c4:	4413      	add	r3, r2
 80018c6:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_DMA_Init+0x658>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	009a      	lsls	r2, r3, #2
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f002 fa1b 	bl	8003d10 <DMA_CalcBaseAndBitshift>
 80018da:	4603      	mov	r3, r0
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	f003 031f 	and.w	r3, r3, #31
 80018e6:	2201      	movs	r2, #1
 80018e8:	409a      	lsls	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e008      	b.n	8001902 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0ee      	b.n	8001ae0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_DMA_Init+0x65c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d072      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_DMA_Init+0x660>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d06d      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <HAL_DMA_Init+0x664>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d068      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a42      	ldr	r2, [pc, #264]	; (8001a30 <HAL_DMA_Init+0x668>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d063      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a41      	ldr	r2, [pc, #260]	; (8001a34 <HAL_DMA_Init+0x66c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d05e      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <HAL_DMA_Init+0x670>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d059      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <HAL_DMA_Init+0x674>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d054      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3c      	ldr	r2, [pc, #240]	; (8001a40 <HAL_DMA_Init+0x678>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d04f      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a3b      	ldr	r2, [pc, #236]	; (8001a44 <HAL_DMA_Init+0x67c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04a      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <HAL_DMA_Init+0x680>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d045      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_DMA_Init+0x684>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d040      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <HAL_DMA_Init+0x688>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d03b      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <HAL_DMA_Init+0x68c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d036      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_DMA_Init+0x690>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d031      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <HAL_DMA_Init+0x694>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d02c      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a30      	ldr	r2, [pc, #192]	; (8001a60 <HAL_DMA_Init+0x698>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d027      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_DMA_Init+0x630>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d022      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_DMA_Init+0x634>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01d      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_DMA_Init+0x638>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d018      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_DMA_Init+0x63c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_DMA_Init+0x640>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00e      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_DMA_Init+0x644>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d009      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_DMA_Init+0x648>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d004      	beq.n	80019f2 <HAL_DMA_Init+0x62a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_DMA_Init+0x64c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d138      	bne.n	8001a64 <HAL_DMA_Init+0x69c>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e037      	b.n	8001a66 <HAL_DMA_Init+0x69e>
 80019f6:	bf00      	nop
 80019f8:	58025408 	.word	0x58025408
 80019fc:	5802541c 	.word	0x5802541c
 8001a00:	58025430 	.word	0x58025430
 8001a04:	58025444 	.word	0x58025444
 8001a08:	58025458 	.word	0x58025458
 8001a0c:	5802546c 	.word	0x5802546c
 8001a10:	58025480 	.word	0x58025480
 8001a14:	58025494 	.word	0x58025494
 8001a18:	fffe000f 	.word	0xfffe000f
 8001a1c:	a7fdabf8 	.word	0xa7fdabf8
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8
 8001a64:	2300      	movs	r3, #0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d032      	beq.n	8001ad0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f002 fa7e 	bl	8003f6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d102      	bne.n	8001a7e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a92:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_DMA_Init+0x6f6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d80c      	bhi.n	8001abe <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f002 fafb 	bl	80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	e008      	b.n	8001ad0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e226      	b.n	8001f52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Start_IT+0x2a>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e21f      	b.n	8001f52 <HAL_DMA_Start_IT+0x46a>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 820a 	bne.w	8001f3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a68      	ldr	r2, [pc, #416]	; (8001cdc <HAL_DMA_Start_IT+0x1f4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d04a      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_DMA_Start_IT+0x1f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d045      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_DMA_Start_IT+0x1fc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d040      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_DMA_Start_IT+0x200>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d03b      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a62      	ldr	r2, [pc, #392]	; (8001cec <HAL_DMA_Start_IT+0x204>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d036      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_DMA_Start_IT+0x208>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d031      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <HAL_DMA_Start_IT+0x20c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d02c      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_DMA_Start_IT+0x210>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d027      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <HAL_DMA_Start_IT+0x214>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_DMA_Start_IT+0x218>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01d      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a59      	ldr	r2, [pc, #356]	; (8001d04 <HAL_DMA_Start_IT+0x21c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d018      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_DMA_Start_IT+0x220>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_DMA_Start_IT+0x224>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00e      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a54      	ldr	r2, [pc, #336]	; (8001d10 <HAL_DMA_Start_IT+0x228>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <HAL_DMA_Start_IT+0x22c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_Start_IT+0xee>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a51      	ldr	r2, [pc, #324]	; (8001d18 <HAL_DMA_Start_IT+0x230>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <HAL_DMA_Start_IT+0x100>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_DMA_Start_IT+0x110>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f001 fea2 	bl	8003948 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <HAL_DMA_Start_IT+0x1f4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d04a      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <HAL_DMA_Start_IT+0x1f8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d045      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_DMA_Start_IT+0x1fc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d040      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a30      	ldr	r2, [pc, #192]	; (8001ce8 <HAL_DMA_Start_IT+0x200>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d03b      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_DMA_Start_IT+0x204>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d036      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <HAL_DMA_Start_IT+0x208>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d031      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_DMA_Start_IT+0x20c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02c      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <HAL_DMA_Start_IT+0x210>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d027      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_DMA_Start_IT+0x214>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d022      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_DMA_Start_IT+0x218>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d01d      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_DMA_Start_IT+0x21c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d018      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_DMA_Start_IT+0x220>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d013      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_Start_IT+0x224>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00e      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_DMA_Start_IT+0x228>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d009      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Start_IT+0x22c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x1bc>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_DMA_Start_IT+0x230>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Start_IT+0x1c0>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_Start_IT+0x1c2>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d036      	beq.n	8001d1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 021e 	bic.w	r2, r3, #30
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0216 	orr.w	r2, r2, #22
 8001cc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03e      	beq.n	8001d48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0208 	orr.w	r2, r2, #8
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e035      	b.n	8001d48 <HAL_DMA_Start_IT+0x260>
 8001cdc:	40020010 	.word	0x40020010
 8001ce0:	40020028 	.word	0x40020028
 8001ce4:	40020040 	.word	0x40020040
 8001ce8:	40020058 	.word	0x40020058
 8001cec:	40020070 	.word	0x40020070
 8001cf0:	40020088 	.word	0x40020088
 8001cf4:	400200a0 	.word	0x400200a0
 8001cf8:	400200b8 	.word	0x400200b8
 8001cfc:	40020410 	.word	0x40020410
 8001d00:	40020428 	.word	0x40020428
 8001d04:	40020440 	.word	0x40020440
 8001d08:	40020458 	.word	0x40020458
 8001d0c:	40020470 	.word	0x40020470
 8001d10:	40020488 	.word	0x40020488
 8001d14:	400204a0 	.word	0x400204a0
 8001d18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 020e 	bic.w	r2, r3, #14
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 020a 	orr.w	r2, r2, #10
 8001d2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0204 	orr.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a83      	ldr	r2, [pc, #524]	; (8001f5c <HAL_DMA_Start_IT+0x474>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d072      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a82      	ldr	r2, [pc, #520]	; (8001f60 <HAL_DMA_Start_IT+0x478>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d06d      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_DMA_Start_IT+0x47c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d068      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7f      	ldr	r2, [pc, #508]	; (8001f68 <HAL_DMA_Start_IT+0x480>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d063      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a7d      	ldr	r2, [pc, #500]	; (8001f6c <HAL_DMA_Start_IT+0x484>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d05e      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7c      	ldr	r2, [pc, #496]	; (8001f70 <HAL_DMA_Start_IT+0x488>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d059      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a7a      	ldr	r2, [pc, #488]	; (8001f74 <HAL_DMA_Start_IT+0x48c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d054      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <HAL_DMA_Start_IT+0x490>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04f      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a77      	ldr	r2, [pc, #476]	; (8001f7c <HAL_DMA_Start_IT+0x494>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d04a      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a76      	ldr	r2, [pc, #472]	; (8001f80 <HAL_DMA_Start_IT+0x498>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d045      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a74      	ldr	r2, [pc, #464]	; (8001f84 <HAL_DMA_Start_IT+0x49c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d040      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a73      	ldr	r2, [pc, #460]	; (8001f88 <HAL_DMA_Start_IT+0x4a0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d03b      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_DMA_Start_IT+0x4a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d036      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a70      	ldr	r2, [pc, #448]	; (8001f90 <HAL_DMA_Start_IT+0x4a8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d031      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_DMA_Start_IT+0x4ac>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d02c      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a6d      	ldr	r2, [pc, #436]	; (8001f98 <HAL_DMA_Start_IT+0x4b0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d027      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <HAL_DMA_Start_IT+0x4b4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d022      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_DMA_Start_IT+0x4b8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d01d      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_DMA_Start_IT+0x4bc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d018      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a67      	ldr	r2, [pc, #412]	; (8001fa8 <HAL_DMA_Start_IT+0x4c0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_DMA_Start_IT+0x4c4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00e      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a64      	ldr	r2, [pc, #400]	; (8001fb0 <HAL_DMA_Start_IT+0x4c8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a62      	ldr	r2, [pc, #392]	; (8001fb4 <HAL_DMA_Start_IT+0x4cc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_Start_IT+0x350>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a61      	ldr	r2, [pc, #388]	; (8001fb8 <HAL_DMA_Start_IT+0x4d0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA_Start_IT+0x354>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_DMA_Start_IT+0x356>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a37      	ldr	r2, [pc, #220]	; (8001f5c <HAL_DMA_Start_IT+0x474>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04a      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <HAL_DMA_Start_IT+0x478>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d045      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a34      	ldr	r2, [pc, #208]	; (8001f64 <HAL_DMA_Start_IT+0x47c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d040      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <HAL_DMA_Start_IT+0x480>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d03b      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a31      	ldr	r2, [pc, #196]	; (8001f6c <HAL_DMA_Start_IT+0x484>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d036      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a30      	ldr	r2, [pc, #192]	; (8001f70 <HAL_DMA_Start_IT+0x488>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d031      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_DMA_Start_IT+0x48c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02c      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2d      	ldr	r2, [pc, #180]	; (8001f78 <HAL_DMA_Start_IT+0x490>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d027      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <HAL_DMA_Start_IT+0x494>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_DMA_Start_IT+0x498>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01d      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <HAL_DMA_Start_IT+0x49c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_DMA_Start_IT+0x4a0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <HAL_DMA_Start_IT+0x4a4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00e      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_DMA_Start_IT+0x4a8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <HAL_DMA_Start_IT+0x4ac>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_DMA_Start_IT+0x430>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <HAL_DMA_Start_IT+0x4b0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <HAL_DMA_Start_IT+0x442>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e012      	b.n	8001f50 <HAL_DMA_Start_IT+0x468>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e009      	b.n	8001f50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40020010 	.word	0x40020010
 8001f60:	40020028 	.word	0x40020028
 8001f64:	40020040 	.word	0x40020040
 8001f68:	40020058 	.word	0x40020058
 8001f6c:	40020070 	.word	0x40020070
 8001f70:	40020088 	.word	0x40020088
 8001f74:	400200a0 	.word	0x400200a0
 8001f78:	400200b8 	.word	0x400200b8
 8001f7c:	40020410 	.word	0x40020410
 8001f80:	40020428 	.word	0x40020428
 8001f84:	40020440 	.word	0x40020440
 8001f88:	40020458 	.word	0x40020458
 8001f8c:	40020470 	.word	0x40020470
 8001f90:	40020488 	.word	0x40020488
 8001f94:	400204a0 	.word	0x400204a0
 8001f98:	400204b8 	.word	0x400204b8
 8001f9c:	58025408 	.word	0x58025408
 8001fa0:	5802541c 	.word	0x5802541c
 8001fa4:	58025430 	.word	0x58025430
 8001fa8:	58025444 	.word	0x58025444
 8001fac:	58025458 	.word	0x58025458
 8001fb0:	5802546c 	.word	0x5802546c
 8001fb4:	58025480 	.word	0x58025480
 8001fb8:	58025494 	.word	0x58025494

08001fbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff f8e4 	bl	8001190 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e2dc      	b.n	800258e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d008      	beq.n	8001ff2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e2cd      	b.n	800258e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a76      	ldr	r2, [pc, #472]	; (80021d0 <HAL_DMA_Abort+0x214>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d04a      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a74      	ldr	r2, [pc, #464]	; (80021d4 <HAL_DMA_Abort+0x218>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d045      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <HAL_DMA_Abort+0x21c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d040      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a71      	ldr	r2, [pc, #452]	; (80021dc <HAL_DMA_Abort+0x220>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d03b      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_DMA_Abort+0x224>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d036      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6e      	ldr	r2, [pc, #440]	; (80021e4 <HAL_DMA_Abort+0x228>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <HAL_DMA_Abort+0x22c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d02c      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <HAL_DMA_Abort+0x230>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d027      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_DMA_Abort+0x234>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <HAL_DMA_Abort+0x238>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01d      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a67      	ldr	r2, [pc, #412]	; (80021f8 <HAL_DMA_Abort+0x23c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d018      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_DMA_Abort+0x240>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a64      	ldr	r2, [pc, #400]	; (8002200 <HAL_DMA_Abort+0x244>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a62      	ldr	r2, [pc, #392]	; (8002204 <HAL_DMA_Abort+0x248>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a61      	ldr	r2, [pc, #388]	; (8002208 <HAL_DMA_Abort+0x24c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_DMA_Abort+0xd6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a5f      	ldr	r2, [pc, #380]	; (800220c <HAL_DMA_Abort+0x250>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_DMA_Abort+0xda>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_DMA_Abort+0xdc>
 8002096:	2300      	movs	r3, #0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 021e 	bic.w	r2, r2, #30
 80020aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e00a      	b.n	80020da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 020e 	bic.w	r2, r2, #14
 80020d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_DMA_Abort+0x214>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d072      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <HAL_DMA_Abort+0x218>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d06d      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a39      	ldr	r2, [pc, #228]	; (80021d8 <HAL_DMA_Abort+0x21c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d068      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a37      	ldr	r2, [pc, #220]	; (80021dc <HAL_DMA_Abort+0x220>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d063      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a36      	ldr	r2, [pc, #216]	; (80021e0 <HAL_DMA_Abort+0x224>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d05e      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_DMA_Abort+0x228>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d059      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <HAL_DMA_Abort+0x22c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d054      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_DMA_Abort+0x230>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04f      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <HAL_DMA_Abort+0x234>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d04a      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_DMA_Abort+0x238>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d045      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <HAL_DMA_Abort+0x23c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d040      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HAL_DMA_Abort+0x240>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d03b      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_DMA_Abort+0x244>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d036      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_DMA_Abort+0x248>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d031      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_DMA_Abort+0x24c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d02c      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_DMA_Abort+0x250>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d027      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_DMA_Abort+0x254>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d022      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_DMA_Abort+0x258>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01d      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <HAL_DMA_Abort+0x25c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d018      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1f      	ldr	r2, [pc, #124]	; (800221c <HAL_DMA_Abort+0x260>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <HAL_DMA_Abort+0x264>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00e      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_DMA_Abort+0x268>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_DMA_Abort+0x26c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d004      	beq.n	80021ca <HAL_DMA_Abort+0x20e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_DMA_Abort+0x270>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d132      	bne.n	8002230 <HAL_DMA_Abort+0x274>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e031      	b.n	8002232 <HAL_DMA_Abort+0x276>
 80021ce:	bf00      	nop
 80021d0:	40020010 	.word	0x40020010
 80021d4:	40020028 	.word	0x40020028
 80021d8:	40020040 	.word	0x40020040
 80021dc:	40020058 	.word	0x40020058
 80021e0:	40020070 	.word	0x40020070
 80021e4:	40020088 	.word	0x40020088
 80021e8:	400200a0 	.word	0x400200a0
 80021ec:	400200b8 	.word	0x400200b8
 80021f0:	40020410 	.word	0x40020410
 80021f4:	40020428 	.word	0x40020428
 80021f8:	40020440 	.word	0x40020440
 80021fc:	40020458 	.word	0x40020458
 8002200:	40020470 	.word	0x40020470
 8002204:	40020488 	.word	0x40020488
 8002208:	400204a0 	.word	0x400204a0
 800220c:	400204b8 	.word	0x400204b8
 8002210:	58025408 	.word	0x58025408
 8002214:	5802541c 	.word	0x5802541c
 8002218:	58025430 	.word	0x58025430
 800221c:	58025444 	.word	0x58025444
 8002220:	58025458 	.word	0x58025458
 8002224:	5802546c 	.word	0x5802546c
 8002228:	58025480 	.word	0x58025480
 800222c:	58025494 	.word	0x58025494
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002244:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6d      	ldr	r2, [pc, #436]	; (8002400 <HAL_DMA_Abort+0x444>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d04a      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6b      	ldr	r2, [pc, #428]	; (8002404 <HAL_DMA_Abort+0x448>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d045      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_DMA_Abort+0x44c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d040      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a68      	ldr	r2, [pc, #416]	; (800240c <HAL_DMA_Abort+0x450>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d03b      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a67      	ldr	r2, [pc, #412]	; (8002410 <HAL_DMA_Abort+0x454>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d036      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a65      	ldr	r2, [pc, #404]	; (8002414 <HAL_DMA_Abort+0x458>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d031      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a64      	ldr	r2, [pc, #400]	; (8002418 <HAL_DMA_Abort+0x45c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d02c      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a62      	ldr	r2, [pc, #392]	; (800241c <HAL_DMA_Abort+0x460>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d027      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a61      	ldr	r2, [pc, #388]	; (8002420 <HAL_DMA_Abort+0x464>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a5f      	ldr	r2, [pc, #380]	; (8002424 <HAL_DMA_Abort+0x468>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01d      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_DMA_Abort+0x46c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5c      	ldr	r2, [pc, #368]	; (800242c <HAL_DMA_Abort+0x470>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5b      	ldr	r2, [pc, #364]	; (8002430 <HAL_DMA_Abort+0x474>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00e      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a59      	ldr	r2, [pc, #356]	; (8002434 <HAL_DMA_Abort+0x478>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d009      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_DMA_Abort+0x47c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d004      	beq.n	80022e6 <HAL_DMA_Abort+0x32a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a56      	ldr	r2, [pc, #344]	; (800243c <HAL_DMA_Abort+0x480>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d108      	bne.n	80022f8 <HAL_DMA_Abort+0x33c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e007      	b.n	8002308 <HAL_DMA_Abort+0x34c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002308:	e013      	b.n	8002332 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230a:	f7fe ff41 	bl	8001190 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b05      	cmp	r3, #5
 8002316:	d90c      	bls.n	8002332 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12d      	b.n	800258e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e5      	bne.n	800230a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_DMA_Abort+0x444>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d04a      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a2d      	ldr	r2, [pc, #180]	; (8002404 <HAL_DMA_Abort+0x448>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d045      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2c      	ldr	r2, [pc, #176]	; (8002408 <HAL_DMA_Abort+0x44c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d040      	beq.n	80023de <HAL_DMA_Abort+0x422>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a2a      	ldr	r2, [pc, #168]	; (800240c <HAL_DMA_Abort+0x450>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d03b      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_DMA_Abort+0x454>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d036      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_DMA_Abort+0x458>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d031      	beq.n	80023de <HAL_DMA_Abort+0x422>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <HAL_DMA_Abort+0x45c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d02c      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <HAL_DMA_Abort+0x460>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d027      	beq.n	80023de <HAL_DMA_Abort+0x422>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_DMA_Abort+0x464>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <HAL_DMA_Abort+0x422>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <HAL_DMA_Abort+0x468>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <HAL_DMA_Abort+0x46c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d018      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1e      	ldr	r2, [pc, #120]	; (800242c <HAL_DMA_Abort+0x470>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_DMA_Abort+0x474>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00e      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_DMA_Abort+0x478>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <HAL_DMA_Abort+0x47c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d004      	beq.n	80023de <HAL_DMA_Abort+0x422>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_DMA_Abort+0x480>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_DMA_Abort+0x426>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_Abort+0x428>
 80023e2:	2300      	movs	r3, #0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02b      	beq.n	8002440 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	223f      	movs	r2, #63	; 0x3f
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	e02a      	b.n	8002456 <HAL_DMA_Abort+0x49a>
 8002400:	40020010 	.word	0x40020010
 8002404:	40020028 	.word	0x40020028
 8002408:	40020040 	.word	0x40020040
 800240c:	40020058 	.word	0x40020058
 8002410:	40020070 	.word	0x40020070
 8002414:	40020088 	.word	0x40020088
 8002418:	400200a0 	.word	0x400200a0
 800241c:	400200b8 	.word	0x400200b8
 8002420:	40020410 	.word	0x40020410
 8002424:	40020428 	.word	0x40020428
 8002428:	40020440 	.word	0x40020440
 800242c:	40020458 	.word	0x40020458
 8002430:	40020470 	.word	0x40020470
 8002434:	40020488 	.word	0x40020488
 8002438:	400204a0 	.word	0x400204a0
 800243c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2201      	movs	r2, #1
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4f      	ldr	r2, [pc, #316]	; (8002598 <HAL_DMA_Abort+0x5dc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d072      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_DMA_Abort+0x5e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d06d      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_DMA_Abort+0x5e4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d068      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_DMA_Abort+0x5e8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d063      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_DMA_Abort+0x5ec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d05e      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a47      	ldr	r2, [pc, #284]	; (80025ac <HAL_DMA_Abort+0x5f0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d059      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a46      	ldr	r2, [pc, #280]	; (80025b0 <HAL_DMA_Abort+0x5f4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d054      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_DMA_Abort+0x5f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d04f      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_DMA_Abort+0x5fc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04a      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a41      	ldr	r2, [pc, #260]	; (80025bc <HAL_DMA_Abort+0x600>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d045      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_DMA_Abort+0x604>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d040      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_DMA_Abort+0x608>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d03b      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3d      	ldr	r2, [pc, #244]	; (80025c8 <HAL_DMA_Abort+0x60c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d036      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_DMA_Abort+0x610>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d031      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <HAL_DMA_Abort+0x614>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d02c      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a38      	ldr	r2, [pc, #224]	; (80025d4 <HAL_DMA_Abort+0x618>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d027      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_DMA_Abort+0x61c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a35      	ldr	r2, [pc, #212]	; (80025dc <HAL_DMA_Abort+0x620>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a34      	ldr	r2, [pc, #208]	; (80025e0 <HAL_DMA_Abort+0x624>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a32      	ldr	r2, [pc, #200]	; (80025e4 <HAL_DMA_Abort+0x628>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_DMA_Abort+0x62c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_DMA_Abort+0x630>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2e      	ldr	r2, [pc, #184]	; (80025f0 <HAL_DMA_Abort+0x634>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_DMA_Abort+0x58a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2c      	ldr	r2, [pc, #176]	; (80025f4 <HAL_DMA_Abort+0x638>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_DMA_Abort+0x58e>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_DMA_Abort+0x590>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002558:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002570:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800257a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
 80025d8:	58025408 	.word	0x58025408
 80025dc:	5802541c 	.word	0x5802541c
 80025e0:	58025430 	.word	0x58025430
 80025e4:	58025444 	.word	0x58025444
 80025e8:	58025458 	.word	0x58025458
 80025ec:	5802546c 	.word	0x5802546c
 80025f0:	58025480 	.word	0x58025480
 80025f4:	58025494 	.word	0x58025494

080025f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e237      	b.n	8002a7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e22c      	b.n	8002a7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_DMA_Abort_IT+0x1a0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d04a      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5b      	ldr	r2, [pc, #364]	; (800279c <HAL_DMA_Abort_IT+0x1a4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d045      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a59      	ldr	r2, [pc, #356]	; (80027a0 <HAL_DMA_Abort_IT+0x1a8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d040      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_DMA_Abort_IT+0x1ac>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d03b      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_DMA_Abort_IT+0x1b0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d036      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a55      	ldr	r2, [pc, #340]	; (80027ac <HAL_DMA_Abort_IT+0x1b4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d031      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02c      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_DMA_Abort_IT+0x1bc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d027      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a50      	ldr	r2, [pc, #320]	; (80027b8 <HAL_DMA_Abort_IT+0x1c0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d022      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a4f      	ldr	r2, [pc, #316]	; (80027bc <HAL_DMA_Abort_IT+0x1c4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01d      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a4d      	ldr	r2, [pc, #308]	; (80027c0 <HAL_DMA_Abort_IT+0x1c8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a4c      	ldr	r2, [pc, #304]	; (80027c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <HAL_DMA_Abort_IT+0x1d0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a49      	ldr	r2, [pc, #292]	; (80027cc <HAL_DMA_Abort_IT+0x1d4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_DMA_Abort_IT+0x1d8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_Abort_IT+0xc8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a46      	ldr	r2, [pc, #280]	; (80027d4 <HAL_DMA_Abort_IT+0x1dc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_DMA_Abort_IT+0xcc>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_DMA_Abort_IT+0xce>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8086 	beq.w	80027d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <HAL_DMA_Abort_IT+0x1a0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2e      	ldr	r2, [pc, #184]	; (800279c <HAL_DMA_Abort_IT+0x1a4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d045      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <HAL_DMA_Abort_IT+0x1a8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d040      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2b      	ldr	r2, [pc, #172]	; (80027a4 <HAL_DMA_Abort_IT+0x1ac>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d03b      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <HAL_DMA_Abort_IT+0x1b0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d036      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <HAL_DMA_Abort_IT+0x1b4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d031      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a26      	ldr	r2, [pc, #152]	; (80027b0 <HAL_DMA_Abort_IT+0x1b8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d02c      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <HAL_DMA_Abort_IT+0x1bc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d027      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_DMA_Abort_IT+0x1c0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d022      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a22      	ldr	r2, [pc, #136]	; (80027bc <HAL_DMA_Abort_IT+0x1c4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d01d      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a20      	ldr	r2, [pc, #128]	; (80027c0 <HAL_DMA_Abort_IT+0x1c8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d018      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_DMA_Abort_IT+0x1cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_DMA_Abort_IT+0x1d0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_DMA_Abort_IT+0x1d4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_DMA_Abort_IT+0x1d8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x17c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_DMA_Abort_IT+0x1dc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <HAL_DMA_Abort_IT+0x18e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e178      	b.n	8002a78 <HAL_DMA_Abort_IT+0x480>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e16f      	b.n	8002a78 <HAL_DMA_Abort_IT+0x480>
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020e 	bic.w	r2, r2, #14
 80027e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a6c      	ldr	r2, [pc, #432]	; (80029a0 <HAL_DMA_Abort_IT+0x3a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d04a      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <HAL_DMA_Abort_IT+0x3ac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d045      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a69      	ldr	r2, [pc, #420]	; (80029a8 <HAL_DMA_Abort_IT+0x3b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d040      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a68      	ldr	r2, [pc, #416]	; (80029ac <HAL_DMA_Abort_IT+0x3b4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d03b      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_DMA_Abort_IT+0x3b8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d036      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_DMA_Abort_IT+0x3bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d031      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a63      	ldr	r2, [pc, #396]	; (80029b8 <HAL_DMA_Abort_IT+0x3c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02c      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a62      	ldr	r2, [pc, #392]	; (80029bc <HAL_DMA_Abort_IT+0x3c4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d027      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a60      	ldr	r2, [pc, #384]	; (80029c0 <HAL_DMA_Abort_IT+0x3c8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d022      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5f      	ldr	r2, [pc, #380]	; (80029c4 <HAL_DMA_Abort_IT+0x3cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d01d      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5d      	ldr	r2, [pc, #372]	; (80029c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d018      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <HAL_DMA_Abort_IT+0x3d4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d013      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00e      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a59      	ldr	r2, [pc, #356]	; (80029d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_DMA_Abort_IT+0x3e0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Abort_IT+0x290>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_DMA_Abort_IT+0x3e4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d108      	bne.n	800289a <HAL_DMA_Abort_IT+0x2a2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e007      	b.n	80028aa <HAL_DMA_Abort_IT+0x2b2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <HAL_DMA_Abort_IT+0x3a8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d072      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_DMA_Abort_IT+0x3ac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d06d      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a39      	ldr	r2, [pc, #228]	; (80029a8 <HAL_DMA_Abort_IT+0x3b0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d068      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a37      	ldr	r2, [pc, #220]	; (80029ac <HAL_DMA_Abort_IT+0x3b4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d063      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_DMA_Abort_IT+0x3b8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d05e      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <HAL_DMA_Abort_IT+0x3bc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d059      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <HAL_DMA_Abort_IT+0x3c0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d054      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a31      	ldr	r2, [pc, #196]	; (80029bc <HAL_DMA_Abort_IT+0x3c4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d04f      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <HAL_DMA_Abort_IT+0x3c8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d04a      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2e      	ldr	r2, [pc, #184]	; (80029c4 <HAL_DMA_Abort_IT+0x3cc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d045      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_DMA_Abort_IT+0x3d0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d040      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <HAL_DMA_Abort_IT+0x3d4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d03b      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_DMA_Abort_IT+0x3d8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d036      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <HAL_DMA_Abort_IT+0x3dc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <HAL_DMA_Abort_IT+0x3e0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d02c      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_DMA_Abort_IT+0x3e4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d027      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_DMA_Abort_IT+0x3e8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d022      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_DMA_Abort_IT+0x3ec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01d      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <HAL_DMA_Abort_IT+0x3f0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d018      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_DMA_Abort_IT+0x3f4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <HAL_DMA_Abort_IT+0x3f8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d00e      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_DMA_Abort_IT+0x3fc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d009      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <HAL_DMA_Abort_IT+0x400>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d004      	beq.n	800299a <HAL_DMA_Abort_IT+0x3a2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_DMA_Abort_IT+0x404>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d132      	bne.n	8002a00 <HAL_DMA_Abort_IT+0x408>
 800299a:	2301      	movs	r3, #1
 800299c:	e031      	b.n	8002a02 <HAL_DMA_Abort_IT+0x40a>
 800299e:	bf00      	nop
 80029a0:	40020010 	.word	0x40020010
 80029a4:	40020028 	.word	0x40020028
 80029a8:	40020040 	.word	0x40020040
 80029ac:	40020058 	.word	0x40020058
 80029b0:	40020070 	.word	0x40020070
 80029b4:	40020088 	.word	0x40020088
 80029b8:	400200a0 	.word	0x400200a0
 80029bc:	400200b8 	.word	0x400200b8
 80029c0:	40020410 	.word	0x40020410
 80029c4:	40020428 	.word	0x40020428
 80029c8:	40020440 	.word	0x40020440
 80029cc:	40020458 	.word	0x40020458
 80029d0:	40020470 	.word	0x40020470
 80029d4:	40020488 	.word	0x40020488
 80029d8:	400204a0 	.word	0x400204a0
 80029dc:	400204b8 	.word	0x400204b8
 80029e0:	58025408 	.word	0x58025408
 80029e4:	5802541c 	.word	0x5802541c
 80029e8:	58025430 	.word	0x58025430
 80029ec:	58025444 	.word	0x58025444
 80029f0:	58025458 	.word	0x58025458
 80029f4:	5802546c 	.word	0x5802546c
 80029f8:	58025480 	.word	0x58025480
 80029fc:	58025494 	.word	0x58025494
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	2201      	movs	r2, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop

08002a84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a90:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <HAL_DMA_IRQHandler+0x1ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_DMA_IRQHandler+0x1b0>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a9b      	lsrs	r3, r3, #10
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <HAL_DMA_IRQHandler+0x1b4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04a      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_DMA_IRQHandler+0x1b8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d045      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_DMA_IRQHandler+0x1bc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d040      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5a      	ldr	r2, [pc, #360]	; (8002c44 <HAL_DMA_IRQHandler+0x1c0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a59      	ldr	r2, [pc, #356]	; (8002c48 <HAL_DMA_IRQHandler+0x1c4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d036      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_DMA_IRQHandler+0x1c8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d031      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <HAL_DMA_IRQHandler+0x1cc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d02c      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_DMA_IRQHandler+0x1d0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d027      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a53      	ldr	r2, [pc, #332]	; (8002c58 <HAL_DMA_IRQHandler+0x1d4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a51      	ldr	r2, [pc, #324]	; (8002c5c <HAL_DMA_IRQHandler+0x1d8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01d      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a50      	ldr	r2, [pc, #320]	; (8002c60 <HAL_DMA_IRQHandler+0x1dc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_DMA_IRQHandler+0x1e0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4d      	ldr	r2, [pc, #308]	; (8002c68 <HAL_DMA_IRQHandler+0x1e4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_DMA_IRQHandler+0x1e8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_DMA_IRQHandler+0x1ec>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xd2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a48      	ldr	r2, [pc, #288]	; (8002c74 <HAL_DMA_IRQHandler+0x1f0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_IRQHandler+0xd6>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_DMA_IRQHandler+0xd8>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 842b 	beq.w	80033b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a2 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2e      	ldr	r2, [pc, #184]	; (8002c38 <HAL_DMA_IRQHandler+0x1b4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d04a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_DMA_IRQHandler+0x1b8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d045      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_DMA_IRQHandler+0x1bc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d040      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a2a      	ldr	r2, [pc, #168]	; (8002c44 <HAL_DMA_IRQHandler+0x1c0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d03b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_DMA_IRQHandler+0x1c4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d036      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_DMA_IRQHandler+0x1c8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_DMA_IRQHandler+0x1cc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <HAL_DMA_IRQHandler+0x1d0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_DMA_IRQHandler+0x1d4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <HAL_DMA_IRQHandler+0x1d8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01d      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_DMA_IRQHandler+0x1dc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_DMA_IRQHandler+0x1e0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_DMA_IRQHandler+0x1e4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_DMA_IRQHandler+0x1e8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_DMA_IRQHandler+0x1ec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x194>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_DMA_IRQHandler+0x1f0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d12f      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x1f4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e02e      	b.n	8002c8c <HAL_DMA_IRQHandler+0x208>
 8002c2e:	bf00      	nop
 8002c30:	24000000 	.word	0x24000000
 8002c34:	1b4e81b5 	.word	0x1b4e81b5
 8002c38:	40020010 	.word	0x40020010
 8002c3c:	40020028 	.word	0x40020028
 8002c40:	40020040 	.word	0x40020040
 8002c44:	40020058 	.word	0x40020058
 8002c48:	40020070 	.word	0x40020070
 8002c4c:	40020088 	.word	0x40020088
 8002c50:	400200a0 	.word	0x400200a0
 8002c54:	400200b8 	.word	0x400200b8
 8002c58:	40020410 	.word	0x40020410
 8002c5c:	40020428 	.word	0x40020428
 8002c60:	40020440 	.word	0x40020440
 8002c64:	40020458 	.word	0x40020458
 8002c68:	40020470 	.word	0x40020470
 8002c6c:	40020488 	.word	0x40020488
 8002c70:	400204a0 	.word	0x400204a0
 8002c74:	400204b8 	.word	0x400204b8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2208      	movs	r2, #8
 8002caa:	409a      	lsls	r2, r3
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d06e      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_DMA_IRQHandler+0x3f8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d04a      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a67      	ldr	r2, [pc, #412]	; (8002e80 <HAL_DMA_IRQHandler+0x3fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d045      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_DMA_IRQHandler+0x400>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d040      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a64      	ldr	r2, [pc, #400]	; (8002e88 <HAL_DMA_IRQHandler+0x404>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d03b      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_DMA_IRQHandler+0x408>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d036      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a61      	ldr	r2, [pc, #388]	; (8002e90 <HAL_DMA_IRQHandler+0x40c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d031      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a60      	ldr	r2, [pc, #384]	; (8002e94 <HAL_DMA_IRQHandler+0x410>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d02c      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5e      	ldr	r2, [pc, #376]	; (8002e98 <HAL_DMA_IRQHandler+0x414>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d027      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_DMA_IRQHandler+0x418>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5b      	ldr	r2, [pc, #364]	; (8002ea0 <HAL_DMA_IRQHandler+0x41c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01d      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ea4 <HAL_DMA_IRQHandler+0x420>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_DMA_IRQHandler+0x424>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a57      	ldr	r2, [pc, #348]	; (8002eac <HAL_DMA_IRQHandler+0x428>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a55      	ldr	r2, [pc, #340]	; (8002eb0 <HAL_DMA_IRQHandler+0x42c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a54      	ldr	r2, [pc, #336]	; (8002eb4 <HAL_DMA_IRQHandler+0x430>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x2ee>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_DMA_IRQHandler+0x434>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10a      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x304>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e003      	b.n	8002d90 <HAL_DMA_IRQHandler+0x30c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0202 	orr.w	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 808f 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <HAL_DMA_IRQHandler+0x3f8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04a      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_DMA_IRQHandler+0x3fc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d045      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a29      	ldr	r2, [pc, #164]	; (8002e84 <HAL_DMA_IRQHandler+0x400>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d040      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a27      	ldr	r2, [pc, #156]	; (8002e88 <HAL_DMA_IRQHandler+0x404>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d03b      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <HAL_DMA_IRQHandler+0x408>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d036      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_DMA_IRQHandler+0x40c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a23      	ldr	r2, [pc, #140]	; (8002e94 <HAL_DMA_IRQHandler+0x410>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d02c      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_DMA_IRQHandler+0x414>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d027      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <HAL_DMA_IRQHandler+0x418>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1e      	ldr	r2, [pc, #120]	; (8002ea0 <HAL_DMA_IRQHandler+0x41c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01d      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_DMA_IRQHandler+0x420>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d018      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <HAL_DMA_IRQHandler+0x424>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a1a      	ldr	r2, [pc, #104]	; (8002eac <HAL_DMA_IRQHandler+0x428>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00e      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_DMA_IRQHandler+0x42c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d009      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_DMA_IRQHandler+0x430>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x3e2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <HAL_DMA_IRQHandler+0x434>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12a      	bne.n	8002ebc <HAL_DMA_IRQHandler+0x438>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e023      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x440>
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2210      	movs	r2, #16
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a6 	beq.w	8003046 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a85      	ldr	r2, [pc, #532]	; (8003114 <HAL_DMA_IRQHandler+0x690>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04a      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a83      	ldr	r2, [pc, #524]	; (8003118 <HAL_DMA_IRQHandler+0x694>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d045      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a82      	ldr	r2, [pc, #520]	; (800311c <HAL_DMA_IRQHandler+0x698>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d040      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_DMA_IRQHandler+0x69c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d03b      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7f      	ldr	r2, [pc, #508]	; (8003124 <HAL_DMA_IRQHandler+0x6a0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d036      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7d      	ldr	r2, [pc, #500]	; (8003128 <HAL_DMA_IRQHandler+0x6a4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d031      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7c      	ldr	r2, [pc, #496]	; (800312c <HAL_DMA_IRQHandler+0x6a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d02c      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7a      	ldr	r2, [pc, #488]	; (8003130 <HAL_DMA_IRQHandler+0x6ac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d027      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a79      	ldr	r2, [pc, #484]	; (8003134 <HAL_DMA_IRQHandler+0x6b0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a77      	ldr	r2, [pc, #476]	; (8003138 <HAL_DMA_IRQHandler+0x6b4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01d      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a76      	ldr	r2, [pc, #472]	; (800313c <HAL_DMA_IRQHandler+0x6b8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d018      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a74      	ldr	r2, [pc, #464]	; (8003140 <HAL_DMA_IRQHandler+0x6bc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	; (8003144 <HAL_DMA_IRQHandler+0x6c0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00e      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a71      	ldr	r2, [pc, #452]	; (8003148 <HAL_DMA_IRQHandler+0x6c4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a70      	ldr	r2, [pc, #448]	; (800314c <HAL_DMA_IRQHandler+0x6c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x516>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_DMA_IRQHandler+0x6cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10a      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x52c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e009      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x540>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d03e      	beq.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d024      	beq.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
 8003004:	e01f      	b.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01b      	beq.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
 8003016:	e016      	b.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0208 	bic.w	r2, r2, #8
 8003034:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2220      	movs	r2, #32
 8003050:	409a      	lsls	r2, r3
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8110 	beq.w	800327c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <HAL_DMA_IRQHandler+0x690>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04a      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <HAL_DMA_IRQHandler+0x694>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d045      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_DMA_IRQHandler+0x698>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a28      	ldr	r2, [pc, #160]	; (8003120 <HAL_DMA_IRQHandler+0x69c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03b      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a26      	ldr	r2, [pc, #152]	; (8003124 <HAL_DMA_IRQHandler+0x6a0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d036      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_DMA_IRQHandler+0x6a4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d031      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <HAL_DMA_IRQHandler+0x6a8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02c      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a22      	ldr	r2, [pc, #136]	; (8003130 <HAL_DMA_IRQHandler+0x6ac>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d027      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a20      	ldr	r2, [pc, #128]	; (8003134 <HAL_DMA_IRQHandler+0x6b0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_DMA_IRQHandler+0x6b4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_DMA_IRQHandler+0x6b8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_DMA_IRQHandler+0x6bc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_DMA_IRQHandler+0x6c0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_DMA_IRQHandler+0x6c4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_DMA_IRQHandler+0x6c8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_IRQHandler+0x678>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_DMA_IRQHandler+0x6cc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d12b      	bne.n	8003154 <HAL_DMA_IRQHandler+0x6d0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e02a      	b.n	8003168 <HAL_DMA_IRQHandler+0x6e4>
 8003112:	bf00      	nop
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8087 	beq.w	800327c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2220      	movs	r2, #32
 8003178:	409a      	lsls	r2, r3
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b04      	cmp	r3, #4
 8003188:	d139      	bne.n	80031fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_IRQHandler+0x736>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	223f      	movs	r2, #63	; 0x3f
 80031d4:	409a      	lsls	r2, r3
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8382 	beq.w	80038f8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
          }
          return;
 80031fc:	e37c      	b.n	80038f8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d018      	beq.n	800323e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d108      	bne.n	800322c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02c      	beq.n	800327c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
 800322a:	e027      	b.n	800327c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d023      	beq.n	800327c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
 800323c:	e01e      	b.n	800327c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10f      	bne.n	800326c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0210 	bic.w	r2, r2, #16
 800325a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 833e 	beq.w	8003902 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8088 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2204      	movs	r2, #4
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a89      	ldr	r2, [pc, #548]	; (80034c8 <HAL_DMA_IRQHandler+0xa44>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a88      	ldr	r2, [pc, #544]	; (80034cc <HAL_DMA_IRQHandler+0xa48>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a86      	ldr	r2, [pc, #536]	; (80034d0 <HAL_DMA_IRQHandler+0xa4c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a85      	ldr	r2, [pc, #532]	; (80034d4 <HAL_DMA_IRQHandler+0xa50>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a83      	ldr	r2, [pc, #524]	; (80034d8 <HAL_DMA_IRQHandler+0xa54>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a82      	ldr	r2, [pc, #520]	; (80034dc <HAL_DMA_IRQHandler+0xa58>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a80      	ldr	r2, [pc, #512]	; (80034e0 <HAL_DMA_IRQHandler+0xa5c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7f      	ldr	r2, [pc, #508]	; (80034e4 <HAL_DMA_IRQHandler+0xa60>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7d      	ldr	r2, [pc, #500]	; (80034e8 <HAL_DMA_IRQHandler+0xa64>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7c      	ldr	r2, [pc, #496]	; (80034ec <HAL_DMA_IRQHandler+0xa68>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_DMA_IRQHandler+0xa6c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a79      	ldr	r2, [pc, #484]	; (80034f4 <HAL_DMA_IRQHandler+0xa70>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a77      	ldr	r2, [pc, #476]	; (80034f8 <HAL_DMA_IRQHandler+0xa74>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a76      	ldr	r2, [pc, #472]	; (80034fc <HAL_DMA_IRQHandler+0xa78>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a74      	ldr	r2, [pc, #464]	; (8003500 <HAL_DMA_IRQHandler+0xa7c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_IRQHandler+0x8b8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a73      	ldr	r2, [pc, #460]	; (8003504 <HAL_DMA_IRQHandler+0xa80>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_IRQHandler+0x8ca>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <HAL_DMA_IRQHandler+0x8da>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3301      	adds	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	d307      	bcc.n	800337a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f2      	bne.n	800335e <HAL_DMA_IRQHandler+0x8da>
 8003378:	e000      	b.n	800337c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800337a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003392:	e003      	b.n	800339c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 82aa 	beq.w	8003902 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e2a4      	b.n	8003902 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_DMA_IRQHandler+0xa84>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04a      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a51      	ldr	r2, [pc, #324]	; (800350c <HAL_DMA_IRQHandler+0xa88>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d045      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4f      	ldr	r2, [pc, #316]	; (8003510 <HAL_DMA_IRQHandler+0xa8c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d040      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_DMA_IRQHandler+0xa90>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d03b      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <HAL_DMA_IRQHandler+0xa94>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d036      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4b      	ldr	r2, [pc, #300]	; (800351c <HAL_DMA_IRQHandler+0xa98>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d031      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a49      	ldr	r2, [pc, #292]	; (8003520 <HAL_DMA_IRQHandler+0xa9c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d02c      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a48      	ldr	r2, [pc, #288]	; (8003524 <HAL_DMA_IRQHandler+0xaa0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d027      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a46      	ldr	r2, [pc, #280]	; (8003528 <HAL_DMA_IRQHandler+0xaa4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d022      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a45      	ldr	r2, [pc, #276]	; (800352c <HAL_DMA_IRQHandler+0xaa8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01d      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a43      	ldr	r2, [pc, #268]	; (8003530 <HAL_DMA_IRQHandler+0xaac>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d018      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a42      	ldr	r2, [pc, #264]	; (8003534 <HAL_DMA_IRQHandler+0xab0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a40      	ldr	r2, [pc, #256]	; (8003538 <HAL_DMA_IRQHandler+0xab4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00e      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3f      	ldr	r2, [pc, #252]	; (800353c <HAL_DMA_IRQHandler+0xab8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d009      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3d      	ldr	r2, [pc, #244]	; (8003540 <HAL_DMA_IRQHandler+0xabc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_DMA_IRQHandler+0x9d4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a3c      	ldr	r2, [pc, #240]	; (8003544 <HAL_DMA_IRQHandler+0xac0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_DMA_IRQHandler+0x9d8>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_DMA_IRQHandler+0x9da>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 824f 	beq.w	8003902 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2204      	movs	r2, #4
 8003476:	409a      	lsls	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80dd 	beq.w	800363c <HAL_DMA_IRQHandler+0xbb8>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80d7 	beq.w	800363c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2204      	movs	r2, #4
 8003498:	409a      	lsls	r2, r3
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d059      	beq.n	800355c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14a      	bne.n	8003548 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8220 	beq.w	80038fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034c4:	e21a      	b.n	80038fc <HAL_DMA_IRQHandler+0xe78>
 80034c6:	bf00      	nop
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	48022c08 	.word	0x48022c08
 800350c:	48022c1c 	.word	0x48022c1c
 8003510:	48022c30 	.word	0x48022c30
 8003514:	48022c44 	.word	0x48022c44
 8003518:	48022c58 	.word	0x48022c58
 800351c:	48022c6c 	.word	0x48022c6c
 8003520:	48022c80 	.word	0x48022c80
 8003524:	48022c94 	.word	0x48022c94
 8003528:	58025408 	.word	0x58025408
 800352c:	5802541c 	.word	0x5802541c
 8003530:	58025430 	.word	0x58025430
 8003534:	58025444 	.word	0x58025444
 8003538:	58025458 	.word	0x58025458
 800353c:	5802546c 	.word	0x5802546c
 8003540:	58025480 	.word	0x58025480
 8003544:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 81d5 	beq.w	80038fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800355a:	e1cf      	b.n	80038fc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d160      	bne.n	8003628 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7f      	ldr	r2, [pc, #508]	; (8003768 <HAL_DMA_IRQHandler+0xce4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d04a      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a7d      	ldr	r2, [pc, #500]	; (800376c <HAL_DMA_IRQHandler+0xce8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d045      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7c      	ldr	r2, [pc, #496]	; (8003770 <HAL_DMA_IRQHandler+0xcec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d040      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a7a      	ldr	r2, [pc, #488]	; (8003774 <HAL_DMA_IRQHandler+0xcf0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d03b      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a79      	ldr	r2, [pc, #484]	; (8003778 <HAL_DMA_IRQHandler+0xcf4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d036      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a77      	ldr	r2, [pc, #476]	; (800377c <HAL_DMA_IRQHandler+0xcf8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d031      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a76      	ldr	r2, [pc, #472]	; (8003780 <HAL_DMA_IRQHandler+0xcfc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d02c      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a74      	ldr	r2, [pc, #464]	; (8003784 <HAL_DMA_IRQHandler+0xd00>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d027      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a73      	ldr	r2, [pc, #460]	; (8003788 <HAL_DMA_IRQHandler+0xd04>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d022      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a71      	ldr	r2, [pc, #452]	; (800378c <HAL_DMA_IRQHandler+0xd08>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01d      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <HAL_DMA_IRQHandler+0xd0c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d018      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_DMA_IRQHandler+0xd10>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <HAL_DMA_IRQHandler+0xd14>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00e      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a6b      	ldr	r2, [pc, #428]	; (800379c <HAL_DMA_IRQHandler+0xd18>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d009      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <HAL_DMA_IRQHandler+0xd1c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_DMA_IRQHandler+0xb82>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a68      	ldr	r2, [pc, #416]	; (80037a4 <HAL_DMA_IRQHandler+0xd20>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <HAL_DMA_IRQHandler+0xb94>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0208 	bic.w	r2, r2, #8
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e007      	b.n	8003628 <HAL_DMA_IRQHandler+0xba4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8165 	beq.w	80038fc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800363a:	e15f      	b.n	80038fc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	2202      	movs	r2, #2
 8003646:	409a      	lsls	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80c5 	beq.w	80037dc <HAL_DMA_IRQHandler+0xd58>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80bf 	beq.w	80037dc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2202      	movs	r2, #2
 8003668:	409a      	lsls	r2, r3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 813a 	beq.w	8003900 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003694:	e134      	b.n	8003900 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8130 	beq.w	8003900 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036a8:	e12a      	b.n	8003900 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 8089 	bne.w	80037c8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_DMA_IRQHandler+0xce4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <HAL_DMA_IRQHandler+0xce8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a28      	ldr	r2, [pc, #160]	; (8003770 <HAL_DMA_IRQHandler+0xcec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_DMA_IRQHandler+0xcf0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_DMA_IRQHandler+0xcf4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_DMA_IRQHandler+0xcf8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_DMA_IRQHandler+0xcfc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a20      	ldr	r2, [pc, #128]	; (8003784 <HAL_DMA_IRQHandler+0xd00>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_DMA_IRQHandler+0xd04>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_DMA_IRQHandler+0xd08>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1c      	ldr	r2, [pc, #112]	; (8003790 <HAL_DMA_IRQHandler+0xd0c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_DMA_IRQHandler+0xd10>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a19      	ldr	r2, [pc, #100]	; (8003798 <HAL_DMA_IRQHandler+0xd14>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_DMA_IRQHandler+0xd18>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_DMA_IRQHandler+0xd1c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_IRQHandler+0xcd2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_DMA_IRQHandler+0xd20>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d128      	bne.n	80037a8 <HAL_DMA_IRQHandler+0xd24>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0214 	bic.w	r2, r2, #20
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e027      	b.n	80037b8 <HAL_DMA_IRQHandler+0xd34>
 8003768:	40020010 	.word	0x40020010
 800376c:	40020028 	.word	0x40020028
 8003770:	40020040 	.word	0x40020040
 8003774:	40020058 	.word	0x40020058
 8003778:	40020070 	.word	0x40020070
 800377c:	40020088 	.word	0x40020088
 8003780:	400200a0 	.word	0x400200a0
 8003784:	400200b8 	.word	0x400200b8
 8003788:	40020410 	.word	0x40020410
 800378c:	40020428 	.word	0x40020428
 8003790:	40020440 	.word	0x40020440
 8003794:	40020458 	.word	0x40020458
 8003798:	40020470 	.word	0x40020470
 800379c:	40020488 	.word	0x40020488
 80037a0:	400204a0 	.word	0x400204a0
 80037a4:	400204b8 	.word	0x400204b8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 020a 	bic.w	r2, r2, #10
 80037b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8097 	beq.w	8003900 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037da:	e091      	b.n	8003900 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2208      	movs	r2, #8
 80037e6:	409a      	lsls	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8088 	beq.w	8003902 <HAL_DMA_IRQHandler+0xe7e>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8082 	beq.w	8003902 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a41      	ldr	r2, [pc, #260]	; (8003908 <HAL_DMA_IRQHandler+0xe84>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d04a      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3f      	ldr	r2, [pc, #252]	; (800390c <HAL_DMA_IRQHandler+0xe88>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d045      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <HAL_DMA_IRQHandler+0xe8c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d040      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <HAL_DMA_IRQHandler+0xe90>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d03b      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3b      	ldr	r2, [pc, #236]	; (8003918 <HAL_DMA_IRQHandler+0xe94>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d036      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a39      	ldr	r2, [pc, #228]	; (800391c <HAL_DMA_IRQHandler+0xe98>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d031      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a38      	ldr	r2, [pc, #224]	; (8003920 <HAL_DMA_IRQHandler+0xe9c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d02c      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a36      	ldr	r2, [pc, #216]	; (8003924 <HAL_DMA_IRQHandler+0xea0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d027      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a35      	ldr	r2, [pc, #212]	; (8003928 <HAL_DMA_IRQHandler+0xea4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a33      	ldr	r2, [pc, #204]	; (800392c <HAL_DMA_IRQHandler+0xea8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01d      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_DMA_IRQHandler+0xeac>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a30      	ldr	r2, [pc, #192]	; (8003934 <HAL_DMA_IRQHandler+0xeb0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <HAL_DMA_IRQHandler+0xeb4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2d      	ldr	r2, [pc, #180]	; (800393c <HAL_DMA_IRQHandler+0xeb8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <HAL_DMA_IRQHandler+0xebc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_DMA_IRQHandler+0xe1a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_DMA_IRQHandler+0xec0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <HAL_DMA_IRQHandler+0xe2c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 021c 	bic.w	r2, r2, #28
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e007      	b.n	80038c0 <HAL_DMA_IRQHandler+0xe3c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020e 	bic.w	r2, r2, #14
 80038be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2201      	movs	r2, #1
 80038ca:	409a      	lsls	r2, r3
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e004      	b.n	8003902 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003900:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40020010 	.word	0x40020010
 800390c:	40020028 	.word	0x40020028
 8003910:	40020040 	.word	0x40020040
 8003914:	40020058 	.word	0x40020058
 8003918:	40020070 	.word	0x40020070
 800391c:	40020088 	.word	0x40020088
 8003920:	400200a0 	.word	0x400200a0
 8003924:	400200b8 	.word	0x400200b8
 8003928:	40020410 	.word	0x40020410
 800392c:	40020428 	.word	0x40020428
 8003930:	40020440 	.word	0x40020440
 8003934:	40020458 	.word	0x40020458
 8003938:	40020470 	.word	0x40020470
 800393c:	40020488 	.word	0x40020488
 8003940:	400204a0 	.word	0x400204a0
 8003944:	400204b8 	.word	0x400204b8

08003948 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7f      	ldr	r2, [pc, #508]	; (8003b64 <DMA_SetConfig+0x21c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d072      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7d      	ldr	r2, [pc, #500]	; (8003b68 <DMA_SetConfig+0x220>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d06d      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7c      	ldr	r2, [pc, #496]	; (8003b6c <DMA_SetConfig+0x224>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d068      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7a      	ldr	r2, [pc, #488]	; (8003b70 <DMA_SetConfig+0x228>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d063      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a79      	ldr	r2, [pc, #484]	; (8003b74 <DMA_SetConfig+0x22c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d05e      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a77      	ldr	r2, [pc, #476]	; (8003b78 <DMA_SetConfig+0x230>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d059      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a76      	ldr	r2, [pc, #472]	; (8003b7c <DMA_SetConfig+0x234>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d054      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a74      	ldr	r2, [pc, #464]	; (8003b80 <DMA_SetConfig+0x238>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d04f      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a73      	ldr	r2, [pc, #460]	; (8003b84 <DMA_SetConfig+0x23c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d04a      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a71      	ldr	r2, [pc, #452]	; (8003b88 <DMA_SetConfig+0x240>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d045      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a70      	ldr	r2, [pc, #448]	; (8003b8c <DMA_SetConfig+0x244>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d040      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	; (8003b90 <DMA_SetConfig+0x248>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d03b      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6d      	ldr	r2, [pc, #436]	; (8003b94 <DMA_SetConfig+0x24c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d036      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6b      	ldr	r2, [pc, #428]	; (8003b98 <DMA_SetConfig+0x250>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d031      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <DMA_SetConfig+0x254>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d02c      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <DMA_SetConfig+0x258>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d027      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a67      	ldr	r2, [pc, #412]	; (8003ba4 <DMA_SetConfig+0x25c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <DMA_SetConfig+0x260>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a64      	ldr	r2, [pc, #400]	; (8003bac <DMA_SetConfig+0x264>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a62      	ldr	r2, [pc, #392]	; (8003bb0 <DMA_SetConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <DMA_SetConfig+0x26c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5f      	ldr	r2, [pc, #380]	; (8003bb8 <DMA_SetConfig+0x270>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5e      	ldr	r2, [pc, #376]	; (8003bbc <DMA_SetConfig+0x274>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5c      	ldr	r2, [pc, #368]	; (8003bc0 <DMA_SetConfig+0x278>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <DMA_SetConfig+0x10e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <DMA_SetConfig+0x110>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00d      	beq.n	8003a78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <DMA_SetConfig+0x21c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d04a      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <DMA_SetConfig+0x220>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d045      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a36      	ldr	r2, [pc, #216]	; (8003b6c <DMA_SetConfig+0x224>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d040      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <DMA_SetConfig+0x228>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d03b      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <DMA_SetConfig+0x22c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d036      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a32      	ldr	r2, [pc, #200]	; (8003b78 <DMA_SetConfig+0x230>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d031      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <DMA_SetConfig+0x234>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d02c      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <DMA_SetConfig+0x238>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d027      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2d      	ldr	r2, [pc, #180]	; (8003b84 <DMA_SetConfig+0x23c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d022      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <DMA_SetConfig+0x240>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d01d      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <DMA_SetConfig+0x244>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d018      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <DMA_SetConfig+0x248>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <DMA_SetConfig+0x24c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00e      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <DMA_SetConfig+0x250>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a24      	ldr	r2, [pc, #144]	; (8003b9c <DMA_SetConfig+0x254>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <DMA_SetConfig+0x1d0>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a23      	ldr	r2, [pc, #140]	; (8003ba0 <DMA_SetConfig+0x258>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <DMA_SetConfig+0x1d4>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <DMA_SetConfig+0x1d6>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d059      	beq.n	8003bd6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	223f      	movs	r2, #63	; 0x3f
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b40:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d138      	bne.n	8003bc4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b62:	e0ae      	b.n	8003cc2 <DMA_SetConfig+0x37a>
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	40020040 	.word	0x40020040
 8003b70:	40020058 	.word	0x40020058
 8003b74:	40020070 	.word	0x40020070
 8003b78:	40020088 	.word	0x40020088
 8003b7c:	400200a0 	.word	0x400200a0
 8003b80:	400200b8 	.word	0x400200b8
 8003b84:	40020410 	.word	0x40020410
 8003b88:	40020428 	.word	0x40020428
 8003b8c:	40020440 	.word	0x40020440
 8003b90:	40020458 	.word	0x40020458
 8003b94:	40020470 	.word	0x40020470
 8003b98:	40020488 	.word	0x40020488
 8003b9c:	400204a0 	.word	0x400204a0
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	58025408 	.word	0x58025408
 8003ba8:	5802541c 	.word	0x5802541c
 8003bac:	58025430 	.word	0x58025430
 8003bb0:	58025444 	.word	0x58025444
 8003bb4:	58025458 	.word	0x58025458
 8003bb8:	5802546c 	.word	0x5802546c
 8003bbc:	58025480 	.word	0x58025480
 8003bc0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	e075      	b.n	8003cc2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <DMA_SetConfig+0x388>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <DMA_SetConfig+0x38c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3a      	ldr	r2, [pc, #232]	; (8003cd8 <DMA_SetConfig+0x390>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a38      	ldr	r2, [pc, #224]	; (8003cdc <DMA_SetConfig+0x394>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a37      	ldr	r2, [pc, #220]	; (8003ce0 <DMA_SetConfig+0x398>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <DMA_SetConfig+0x39c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a34      	ldr	r2, [pc, #208]	; (8003ce8 <DMA_SetConfig+0x3a0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a32      	ldr	r2, [pc, #200]	; (8003cec <DMA_SetConfig+0x3a4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a31      	ldr	r2, [pc, #196]	; (8003cf0 <DMA_SetConfig+0x3a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <DMA_SetConfig+0x3ac>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <DMA_SetConfig+0x3b0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	; (8003cfc <DMA_SetConfig+0x3b4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <DMA_SetConfig+0x3b8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <DMA_SetConfig+0x3bc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <DMA_SetConfig+0x3c0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <DMA_SetConfig+0x32e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a26      	ldr	r2, [pc, #152]	; (8003d0c <DMA_SetConfig+0x3c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <DMA_SetConfig+0x332>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <DMA_SetConfig+0x334>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d108      	bne.n	8003cb2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	60da      	str	r2, [r3, #12]
}
 8003cb0:	e007      	b.n	8003cc2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	48022c08 	.word	0x48022c08
 8003cd4:	48022c1c 	.word	0x48022c1c
 8003cd8:	48022c30 	.word	0x48022c30
 8003cdc:	48022c44 	.word	0x48022c44
 8003ce0:	48022c58 	.word	0x48022c58
 8003ce4:	48022c6c 	.word	0x48022c6c
 8003ce8:	48022c80 	.word	0x48022c80
 8003cec:	48022c94 	.word	0x48022c94
 8003cf0:	58025408 	.word	0x58025408
 8003cf4:	5802541c 	.word	0x5802541c
 8003cf8:	58025430 	.word	0x58025430
 8003cfc:	58025444 	.word	0x58025444
 8003d00:	58025458 	.word	0x58025458
 8003d04:	5802546c 	.word	0x5802546c
 8003d08:	58025480 	.word	0x58025480
 8003d0c:	58025494 	.word	0x58025494

08003d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	; (8003e28 <DMA_CalcBaseAndBitshift+0x118>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d04a      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d045      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3f      	ldr	r2, [pc, #252]	; (8003e30 <DMA_CalcBaseAndBitshift+0x120>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d040      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3e      	ldr	r2, [pc, #248]	; (8003e34 <DMA_CalcBaseAndBitshift+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d03b      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3c      	ldr	r2, [pc, #240]	; (8003e38 <DMA_CalcBaseAndBitshift+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d036      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3b      	ldr	r2, [pc, #236]	; (8003e3c <DMA_CalcBaseAndBitshift+0x12c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d031      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a39      	ldr	r2, [pc, #228]	; (8003e40 <DMA_CalcBaseAndBitshift+0x130>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d02c      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <DMA_CalcBaseAndBitshift+0x134>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d027      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a36      	ldr	r2, [pc, #216]	; (8003e48 <DMA_CalcBaseAndBitshift+0x138>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d022      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a35      	ldr	r2, [pc, #212]	; (8003e4c <DMA_CalcBaseAndBitshift+0x13c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01d      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <DMA_CalcBaseAndBitshift+0x140>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d018      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <DMA_CalcBaseAndBitshift+0x144>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a30      	ldr	r2, [pc, #192]	; (8003e58 <DMA_CalcBaseAndBitshift+0x148>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00e      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2f      	ldr	r2, [pc, #188]	; (8003e5c <DMA_CalcBaseAndBitshift+0x14c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d009      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <DMA_CalcBaseAndBitshift+0x150>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <DMA_CalcBaseAndBitshift+0xa8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <DMA_CalcBaseAndBitshift+0x154>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <DMA_CalcBaseAndBitshift+0xac>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <DMA_CalcBaseAndBitshift+0xae>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d024      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3b10      	subs	r3, #16
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <DMA_CalcBaseAndBitshift+0x158>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d908      	bls.n	8003dfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <DMA_CalcBaseAndBitshift+0x160>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58
 8003dfa:	e00d      	b.n	8003e18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <DMA_CalcBaseAndBitshift+0x160>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0a:	e005      	b.n	8003e18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40020010 	.word	0x40020010
 8003e2c:	40020028 	.word	0x40020028
 8003e30:	40020040 	.word	0x40020040
 8003e34:	40020058 	.word	0x40020058
 8003e38:	40020070 	.word	0x40020070
 8003e3c:	40020088 	.word	0x40020088
 8003e40:	400200a0 	.word	0x400200a0
 8003e44:	400200b8 	.word	0x400200b8
 8003e48:	40020410 	.word	0x40020410
 8003e4c:	40020428 	.word	0x40020428
 8003e50:	40020440 	.word	0x40020440
 8003e54:	40020458 	.word	0x40020458
 8003e58:	40020470 	.word	0x40020470
 8003e5c:	40020488 	.word	0x40020488
 8003e60:	400204a0 	.word	0x400204a0
 8003e64:	400204b8 	.word	0x400204b8
 8003e68:	aaaaaaab 	.word	0xaaaaaaab
 8003e6c:	080093e4 	.word	0x080093e4
 8003e70:	fffffc00 	.word	0xfffffc00

08003e74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d120      	bne.n	8003eca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d858      	bhi.n	8003f42 <DMA_CheckFifoParam+0xce>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <DMA_CheckFifoParam+0x24>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ebb 	.word	0x08003ebb
 8003ea0:	08003ea9 	.word	0x08003ea9
 8003ea4:	08003f43 	.word	0x08003f43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d048      	beq.n	8003f46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eb8:	e045      	b.n	8003f46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec2:	d142      	bne.n	8003f4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ec8:	e03f      	b.n	8003f4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed2:	d123      	bne.n	8003f1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d838      	bhi.n	8003f4e <DMA_CheckFifoParam+0xda>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <DMA_CheckFifoParam+0x70>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003efb 	.word	0x08003efb
 8003eec:	08003ef5 	.word	0x08003ef5
 8003ef0:	08003f0d 	.word	0x08003f0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef8:	e030      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d025      	beq.n	8003f52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f0a:	e022      	b.n	8003f52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f14:	d11f      	bne.n	8003f56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1a:	e01c      	b.n	8003f56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d902      	bls.n	8003f2a <DMA_CheckFifoParam+0xb6>
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d003      	beq.n	8003f30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f28:	e018      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f2e:	e015      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00e      	beq.n	8003f5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f40:	e00b      	b.n	8003f5a <DMA_CheckFifoParam+0xe6>
        break;
 8003f42:	bf00      	nop
 8003f44:	e00a      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f46:	bf00      	nop
 8003f48:	e008      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e006      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e004      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
        break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <DMA_CheckFifoParam+0xe8>
    break;
 8003f5a:	bf00      	nop
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a38      	ldr	r2, [pc, #224]	; (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a36      	ldr	r2, [pc, #216]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a35      	ldr	r2, [pc, #212]	; (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a33      	ldr	r2, [pc, #204]	; (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a32      	ldr	r2, [pc, #200]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01a      	beq.n	800400a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3b08      	subs	r3, #8
 8003fdc:	4a28      	ldr	r2, [pc, #160]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4b26      	ldr	r3, [pc, #152]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a24      	ldr	r2, [pc, #144]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ff8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004008:	e024      	b.n	8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3b10      	subs	r3, #16
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d806      	bhi.n	8004032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d902      	bls.n	8004032 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3308      	adds	r3, #8
 8004030:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4b18      	ldr	r3, [pc, #96]	; (8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004044:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	58025408 	.word	0x58025408
 8004064:	5802541c 	.word	0x5802541c
 8004068:	58025430 	.word	0x58025430
 800406c:	58025444 	.word	0x58025444
 8004070:	58025458 	.word	0x58025458
 8004074:	5802546c 	.word	0x5802546c
 8004078:	58025480 	.word	0x58025480
 800407c:	58025494 	.word	0x58025494
 8004080:	cccccccd 	.word	0xcccccccd
 8004084:	16009600 	.word	0x16009600
 8004088:	58025880 	.word	0x58025880
 800408c:	aaaaaaab 	.word	0xaaaaaaab
 8004090:	400204b8 	.word	0x400204b8
 8004094:	4002040f 	.word	0x4002040f
 8004098:	10008200 	.word	0x10008200
 800409c:	40020880 	.word	0x40020880

080040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04a      	beq.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d847      	bhi.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d022      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a24      	ldr	r2, [pc, #144]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d01d      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d018      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d009      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	461a      	mov	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a15      	ldr	r2, [pc, #84]	; (800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004128:	671a      	str	r2, [r3, #112]	; 0x70
 800412a:	e009      	b.n	8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a11      	ldr	r2, [pc, #68]	; (8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800413e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b01      	subs	r3, #1
 8004144:	2201      	movs	r2, #1
 8004146:	409a      	lsls	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	58025408 	.word	0x58025408
 800415c:	5802541c 	.word	0x5802541c
 8004160:	58025430 	.word	0x58025430
 8004164:	58025444 	.word	0x58025444
 8004168:	58025458 	.word	0x58025458
 800416c:	5802546c 	.word	0x5802546c
 8004170:	58025480 	.word	0x58025480
 8004174:	58025494 	.word	0x58025494
 8004178:	1600963f 	.word	0x1600963f
 800417c:	58025940 	.word	0x58025940
 8004180:	1000823f 	.word	0x1000823f
 8004184:	40020940 	.word	0x40020940

08004188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004196:	4b89      	ldr	r3, [pc, #548]	; (80043bc <HAL_GPIO_Init+0x234>)
 8004198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800419a:	e194      	b.n	80044c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8186 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d005      	beq.n	80041cc <HAL_GPIO_Init+0x44>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d130      	bne.n	800422e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004202:	2201      	movs	r2, #1
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0201 	and.w	r2, r3, #1
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d017      	beq.n	800426a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d123      	bne.n	80042be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	08da      	lsrs	r2, r3, #3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3208      	adds	r2, #8
 800427e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	fa02 f303 	lsl.w	r3, r2, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2203      	movs	r2, #3
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0203 	and.w	r2, r3, #3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e0 	beq.w	80044c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_GPIO_Init+0x238>)
 8004302:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004306:	4a2e      	ldr	r2, [pc, #184]	; (80043c0 <HAL_GPIO_Init+0x238>)
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_GPIO_Init+0x238>)
 8004312:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800431e:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <HAL_GPIO_Init+0x23c>)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	3302      	adds	r3, #2
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	220f      	movs	r2, #15
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_GPIO_Init+0x240>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d052      	beq.n	80043f0 <HAL_GPIO_Init+0x268>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_GPIO_Init+0x244>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d031      	beq.n	80043b6 <HAL_GPIO_Init+0x22e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_GPIO_Init+0x248>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x22a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_GPIO_Init+0x24c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x226>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_GPIO_Init+0x250>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x222>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_GPIO_Init+0x254>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x21e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1a      	ldr	r2, [pc, #104]	; (80043e0 <HAL_GPIO_Init+0x258>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x21a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_GPIO_Init+0x25c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x216>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <HAL_GPIO_Init+0x260>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x212>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_GPIO_Init+0x264>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x20e>
 8004392:	2309      	movs	r3, #9
 8004394:	e02d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 8004396:	230a      	movs	r3, #10
 8004398:	e02b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439a:	2308      	movs	r3, #8
 800439c:	e029      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 800439e:	2307      	movs	r3, #7
 80043a0:	e027      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a2:	2306      	movs	r3, #6
 80043a4:	e025      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e023      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043aa:	2304      	movs	r3, #4
 80043ac:	e021      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ae:	2303      	movs	r3, #3
 80043b0:	e01f      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e01d      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01b      	b.n	80043f2 <HAL_GPIO_Init+0x26a>
 80043ba:	bf00      	nop
 80043bc:	58000080 	.word	0x58000080
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58000400 	.word	0x58000400
 80043c8:	58020000 	.word	0x58020000
 80043cc:	58020400 	.word	0x58020400
 80043d0:	58020800 	.word	0x58020800
 80043d4:	58020c00 	.word	0x58020c00
 80043d8:	58021000 	.word	0x58021000
 80043dc:	58021400 	.word	0x58021400
 80043e0:	58021800 	.word	0x58021800
 80043e4:	58021c00 	.word	0x58021c00
 80043e8:	58022000 	.word	0x58022000
 80043ec:	58022400 	.word	0x58022400
 80043f0:	2300      	movs	r3, #0
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004402:	4938      	ldr	r1, [pc, #224]	; (80044e4 <HAL_GPIO_Init+0x35c>)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f ae63 	bne.w	800419c <HAL_GPIO_Init+0x14>
  }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3724      	adds	r7, #36	; 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	58000400 	.word	0x58000400

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004504:	e003      	b.n	800450e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	619a      	str	r2, [r3, #24]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004524:	4b29      	ldr	r3, [pc, #164]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	2b06      	cmp	r3, #6
 800452e:	d00a      	beq.n	8004546 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004530:	4b26      	ldr	r3, [pc, #152]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e040      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e03e      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800454e:	491f      	ldr	r1, [pc, #124]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4313      	orrs	r3, r2
 8004554:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004556:	f7fc fe1b 	bl	8001190 <HAL_GetTick>
 800455a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800455c:	e009      	b.n	8004572 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800455e:	f7fc fe17 	bl	8001190 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800456c:	d901      	bls.n	8004572 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e028      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457e:	d1ee      	bne.n	800455e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b1e      	cmp	r3, #30
 8004584:	d008      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b2e      	cmp	r3, #46	; 0x2e
 800458a:	d005      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b1d      	cmp	r3, #29
 8004590:	d002      	beq.n	8004598 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b2d      	cmp	r3, #45	; 0x2d
 8004596:	d114      	bne.n	80045c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004598:	f7fc fdfa 	bl	8001190 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800459e:	e009      	b.n	80045b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045a0:	f7fc fdf6 	bl	8001190 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ae:	d901      	bls.n	80045b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_PWREx_ConfigSupply+0xb0>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d1ee      	bne.n	80045a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024800 	.word	0x58024800

080045d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f000 bc1f 	b.w	8004e22 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80b3 	beq.w	8004758 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f2:	4b95      	ldr	r3, [pc, #596]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045fc:	4b92      	ldr	r3, [pc, #584]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2b10      	cmp	r3, #16
 8004606:	d007      	beq.n	8004618 <HAL_RCC_OscConfig+0x48>
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	2b18      	cmp	r3, #24
 800460c:	d112      	bne.n	8004634 <HAL_RCC_OscConfig+0x64>
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d10d      	bne.n	8004634 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	4b8b      	ldr	r3, [pc, #556]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8098 	beq.w	8004756 <HAL_RCC_OscConfig+0x186>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f040 8093 	bne.w	8004756 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e3f6      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d106      	bne.n	800464c <HAL_RCC_OscConfig+0x7c>
 800463e:	4b82      	ldr	r3, [pc, #520]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a81      	ldr	r2, [pc, #516]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e058      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d112      	bne.n	800467a <HAL_RCC_OscConfig+0xaa>
 8004654:	4b7c      	ldr	r3, [pc, #496]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7b      	ldr	r2, [pc, #492]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800465a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4b79      	ldr	r3, [pc, #484]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a78      	ldr	r2, [pc, #480]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004666:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b76      	ldr	r3, [pc, #472]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a75      	ldr	r2, [pc, #468]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e041      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004682:	d112      	bne.n	80046aa <HAL_RCC_OscConfig+0xda>
 8004684:	4b70      	ldr	r3, [pc, #448]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a6f      	ldr	r2, [pc, #444]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800468a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4b6d      	ldr	r3, [pc, #436]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6c      	ldr	r2, [pc, #432]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004696:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a69      	ldr	r2, [pc, #420]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e029      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80046b2:	d112      	bne.n	80046da <HAL_RCC_OscConfig+0x10a>
 80046b4:	4b64      	ldr	r3, [pc, #400]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a63      	ldr	r2, [pc, #396]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b61      	ldr	r3, [pc, #388]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a60      	ldr	r2, [pc, #384]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5d      	ldr	r2, [pc, #372]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	e011      	b.n	80046fe <HAL_RCC_OscConfig+0x12e>
 80046da:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5a      	ldr	r2, [pc, #360]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b58      	ldr	r3, [pc, #352]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a57      	ldr	r2, [pc, #348]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b55      	ldr	r3, [pc, #340]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a54      	ldr	r2, [pc, #336]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80046f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fc fd43 	bl	8001190 <HAL_GetTick>
 800470a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470e:	f7fc fd3f 	bl	8001190 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e380      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x13e>
 800472c:	e014      	b.n	8004758 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fc fd2f 	bl	8001190 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004736:	f7fc fd2b 	bl	8001190 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b64      	cmp	r3, #100	; 0x64
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e36c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004748:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x166>
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 808c 	beq.w	800487e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800476e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_RCC_OscConfig+0x1bc>
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b18      	cmp	r3, #24
 8004780:	d137      	bne.n	80047f2 <HAL_RCC_OscConfig+0x222>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d132      	bne.n	80047f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x1d4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e33e      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047a4:	4b28      	ldr	r3, [pc, #160]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 0219 	bic.w	r2, r3, #25
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4925      	ldr	r1, [pc, #148]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b6:	f7fc fceb 	bl	8001190 <HAL_GetTick>
 80047ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047be:	f7fc fce7 	bl	8001190 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e328      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4917      	ldr	r1, [pc, #92]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	e045      	b.n	800487e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d028      	beq.n	800484c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 0219 	bic.w	r2, r3, #25
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	4910      	ldr	r1, [pc, #64]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fc fcc0 	bl	8001190 <HAL_GetTick>
 8004810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fc fcbc 	bl	8001190 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e2fd      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	4901      	ldr	r1, [pc, #4]	; (8004848 <HAL_RCC_OscConfig+0x278>)
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
 8004846:	e01a      	b.n	800487e <HAL_RCC_OscConfig+0x2ae>
 8004848:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484c:	4b97      	ldr	r3, [pc, #604]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a96      	ldr	r2, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fc fc9a 	bl	8001190 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fc fc96 	bl	8001190 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e2d7      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004872:	4b8e      	ldr	r3, [pc, #568]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d06a      	beq.n	8004960 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488a:	4b88      	ldr	r3, [pc, #544]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004892:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004894:	4b85      	ldr	r3, [pc, #532]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d007      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2e0>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b18      	cmp	r3, #24
 80048a4:	d11b      	bne.n	80048de <HAL_RCC_OscConfig+0x30e>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d116      	bne.n	80048de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048b0:	4b7e      	ldr	r3, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e2ac      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048c8:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	4975      	ldr	r1, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048dc:	e040      	b.n	8004960 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048e6:	4b71      	ldr	r3, [pc, #452]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a70      	ldr	r2, [pc, #448]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fc fc4d 	bl	8001190 <HAL_GetTick>
 80048f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048fa:	f7fc fc49 	bl	8001190 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e28a      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490c:	4b67      	ldr	r3, [pc, #412]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004918:	4b64      	ldr	r3, [pc, #400]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	4961      	ldr	r1, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
 800492c:	e018      	b.n	8004960 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800492e:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fc fc29 	bl	8001190 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004942:	f7fc fc25 	bl	8001190 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e266      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004954:	4b55      	ldr	r3, [pc, #340]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d036      	beq.n	80049da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d019      	beq.n	80049a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004974:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	4a4c      	ldr	r2, [pc, #304]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fc fc06 	bl	8001190 <HAL_GetTick>
 8004984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004988:	f7fc fc02 	bl	8001190 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e243      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800499a:	4b44      	ldr	r3, [pc, #272]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x3b8>
 80049a6:	e018      	b.n	80049da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	4a3f      	ldr	r2, [pc, #252]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b4:	f7fc fbec 	bl	8001190 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049bc:	f7fc fbe8 	bl	8001190 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e229      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ce:	4b37      	ldr	r3, [pc, #220]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d036      	beq.n	8004a54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d019      	beq.n	8004a22 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2e      	ldr	r2, [pc, #184]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 80049f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049fa:	f7fc fbc9 	bl	8001190 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a02:	f7fc fbc5 	bl	8001190 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e206      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x432>
 8004a20:	e018      	b.n	8004a54 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a21      	ldr	r2, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a2e:	f7fc fbaf 	bl	8001190 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a36:	f7fc fbab 	bl	8001190 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e1ec      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80af 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a6e:	f7fc fb8f 	bl	8001190 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fc fb8b 	bl	8001190 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b64      	cmp	r3, #100	; 0x64
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e1cc      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_OscConfig+0x4e0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4e4>
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a02      	ldr	r2, [pc, #8]	; (8004aac <HAL_RCC_OscConfig+0x4dc>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa8:	e05b      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004aaa:	bf00      	nop
 8004aac:	58024400 	.word	0x58024400
 8004ab0:	58024800 	.word	0x58024800
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d112      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x512>
 8004abc:	4b9d      	ldr	r3, [pc, #628]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a9c      	ldr	r2, [pc, #624]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a99      	ldr	r2, [pc, #612]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad4:	4b97      	ldr	r3, [pc, #604]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a96      	ldr	r2, [pc, #600]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae0:	e03f      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x540>
 8004aea:	4b92      	ldr	r3, [pc, #584]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a91      	ldr	r2, [pc, #580]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
 8004af6:	4b8f      	ldr	r3, [pc, #572]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a8e      	ldr	r2, [pc, #568]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
 8004b02:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a8b      	ldr	r2, [pc, #556]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	e028      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b85      	cmp	r3, #133	; 0x85
 8004b16:	d112      	bne.n	8004b3e <HAL_RCC_OscConfig+0x56e>
 8004b18:	4b86      	ldr	r3, [pc, #536]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a85      	ldr	r2, [pc, #532]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	4b83      	ldr	r3, [pc, #524]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	4a82      	ldr	r2, [pc, #520]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b30:	4b80      	ldr	r3, [pc, #512]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4a7f      	ldr	r2, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3c:	e011      	b.n	8004b62 <HAL_RCC_OscConfig+0x592>
 8004b3e:	4b7d      	ldr	r3, [pc, #500]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a7c      	ldr	r2, [pc, #496]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4a:	4b7a      	ldr	r3, [pc, #488]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a79      	ldr	r2, [pc, #484]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	4b77      	ldr	r3, [pc, #476]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a76      	ldr	r2, [pc, #472]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d015      	beq.n	8004b96 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fc fb11 	bl	8001190 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fc fb0d 	bl	8001190 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e14c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b88:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCC_OscConfig+0x5a2>
 8004b94:	e014      	b.n	8004bc0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fc fafb 	bl	8001190 <HAL_GetTick>
 8004b9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fc faf7 	bl	8001190 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e136      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bb4:	4b5f      	ldr	r3, [pc, #380]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 812b 	beq.w	8004e20 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd2:	2b18      	cmp	r3, #24
 8004bd4:	f000 80bb 	beq.w	8004d4e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f040 8095 	bne.w	8004d0c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a53      	ldr	r2, [pc, #332]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fc facf 	bl	8001190 <HAL_GetTick>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fc facb 	bl	8001190 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e10c      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c08:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c14:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c18:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x768>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	430a      	orrs	r2, r1
 8004c28:	4942      	ldr	r1, [pc, #264]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	628b      	str	r3, [r1, #40]	; 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c32:	3b01      	subs	r3, #1
 8004c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	025b      	lsls	r3, r3, #9
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	3b01      	subs	r3, #1
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c5e:	4935      	ldr	r1, [pc, #212]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c64:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c68:	4a32      	ldr	r2, [pc, #200]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c70:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c74:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCC_OscConfig+0x76c>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c7c:	00d2      	lsls	r2, r2, #3
 8004c7e:	492d      	ldr	r1, [pc, #180]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f023 020c 	bic.w	r2, r3, #12
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4928      	ldr	r1, [pc, #160]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f023 0202 	bic.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	4924      	ldr	r1, [pc, #144]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ca8:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fc fa54 	bl	8001190 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fc fa50 	bl	8001190 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e091      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x71c>
 8004d0a:	e089      	b.n	8004e20 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <HAL_RCC_OscConfig+0x764>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fa3a 	bl	8001190 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1e:	e00f      	b.n	8004d40 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fc fa36 	bl	8001190 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d908      	bls.n	8004d40 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e077      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
 8004d32:	bf00      	nop
 8004d34:	58024400 	.word	0x58024400
 8004d38:	fffffc0c 	.word	0xfffffc0c
 8004d3c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d40:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e9      	bne.n	8004d20 <HAL_RCC_OscConfig+0x750>
 8004d4c:	e068      	b.n	8004e20 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d54:	4b35      	ldr	r3, [pc, #212]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d031      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d12a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d122      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d11a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0a5b      	lsrs	r3, r3, #9
 8004d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d111      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e02b      	b.n	8004e22 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004dca:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d01f      	beq.n	8004e20 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dec:	f7fc f9d0 	bl	8001190 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004df2:	bf00      	nop
 8004df4:	f7fc f9cc 	bl	8001190 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d0f9      	beq.n	8004df4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_RCC_OscConfig+0x860>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e0c:	00d2      	lsls	r2, r2, #3
 8004e0e:	4907      	ldr	r1, [pc, #28]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_RCC_OscConfig+0x85c>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3730      	adds	r7, #48	; 0x30
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	58024400 	.word	0x58024400
 8004e30:	ffff0007 	.word	0xffff0007

08004e34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e19c      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e48:	4b8a      	ldr	r3, [pc, #552]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d910      	bls.n	8004e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b87      	ldr	r3, [pc, #540]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 020f 	bic.w	r2, r3, #15
 8004e5e:	4985      	ldr	r1, [pc, #532]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e66:	4b83      	ldr	r3, [pc, #524]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e184      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d908      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e94:	4b78      	ldr	r3, [pc, #480]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4975      	ldr	r1, [pc, #468]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d010      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	4b70      	ldr	r3, [pc, #448]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d908      	bls.n	8004ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ec2:	4b6d      	ldr	r3, [pc, #436]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	496a      	ldr	r1, [pc, #424]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	4b64      	ldr	r3, [pc, #400]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d908      	bls.n	8004f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ef0:	4b61      	ldr	r3, [pc, #388]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	495e      	ldr	r1, [pc, #376]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	4b59      	ldr	r3, [pc, #356]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f1e:	4b56      	ldr	r3, [pc, #344]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4953      	ldr	r1, [pc, #332]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b4d      	ldr	r3, [pc, #308]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d908      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b4a      	ldr	r3, [pc, #296]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	f023 020f 	bic.w	r2, r3, #15
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	4947      	ldr	r1, [pc, #284]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d055      	beq.n	8005016 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f6a:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4940      	ldr	r1, [pc, #256]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0f6      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d115      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0ea      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fb4:	4b30      	ldr	r3, [pc, #192]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0de      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc4:	4b2c      	ldr	r3, [pc, #176]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0d6      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd4:	4b28      	ldr	r3, [pc, #160]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f023 0207 	bic.w	r2, r3, #7
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4925      	ldr	r1, [pc, #148]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fc f8d3 	bl	8001190 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fee:	f7fc f8cf 	bl	8001190 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0be      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005004:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	429a      	cmp	r2, r3
 8005014:	d1eb      	bne.n	8004fee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	429a      	cmp	r2, r3
 8005030:	d208      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f023 020f 	bic.w	r2, r3, #15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	490e      	ldr	r1, [pc, #56]	; (8005078 <HAL_RCC_ClockConfig+0x244>)
 8005040:	4313      	orrs	r3, r2
 8005042:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d214      	bcs.n	800507c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 020f 	bic.w	r2, r3, #15
 800505a:	4906      	ldr	r1, [pc, #24]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCC_ClockConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e086      	b.n	8005182 <HAL_RCC_ClockConfig+0x34e>
 8005074:	52002000 	.word	0x52002000
 8005078:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005094:	429a      	cmp	r2, r3
 8005096:	d208      	bcs.n	80050aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005098:	4b3c      	ldr	r3, [pc, #240]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	4939      	ldr	r1, [pc, #228]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d010      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	4b34      	ldr	r3, [pc, #208]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d208      	bcs.n	80050d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050c6:	4b31      	ldr	r3, [pc, #196]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	492e      	ldr	r1, [pc, #184]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d010      	beq.n	8005106 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699a      	ldr	r2, [r3, #24]
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d208      	bcs.n	8005106 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	4922      	ldr	r1, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 8005102:	4313      	orrs	r3, r2
 8005104:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800511e:	429a      	cmp	r2, r3
 8005120:	d208      	bcs.n	8005134 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4917      	ldr	r1, [pc, #92]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 8005130:	4313      	orrs	r3, r2
 8005132:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005134:	f000 f834 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8005138:	4602      	mov	r2, r0
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4912      	ldr	r1, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x35c>)
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <HAL_RCC_ClockConfig+0x358>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <HAL_RCC_ClockConfig+0x35c>)
 800515c:	5cd3      	ldrb	r3, [r2, r3]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x360>)
 800516a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800516c:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_RCC_ClockConfig+0x364>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCC_ClockConfig+0x368>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fb ffc0 	bl	80010fc <HAL_InitTick>
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005180:	7bfb      	ldrb	r3, [r7, #15]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
 8005190:	080093d4 	.word	0x080093d4
 8005194:	24000004 	.word	0x24000004
 8005198:	24000000 	.word	0x24000000
 800519c:	24000008 	.word	0x24000008

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b089      	sub	sp, #36	; 0x24
 80051a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051a6:	4bb3      	ldr	r3, [pc, #716]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ae:	2b18      	cmp	r3, #24
 80051b0:	f200 8155 	bhi.w	800545e <HAL_RCC_GetSysClockFreq+0x2be>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005221 	.word	0x08005221
 80051c0:	0800545f 	.word	0x0800545f
 80051c4:	0800545f 	.word	0x0800545f
 80051c8:	0800545f 	.word	0x0800545f
 80051cc:	0800545f 	.word	0x0800545f
 80051d0:	0800545f 	.word	0x0800545f
 80051d4:	0800545f 	.word	0x0800545f
 80051d8:	0800545f 	.word	0x0800545f
 80051dc:	08005247 	.word	0x08005247
 80051e0:	0800545f 	.word	0x0800545f
 80051e4:	0800545f 	.word	0x0800545f
 80051e8:	0800545f 	.word	0x0800545f
 80051ec:	0800545f 	.word	0x0800545f
 80051f0:	0800545f 	.word	0x0800545f
 80051f4:	0800545f 	.word	0x0800545f
 80051f8:	0800545f 	.word	0x0800545f
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800545f 	.word	0x0800545f
 8005204:	0800545f 	.word	0x0800545f
 8005208:	0800545f 	.word	0x0800545f
 800520c:	0800545f 	.word	0x0800545f
 8005210:	0800545f 	.word	0x0800545f
 8005214:	0800545f 	.word	0x0800545f
 8005218:	0800545f 	.word	0x0800545f
 800521c:	08005253 	.word	0x08005253
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005220:	4b94      	ldr	r3, [pc, #592]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800522c:	4b91      	ldr	r3, [pc, #580]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	4a90      	ldr	r2, [pc, #576]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800523e:	e111      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005240:	4b8d      	ldr	r3, [pc, #564]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005242:	61bb      	str	r3, [r7, #24]
      break;
 8005244:	e10e      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005246:	4b8d      	ldr	r3, [pc, #564]	; (800547c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005248:	61bb      	str	r3, [r7, #24]
      break;
 800524a:	e10b      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800524c:	4b8c      	ldr	r3, [pc, #560]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800524e:	61bb      	str	r3, [r7, #24]
      break;
 8005250:	e108      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005252:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800525c:	4b85      	ldr	r3, [pc, #532]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005266:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005268:	4b82      	ldr	r3, [pc, #520]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005272:	4b80      	ldr	r3, [pc, #512]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	08db      	lsrs	r3, r3, #3
 8005278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80e1 	beq.w	8005458 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b02      	cmp	r3, #2
 800529a:	f000 8083 	beq.w	80053a4 <HAL_RCC_GetSysClockFreq+0x204>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	f200 80a1 	bhi.w	80053e8 <HAL_RCC_GetSysClockFreq+0x248>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x114>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d056      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052b2:	e099      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b4:	4b6f      	ldr	r3, [pc, #444]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02d      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c0:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	4a6b      	ldr	r2, [pc, #428]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b62      	ldr	r3, [pc, #392]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800531a:	e087      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e8>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b51      	ldr	r3, [pc, #324]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005342:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800535e:	e065      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800548c <HAL_RCC_GetSysClockFreq+0x2ec>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b40      	ldr	r3, [pc, #256]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a02 	vldr	s12, [r7, #8]
 8005386:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053a2:	e043      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005490 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e6:	e021      	b.n	800542c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800548c <HAL_RCC_GetSysClockFreq+0x2ec>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a02 	vldr	s12, [r7, #8]
 800540e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800542c:	4b11      	ldr	r3, [pc, #68]	; (8005474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	0a5b      	lsrs	r3, r3, #9
 8005432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005436:	3301      	adds	r3, #1
 8005438:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005444:	edd7 6a07 	vldr	s13, [r7, #28]
 8005448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005450:	ee17 3a90 	vmov	r3, s15
 8005454:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005456:	e005      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	61bb      	str	r3, [r7, #24]
      break;
 800545c:	e002      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800545e:	4b07      	ldr	r3, [pc, #28]	; (800547c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005460:	61bb      	str	r3, [r7, #24]
      break;
 8005462:	bf00      	nop
  }

  return sysclockfreq;
 8005464:	69bb      	ldr	r3, [r7, #24]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3724      	adds	r7, #36	; 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	03d09000 	.word	0x03d09000
 800547c:	003d0900 	.word	0x003d0900
 8005480:	016e3600 	.word	0x016e3600
 8005484:	46000000 	.word	0x46000000
 8005488:	4c742400 	.word	0x4c742400
 800548c:	4a742400 	.word	0x4a742400
 8005490:	4bb71b00 	.word	0x4bb71b00

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800549a:	f7ff fe81 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490f      	ldr	r1, [pc, #60]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a07      	ldr	r2, [pc, #28]	; (80054ec <HAL_RCC_GetHCLKFreq+0x58>)
 80054d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <HAL_RCC_GetHCLKFreq+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	080093d4 	.word	0x080093d4
 80054ec:	24000004 	.word	0x24000004
 80054f0:	24000000 	.word	0x24000000

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80054f8:	f7ff ffcc 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4904      	ldr	r1, [pc, #16]	; (800551c <HAL_RCC_GetPCLK1Freq+0x28>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	58024400 	.word	0x58024400
 800551c:	080093d4 	.word	0x080093d4

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005524:	f7ff ffb6 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 8005528:	4602      	mov	r2, r0
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4904      	ldr	r1, [pc, #16]	; (8005548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005536:	5ccb      	ldrb	r3, [r1, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005540:	4618      	mov	r0, r3
 8005542:	bd80      	pop	{r7, pc}
 8005544:	58024400 	.word	0x58024400
 8005548:	080093d4 	.word	0x080093d4

0800554c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b0c8      	sub	sp, #288	; 0x120
 8005552:	af00      	add	r7, sp, #0
 8005554:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005558:	2300      	movs	r3, #0
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800555e:	2300      	movs	r3, #0
 8005560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005570:	2500      	movs	r5, #0
 8005572:	ea54 0305 	orrs.w	r3, r4, r5
 8005576:	d049      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800557c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800557e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005582:	d02f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005588:	d828      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800558a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800558e:	d01a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005594:	d822      	bhi.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559e:	d007      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055a0:	e01c      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a2:	4ba7      	ldr	r3, [pc, #668]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	4aa6      	ldr	r2, [pc, #664]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055ae:	e01a      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80055b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b4:	3308      	adds	r3, #8
 80055b6:	2102      	movs	r1, #2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 fc43 	bl	8006e44 <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055c4:	e00f      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	3328      	adds	r3, #40	; 0x28
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f001 fcea 	bl	8006fa8 <RCCEx_PLL3_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055da:	e004      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055e2:	e000      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055ee:	4b94      	ldr	r3, [pc, #592]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80055f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fc:	4a90      	ldr	r2, [pc, #576]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6513      	str	r3, [r2, #80]	; 0x50
 8005602:	e003      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800560c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	ea58 0309 	orrs.w	r3, r8, r9
 8005620:	d047      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	2b04      	cmp	r3, #4
 800562a:	d82a      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005649 	.word	0x08005649
 8005638:	08005657 	.word	0x08005657
 800563c:	0800566d 	.word	0x0800566d
 8005640:	0800568b 	.word	0x0800568b
 8005644:	0800568b 	.word	0x0800568b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b7d      	ldr	r3, [pc, #500]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a7c      	ldr	r2, [pc, #496]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005654:	e01a      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565a:	3308      	adds	r3, #8
 800565c:	2100      	movs	r1, #0
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fbf0 	bl	8006e44 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800566a:	e00f      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005670:	3328      	adds	r3, #40	; 0x28
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fc97 	bl	8006fa8 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005680:	e004      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005688:	e000      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800568a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005698:	f023 0107 	bic.w	r1, r3, #7
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	4a67      	ldr	r2, [pc, #412]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	6513      	str	r3, [r2, #80]	; 0x50
 80056a8:	e003      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80056b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80056be:	f04f 0b00 	mov.w	fp, #0
 80056c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80056c6:	d054      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80056d2:	d036      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80056d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80056d8:	d82f      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056de:	d032      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80056e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e4:	d829      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056e6:	2bc0      	cmp	r3, #192	; 0xc0
 80056e8:	d02f      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80056ea:	2bc0      	cmp	r3, #192	; 0xc0
 80056ec:	d825      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056ee:	2b80      	cmp	r3, #128	; 0x80
 80056f0:	d018      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d821      	bhi.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d007      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80056fe:	e01c      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005700:	4b4f      	ldr	r3, [pc, #316]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4a4e      	ldr	r2, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800570a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800570c:	e01e      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005712:	3308      	adds	r3, #8
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 fb94 	bl	8006e44 <RCCEx_PLL2_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005722:	e013      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	3328      	adds	r3, #40	; 0x28
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fc3b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005738:	e008      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005740:	e004      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800574a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005754:	4b3a      	ldr	r3, [pc, #232]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005758:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005762:	4a37      	ldr	r2, [pc, #220]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6513      	str	r3, [r2, #80]	; 0x50
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800576e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800577e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005788:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d05c      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005798:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800579c:	d03b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800579e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057a2:	d834      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a8:	d037      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d82e      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057b4:	d033      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057ba:	d828      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c0:	d01a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d822      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d007      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80057d2:	e01c      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a19      	ldr	r2, [pc, #100]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057e0:	e01e      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e6:	3308      	adds	r3, #8
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fb2a 	bl	8006e44 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80057f6:	e013      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	3328      	adds	r3, #40	; 0x28
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fbd1 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10d      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005836:	4a02      	ldr	r2, [pc, #8]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6513      	str	r3, [r2, #80]	; 0x50
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005848:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005862:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005866:	460b      	mov	r3, r1
 8005868:	4313      	orrs	r3, r2
 800586a:	d03a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	2b30      	cmp	r3, #48	; 0x30
 8005874:	d01f      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d819      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800587a:	2b20      	cmp	r3, #32
 800587c:	d00c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d815      	bhi.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d019      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005886:	2b10      	cmp	r3, #16
 8005888:	d111      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4bae      	ldr	r3, [pc, #696]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	4aad      	ldr	r2, [pc, #692]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589c:	3308      	adds	r3, #8
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 facf 	bl	8006e44 <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80058c4:	4b9f      	ldr	r3, [pc, #636]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d2:	4a9c      	ldr	r2, [pc, #624]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80058ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d051      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800590c:	d035      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800590e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005912:	d82e      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005914:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005918:	d031      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800591a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800591e:	d828      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005924:	d01a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	d822      	bhi.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d007      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005936:	e01c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005938:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	4a81      	ldr	r2, [pc, #516]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005944:	e01c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594a:	3308      	adds	r3, #8
 800594c:	2100      	movs	r1, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fa78 	bl	8006e44 <RCCEx_PLL2_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800595a:	e011      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005960:	3328      	adds	r3, #40	; 0x28
 8005962:	2100      	movs	r1, #0
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fb1f 	bl	8006fa8 <RCCEx_PLL3_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800597e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005988:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005996:	4a6b      	ldr	r2, [pc, #428]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005998:	430b      	orrs	r3, r1
 800599a:	6513      	str	r3, [r2, #80]	; 0x50
 800599c:	e003      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80059b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80059c0:	460b      	mov	r3, r1
 80059c2:	4313      	orrs	r3, r2
 80059c4:	d053      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80059c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d0:	d033      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80059d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d6:	d82c      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059dc:	d02f      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80059de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e2:	d826      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059e8:	d02b      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80059ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059ee:	d820      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f4:	d012      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80059f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059fa:	d81a      	bhi.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a04:	d115      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fa18 	bl	8006e44 <RCCEx_PLL2_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e015      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a20:	3328      	adds	r3, #40	; 0x28
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fabf 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a50:	4b3c      	ldr	r3, [pc, #240]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5e:	4a39      	ldr	r2, [pc, #228]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6513      	str	r3, [r2, #80]	; 0x50
 8005a64:	e003      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	d060      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a96:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005a9a:	d039      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005a9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005aa0:	d832      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa6:	d035      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aac:	d82c      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab2:	d031      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab8:	d826      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005abe:	d02d      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ac4:	d820      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aca:	d012      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad0:	d81a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d024      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ada:	d115      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f9ad 	bl	8006e44 <RCCEx_PLL2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005af0:	e017      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af6:	3328      	adds	r3, #40	; 0x28
 8005af8:	2101      	movs	r1, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 fa54 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b06:	e00c      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b0e:	e008      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b10:	bf00      	nop
 8005b12:	e006      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b14:	bf00      	nop
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b3a:	4a02      	ldr	r2, [pc, #8]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	d037      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d00e      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b80:	d816      	bhi.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d018      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8a:	d111      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b8c:	4bc4      	ldr	r3, [pc, #784]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	4ac3      	ldr	r2, [pc, #780]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b98:	e00f      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 f94e 	bl	8006e44 <RCCEx_PLL2_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bae:	e004      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005bb6:	e000      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bc2:	4bb7      	ldr	r3, [pc, #732]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bd0:	4ab3      	ldr	r2, [pc, #716]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	6513      	str	r3, [r2, #80]	; 0x50
 8005bd6:	e003      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bf6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	d039      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d81c      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c21 	.word	0x08005c21
 8005c18:	08005c2f 	.word	0x08005c2f
 8005c1c:	08005c4d 	.word	0x08005c4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c20:	4b9f      	ldr	r3, [pc, #636]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	4a9e      	ldr	r2, [pc, #632]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c2c:	e00f      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c32:	3308      	adds	r3, #8
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f904 	bl	8006e44 <RCCEx_PLL2_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c42:	e004      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c4a:	e000      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c56:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	f023 0103 	bic.w	r1, r3, #3
 8005c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c64:	4a8e      	ldr	r2, [pc, #568]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f000 8099 	beq.w	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c96:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a82      	ldr	r2, [pc, #520]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca2:	f7fb fa75 	bl	8001190 <HAL_GetTick>
 8005ca6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005caa:	e00b      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cac:	f7fb fa70 	bl	8001190 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b64      	cmp	r3, #100	; 0x64
 8005cba:	d903      	bls.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc4:	4b77      	ldr	r3, [pc, #476]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0ed      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d173      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005cd8:	4b71      	ldr	r3, [pc, #452]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ce4:	4053      	eors	r3, r2
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d015      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cee:	4b6c      	ldr	r3, [pc, #432]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cfa:	4b69      	ldr	r3, [pc, #420]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	4a68      	ldr	r2, [pc, #416]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d06:	4b66      	ldr	r3, [pc, #408]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	4a65      	ldr	r2, [pc, #404]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d12:	4a63      	ldr	r2, [pc, #396]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d26:	d118      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fb fa32 	bl	8001190 <HAL_GetTick>
 8005d2c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d30:	e00d      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d32:	f7fb fa2d 	bl	8001190 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d903      	bls.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4e:	4b54      	ldr	r3, [pc, #336]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0eb      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d129      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d72:	d10e      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005d74:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d84:	091a      	lsrs	r2, r3, #4
 8005d86:	4b48      	ldr	r3, [pc, #288]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	4a45      	ldr	r2, [pc, #276]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6113      	str	r3, [r2, #16]
 8005d90:	e005      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005d92:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	4a42      	ldr	r2, [pc, #264]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d9c:	6113      	str	r3, [r2, #16]
 8005d9e:	4b40      	ldr	r3, [pc, #256]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005da0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dae:	4a3c      	ldr	r2, [pc, #240]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
 8005db4:	e008      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005db6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005dbe:	e003      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f002 0301 	and.w	r3, r2, #1
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005dde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f000 8090 	beq.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	2b28      	cmp	r3, #40	; 0x28
 8005df4:	d870      	bhi.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005ee1 	.word	0x08005ee1
 8005e00:	08005ed9 	.word	0x08005ed9
 8005e04:	08005ed9 	.word	0x08005ed9
 8005e08:	08005ed9 	.word	0x08005ed9
 8005e0c:	08005ed9 	.word	0x08005ed9
 8005e10:	08005ed9 	.word	0x08005ed9
 8005e14:	08005ed9 	.word	0x08005ed9
 8005e18:	08005ed9 	.word	0x08005ed9
 8005e1c:	08005ead 	.word	0x08005ead
 8005e20:	08005ed9 	.word	0x08005ed9
 8005e24:	08005ed9 	.word	0x08005ed9
 8005e28:	08005ed9 	.word	0x08005ed9
 8005e2c:	08005ed9 	.word	0x08005ed9
 8005e30:	08005ed9 	.word	0x08005ed9
 8005e34:	08005ed9 	.word	0x08005ed9
 8005e38:	08005ed9 	.word	0x08005ed9
 8005e3c:	08005ec3 	.word	0x08005ec3
 8005e40:	08005ed9 	.word	0x08005ed9
 8005e44:	08005ed9 	.word	0x08005ed9
 8005e48:	08005ed9 	.word	0x08005ed9
 8005e4c:	08005ed9 	.word	0x08005ed9
 8005e50:	08005ed9 	.word	0x08005ed9
 8005e54:	08005ed9 	.word	0x08005ed9
 8005e58:	08005ed9 	.word	0x08005ed9
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08005ed9 	.word	0x08005ed9
 8005e64:	08005ed9 	.word	0x08005ed9
 8005e68:	08005ed9 	.word	0x08005ed9
 8005e6c:	08005ed9 	.word	0x08005ed9
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08005ed9 	.word	0x08005ed9
 8005e7c:	08005ee1 	.word	0x08005ee1
 8005e80:	08005ed9 	.word	0x08005ed9
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	08005ed9 	.word	0x08005ed9
 8005e90:	08005ed9 	.word	0x08005ed9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58024800 	.word	0x58024800
 8005ea8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 ffc5 	bl	8006e44 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ec0:	e00f      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec6:	3328      	adds	r3, #40	; 0x28
 8005ec8:	2101      	movs	r1, #1
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f86c 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ed6:	e004      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ede:	e000      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005eea:	4bc0      	ldr	r3, [pc, #768]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efa:	4abc      	ldr	r2, [pc, #752]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6553      	str	r3, [r2, #84]	; 0x54
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f002 0302 	and.w	r3, r2, #2
 8005f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f20:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d043      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d824      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f55 	.word	0x08005f55
 8005f44:	08005f6b 	.word	0x08005f6b
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ff71 	bl	8006e44 <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f68:	e00f      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	3328      	adds	r3, #40	; 0x28
 8005f70:	2101      	movs	r1, #1
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 f818 	bl	8006fa8 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e004      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f92:	4b96      	ldr	r3, [pc, #600]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f023 0107 	bic.w	r1, r3, #7
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	4a92      	ldr	r2, [pc, #584]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6553      	str	r3, [r2, #84]	; 0x54
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f002 0304 	and.w	r3, r2, #4
 8005fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fc8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d043      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d824      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005fde:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08005ffd 	.word	0x08005ffd
 8005fec:	08006013 	.word	0x08006013
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006031 	.word	0x08006031
 8005ff8:	08006031 	.word	0x08006031
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006000:	3308      	adds	r3, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f000 ff1d 	bl	8006e44 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006010:	e00f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006016:	3328      	adds	r3, #40	; 0x28
 8006018:	2101      	movs	r1, #1
 800601a:	4618      	mov	r0, r3
 800601c:	f000 ffc4 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800603a:	4b6c      	ldr	r3, [pc, #432]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	f023 0107 	bic.w	r1, r3, #7
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800604a:	4a68      	ldr	r2, [pc, #416]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800604c:	430b      	orrs	r3, r1
 800604e:	6593      	str	r3, [r2, #88]	; 0x58
 8006050:	e003      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006052:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006056:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f002 0320 	and.w	r3, r2, #32
 8006066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800606a:	2300      	movs	r3, #0
 800606c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006074:	460b      	mov	r3, r1
 8006076:	4313      	orrs	r3, r2
 8006078:	d055      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006086:	d033      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800608c:	d82c      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d826      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800609a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800609e:	d02b      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80060a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060a4:	d820      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060aa:	d012      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b0:	d81a      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d022      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ba:	d115      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c0:	3308      	adds	r3, #8
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 febd 	bl	8006e44 <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060d0:	e015      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d6:	3328      	adds	r3, #40	; 0x28
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 ff64 	bl	8006fa8 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80060e6:	e00a      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060ee:	e006      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006106:	4b39      	ldr	r3, [pc, #228]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006116:	4a35      	ldr	r2, [pc, #212]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006118:	430b      	orrs	r3, r1
 800611a:	6553      	str	r3, [r2, #84]	; 0x54
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006122:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006136:	2300      	movs	r3, #0
 8006138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800613c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006140:	460b      	mov	r3, r1
 8006142:	4313      	orrs	r3, r2
 8006144:	d058      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800614e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006152:	d033      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006154:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006158:	d82c      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d02f      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d826      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800616a:	d02b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800616c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006170:	d820      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d012      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d81a      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d022      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006186:	d115      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618c:	3308      	adds	r3, #8
 800618e:	2100      	movs	r1, #0
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fe57 	bl	8006e44 <RCCEx_PLL2_Config>
 8006196:	4603      	mov	r3, r0
 8006198:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800619c:	e015      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800619e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a2:	3328      	adds	r3, #40	; 0x28
 80061a4:	2102      	movs	r1, #2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fefe 	bl	8006fa8 <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061b2:	e00a      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061ba:	e006      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061bc:	bf00      	nop
 80061be:	e004      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c0:	bf00      	nop
 80061c2:	e002      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c4:	bf00      	nop
 80061c6:	e000      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80061d2:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80061da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061e2:	4a02      	ldr	r2, [pc, #8]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6593      	str	r3, [r2, #88]	; 0x58
 80061e8:	e006      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80061ea:	bf00      	nop
 80061ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006208:	2300      	movs	r3, #0
 800620a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800620e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d055      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006220:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006224:	d033      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006226:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800622a:	d82c      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006230:	d02f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006236:	d826      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800623c:	d02b      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800623e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006242:	d820      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006248:	d012      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624e:	d81a      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d022      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006258:	d115      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625e:	3308      	adds	r3, #8
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fdee 	bl	8006e44 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800626e:	e015      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006274:	3328      	adds	r3, #40	; 0x28
 8006276:	2102      	movs	r1, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fe95 	bl	8006fa8 <RCCEx_PLL3_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006284:	e00a      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800628e:	bf00      	nop
 8006290:	e004      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006292:	bf00      	nop
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062a4:	4ba1      	ldr	r3, [pc, #644]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80062ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062b4:	4a9d      	ldr	r2, [pc, #628]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6593      	str	r3, [r2, #88]	; 0x58
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f002 0308 	and.w	r3, r2, #8
 80062d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80062de:	460b      	mov	r3, r1
 80062e0:	4313      	orrs	r3, r2
 80062e2:	d01e      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f6:	3328      	adds	r3, #40	; 0x28
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fe54 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800630c:	4b87      	ldr	r3, [pc, #540]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800630e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006310:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800631c:	4a83      	ldr	r2, [pc, #524]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f002 0310 	and.w	r3, r2, #16
 800632e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006338:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d01e      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800634a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634e:	d10c      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006354:	3328      	adds	r3, #40	; 0x28
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fe25 	bl	8006fa8 <RCCEx_PLL3_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800636a:	4b70      	ldr	r3, [pc, #448]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800637a:	4a6c      	ldr	r2, [pc, #432]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800637c:	430b      	orrs	r3, r1
 800637e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800638c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006396:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d03e      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ac:	d022      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80063ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b2:	d81b      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d00b      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80063be:	e015      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c4:	3308      	adds	r3, #8
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fd3b 	bl	8006e44 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063d4:	e00f      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	3328      	adds	r3, #40	; 0x28
 80063dc:	2102      	movs	r1, #2
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fde2 	bl	8006fa8 <RCCEx_PLL3_Config>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063ea:	e004      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063f2:	e000      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80063f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063fe:	4b4b      	ldr	r3, [pc, #300]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800640e:	4a47      	ldr	r2, [pc, #284]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006410:	430b      	orrs	r3, r1
 8006412:	6593      	str	r3, [r2, #88]	; 0x58
 8006414:	e003      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006416:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800641a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800642a:	67bb      	str	r3, [r7, #120]	; 0x78
 800642c:	2300      	movs	r3, #0
 800642e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006430:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006434:	460b      	mov	r3, r1
 8006436:	4313      	orrs	r3, r2
 8006438:	d03b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800643a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006446:	d01f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800644c:	d818      	bhi.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006458:	d007      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006468:	e00f      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800646a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646e:	3328      	adds	r3, #40	; 0x28
 8006470:	2101      	movs	r1, #1
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fd98 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800647e:	e004      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800648a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10b      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800649a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a2:	4a22      	ldr	r2, [pc, #136]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6553      	str	r3, [r2, #84]	; 0x54
 80064a8:	e003      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80064be:	673b      	str	r3, [r7, #112]	; 0x70
 80064c0:	2300      	movs	r3, #0
 80064c2:	677b      	str	r3, [r7, #116]	; 0x74
 80064c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80064c8:	460b      	mov	r3, r1
 80064ca:	4313      	orrs	r3, r2
 80064cc:	d034      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80064ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d007      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80064de:	e011      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e0:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	4a11      	ldr	r2, [pc, #68]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ec:	e00e      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f2:	3308      	adds	r3, #8
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fca4 	bl	8006e44 <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800651c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006522:	4a02      	ldr	r2, [pc, #8]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006524:	430b      	orrs	r3, r1
 8006526:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006528:	e006      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006534:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
 8006546:	2300      	movs	r3, #0
 8006548:	66fb      	str	r3, [r7, #108]	; 0x6c
 800654a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d00c      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006558:	3328      	adds	r3, #40	; 0x28
 800655a:	2102      	movs	r1, #2
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fd23 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800657a:	663b      	str	r3, [r7, #96]	; 0x60
 800657c:	2300      	movs	r3, #0
 800657e:	667b      	str	r3, [r7, #100]	; 0x64
 8006580:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006584:	460b      	mov	r3, r1
 8006586:	4313      	orrs	r3, r2
 8006588:	d038      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800658a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d018      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659c:	d811      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a2:	d014      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d80b      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065b4:	4bc3      	ldr	r3, [pc, #780]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4ac2      	ldr	r2, [pc, #776]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80065c0:	e008      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065c8:	e004      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80065d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065dc:	4bb9      	ldr	r3, [pc, #740]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ec:	4ab5      	ldr	r2, [pc, #724]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6553      	str	r3, [r2, #84]	; 0x54
 80065f2:	e003      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006608:	65bb      	str	r3, [r7, #88]	; 0x58
 800660a:	2300      	movs	r3, #0
 800660c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800660e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006618:	4baa      	ldr	r3, [pc, #680]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006626:	4aa7      	ldr	r2, [pc, #668]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006628:	430b      	orrs	r3, r1
 800662a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800662c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006638:	653b      	str	r3, [r7, #80]	; 0x50
 800663a:	2300      	movs	r3, #0
 800663c:	657b      	str	r3, [r7, #84]	; 0x54
 800663e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006642:	460b      	mov	r3, r1
 8006644:	4313      	orrs	r3, r2
 8006646:	d009      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006648:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4a9b      	ldr	r2, [pc, #620]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006668:	64bb      	str	r3, [r7, #72]	; 0x48
 800666a:	2300      	movs	r3, #0
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006672:	460b      	mov	r3, r1
 8006674:	4313      	orrs	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006678:	4b92      	ldr	r3, [pc, #584]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006686:	4a8f      	ldr	r2, [pc, #572]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006698:	643b      	str	r3, [r7, #64]	; 0x40
 800669a:	2300      	movs	r3, #0
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
 800669e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066a8:	4b86      	ldr	r3, [pc, #536]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	4a85      	ldr	r2, [pc, #532]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066b2:	6113      	str	r3, [r2, #16]
 80066b4:	4b83      	ldr	r3, [pc, #524]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066b6:	6919      	ldr	r1, [r3, #16]
 80066b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80066c0:	4a80      	ldr	r2, [pc, #512]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80066d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066d4:	2300      	movs	r3, #0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066e2:	4b78      	ldr	r3, [pc, #480]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80066ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f0:	4a74      	ldr	r2, [pc, #464]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
 8006704:	2300      	movs	r3, #0
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
 8006708:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006712:	4b6c      	ldr	r3, [pc, #432]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800671a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800671e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006722:	4a68      	ldr	r2, [pc, #416]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	2100      	movs	r1, #0
 8006732:	62b9      	str	r1, [r7, #40]	; 0x28
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	d011      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006748:	3308      	adds	r3, #8
 800674a:	2100      	movs	r1, #0
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fb79 	bl	8006e44 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006764:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	2100      	movs	r1, #0
 8006772:	6239      	str	r1, [r7, #32]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d011      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006788:	3308      	adds	r3, #8
 800678a:	2101      	movs	r1, #1
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fb59 	bl	8006e44 <RCCEx_PLL2_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	2100      	movs	r1, #0
 80067b2:	61b9      	str	r1, [r7, #24]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d011      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c8:	3308      	adds	r3, #8
 80067ca:	2102      	movs	r1, #2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb39 	bl	8006e44 <RCCEx_PLL2_Config>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80067d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	2100      	movs	r1, #0
 80067f2:	6139      	str	r1, [r7, #16]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d011      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006808:	3328      	adds	r3, #40	; 0x28
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fbcb 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006820:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006824:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006830:	2100      	movs	r1, #0
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	f003 0310 	and.w	r3, r3, #16
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800683e:	460b      	mov	r3, r1
 8006840:	4313      	orrs	r3, r2
 8006842:	d011      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006848:	3328      	adds	r3, #40	; 0x28
 800684a:	2101      	movs	r1, #1
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fbab 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006852:	4603      	mov	r3, r0
 8006854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	2100      	movs	r1, #0
 8006872:	6039      	str	r1, [r7, #0]
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800687e:	460b      	mov	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	d011      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006888:	3328      	adds	r3, #40	; 0x28
 800688a:	2102      	movs	r1, #2
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fb8b 	bl	8006fa8 <RCCEx_PLL3_Config>
 8006892:	4603      	mov	r3, r0
 8006894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80068a8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	e000      	b.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80068bc:	46bd      	mov	sp, r7
 80068be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c2:	bf00      	nop
 80068c4:	58024400 	.word	0x58024400

080068c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80068cc:	f7fe fde2 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4904      	ldr	r1, [pc, #16]	; (80068f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	58024400 	.word	0x58024400
 80068f0:	080093d4 	.word	0x080093d4

080068f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068fc:	4ba1      	ldr	r3, [pc, #644]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006906:	4b9f      	ldr	r3, [pc, #636]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	0b1b      	lsrs	r3, r3, #12
 800690c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006910:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006912:	4b9c      	ldr	r3, [pc, #624]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	091b      	lsrs	r3, r3, #4
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800691e:	4b99      	ldr	r3, [pc, #612]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	08db      	lsrs	r3, r3, #3
 8006924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 8111 	beq.w	8006b64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b02      	cmp	r3, #2
 8006946:	f000 8083 	beq.w	8006a50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b02      	cmp	r3, #2
 800694e:	f200 80a1 	bhi.w	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d056      	beq.n	8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800695e:	e099      	b.n	8006a94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006960:	4b88      	ldr	r3, [pc, #544]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02d      	beq.n	80069c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800696c:	4b85      	ldr	r3, [pc, #532]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	08db      	lsrs	r3, r3, #3
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	4a84      	ldr	r2, [pc, #528]	; (8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006996:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069c6:	e087      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069da:	4b6a      	ldr	r3, [pc, #424]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	ee07 3a90 	vmov	s15, r3
 80069e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0a:	e065      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1e:	4b59      	ldr	r3, [pc, #356]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a4e:	e043      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b48      	ldr	r3, [pc, #288]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a92:	e021      	b.n	8006ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ad6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	0a5b      	lsrs	r3, r3, #9
 8006ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b06:	4b1f      	ldr	r3, [pc, #124]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b2c:	ee17 2a90 	vmov	r2, s15
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	0e1b      	lsrs	r3, r3, #24
 8006b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5a:	ee17 2a90 	vmov	r2, s15
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	bf00      	nop
 8006b78:	3724      	adds	r7, #36	; 0x24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	58024400 	.word	0x58024400
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	46000000 	.word	0x46000000
 8006b90:	4c742400 	.word	0x4c742400
 8006b94:	4a742400 	.word	0x4a742400
 8006b98:	4bb71b00 	.word	0x4bb71b00

08006b9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba4:	4ba1      	ldr	r3, [pc, #644]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bae:	4b9f      	ldr	r3, [pc, #636]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb2:	0d1b      	lsrs	r3, r3, #20
 8006bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bba:	4b9c      	ldr	r3, [pc, #624]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006bc6:	4b99      	ldr	r3, [pc, #612]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	08db      	lsrs	r3, r3, #3
 8006bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	fb02 f303 	mul.w	r3, r2, r3
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8111 	beq.w	8006e0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	f000 8083 	beq.w	8006cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	f200 80a1 	bhi.w	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d056      	beq.n	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c06:	e099      	b.n	8006d3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c08:	4b88      	ldr	r3, [pc, #544]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02d      	beq.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c14:	4b85      	ldr	r3, [pc, #532]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	08db      	lsrs	r3, r3, #3
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	4a84      	ldr	r2, [pc, #528]	; (8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
 8006c24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3e:	4b7b      	ldr	r3, [pc, #492]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c6e:	e087      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c82:	4b6a      	ldr	r3, [pc, #424]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8a:	ee07 3a90 	vmov	s15, r3
 8006c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb2:	e065      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf6:	e043      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3a:	e021      	b.n	8006d80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b37      	ldr	r3, [pc, #220]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d80:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006dae:	4b1f      	ldr	r3, [pc, #124]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ddc:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	3724      	adds	r7, #36	; 0x24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4c742400 	.word	0x4c742400
 8006e3c:	4a742400 	.word	0x4a742400
 8006e40:	4bb71b00 	.word	0x4bb71b00

08006e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e52:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d101      	bne.n	8006e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e099      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e62:	4b4f      	ldr	r3, [pc, #316]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6e:	f7fa f98f 	bl	8001190 <HAL_GetTick>
 8006e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e76:	f7fa f98b 	bl	8001190 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e086      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e88:	4b45      	ldr	r3, [pc, #276]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e94:	4b42      	ldr	r3, [pc, #264]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	493f      	ldr	r1, [pc, #252]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	025b      	lsls	r3, r3, #9
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ed8:	4931      	ldr	r1, [pc, #196]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ede:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	492d      	ldr	r1, [pc, #180]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f023 0220 	bic.w	r2, r3, #32
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	4928      	ldr	r1, [pc, #160]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f02:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f0e:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <RCCEx_PLL2_Config+0x160>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	69d2      	ldr	r2, [r2, #28]
 8006f1a:	00d2      	lsls	r2, r2, #3
 8006f1c:	4920      	ldr	r1, [pc, #128]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f22:	4b1f      	ldr	r3, [pc, #124]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	f043 0310 	orr.w	r3, r3, #16
 8006f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f40:	e00f      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d106      	bne.n	8006f56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f48:	4b15      	ldr	r3, [pc, #84]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a14      	ldr	r2, [pc, #80]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f54:	e005      	b.n	8006f62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f56:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6e:	f7fa f90f 	bl	8001190 <HAL_GetTick>
 8006f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f76:	f7fa f90b 	bl	8001190 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e006      	b.n	8006f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400
 8006fa4:	ffff0007 	.word	0xffff0007

08006fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fb6:	4b53      	ldr	r3, [pc, #332]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d101      	bne.n	8006fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e099      	b.n	80070fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4e      	ldr	r2, [pc, #312]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fa f8dd 	bl	8001190 <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fda:	f7fa f8d9 	bl	8001190 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e086      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fec:	4b45      	ldr	r3, [pc, #276]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1f0      	bne.n	8006fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ff8:	4b42      	ldr	r3, [pc, #264]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	051b      	lsls	r3, r3, #20
 8007006:	493f      	ldr	r1, [pc, #252]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	628b      	str	r3, [r1, #40]	; 0x28
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	025b      	lsls	r3, r3, #9
 800701e:	b29b      	uxth	r3, r3
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	3b01      	subs	r3, #1
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	3b01      	subs	r3, #1
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800703c:	4931      	ldr	r1, [pc, #196]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007042:	4b30      	ldr	r3, [pc, #192]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	492d      	ldr	r1, [pc, #180]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007054:	4b2b      	ldr	r3, [pc, #172]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	4928      	ldr	r1, [pc, #160]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	4a26      	ldr	r2, [pc, #152]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800706c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <RCCEx_PLL3_Config+0x160>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	69d2      	ldr	r2, [r2, #28]
 800707e:	00d2      	lsls	r2, r2, #3
 8007080:	4920      	ldr	r1, [pc, #128]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007086:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800708c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007098:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 800709e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070a4:	e00f      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d106      	bne.n	80070ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070ac:	4b15      	ldr	r3, [pc, #84]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b0:	4a14      	ldr	r2, [pc, #80]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a11      	ldr	r2, [pc, #68]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a0e      	ldr	r2, [pc, #56]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d2:	f7fa f85d 	bl	8001190 <HAL_GetTick>
 80070d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070d8:	e008      	b.n	80070ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070da:	f7fa f859 	bl	8001190 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	ffff0007 	.word	0xffff0007

0800710c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e042      	b.n	80071a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	2b00      	cmp	r3, #0
 8007126:	d106      	bne.n	8007136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7f9 fde7 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fc98 	bl	8007a84 <UART_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e022      	b.n	80071a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 faf8 	bl	800875c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800717a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689a      	ldr	r2, [r3, #8]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800718a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0201 	orr.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fb7f 	bl	80088a0 <UART_CheckIdleState>
 80071a2:	4603      	mov	r3, r0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d167      	bne.n	8007294 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_UART_Transmit_DMA+0x24>
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e060      	b.n	8007296 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2221      	movs	r2, #33	; 0x21
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d028      	beq.n	8007254 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007206:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <HAL_UART_Transmit_DMA+0xf4>)
 8007208:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <HAL_UART_Transmit_DMA+0xf8>)
 8007210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007216:	4a24      	ldr	r2, [pc, #144]	; (80072a8 <HAL_UART_Transmit_DMA+0xfc>)
 8007218:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721e:	2200      	movs	r2, #0
 8007220:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	4619      	mov	r1, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3328      	adds	r3, #40	; 0x28
 8007232:	461a      	mov	r2, r3
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	f7fa fc57 	bl	8001ae8 <HAL_DMA_Start_IT>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2210      	movs	r2, #16
 8007244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e020      	b.n	8007296 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2240      	movs	r2, #64	; 0x40
 800725a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	613b      	str	r3, [r7, #16]
   return(result);
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727c:	623a      	str	r2, [r7, #32]
 800727e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	69f9      	ldr	r1, [r7, #28]
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	61bb      	str	r3, [r7, #24]
   return(result);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e5      	bne.n	800725c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3728      	adds	r7, #40	; 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	08008d61 	.word	0x08008d61
 80072a4:	08008df7 	.word	0x08008df7
 80072a8:	08008f79 	.word	0x08008f79

080072ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b0ba      	sub	sp, #232	; 0xe8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80072da:	4013      	ands	r3, r2
 80072dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11b      	bne.n	8007320 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d015      	beq.n	8007320 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d009      	beq.n	8007320 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8377 	beq.w	8007a04 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
      }
      return;
 800731e:	e371      	b.n	8007a04 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8123 	beq.w	8007570 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800732a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800732e:	4b8d      	ldr	r3, [pc, #564]	; (8007564 <HAL_UART_IRQHandler+0x2b8>)
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800733a:	4b8b      	ldr	r3, [pc, #556]	; (8007568 <HAL_UART_IRQHandler+0x2bc>)
 800733c:	4013      	ands	r3, r2
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8116 	beq.w	8007570 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d011      	beq.n	8007374 <HAL_UART_IRQHandler+0xc8>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d011      	beq.n	80073a4 <HAL_UART_IRQHandler+0xf8>
 8007380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2202      	movs	r2, #2
 8007392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739a:	f043 0204 	orr.w	r2, r3, #4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d011      	beq.n	80073d4 <HAL_UART_IRQHandler+0x128>
 80073b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2204      	movs	r2, #4
 80073c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f043 0202 	orr.w	r2, r3, #2
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d017      	beq.n	8007410 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80073ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073f0:	4b5c      	ldr	r3, [pc, #368]	; (8007564 <HAL_UART_IRQHandler+0x2b8>)
 80073f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2208      	movs	r2, #8
 80073fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f043 0208 	orr.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <HAL_UART_IRQHandler+0x196>
 800741c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00c      	beq.n	8007442 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 82dd 	beq.w	8007a08 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800744e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d013      	beq.n	8007482 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800745a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d105      	bne.n	8007472 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007496:	2b40      	cmp	r3, #64	; 0x40
 8007498:	d005      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800749a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800749e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d054      	beq.n	8007550 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fbf4 	bl	8008c94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d146      	bne.n	8007548 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1d9      	bne.n	80074ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007516:	4a15      	ldr	r2, [pc, #84]	; (800756c <HAL_UART_IRQHandler+0x2c0>)
 8007518:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007520:	4618      	mov	r0, r3
 8007522:	f7fb f869 	bl	80025f8 <HAL_DMA_Abort_IT>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d019      	beq.n	8007560 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800753a:	4610      	mov	r0, r2
 800753c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753e:	e00f      	b.n	8007560 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa95 	bl	8007a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007546:	e00b      	b.n	8007560 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa91 	bl	8007a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754e:	e007      	b.n	8007560 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa8d 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800755e:	e253      	b.n	8007a08 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	bf00      	nop
    return;
 8007562:	e251      	b.n	8007a08 <HAL_UART_IRQHandler+0x75c>
 8007564:	10000001 	.word	0x10000001
 8007568:	04000120 	.word	0x04000120
 800756c:	08008ff9 	.word	0x08008ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 81e7 	bne.w	8007948 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 81e0 	beq.w	8007948 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 81d9 	beq.w	8007948 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2210      	movs	r2, #16
 800759c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	f040 8151 	bne.w	8007850 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a96      	ldr	r2, [pc, #600]	; (8007810 <HAL_UART_IRQHandler+0x564>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d068      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a93      	ldr	r2, [pc, #588]	; (8007814 <HAL_UART_IRQHandler+0x568>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d061      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a91      	ldr	r2, [pc, #580]	; (8007818 <HAL_UART_IRQHandler+0x56c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d05a      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a8e      	ldr	r2, [pc, #568]	; (800781c <HAL_UART_IRQHandler+0x570>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d053      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a8c      	ldr	r2, [pc, #560]	; (8007820 <HAL_UART_IRQHandler+0x574>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d04c      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a89      	ldr	r2, [pc, #548]	; (8007824 <HAL_UART_IRQHandler+0x578>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d045      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a87      	ldr	r2, [pc, #540]	; (8007828 <HAL_UART_IRQHandler+0x57c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d03e      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a84      	ldr	r2, [pc, #528]	; (800782c <HAL_UART_IRQHandler+0x580>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d037      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a82      	ldr	r2, [pc, #520]	; (8007830 <HAL_UART_IRQHandler+0x584>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d030      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a7f      	ldr	r2, [pc, #508]	; (8007834 <HAL_UART_IRQHandler+0x588>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d029      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a7d      	ldr	r2, [pc, #500]	; (8007838 <HAL_UART_IRQHandler+0x58c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d022      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a7a      	ldr	r2, [pc, #488]	; (800783c <HAL_UART_IRQHandler+0x590>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01b      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a78      	ldr	r2, [pc, #480]	; (8007840 <HAL_UART_IRQHandler+0x594>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d014      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a75      	ldr	r2, [pc, #468]	; (8007844 <HAL_UART_IRQHandler+0x598>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00d      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a73      	ldr	r2, [pc, #460]	; (8007848 <HAL_UART_IRQHandler+0x59c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d006      	beq.n	800768e <HAL_UART_IRQHandler+0x3e2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a70      	ldr	r2, [pc, #448]	; (800784c <HAL_UART_IRQHandler+0x5a0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d106      	bne.n	800769c <HAL_UART_IRQHandler+0x3f0>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	b29b      	uxth	r3, r3
 800769a:	e005      	b.n	80076a8 <HAL_UART_IRQHandler+0x3fc>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 81ab 	beq.w	8007a0c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076c0:	429a      	cmp	r2, r3
 80076c2:	f080 81a3 	bcs.w	8007a0c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076dc:	f000 8087 	beq.w	80077ee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800770a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800770e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007716:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1da      	bne.n	80076e0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3308      	adds	r3, #8
 8007730:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800773a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800774e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007752:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007756:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e1      	bne.n	800772a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800777c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800778a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800778c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e3      	bne.n	8007766 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80077d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e4      	bne.n	80077ac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa fbe7 	bl	8001fbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b29b      	uxth	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7f8 fef1 	bl	80005f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800780e:	e0fd      	b.n	8007a0c <HAL_UART_IRQHandler+0x760>
 8007810:	40020010 	.word	0x40020010
 8007814:	40020028 	.word	0x40020028
 8007818:	40020040 	.word	0x40020040
 800781c:	40020058 	.word	0x40020058
 8007820:	40020070 	.word	0x40020070
 8007824:	40020088 	.word	0x40020088
 8007828:	400200a0 	.word	0x400200a0
 800782c:	400200b8 	.word	0x400200b8
 8007830:	40020410 	.word	0x40020410
 8007834:	40020428 	.word	0x40020428
 8007838:	40020440 	.word	0x40020440
 800783c:	40020458 	.word	0x40020458
 8007840:	40020470 	.word	0x40020470
 8007844:	40020488 	.word	0x40020488
 8007848:	400204a0 	.word	0x400204a0
 800784c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800785c:	b29b      	uxth	r3, r3
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80cf 	beq.w	8007a10 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80ca 	beq.w	8007a10 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800788a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007890:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800789e:	647b      	str	r3, [r7, #68]	; 0x44
 80078a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e4      	bne.n	800787c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	623b      	str	r3, [r7, #32]
   return(result);
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	4b55      	ldr	r3, [pc, #340]	; (8007a1c <HAL_UART_IRQHandler+0x770>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3308      	adds	r3, #8
 80078d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078d6:	633a      	str	r2, [r7, #48]	; 0x30
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e3      	bne.n	80078b2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	60fb      	str	r3, [r7, #12]
   return(result);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	617b      	str	r3, [r7, #20]
   return(result);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800793a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7f8 fe55 	bl	80005f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007946:	e063      	b.n	8007a10 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <HAL_UART_IRQHandler+0x6c6>
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007968:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fb85 	bl	800907a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007970:	e051      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d014      	beq.n	80079a8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800798a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800798e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03a      	beq.n	8007a14 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
    }
    return;
 80079a6:	e035      	b.n	8007a14 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <HAL_UART_IRQHandler+0x71c>
 80079b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fb2f 	bl	8009024 <UART_EndTransmit_IT>
    return;
 80079c6:	e026      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <HAL_UART_IRQHandler+0x73c>
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 fb5e 	bl	80090a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079e6:	e016      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d010      	beq.n	8007a16 <HAL_UART_IRQHandler+0x76a>
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da0c      	bge.n	8007a16 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 fb46 	bl	800908e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a02:	e008      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
      return;
 8007a04:	bf00      	nop
 8007a06:	e006      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
    return;
 8007a08:	bf00      	nop
 8007a0a:	e004      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
      return;
 8007a0c:	bf00      	nop
 8007a0e:	e002      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
      return;
 8007a10:	bf00      	nop
 8007a12:	e000      	b.n	8007a16 <HAL_UART_IRQHandler+0x76a>
    return;
 8007a14:	bf00      	nop
  }
}
 8007a16:	37e8      	adds	r7, #232	; 0xe8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	effffffe 	.word	0xeffffffe

08007a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a88:	b092      	sub	sp, #72	; 0x48
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4bbe      	ldr	r3, [pc, #760]	; (8007dac <UART_SetConfig+0x328>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4ab3      	ldr	r2, [pc, #716]	; (8007db0 <UART_SetConfig+0x32c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aec:	4313      	orrs	r3, r2
 8007aee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	4baf      	ldr	r3, [pc, #700]	; (8007db4 <UART_SetConfig+0x330>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	f023 010f 	bic.w	r1, r3, #15
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4aa6      	ldr	r2, [pc, #664]	; (8007db8 <UART_SetConfig+0x334>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d177      	bne.n	8007c14 <UART_SetConfig+0x190>
 8007b24:	4ba5      	ldr	r3, [pc, #660]	; (8007dbc <UART_SetConfig+0x338>)
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b2c:	2b28      	cmp	r3, #40	; 0x28
 8007b2e:	d86d      	bhi.n	8007c0c <UART_SetConfig+0x188>
 8007b30:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0xb4>)
 8007b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b36:	bf00      	nop
 8007b38:	08007bdd 	.word	0x08007bdd
 8007b3c:	08007c0d 	.word	0x08007c0d
 8007b40:	08007c0d 	.word	0x08007c0d
 8007b44:	08007c0d 	.word	0x08007c0d
 8007b48:	08007c0d 	.word	0x08007c0d
 8007b4c:	08007c0d 	.word	0x08007c0d
 8007b50:	08007c0d 	.word	0x08007c0d
 8007b54:	08007c0d 	.word	0x08007c0d
 8007b58:	08007be5 	.word	0x08007be5
 8007b5c:	08007c0d 	.word	0x08007c0d
 8007b60:	08007c0d 	.word	0x08007c0d
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007c0d 	.word	0x08007c0d
 8007b6c:	08007c0d 	.word	0x08007c0d
 8007b70:	08007c0d 	.word	0x08007c0d
 8007b74:	08007c0d 	.word	0x08007c0d
 8007b78:	08007bed 	.word	0x08007bed
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c0d 	.word	0x08007c0d
 8007b84:	08007c0d 	.word	0x08007c0d
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007c0d 	.word	0x08007c0d
 8007b90:	08007c0d 	.word	0x08007c0d
 8007b94:	08007c0d 	.word	0x08007c0d
 8007b98:	08007bf5 	.word	0x08007bf5
 8007b9c:	08007c0d 	.word	0x08007c0d
 8007ba0:	08007c0d 	.word	0x08007c0d
 8007ba4:	08007c0d 	.word	0x08007c0d
 8007ba8:	08007c0d 	.word	0x08007c0d
 8007bac:	08007c0d 	.word	0x08007c0d
 8007bb0:	08007c0d 	.word	0x08007c0d
 8007bb4:	08007c0d 	.word	0x08007c0d
 8007bb8:	08007bfd 	.word	0x08007bfd
 8007bbc:	08007c0d 	.word	0x08007c0d
 8007bc0:	08007c0d 	.word	0x08007c0d
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007c0d 	.word	0x08007c0d
 8007bcc:	08007c0d 	.word	0x08007c0d
 8007bd0:	08007c0d 	.word	0x08007c0d
 8007bd4:	08007c0d 	.word	0x08007c0d
 8007bd8:	08007c05 	.word	0x08007c05
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007be2:	e326      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007be4:	2304      	movs	r3, #4
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bea:	e322      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007bec:	2308      	movs	r3, #8
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf2:	e31e      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfa:	e31a      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007bfc:	2320      	movs	r3, #32
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c02:	e316      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c04:	2340      	movs	r3, #64	; 0x40
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0a:	e312      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c12:	e30e      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a69      	ldr	r2, [pc, #420]	; (8007dc0 <UART_SetConfig+0x33c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d130      	bne.n	8007c80 <UART_SetConfig+0x1fc>
 8007c1e:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <UART_SetConfig+0x338>)
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d826      	bhi.n	8007c78 <UART_SetConfig+0x1f4>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x1ac>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c71 	.word	0x08007c71
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e2f0      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e2ec      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e2e8      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e2e4      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c68:	2320      	movs	r3, #32
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e2e0      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c70:	2340      	movs	r3, #64	; 0x40
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e2dc      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c78:	2380      	movs	r3, #128	; 0x80
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e2d8      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a4f      	ldr	r2, [pc, #316]	; (8007dc4 <UART_SetConfig+0x340>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d130      	bne.n	8007cec <UART_SetConfig+0x268>
 8007c8a:	4b4c      	ldr	r3, [pc, #304]	; (8007dbc <UART_SetConfig+0x338>)
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d826      	bhi.n	8007ce4 <UART_SetConfig+0x260>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x218>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cc5 	.word	0x08007cc5
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e2ba      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007cbc:	2304      	movs	r3, #4
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e2b6      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e2b2      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e2ae      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e2aa      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007cdc:	2340      	movs	r3, #64	; 0x40
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e2a6      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ce4:	2380      	movs	r3, #128	; 0x80
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e2a2      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a35      	ldr	r2, [pc, #212]	; (8007dc8 <UART_SetConfig+0x344>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d130      	bne.n	8007d58 <UART_SetConfig+0x2d4>
 8007cf6:	4b31      	ldr	r3, [pc, #196]	; (8007dbc <UART_SetConfig+0x338>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	d826      	bhi.n	8007d50 <UART_SetConfig+0x2cc>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x284>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d21 	.word	0x08007d21
 8007d0c:	08007d29 	.word	0x08007d29
 8007d10:	08007d31 	.word	0x08007d31
 8007d14:	08007d39 	.word	0x08007d39
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d49 	.word	0x08007d49
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e284      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e280      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e27c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e278      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d40:	2320      	movs	r3, #32
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e274      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e270      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d50:	2380      	movs	r3, #128	; 0x80
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e26c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1b      	ldr	r2, [pc, #108]	; (8007dcc <UART_SetConfig+0x348>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d142      	bne.n	8007de8 <UART_SetConfig+0x364>
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <UART_SetConfig+0x338>)
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b05      	cmp	r3, #5
 8007d6c:	d838      	bhi.n	8007de0 <UART_SetConfig+0x35c>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x2f0>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d8d 	.word	0x08007d8d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007da5 	.word	0x08007da5
 8007d84:	08007dd1 	.word	0x08007dd1
 8007d88:	08007dd9 	.word	0x08007dd9
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e24e      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e24a      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e246      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e242      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007dac:	cfff69f3 	.word	0xcfff69f3
 8007db0:	58000c00 	.word	0x58000c00
 8007db4:	11fff4ff 	.word	0x11fff4ff
 8007db8:	40011000 	.word	0x40011000
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	40004400 	.word	0x40004400
 8007dc4:	40004800 	.word	0x40004800
 8007dc8:	40004c00 	.word	0x40004c00
 8007dcc:	40005000 	.word	0x40005000
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd6:	e22c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dde:	e228      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de6:	e224      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4ab1      	ldr	r2, [pc, #708]	; (80080b4 <UART_SetConfig+0x630>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d176      	bne.n	8007ee0 <UART_SetConfig+0x45c>
 8007df2:	4bb1      	ldr	r3, [pc, #708]	; (80080b8 <UART_SetConfig+0x634>)
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dfa:	2b28      	cmp	r3, #40	; 0x28
 8007dfc:	d86c      	bhi.n	8007ed8 <UART_SetConfig+0x454>
 8007dfe:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0x380>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007ea9 	.word	0x08007ea9
 8007e08:	08007ed9 	.word	0x08007ed9
 8007e0c:	08007ed9 	.word	0x08007ed9
 8007e10:	08007ed9 	.word	0x08007ed9
 8007e14:	08007ed9 	.word	0x08007ed9
 8007e18:	08007ed9 	.word	0x08007ed9
 8007e1c:	08007ed9 	.word	0x08007ed9
 8007e20:	08007ed9 	.word	0x08007ed9
 8007e24:	08007eb1 	.word	0x08007eb1
 8007e28:	08007ed9 	.word	0x08007ed9
 8007e2c:	08007ed9 	.word	0x08007ed9
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007ed9 	.word	0x08007ed9
 8007e38:	08007ed9 	.word	0x08007ed9
 8007e3c:	08007ed9 	.word	0x08007ed9
 8007e40:	08007ed9 	.word	0x08007ed9
 8007e44:	08007eb9 	.word	0x08007eb9
 8007e48:	08007ed9 	.word	0x08007ed9
 8007e4c:	08007ed9 	.word	0x08007ed9
 8007e50:	08007ed9 	.word	0x08007ed9
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	08007ed9 	.word	0x08007ed9
 8007e5c:	08007ed9 	.word	0x08007ed9
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ed9 	.word	0x08007ed9
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007ed9 	.word	0x08007ed9
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ed9 	.word	0x08007ed9
 8007e90:	08007ed9 	.word	0x08007ed9
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ed9 	.word	0x08007ed9
 8007e9c:	08007ed9 	.word	0x08007ed9
 8007ea0:	08007ed9 	.word	0x08007ed9
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eae:	e1c0      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eb6:	e1bc      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ebe:	e1b8      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ec6:	e1b4      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ec8:	2320      	movs	r3, #32
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e1b0      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e1ac      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ed8:	2380      	movs	r3, #128	; 0x80
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e1a8      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a75      	ldr	r2, [pc, #468]	; (80080bc <UART_SetConfig+0x638>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d130      	bne.n	8007f4c <UART_SetConfig+0x4c8>
 8007eea:	4b73      	ldr	r3, [pc, #460]	; (80080b8 <UART_SetConfig+0x634>)
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d826      	bhi.n	8007f44 <UART_SetConfig+0x4c0>
 8007ef6:	a201      	add	r2, pc, #4	; (adr r2, 8007efc <UART_SetConfig+0x478>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f15 	.word	0x08007f15
 8007f00:	08007f1d 	.word	0x08007f1d
 8007f04:	08007f25 	.word	0x08007f25
 8007f08:	08007f2d 	.word	0x08007f2d
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e18a      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e186      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e182      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e17e      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e17a      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e176      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e172      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a5b      	ldr	r2, [pc, #364]	; (80080c0 <UART_SetConfig+0x63c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d130      	bne.n	8007fb8 <UART_SetConfig+0x534>
 8007f56:	4b58      	ldr	r3, [pc, #352]	; (80080b8 <UART_SetConfig+0x634>)
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d826      	bhi.n	8007fb0 <UART_SetConfig+0x52c>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <UART_SetConfig+0x4e4>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f81 	.word	0x08007f81
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	08007f91 	.word	0x08007f91
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e154      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e150      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e14c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e148      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e144      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007fa8:	2340      	movs	r3, #64	; 0x40
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e140      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007fb0:	2380      	movs	r3, #128	; 0x80
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e13c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a41      	ldr	r2, [pc, #260]	; (80080c4 <UART_SetConfig+0x640>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	f040 8082 	bne.w	80080c8 <UART_SetConfig+0x644>
 8007fc4:	4b3c      	ldr	r3, [pc, #240]	; (80080b8 <UART_SetConfig+0x634>)
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fcc:	2b28      	cmp	r3, #40	; 0x28
 8007fce:	d86d      	bhi.n	80080ac <UART_SetConfig+0x628>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x554>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800807d 	.word	0x0800807d
 8007fdc:	080080ad 	.word	0x080080ad
 8007fe0:	080080ad 	.word	0x080080ad
 8007fe4:	080080ad 	.word	0x080080ad
 8007fe8:	080080ad 	.word	0x080080ad
 8007fec:	080080ad 	.word	0x080080ad
 8007ff0:	080080ad 	.word	0x080080ad
 8007ff4:	080080ad 	.word	0x080080ad
 8007ff8:	08008085 	.word	0x08008085
 8007ffc:	080080ad 	.word	0x080080ad
 8008000:	080080ad 	.word	0x080080ad
 8008004:	080080ad 	.word	0x080080ad
 8008008:	080080ad 	.word	0x080080ad
 800800c:	080080ad 	.word	0x080080ad
 8008010:	080080ad 	.word	0x080080ad
 8008014:	080080ad 	.word	0x080080ad
 8008018:	0800808d 	.word	0x0800808d
 800801c:	080080ad 	.word	0x080080ad
 8008020:	080080ad 	.word	0x080080ad
 8008024:	080080ad 	.word	0x080080ad
 8008028:	080080ad 	.word	0x080080ad
 800802c:	080080ad 	.word	0x080080ad
 8008030:	080080ad 	.word	0x080080ad
 8008034:	080080ad 	.word	0x080080ad
 8008038:	08008095 	.word	0x08008095
 800803c:	080080ad 	.word	0x080080ad
 8008040:	080080ad 	.word	0x080080ad
 8008044:	080080ad 	.word	0x080080ad
 8008048:	080080ad 	.word	0x080080ad
 800804c:	080080ad 	.word	0x080080ad
 8008050:	080080ad 	.word	0x080080ad
 8008054:	080080ad 	.word	0x080080ad
 8008058:	0800809d 	.word	0x0800809d
 800805c:	080080ad 	.word	0x080080ad
 8008060:	080080ad 	.word	0x080080ad
 8008064:	080080ad 	.word	0x080080ad
 8008068:	080080ad 	.word	0x080080ad
 800806c:	080080ad 	.word	0x080080ad
 8008070:	080080ad 	.word	0x080080ad
 8008074:	080080ad 	.word	0x080080ad
 8008078:	080080a5 	.word	0x080080a5
 800807c:	2301      	movs	r3, #1
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e0d6      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008084:	2304      	movs	r3, #4
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e0d2      	b.n	8008232 <UART_SetConfig+0x7ae>
 800808c:	2308      	movs	r3, #8
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e0ce      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008094:	2310      	movs	r3, #16
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e0ca      	b.n	8008232 <UART_SetConfig+0x7ae>
 800809c:	2320      	movs	r3, #32
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e0c6      	b.n	8008232 <UART_SetConfig+0x7ae>
 80080a4:	2340      	movs	r3, #64	; 0x40
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e0c2      	b.n	8008232 <UART_SetConfig+0x7ae>
 80080ac:	2380      	movs	r3, #128	; 0x80
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b2:	e0be      	b.n	8008232 <UART_SetConfig+0x7ae>
 80080b4:	40011400 	.word	0x40011400
 80080b8:	58024400 	.word	0x58024400
 80080bc:	40007800 	.word	0x40007800
 80080c0:	40007c00 	.word	0x40007c00
 80080c4:	40011800 	.word	0x40011800
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4aad      	ldr	r2, [pc, #692]	; (8008384 <UART_SetConfig+0x900>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d176      	bne.n	80081c0 <UART_SetConfig+0x73c>
 80080d2:	4bad      	ldr	r3, [pc, #692]	; (8008388 <UART_SetConfig+0x904>)
 80080d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080da:	2b28      	cmp	r3, #40	; 0x28
 80080dc:	d86c      	bhi.n	80081b8 <UART_SetConfig+0x734>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0x660>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008189 	.word	0x08008189
 80080e8:	080081b9 	.word	0x080081b9
 80080ec:	080081b9 	.word	0x080081b9
 80080f0:	080081b9 	.word	0x080081b9
 80080f4:	080081b9 	.word	0x080081b9
 80080f8:	080081b9 	.word	0x080081b9
 80080fc:	080081b9 	.word	0x080081b9
 8008100:	080081b9 	.word	0x080081b9
 8008104:	08008191 	.word	0x08008191
 8008108:	080081b9 	.word	0x080081b9
 800810c:	080081b9 	.word	0x080081b9
 8008110:	080081b9 	.word	0x080081b9
 8008114:	080081b9 	.word	0x080081b9
 8008118:	080081b9 	.word	0x080081b9
 800811c:	080081b9 	.word	0x080081b9
 8008120:	080081b9 	.word	0x080081b9
 8008124:	08008199 	.word	0x08008199
 8008128:	080081b9 	.word	0x080081b9
 800812c:	080081b9 	.word	0x080081b9
 8008130:	080081b9 	.word	0x080081b9
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081b9 	.word	0x080081b9
 800813c:	080081b9 	.word	0x080081b9
 8008140:	080081b9 	.word	0x080081b9
 8008144:	080081a1 	.word	0x080081a1
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081b9 	.word	0x080081b9
 8008150:	080081b9 	.word	0x080081b9
 8008154:	080081b9 	.word	0x080081b9
 8008158:	080081b9 	.word	0x080081b9
 800815c:	080081b9 	.word	0x080081b9
 8008160:	080081b9 	.word	0x080081b9
 8008164:	080081a9 	.word	0x080081a9
 8008168:	080081b9 	.word	0x080081b9
 800816c:	080081b9 	.word	0x080081b9
 8008170:	080081b9 	.word	0x080081b9
 8008174:	080081b9 	.word	0x080081b9
 8008178:	080081b9 	.word	0x080081b9
 800817c:	080081b9 	.word	0x080081b9
 8008180:	080081b9 	.word	0x080081b9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2301      	movs	r3, #1
 800818a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818e:	e050      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e04c      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e048      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e044      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ae:	e040      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e03c      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e038      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a71      	ldr	r2, [pc, #452]	; (800838c <UART_SetConfig+0x908>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d130      	bne.n	800822c <UART_SetConfig+0x7a8>
 80081ca:	4b6f      	ldr	r3, [pc, #444]	; (8008388 <UART_SetConfig+0x904>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	f003 0307 	and.w	r3, r3, #7
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d826      	bhi.n	8008224 <UART_SetConfig+0x7a0>
 80081d6:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <UART_SetConfig+0x758>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	080081f5 	.word	0x080081f5
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008205 	.word	0x08008205
 80081e8:	0800820d 	.word	0x0800820d
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800821d 	.word	0x0800821d
 80081f4:	2302      	movs	r3, #2
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e01a      	b.n	8008232 <UART_SetConfig+0x7ae>
 80081fc:	2304      	movs	r3, #4
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e016      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008204:	2308      	movs	r3, #8
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e012      	b.n	8008232 <UART_SetConfig+0x7ae>
 800820c:	2310      	movs	r3, #16
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e00e      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008214:	2320      	movs	r3, #32
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e00a      	b.n	8008232 <UART_SetConfig+0x7ae>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e006      	b.n	8008232 <UART_SetConfig+0x7ae>
 8008224:	2380      	movs	r3, #128	; 0x80
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e002      	b.n	8008232 <UART_SetConfig+0x7ae>
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a55      	ldr	r2, [pc, #340]	; (800838c <UART_SetConfig+0x908>)
 8008238:	4293      	cmp	r3, r2
 800823a:	f040 80f8 	bne.w	800842e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800823e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008242:	2b20      	cmp	r3, #32
 8008244:	dc46      	bgt.n	80082d4 <UART_SetConfig+0x850>
 8008246:	2b02      	cmp	r3, #2
 8008248:	db75      	blt.n	8008336 <UART_SetConfig+0x8b2>
 800824a:	3b02      	subs	r3, #2
 800824c:	2b1e      	cmp	r3, #30
 800824e:	d872      	bhi.n	8008336 <UART_SetConfig+0x8b2>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0x7d4>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	080082db 	.word	0x080082db
 800825c:	08008337 	.word	0x08008337
 8008260:	080082e3 	.word	0x080082e3
 8008264:	08008337 	.word	0x08008337
 8008268:	08008337 	.word	0x08008337
 800826c:	08008337 	.word	0x08008337
 8008270:	080082f3 	.word	0x080082f3
 8008274:	08008337 	.word	0x08008337
 8008278:	08008337 	.word	0x08008337
 800827c:	08008337 	.word	0x08008337
 8008280:	08008337 	.word	0x08008337
 8008284:	08008337 	.word	0x08008337
 8008288:	08008337 	.word	0x08008337
 800828c:	08008337 	.word	0x08008337
 8008290:	08008303 	.word	0x08008303
 8008294:	08008337 	.word	0x08008337
 8008298:	08008337 	.word	0x08008337
 800829c:	08008337 	.word	0x08008337
 80082a0:	08008337 	.word	0x08008337
 80082a4:	08008337 	.word	0x08008337
 80082a8:	08008337 	.word	0x08008337
 80082ac:	08008337 	.word	0x08008337
 80082b0:	08008337 	.word	0x08008337
 80082b4:	08008337 	.word	0x08008337
 80082b8:	08008337 	.word	0x08008337
 80082bc:	08008337 	.word	0x08008337
 80082c0:	08008337 	.word	0x08008337
 80082c4:	08008337 	.word	0x08008337
 80082c8:	08008337 	.word	0x08008337
 80082cc:	08008337 	.word	0x08008337
 80082d0:	08008329 	.word	0x08008329
 80082d4:	2b40      	cmp	r3, #64	; 0x40
 80082d6:	d02a      	beq.n	800832e <UART_SetConfig+0x8aa>
 80082d8:	e02d      	b.n	8008336 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80082da:	f7fe faf5 	bl	80068c8 <HAL_RCCEx_GetD3PCLK1Freq>
 80082de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082e0:	e02f      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fb04 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f0:	e027      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe fc50 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e01f      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008302:	4b21      	ldr	r3, [pc, #132]	; (8008388 <UART_SetConfig+0x904>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d009      	beq.n	8008322 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <UART_SetConfig+0x904>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	4a1d      	ldr	r2, [pc, #116]	; (8008390 <UART_SetConfig+0x90c>)
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008320:	e00f      	b.n	8008342 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008322:	4b1b      	ldr	r3, [pc, #108]	; (8008390 <UART_SetConfig+0x90c>)
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008326:	e00c      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <UART_SetConfig+0x910>)
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800832c:	e009      	b.n	8008342 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008334:	e005      	b.n	8008342 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 81ee 	beq.w	8008726 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	4a12      	ldr	r2, [pc, #72]	; (8008398 <UART_SetConfig+0x914>)
 8008350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008354:	461a      	mov	r2, r3
 8008356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008358:	fbb3 f3f2 	udiv	r3, r3, r2
 800835c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800836a:	429a      	cmp	r2, r3
 800836c:	d305      	bcc.n	800837a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008376:	429a      	cmp	r2, r3
 8008378:	d910      	bls.n	800839c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008380:	e1d1      	b.n	8008726 <UART_SetConfig+0xca2>
 8008382:	bf00      	nop
 8008384:	40011c00 	.word	0x40011c00
 8008388:	58024400 	.word	0x58024400
 800838c:	58000c00 	.word	0x58000c00
 8008390:	03d09000 	.word	0x03d09000
 8008394:	003d0900 	.word	0x003d0900
 8008398:	080093ec 	.word	0x080093ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	2200      	movs	r2, #0
 80083a0:	60bb      	str	r3, [r7, #8]
 80083a2:	60fa      	str	r2, [r7, #12]
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	4ac0      	ldr	r2, [pc, #768]	; (80086ac <UART_SetConfig+0xc28>)
 80083aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2200      	movs	r2, #0
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083be:	f7f7 ff95 	bl	80002ec <__aeabi_uldivmod>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f04f 0200 	mov.w	r2, #0
 80083ce:	f04f 0300 	mov.w	r3, #0
 80083d2:	020b      	lsls	r3, r1, #8
 80083d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80083d8:	0202      	lsls	r2, r0, #8
 80083da:	6979      	ldr	r1, [r7, #20]
 80083dc:	6849      	ldr	r1, [r1, #4]
 80083de:	0849      	lsrs	r1, r1, #1
 80083e0:	2000      	movs	r0, #0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4605      	mov	r5, r0
 80083e6:	eb12 0804 	adds.w	r8, r2, r4
 80083ea:	eb43 0905 	adc.w	r9, r3, r5
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	469a      	mov	sl, r3
 80083f6:	4693      	mov	fp, r2
 80083f8:	4652      	mov	r2, sl
 80083fa:	465b      	mov	r3, fp
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f7 ff74 	bl	80002ec <__aeabi_uldivmod>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4613      	mov	r3, r2
 800840a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008412:	d308      	bcc.n	8008426 <UART_SetConfig+0x9a2>
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841a:	d204      	bcs.n	8008426 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008422:	60da      	str	r2, [r3, #12]
 8008424:	e17f      	b.n	8008726 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800842c:	e17b      	b.n	8008726 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008436:	f040 80bd 	bne.w	80085b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800843a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800843e:	2b20      	cmp	r3, #32
 8008440:	dc48      	bgt.n	80084d4 <UART_SetConfig+0xa50>
 8008442:	2b00      	cmp	r3, #0
 8008444:	db7b      	blt.n	800853e <UART_SetConfig+0xaba>
 8008446:	2b20      	cmp	r3, #32
 8008448:	d879      	bhi.n	800853e <UART_SetConfig+0xaba>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0x9cc>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	080084db 	.word	0x080084db
 8008454:	080084e3 	.word	0x080084e3
 8008458:	0800853f 	.word	0x0800853f
 800845c:	0800853f 	.word	0x0800853f
 8008460:	080084eb 	.word	0x080084eb
 8008464:	0800853f 	.word	0x0800853f
 8008468:	0800853f 	.word	0x0800853f
 800846c:	0800853f 	.word	0x0800853f
 8008470:	080084fb 	.word	0x080084fb
 8008474:	0800853f 	.word	0x0800853f
 8008478:	0800853f 	.word	0x0800853f
 800847c:	0800853f 	.word	0x0800853f
 8008480:	0800853f 	.word	0x0800853f
 8008484:	0800853f 	.word	0x0800853f
 8008488:	0800853f 	.word	0x0800853f
 800848c:	0800853f 	.word	0x0800853f
 8008490:	0800850b 	.word	0x0800850b
 8008494:	0800853f 	.word	0x0800853f
 8008498:	0800853f 	.word	0x0800853f
 800849c:	0800853f 	.word	0x0800853f
 80084a0:	0800853f 	.word	0x0800853f
 80084a4:	0800853f 	.word	0x0800853f
 80084a8:	0800853f 	.word	0x0800853f
 80084ac:	0800853f 	.word	0x0800853f
 80084b0:	0800853f 	.word	0x0800853f
 80084b4:	0800853f 	.word	0x0800853f
 80084b8:	0800853f 	.word	0x0800853f
 80084bc:	0800853f 	.word	0x0800853f
 80084c0:	0800853f 	.word	0x0800853f
 80084c4:	0800853f 	.word	0x0800853f
 80084c8:	0800853f 	.word	0x0800853f
 80084cc:	0800853f 	.word	0x0800853f
 80084d0:	08008531 	.word	0x08008531
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d02e      	beq.n	8008536 <UART_SetConfig+0xab2>
 80084d8:	e031      	b.n	800853e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084da:	f7fd f80b 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80084de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084e0:	e033      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084e2:	f7fd f81d 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 80084e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084e8:	e02f      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fa00 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e027      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084fa:	f107 0318 	add.w	r3, r7, #24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fb4c 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008508:	e01f      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800850a:	4b69      	ldr	r3, [pc, #420]	; (80086b0 <UART_SetConfig+0xc2c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008516:	4b66      	ldr	r3, [pc, #408]	; (80086b0 <UART_SetConfig+0xc2c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	08db      	lsrs	r3, r3, #3
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	4a64      	ldr	r2, [pc, #400]	; (80086b4 <UART_SetConfig+0xc30>)
 8008522:	fa22 f303 	lsr.w	r3, r2, r3
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008528:	e00f      	b.n	800854a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800852a:	4b62      	ldr	r3, [pc, #392]	; (80086b4 <UART_SetConfig+0xc30>)
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800852e:	e00c      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008530:	4b61      	ldr	r3, [pc, #388]	; (80086b8 <UART_SetConfig+0xc34>)
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008534:	e009      	b.n	800854a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800853c:	e005      	b.n	800854a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80ea 	beq.w	8008726 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	4a55      	ldr	r2, [pc, #340]	; (80086ac <UART_SetConfig+0xc28>)
 8008558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855c:	461a      	mov	r2, r3
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	fbb3 f3f2 	udiv	r3, r3, r2
 8008564:	005a      	lsls	r2, r3, #1
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	441a      	add	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d916      	bls.n	80085ac <UART_SetConfig+0xb28>
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008584:	d212      	bcs.n	80085ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	b29b      	uxth	r3, r3
 800858a:	f023 030f 	bic.w	r3, r3, #15
 800858e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b29a      	uxth	r2, r3
 800859c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800859e:	4313      	orrs	r3, r2
 80085a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e0bc      	b.n	8008726 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085b2:	e0b8      	b.n	8008726 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	dc4b      	bgt.n	8008654 <UART_SetConfig+0xbd0>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f2c0 8087 	blt.w	80086d0 <UART_SetConfig+0xc4c>
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	f200 8084 	bhi.w	80086d0 <UART_SetConfig+0xc4c>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <UART_SetConfig+0xb4c>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	0800865b 	.word	0x0800865b
 80085d4:	08008663 	.word	0x08008663
 80085d8:	080086d1 	.word	0x080086d1
 80085dc:	080086d1 	.word	0x080086d1
 80085e0:	0800866b 	.word	0x0800866b
 80085e4:	080086d1 	.word	0x080086d1
 80085e8:	080086d1 	.word	0x080086d1
 80085ec:	080086d1 	.word	0x080086d1
 80085f0:	0800867b 	.word	0x0800867b
 80085f4:	080086d1 	.word	0x080086d1
 80085f8:	080086d1 	.word	0x080086d1
 80085fc:	080086d1 	.word	0x080086d1
 8008600:	080086d1 	.word	0x080086d1
 8008604:	080086d1 	.word	0x080086d1
 8008608:	080086d1 	.word	0x080086d1
 800860c:	080086d1 	.word	0x080086d1
 8008610:	0800868b 	.word	0x0800868b
 8008614:	080086d1 	.word	0x080086d1
 8008618:	080086d1 	.word	0x080086d1
 800861c:	080086d1 	.word	0x080086d1
 8008620:	080086d1 	.word	0x080086d1
 8008624:	080086d1 	.word	0x080086d1
 8008628:	080086d1 	.word	0x080086d1
 800862c:	080086d1 	.word	0x080086d1
 8008630:	080086d1 	.word	0x080086d1
 8008634:	080086d1 	.word	0x080086d1
 8008638:	080086d1 	.word	0x080086d1
 800863c:	080086d1 	.word	0x080086d1
 8008640:	080086d1 	.word	0x080086d1
 8008644:	080086d1 	.word	0x080086d1
 8008648:	080086d1 	.word	0x080086d1
 800864c:	080086d1 	.word	0x080086d1
 8008650:	080086c3 	.word	0x080086c3
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d037      	beq.n	80086c8 <UART_SetConfig+0xc44>
 8008658:	e03a      	b.n	80086d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800865a:	f7fc ff4b 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 800865e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008660:	e03c      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008662:	f7fc ff5d 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8008666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008668:	e038      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe f940 	bl	80068f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008678:	e030      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fa8c 	bl	8006b9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008688:	e028      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <UART_SetConfig+0xc2c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d012      	beq.n	80086bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <UART_SetConfig+0xc2c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	4a04      	ldr	r2, [pc, #16]	; (80086b4 <UART_SetConfig+0xc30>)
 80086a2:	fa22 f303 	lsr.w	r3, r2, r3
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a8:	e018      	b.n	80086dc <UART_SetConfig+0xc58>
 80086aa:	bf00      	nop
 80086ac:	080093ec 	.word	0x080093ec
 80086b0:	58024400 	.word	0x58024400
 80086b4:	03d09000 	.word	0x03d09000
 80086b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80086bc:	4b24      	ldr	r3, [pc, #144]	; (8008750 <UART_SetConfig+0xccc>)
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c0:	e00c      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <UART_SetConfig+0xcd0>)
 80086c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c6:	e009      	b.n	80086dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ce:	e005      	b.n	80086dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086da:	bf00      	nop
    }

    if (pclk != 0U)
 80086dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d021      	beq.n	8008726 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	4a1c      	ldr	r2, [pc, #112]	; (8008758 <UART_SetConfig+0xcd4>)
 80086e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	441a      	add	r2, r3
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	fbb2 f3f3 	udiv	r3, r2, r3
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d909      	bls.n	8008720 <UART_SetConfig+0xc9c>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008712:	d205      	bcs.n	8008720 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	b29a      	uxth	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	e002      	b.n	8008726 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2201      	movs	r2, #1
 800872a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2201      	movs	r2, #1
 8008732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2200      	movs	r2, #0
 800873a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008742:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008746:	4618      	mov	r0, r3
 8008748:	3748      	adds	r7, #72	; 0x48
 800874a:	46bd      	mov	sp, r7
 800874c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008750:	03d09000 	.word	0x03d09000
 8008754:	003d0900 	.word	0x003d0900
 8008758:	080093ec 	.word	0x080093ec

0800875c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01a      	beq.n	8008872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885a:	d10a      	bne.n	8008872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b098      	sub	sp, #96	; 0x60
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b0:	f7f8 fc6e 	bl	8001190 <HAL_GetTick>
 80088b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d12f      	bne.n	8008924 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088cc:	2200      	movs	r2, #0
 80088ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f88e 	bl	80089f4 <UART_WaitOnFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d022      	beq.n	8008924 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f2:	653b      	str	r3, [r7, #80]	; 0x50
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fc:	647b      	str	r3, [r7, #68]	; 0x44
 80088fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e6      	bne.n	80088de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2220      	movs	r2, #32
 8008914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e063      	b.n	80089ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b04      	cmp	r3, #4
 8008930:	d149      	bne.n	80089c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008932:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800893a:	2200      	movs	r2, #0
 800893c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f857 	bl	80089f4 <UART_WaitOnFlagUntilTimeout>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d03c      	beq.n	80089c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	623b      	str	r3, [r7, #32]
   return(result);
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896a:	633b      	str	r3, [r7, #48]	; 0x30
 800896c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e6      	bne.n	800894c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	60fb      	str	r3, [r7, #12]
   return(result);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	64bb      	str	r3, [r7, #72]	; 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800899e:	61fa      	str	r2, [r7, #28]
 80089a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	69b9      	ldr	r1, [r7, #24]
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	617b      	str	r3, [r7, #20]
   return(result);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e012      	b.n	80089ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3758      	adds	r7, #88	; 0x58
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a04:	e049      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d045      	beq.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a0e:	f7f8 fbbf 	bl	8001190 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d302      	bcc.n	8008a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e048      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d031      	beq.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d110      	bne.n	8008a66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2208      	movs	r2, #8
 8008a4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f000 f921 	bl	8008c94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2208      	movs	r2, #8
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e029      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a74:	d111      	bne.n	8008a9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f907 	bl	8008c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e00f      	b.n	8008aba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	bf0c      	ite	eq
 8008aaa:	2301      	moveq	r3, #1
 8008aac:	2300      	movne	r3, #0
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d0a6      	beq.n	8008a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b096      	sub	sp, #88	; 0x58
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	88fa      	ldrh	r2, [r7, #6]
 8008adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2222      	movs	r2, #34	; 0x22
 8008aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d02d      	beq.n	8008b56 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b00:	4a40      	ldr	r2, [pc, #256]	; (8008c04 <UART_Start_Receive_DMA+0x140>)
 8008b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b0a:	4a3f      	ldr	r2, [pc, #252]	; (8008c08 <UART_Start_Receive_DMA+0x144>)
 8008b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b14:	4a3d      	ldr	r2, [pc, #244]	; (8008c0c <UART_Start_Receive_DMA+0x148>)
 8008b16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b1e:	2200      	movs	r2, #0
 8008b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3324      	adds	r3, #36	; 0x24
 8008b2e:	4619      	mov	r1, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b34:	461a      	mov	r2, r3
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	f7f8 ffd6 	bl	8001ae8 <HAL_DMA_Start_IT>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2210      	movs	r2, #16
 8008b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e051      	b.n	8008bfa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d018      	beq.n	8008b90 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b72:	657b      	str	r3, [r7, #84]	; 0x54
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b7e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3308      	adds	r3, #8
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	f043 0301 	orr.w	r3, r3, #1
 8008ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3308      	adds	r3, #8
 8008bae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3308      	adds	r3, #8
 8008be2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008be4:	623a      	str	r2, [r7, #32]
 8008be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3758      	adds	r7, #88	; 0x58
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	08008e13 	.word	0x08008e13
 8008c08:	08008f3b 	.word	0x08008f3b
 8008c0c:	08008f79 	.word	0x08008f79

08008c10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b08f      	sub	sp, #60	; 0x3c
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e6      	bne.n	8008c18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c60:	633b      	str	r3, [r7, #48]	; 0x30
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	61ba      	str	r2, [r7, #24]
 8008c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	613b      	str	r3, [r7, #16]
   return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008c86:	bf00      	nop
 8008c88:	373c      	adds	r7, #60	; 0x3c
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
	...

08008c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b095      	sub	sp, #84	; 0x54
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cba:	643b      	str	r3, [r7, #64]	; 0x40
 8008cbc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e6      	bne.n	8008c9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <UART_EndRxTransfer+0xc8>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3308      	adds	r3, #8
 8008cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf6:	e841 2300 	strex	r3, r2, [r1]
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e5      	bne.n	8008cce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d118      	bne.n	8008d3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f023 0310 	bic.w	r3, r3, #16
 8008d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d28:	61bb      	str	r3, [r7, #24]
 8008d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6979      	ldr	r1, [r7, #20]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	613b      	str	r3, [r7, #16]
   return(result);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d50:	bf00      	nop
 8008d52:	3754      	adds	r7, #84	; 0x54
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	effffffe 	.word	0xeffffffe

08008d60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b090      	sub	sp, #64	; 0x40
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d76:	d037      	beq.n	8008de8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008da0:	633a      	str	r2, [r7, #48]	; 0x30
 8008da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e5      	bne.n	8008d80 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	69b9      	ldr	r1, [r7, #24]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	617b      	str	r3, [r7, #20]
   return(result);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e6      	bne.n	8008db4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008de6:	e002      	b.n	8008dee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008de8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008dea:	f7fe fe19 	bl	8007a20 <HAL_UART_TxCpltCallback>
}
 8008dee:	bf00      	nop
 8008df0:	3740      	adds	r7, #64	; 0x40
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7fe fe15 	bl	8007a34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b09c      	sub	sp, #112	; 0x70
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e28:	d071      	beq.n	8008f0e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e3a:	e853 3f00 	ldrex	r3, [r3]
 8008e3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e6      	bne.n	8008e32 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	f023 0301 	bic.w	r3, r3, #1
 8008e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3308      	adds	r3, #8
 8008e82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e84:	647a      	str	r2, [r7, #68]	; 0x44
 8008e86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e5      	bne.n	8008e64 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eae:	663b      	str	r3, [r7, #96]	; 0x60
 8008eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008eb8:	633a      	str	r2, [r7, #48]	; 0x30
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d118      	bne.n	8008f0e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f023 0310 	bic.w	r3, r3, #16
 8008ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	69b9      	ldr	r1, [r7, #24]
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	617b      	str	r3, [r7, #20]
   return(result);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e6      	bne.n	8008edc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f10:	2200      	movs	r2, #0
 8008f12:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d107      	bne.n	8008f2c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f22:	4619      	mov	r1, r3
 8008f24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f26:	f7f7 fb63 	bl	80005f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f2a:	e002      	b.n	8008f32 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008f2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f2e:	f7fe fd8b 	bl	8007a48 <HAL_UART_RxCpltCallback>
}
 8008f32:	bf00      	nop
 8008f34:	3770      	adds	r7, #112	; 0x70
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d109      	bne.n	8008f6a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	4619      	mov	r1, r3
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7f7 fb44 	bl	80005f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f68:	e002      	b.n	8008f70 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7fe fd76 	bl	8007a5c <HAL_UART_RxHalfCpltCallback>
}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa0:	2b80      	cmp	r3, #128	; 0x80
 8008fa2:	d109      	bne.n	8008fb8 <UART_DMAError+0x40>
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b21      	cmp	r3, #33	; 0x21
 8008fa8:	d106      	bne.n	8008fb8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008fb2:	6978      	ldr	r0, [r7, #20]
 8008fb4:	f7ff fe2c 	bl	8008c10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d109      	bne.n	8008fda <UART_DMAError+0x62>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b22      	cmp	r3, #34	; 0x22
 8008fca:	d106      	bne.n	8008fda <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008fd4:	6978      	ldr	r0, [r7, #20]
 8008fd6:	f7ff fe5d 	bl	8008c94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe0:	f043 0210 	orr.w	r2, r3, #16
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fea:	6978      	ldr	r0, [r7, #20]
 8008fec:	f7fe fd40 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ff0:	bf00      	nop
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7fe fd2a 	bl	8007a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60bb      	str	r3, [r7, #8]
   return(result);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	6979      	ldr	r1, [r7, #20]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	613b      	str	r3, [r7, #16]
   return(result);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fe fcd7 	bl	8007a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009072:	bf00      	nop
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_UARTEx_DisableFifoMode+0x16>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e027      	b.n	800911c <HAL_UARTEx_DisableFifoMode+0x66>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2224      	movs	r2, #36	; 0x24
 80090d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0201 	bic.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800913c:	2302      	movs	r3, #2
 800913e:	e02d      	b.n	800919c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2224      	movs	r2, #36	; 0x24
 800914c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f022 0201 	bic.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f8a3 	bl	80092c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e02d      	b.n	8009218 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2224      	movs	r2, #36	; 0x24
 80091c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0201 	bic.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f865 	bl	80092c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08c      	sub	sp, #48	; 0x30
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009234:	2b20      	cmp	r3, #32
 8009236:	d142      	bne.n	80092be <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e03b      	b.n	80092c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009254:	88fb      	ldrh	r3, [r7, #6]
 8009256:	461a      	mov	r2, r3
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fc32 	bl	8008ac4 <UART_Start_Receive_DMA>
 8009260:	4603      	mov	r3, r0
 8009262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800926a:	2b00      	cmp	r3, #0
 800926c:	d124      	bne.n	80092b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009272:	2b01      	cmp	r3, #1
 8009274:	d11d      	bne.n	80092b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2210      	movs	r2, #16
 800927c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	617b      	str	r3, [r7, #20]
   return(result);
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f043 0310 	orr.w	r3, r3, #16
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
 800929e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6a39      	ldr	r1, [r7, #32]
 80092a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e6      	bne.n	800927e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80092b0:	e002      	b.n	80092b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80092b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092bc:	e000      	b.n	80092c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80092be:	2302      	movs	r3, #2
  }
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3730      	adds	r7, #48	; 0x30
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d108      	bne.n	80092ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092e8:	e031      	b.n	800934e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ea:	2310      	movs	r3, #16
 80092ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092ee:	2310      	movs	r3, #16
 80092f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	0e5b      	lsrs	r3, r3, #25
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	0f5b      	lsrs	r3, r3, #29
 800930a:	b2db      	uxtb	r3, r3
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	7b3a      	ldrb	r2, [r7, #12]
 8009316:	4911      	ldr	r1, [pc, #68]	; (800935c <UARTEx_SetNbDataToProcess+0x94>)
 8009318:	5c8a      	ldrb	r2, [r1, r2]
 800931a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800931e:	7b3a      	ldrb	r2, [r7, #12]
 8009320:	490f      	ldr	r1, [pc, #60]	; (8009360 <UARTEx_SetNbDataToProcess+0x98>)
 8009322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009324:	fb93 f3f2 	sdiv	r3, r3, r2
 8009328:	b29a      	uxth	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	7b7a      	ldrb	r2, [r7, #13]
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <UARTEx_SetNbDataToProcess+0x94>)
 8009336:	5c8a      	ldrb	r2, [r1, r2]
 8009338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800933c:	7b7a      	ldrb	r2, [r7, #13]
 800933e:	4908      	ldr	r1, [pc, #32]	; (8009360 <UARTEx_SetNbDataToProcess+0x98>)
 8009340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009342:	fb93 f3f2 	sdiv	r3, r3, r2
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800934e:	bf00      	nop
 8009350:	3714      	adds	r7, #20
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	08009404 	.word	0x08009404
 8009360:	0800940c 	.word	0x0800940c

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4d0d      	ldr	r5, [pc, #52]	; (800939c <__libc_init_array+0x38>)
 8009368:	4c0d      	ldr	r4, [pc, #52]	; (80093a0 <__libc_init_array+0x3c>)
 800936a:	1b64      	subs	r4, r4, r5
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2600      	movs	r6, #0
 8009370:	42a6      	cmp	r6, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	4d0b      	ldr	r5, [pc, #44]	; (80093a4 <__libc_init_array+0x40>)
 8009376:	4c0c      	ldr	r4, [pc, #48]	; (80093a8 <__libc_init_array+0x44>)
 8009378:	f000 f820 	bl	80093bc <_init>
 800937c:	1b64      	subs	r4, r4, r5
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	2600      	movs	r6, #0
 8009382:	42a6      	cmp	r6, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f855 3b04 	ldr.w	r3, [r5], #4
 800938c:	4798      	blx	r3
 800938e:	3601      	adds	r6, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f855 3b04 	ldr.w	r3, [r5], #4
 8009396:	4798      	blx	r3
 8009398:	3601      	adds	r6, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	0800941c 	.word	0x0800941c
 80093a0:	0800941c 	.word	0x0800941c
 80093a4:	0800941c 	.word	0x0800941c
 80093a8:	08009420 	.word	0x08009420

080093ac <memset>:
 80093ac:	4402      	add	r2, r0
 80093ae:	4603      	mov	r3, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <_init>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr

080093c8 <_fini>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr
