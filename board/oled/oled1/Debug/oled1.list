
oled1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080071a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  24000010  080071b0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400015c  080071b0  0002015c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a81d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fb3  00000000  00000000  0003a85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013d8  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000012a0  00000000  00000000  0003ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000314b0  00000000  00000000  0003fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ac56  00000000  00000000  00071338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f7cb  00000000  00000000  0008bf8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cb759  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000537c  00000000  00000000  001cb7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006488 	.word	0x08006488

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006488 	.word	0x08006488

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b80      	ldr	r3, [pc, #512]	; (8000808 <MX_GPIO_Init+0x218>)
 8000608:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800060c:	4a7e      	ldr	r2, [pc, #504]	; (8000808 <MX_GPIO_Init+0x218>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000616:	4b7c      	ldr	r3, [pc, #496]	; (8000808 <MX_GPIO_Init+0x218>)
 8000618:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	623b      	str	r3, [r7, #32]
 8000622:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000624:	4b78      	ldr	r3, [pc, #480]	; (8000808 <MX_GPIO_Init+0x218>)
 8000626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800062a:	4a77      	ldr	r2, [pc, #476]	; (8000808 <MX_GPIO_Init+0x218>)
 800062c:	f043 0320 	orr.w	r3, r3, #32
 8000630:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000634:	4b74      	ldr	r3, [pc, #464]	; (8000808 <MX_GPIO_Init+0x218>)
 8000636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <MX_GPIO_Init+0x218>)
 8000644:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000648:	4a6f      	ldr	r2, [pc, #444]	; (8000808 <MX_GPIO_Init+0x218>)
 800064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <MX_GPIO_Init+0x218>)
 8000654:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b69      	ldr	r3, [pc, #420]	; (8000808 <MX_GPIO_Init+0x218>)
 8000662:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000666:	4a68      	ldr	r2, [pc, #416]	; (8000808 <MX_GPIO_Init+0x218>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000670:	4b65      	ldr	r3, [pc, #404]	; (8000808 <MX_GPIO_Init+0x218>)
 8000672:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b62      	ldr	r3, [pc, #392]	; (8000808 <MX_GPIO_Init+0x218>)
 8000680:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000684:	4a60      	ldr	r2, [pc, #384]	; (8000808 <MX_GPIO_Init+0x218>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800068e:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <MX_GPIO_Init+0x218>)
 8000690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069c:	4b5a      	ldr	r3, [pc, #360]	; (8000808 <MX_GPIO_Init+0x218>)
 800069e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a2:	4a59      	ldr	r2, [pc, #356]	; (8000808 <MX_GPIO_Init+0x218>)
 80006a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ac:	4b56      	ldr	r3, [pc, #344]	; (8000808 <MX_GPIO_Init+0x218>)
 80006ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b53      	ldr	r3, [pc, #332]	; (8000808 <MX_GPIO_Init+0x218>)
 80006bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c0:	4a51      	ldr	r2, [pc, #324]	; (8000808 <MX_GPIO_Init+0x218>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ca:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <MX_GPIO_Init+0x218>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d8:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <MX_GPIO_Init+0x218>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a4a      	ldr	r2, [pc, #296]	; (8000808 <MX_GPIO_Init+0x218>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b47      	ldr	r3, [pc, #284]	; (8000808 <MX_GPIO_Init+0x218>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fc:	4843      	ldr	r0, [pc, #268]	; (800080c <MX_GPIO_Init+0x21c>)
 80006fe:	f001 fa05 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f244 0101 	movw	r1, #16385	; 0x4001
 8000708:	4841      	ldr	r0, [pc, #260]	; (8000810 <MX_GPIO_Init+0x220>)
 800070a:	f001 f9ff 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	4840      	ldr	r0, [pc, #256]	; (8000814 <MX_GPIO_Init+0x224>)
 8000714:	f001 f9fa 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	4619      	mov	r1, r3
 800072c:	483a      	ldr	r0, [pc, #232]	; (8000818 <MX_GPIO_Init+0x228>)
 800072e:	f001 f83d 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	4830      	ldr	r0, [pc, #192]	; (800080c <MX_GPIO_Init+0x21c>)
 800074c:	f001 f82e 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000750:	f244 0301 	movw	r3, #16385	; 0x4001
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4829      	ldr	r0, [pc, #164]	; (8000810 <MX_GPIO_Init+0x220>)
 800076a:	f001 f81f 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <MX_GPIO_Init+0x22c>)
 8000784:	f001 f812 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x230>)
 800079e:	f001 f805 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007b4:	230a      	movs	r3, #10
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_GPIO_Init+0x230>)
 80007c0:	f000 fff4 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <MX_GPIO_Init+0x230>)
 80007de:	f000 ffe5 	bl	80017ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e2:	2302      	movs	r3, #2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4619      	mov	r1, r3
 80007f8:	4806      	ldr	r0, [pc, #24]	; (8000814 <MX_GPIO_Init+0x224>)
 80007fa:	f000 ffd7 	bl	80017ac <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3738      	adds	r7, #56	; 0x38
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400
 800080c:	58021400 	.word	0x58021400
 8000810:	58020400 	.word	0x58020400
 8000814:	58021000 	.word	0x58021000
 8000818:	58020800 	.word	0x58020800
 800081c:	58021800 	.word	0x58021800
 8000820:	58020000 	.word	0x58020000

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	f001 f96e 	bl	8001b40 <HAL_I2C_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f917 	bl	8000a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_I2C1_Init+0x74>)
 8000872:	f001 fd5b 	bl	800232c <HAL_I2CEx_ConfigAnalogFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f90e 	bl	8000a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000884:	f001 fd9d 	bl	80023c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f905 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	2400002c 	.word	0x2400002c
 800089c:	40005400 	.word	0x40005400
 80008a0:	20b0ccff 	.word	0x20b0ccff

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0b8      	sub	sp, #224	; 0xe0
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	22b8      	movs	r2, #184	; 0xb8
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 fdd7 	bl	8006478 <memset>
  if(i2cHandle->Instance==I2C1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a24      	ldr	r2, [pc, #144]	; (8000960 <HAL_I2C_MspInit+0xbc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d141      	bne.n	8000958 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008d4:	2308      	movs	r3, #8
 80008d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fda4 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008ee:	f000 f8d5 	bl	8000a9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 80008fa:	f043 0302 	orr.w	r3, r3, #2
 80008fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 8000904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000910:	23c0      	movs	r3, #192	; 0xc0
 8000912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000928:	2304      	movs	r3, #4
 800092a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <HAL_I2C_MspInit+0xc4>)
 8000936:	f000 ff39 	bl	80017ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 800093c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000940:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 8000942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000946:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_I2C_MspInit+0xc0>)
 800094c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	37e0      	adds	r7, #224	; 0xe0
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40005400 	.word	0x40005400
 8000964:	58024400 	.word	0x58024400
 8000968:	58020400 	.word	0x58020400

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f000 fd7a 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f81c 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff fe3a 	bl	80005f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800097c:	f000 fc90 	bl	80012a0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000980:	f000 fd40 	bl	8001404 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000984:	f7ff ff4e 	bl	8000824 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000988:	f000 fc2a 	bl	80011e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800098c:	f000 fa8d 	bl	8000eaa <OLED_Init>
  OLED_Clear();
 8000990:	f000 f912 	bl	8000bb8 <OLED_Clear>
  OLED_Display_On();
 8000994:	f000 f900 	bl	8000b98 <OLED_Display_On>
  DrawBG();
 8000998:	f000 faf8 	bl	8000f8c <DrawBG>
  HAL_TIM_Base_Start_IT(&htim6);
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <main+0x40>)
 800099e:	f004 f8cd 	bl	8004b3c <HAL_TIM_Base_Start_IT>
  DrawPosition(1,9);
 80009a2:	2109      	movs	r1, #9
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 fb19 	bl	8000fdc <DrawPosition>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <main+0x3e>
 80009ac:	2400007c 	.word	0x2400007c

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	224c      	movs	r2, #76	; 0x4c
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 fd5a 	bl	8006478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2220      	movs	r2, #32
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fd54 	bl	8006478 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <SystemClock_Config+0xe4>)
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009da:	2004      	movs	r0, #4
 80009dc:	f001 fd3e 	bl	800245c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <SystemClock_Config+0xe8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <SystemClock_Config+0xe8>)
 80009ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xe8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fc:	bf00      	nop
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xe8>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0a:	d1f8      	bne.n	80009fe <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2321      	movs	r3, #33	; 0x21
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a16:	2301      	movs	r3, #1
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a26:	2346      	movs	r3, #70	; 0x46
 8000a28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a36:	230c      	movs	r3, #12
 8000a38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fd62 	bl	8002510 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a52:	f000 f823 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	233f      	movs	r3, #63	; 0x3f
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2107      	movs	r1, #7
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 f94b 	bl	8002d18 <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a88:	f000 f808 	bl	8000a9c <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3770      	adds	r7, #112	; 0x70
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58024800 	.word	0x58024800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <Error_Handler+0x8>
	...

08000aa8 <Write_IIC_Command>:
	0xfe, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
};

void Write_IIC_Command(unsigned char IIC_Command)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
    uint8_t *pData;
    pData= &IIC_Command;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(&hi2c1,OLED_ADDRESS,0x00,I2C_MEMADD_SIZE_8BIT,pData,1,100);
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	2301      	movs	r3, #1
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2178      	movs	r1, #120	; 0x78
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <Write_IIC_Command+0x30>)
 8000aca:	f001 f8c9 	bl	8001c60 <HAL_I2C_Mem_Write>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2400002c 	.word	0x2400002c

08000adc <Write_IIC_Data>:

void Write_IIC_Data(unsigned char IIC_Data)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    uint8_t *pData;
    pData= &IIC_Data;
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(&hi2c1,OLED_ADDRESS,0x40,I2C_MEMADD_SIZE_8BIT,pData,1,100);
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	2178      	movs	r1, #120	; 0x78
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <Write_IIC_Data+0x30>)
 8000afe:	f001 f8af 	bl	8001c60 <HAL_I2C_Mem_Write>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2400002c 	.word	0x2400002c

08000b10 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	71bb      	strb	r3, [r7, #6]
	if(cmd) Write_IIC_Data(dat);
 8000b20:	79bb      	ldrb	r3, [r7, #6]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <OLED_WR_Byte+0x20>
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffd7 	bl	8000adc <Write_IIC_Data>
	else Write_IIC_Command(dat);
}
 8000b2e:	e003      	b.n	8000b38 <OLED_WR_Byte+0x28>
	else Write_IIC_Command(dat);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb8 	bl	8000aa8 <Write_IIC_Command>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <OLED_Set_Pos>:
}

//坐标设置

void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	3b50      	subs	r3, #80	; 0x50
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffd9 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3302      	adds	r3, #2
 8000b62:	111b      	asrs	r3, r3, #4
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffca 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ffc0 	bl	8000b10 <OLED_WR_Byte>
	// OLED_WR_Byte(0xb0+y,OLED_CMD);
	// OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
	// OLED_WR_Byte((x&0x0f),OLED_CMD); 
}   	  
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <OLED_Display_On>:
//开启OLED显示    
void OLED_Display_On(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	208d      	movs	r0, #141	; 0x8d
 8000ba0:	f7ff ffb6 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2014      	movs	r0, #20
 8000ba8:	f7ff ffb2 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8000bac:	2100      	movs	r1, #0
 8000bae:	20af      	movs	r0, #175	; 0xaf
 8000bb0:	f7ff ffae 	bl	8000b10 <OLED_WR_Byte>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e01f      	b.n	8000c04 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3b50      	subs	r3, #80	; 0x50
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff9f 	bl	8000b10 <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置—列低地址
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	f7ff ff9b 	bl	8000b10 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2010      	movs	r0, #16
 8000bde:	f7ff ff97 	bl	8000b10 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000be2:	2300      	movs	r3, #0
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	e006      	b.n	8000bf6 <OLED_Clear+0x3e>
 8000be8:	2101      	movs	r1, #1
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff ff90 	bl	8000b10 <OLED_WR_Byte>
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	daf4      	bge.n	8000be8 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3301      	adds	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d9dc      	bls.n	8000bc4 <OLED_Clear+0xc>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示				 
//size:选择字体 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	4603      	mov	r3, r0
 8000c28:	71bb      	strb	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	717b      	strb	r3, [r7, #5]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//得到偏移后的值			
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	3b20      	subs	r3, #32
 8000c3e:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	da04      	bge.n	8000c52 <OLED_ShowChar+0x3e>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8000c52:	793b      	ldrb	r3, [r7, #4]
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d135      	bne.n	8000cc4 <OLED_ShowChar+0xb0>
        {
			OLED_Set_Pos(x,y);	
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ff6e 	bl	8000b40 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e00c      	b.n	8000c84 <OLED_ShowChar+0x70>
			    OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	011a      	lsls	r2, r3, #4
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <OLED_ShowChar+0xf8>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff49 	bl	8000b10 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	3301      	adds	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d9ef      	bls.n	8000c6a <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff53 	bl	8000b40 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e00d      	b.n	8000cbc <OLED_ShowChar+0xa8>
			    OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	011a      	lsls	r2, r3, #4
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3308      	adds	r3, #8
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <OLED_ShowChar+0xf8>)
 8000cac:	5cd3      	ldrb	r3, [r2, r3]
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff2d 	bl	8000b10 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d9ee      	bls.n	8000ca0 <OLED_ShowChar+0x8c>
			OLED_Set_Pos(x,y+1);
            // OLED_Set_Pos(x,y);
            for(i=0;i<6;i++)
                OLED_WR_Byte(F6x8[c][i],OLED_DATA);
        }
}
 8000cc2:	e01e      	b.n	8000d02 <OLED_ShowChar+0xee>
			OLED_Set_Pos(x,y+1);
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff36 	bl	8000b40 <OLED_Set_Pos>
            for(i=0;i<6;i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e010      	b.n	8000cfc <OLED_ShowChar+0xe8>
                OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 8000cda:	7bba      	ldrb	r2, [r7, #14]
 8000cdc:	7bf9      	ldrb	r1, [r7, #15]
 8000cde:	480c      	ldr	r0, [pc, #48]	; (8000d10 <OLED_ShowChar+0xfc>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	4403      	add	r3, r0
 8000cea:	440b      	add	r3, r1
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff0d 	bl	8000b10 <OLED_WR_Byte>
            for(i=0;i<6;i++)
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d9eb      	bls.n	8000cda <OLED_ShowChar+0xc6>
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd90      	pop	{r4, r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	080066c8 	.word	0x080066c8
 8000d10:	080064a0 	.word	0x080064a0

08000d14 <oled_pow>:
//m^n函数
uint32_t oled_pow(uint8_t m,uint8_t n)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;	 
 8000d24:	2301      	movs	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8000d28:	e004      	b.n	8000d34 <oled_pow+0x20>
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	1e5a      	subs	r2, r3, #1
 8000d38:	71ba      	strb	r2, [r7, #6]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f5      	bne.n	8000d2a <oled_pow+0x16>
	return result;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}				  
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <OLED_ShowNum>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);	 		  
void OLED_ShowNum(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size2)
{         	
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	603a      	str	r2, [r7, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;						   
 8000d62:	2300      	movs	r3, #0
 8000d64:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e049      	b.n	8000e00 <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8000d6c:	797a      	ldrb	r2, [r7, #5]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	f7ff ffca 	bl	8000d14 <oled_pow>
 8000d80:	4602      	mov	r2, r0
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d88:	4b22      	ldr	r3, [pc, #136]	; (8000e14 <OLED_ShowNum+0xc8>)
 8000d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	1aca      	subs	r2, r1, r3
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d119      	bne.n	8000dd8 <OLED_ShowNum+0x8c>
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	797b      	ldrb	r3, [r7, #5]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	429a      	cmp	r2, r3
 8000dac:	da14      	bge.n	8000dd8 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 8000dae:	7b7b      	ldrb	r3, [r7, #13]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10f      	bne.n	8000dd4 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 8000db4:	7e3b      	ldrb	r3, [r7, #24]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	fb12 f303 	smulbb	r3, r2, r3
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	7e3b      	ldrb	r3, [r7, #24]
 8000dca:	79b9      	ldrb	r1, [r7, #6]
 8000dcc:	2220      	movs	r2, #32
 8000dce:	f7ff ff21 	bl	8000c14 <OLED_ShowChar>
				continue;
 8000dd2:	e012      	b.n	8000dfa <OLED_ShowNum+0xae>
			}
            else enshow=1;  
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73bb      	strb	r3, [r7, #14]
		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	fb12 f303 	smulbb	r3, r2, r3
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4413      	add	r3, r2
 8000dea:	b2d8      	uxtb	r0, r3
 8000dec:	7b7b      	ldrb	r3, [r7, #13]
 8000dee:	3330      	adds	r3, #48	; 0x30
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	7e3b      	ldrb	r3, [r7, #24]
 8000df4:	79b9      	ldrb	r1, [r7, #6]
 8000df6:	f7ff ff0d 	bl	8000c14 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3b1      	bcc.n	8000d6c <OLED_ShowNum+0x20>
	}
} 
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	cccccccd 	.word	0xcccccccd

08000e18 <OLED_DrawBMP>:
		j++;
	}
}
/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	717b      	strb	r3, [r7, #5]
 8000e32:	4613      	mov	r3, r2
 8000e34:	713b      	strb	r3, [r7, #4]
    unsigned int j=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
    unsigned char x,y;
    if(y1%8==0) y=y1/8;      
 8000e3a:	793b      	ldrb	r3, [r7, #4]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <OLED_DrawBMP+0x36>
 8000e46:	793b      	ldrb	r3, [r7, #4]
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	72bb      	strb	r3, [r7, #10]
 8000e4c:	e004      	b.n	8000e58 <OLED_DrawBMP+0x40>
    else y=y1/8+1;
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	72bb      	strb	r3, [r7, #10]
 8000e5c:	e01c      	b.n	8000e98 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 8000e5e:	7aba      	ldrb	r2, [r7, #10]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe6b 	bl	8000b40 <OLED_Set_Pos>
        for(x=x0;x<x1;x++)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	72fb      	strb	r3, [r7, #11]
 8000e6e:	e00c      	b.n	8000e8a <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60fa      	str	r2, [r7, #12]
 8000e76:	6a3a      	ldr	r2, [r7, #32]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe46 	bl	8000b10 <OLED_WR_Byte>
        for(x=x0;x<x1;x++)
 8000e84:	7afb      	ldrb	r3, [r7, #11]
 8000e86:	3301      	adds	r3, #1
 8000e88:	72fb      	strb	r3, [r7, #11]
 8000e8a:	7afa      	ldrb	r2, [r7, #11]
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d3ee      	bcc.n	8000e70 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 8000e92:	7abb      	ldrb	r3, [r7, #10]
 8000e94:	3301      	adds	r3, #1
 8000e96:	72bb      	strb	r3, [r7, #10]
 8000e98:	7aba      	ldrb	r2, [r7, #10]
 8000e9a:	793b      	ldrb	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3de      	bcc.n	8000e5e <OLED_DrawBMP+0x46>
	    }
	}
} 
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}

08000eaa <OLED_Init>:

//初始化SSD1306					    
void OLED_Init(void)
{ 		
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 8000eae:	2100      	movs	r1, #0
 8000eb0:	20ae      	movs	r0, #174	; 0xae
 8000eb2:	f7ff fe2d 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff fe29 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2010      	movs	r0, #16
 8000ec2:	f7ff fe25 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2040      	movs	r0, #64	; 0x40
 8000eca:	f7ff fe21 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 8000ece:	2100      	movs	r1, #0
 8000ed0:	20b0      	movs	r0, #176	; 0xb0
 8000ed2:	f7ff fe1d 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2081      	movs	r0, #129	; 0x81
 8000eda:	f7ff fe19 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 8000ede:	2100      	movs	r1, #0
 8000ee0:	20ff      	movs	r0, #255	; 0xff
 8000ee2:	f7ff fe15 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	20a1      	movs	r0, #161	; 0xa1
 8000eea:	f7ff fe11 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 8000eee:	2100      	movs	r1, #0
 8000ef0:	20a6      	movs	r0, #166	; 0xa6
 8000ef2:	f7ff fe0d 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	20a8      	movs	r0, #168	; 0xa8
 8000efa:	f7ff fe09 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 8000efe:	2100      	movs	r1, #0
 8000f00:	203f      	movs	r0, #63	; 0x3f
 8000f02:	f7ff fe05 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8000f06:	2100      	movs	r1, #0
 8000f08:	20c8      	movs	r0, #200	; 0xc8
 8000f0a:	f7ff fe01 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 8000f0e:	2100      	movs	r1, #0
 8000f10:	20d3      	movs	r0, #211	; 0xd3
 8000f12:	f7ff fdfd 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fdf9 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 8000f1e:	2100      	movs	r1, #0
 8000f20:	20d5      	movs	r0, #213	; 0xd5
 8000f22:	f7ff fdf5 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 8000f26:	2100      	movs	r1, #0
 8000f28:	2080      	movs	r0, #128	; 0x80
 8000f2a:	f7ff fdf1 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 8000f2e:	2100      	movs	r1, #0
 8000f30:	20d8      	movs	r0, #216	; 0xd8
 8000f32:	f7ff fded 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 8000f36:	2100      	movs	r1, #0
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f7ff fde9 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 8000f3e:	2100      	movs	r1, #0
 8000f40:	20d9      	movs	r0, #217	; 0xd9
 8000f42:	f7ff fde5 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8000f46:	2100      	movs	r1, #0
 8000f48:	20f1      	movs	r0, #241	; 0xf1
 8000f4a:	f7ff fde1 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 8000f4e:	2100      	movs	r1, #0
 8000f50:	20da      	movs	r0, #218	; 0xda
 8000f52:	f7ff fddd 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8000f56:	2100      	movs	r1, #0
 8000f58:	2012      	movs	r0, #18
 8000f5a:	f7ff fdd9 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 8000f5e:	2100      	movs	r1, #0
 8000f60:	20db      	movs	r0, #219	; 0xdb
 8000f62:	f7ff fdd5 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8000f66:	2100      	movs	r1, #0
 8000f68:	2030      	movs	r0, #48	; 0x30
 8000f6a:	f7ff fdd1 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 8000f6e:	2100      	movs	r1, #0
 8000f70:	208d      	movs	r0, #141	; 0x8d
 8000f72:	f7ff fdcd 	bl	8000b10 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8000f76:	2100      	movs	r1, #0
 8000f78:	2014      	movs	r0, #20
 8000f7a:	f7ff fdc9 	bl	8000b10 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8000f7e:	2100      	movs	r1, #0
 8000f80:	20af      	movs	r0, #175	; 0xaf
 8000f82:	f7ff fdc5 	bl	8000b10 <OLED_WR_Byte>
}  
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <DrawBG>:

void DrawBG(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af02      	add	r7, sp, #8
	OLED_DrawBMP(0,0,128,8,gImage_1);
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <DrawBG+0x1c>)
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2308      	movs	r3, #8
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ff3b 	bl	8000e18 <OLED_DrawBMP>
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08006cb8 	.word	0x08006cb8

08000fac <DrawMouch>:
void DrawMouch(int id){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
	// OLED_Clear();
	OLED_DrawBMP(54,3,74,5,mouch[id]);
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <DrawMouch+0x2c>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	224a      	movs	r2, #74	; 0x4a
 8000fc8:	2103      	movs	r1, #3
 8000fca:	2036      	movs	r0, #54	; 0x36
 8000fcc:	f7ff ff24 	bl	8000e18 <OLED_DrawBMP>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	080070b8 	.word	0x080070b8

08000fdc <DrawPosition>:
void DrawPosition(int x,int y){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	OLED_ShowNum(80,6,x,1,16);
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	2310      	movs	r3, #16
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2106      	movs	r1, #6
 8000ff0:	2050      	movs	r0, #80	; 0x50
 8000ff2:	f7ff feab 	bl	8000d4c <OLED_ShowNum>
	OLED_ShowNum(105,6,y,1,16);
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2106      	movs	r1, #6
 8001000:	2069      	movs	r0, #105	; 0x69
 8001002:	f7ff fea3 	bl	8000d4c <OLED_ShowNum>
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 fa5c 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <TIM6_DAC_IRQHandler+0x10>)
 800109e:	f003 fdc5 	bl	8004c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400007c 	.word	0x2400007c

080010ac <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if (htim == (&htim6)) {
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d110      	bne.n	80010de <HAL_TIM_PeriodElapsedCallback+0x32>
    DrawMouch(t);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff73 	bl	8000fac <DrawMouch>
    t=(t+1)%4;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	425a      	negs	r2, r3
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	bf58      	it	pl
 80010d8:	4253      	negpl	r3, r2
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010dc:	6013      	str	r3, [r2, #0]
  }
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2400007c 	.word	0x2400007c
 80010ec:	24000078 	.word	0x24000078

080010f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <SystemInit+0xd0>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a31      	ldr	r2, [pc, #196]	; (80011c0 <SystemInit+0xd0>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <SystemInit+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	2b02      	cmp	r3, #2
 800110e:	d807      	bhi.n	8001120 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <SystemInit+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 030f 	bic.w	r3, r3, #15
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <SystemInit+0xd4>)
 800111a:	f043 0303 	orr.w	r3, r3, #3
 800111e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <SystemInit+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <SystemInit+0xd8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <SystemInit+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <SystemInit+0xd8>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4924      	ldr	r1, [pc, #144]	; (80011c8 <SystemInit+0xd8>)
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <SystemInit+0xdc>)
 800113a:	4013      	ands	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <SystemInit+0xd4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SystemInit+0xd4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 030f 	bic.w	r3, r3, #15
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <SystemInit+0xd4>)
 8001154:	f043 0303 	orr.w	r3, r3, #3
 8001158:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <SystemInit+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <SystemInit+0xd8>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <SystemInit+0xd8>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <SystemInit+0xd8>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <SystemInit+0xe0>)
 8001170:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <SystemInit+0xd8>)
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <SystemInit+0xe4>)
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <SystemInit+0xd8>)
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <SystemInit+0xe8>)
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <SystemInit+0xd8>)
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <SystemInit+0xd8>)
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <SystemInit+0xe8>)
 8001188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <SystemInit+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <SystemInit+0xd8>)
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <SystemInit+0xe8>)
 8001194:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <SystemInit+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <SystemInit+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <SystemInit+0xd8>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <SystemInit+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <SystemInit+0xec>)
 80011b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	52002000 	.word	0x52002000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d0:	02020200 	.word	0x02020200
 80011d4:	01ff0000 	.word	0x01ff0000
 80011d8:	01010280 	.word	0x01010280
 80011dc:	52004000 	.word	0x52004000

080011e0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_TIM6_Init+0x68>)
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <MX_TIM6_Init+0x6c>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27999;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_TIM6_Init+0x68>)
 80011f8:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80011fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_TIM6_Init+0x68>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1199;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_TIM6_Init+0x68>)
 8001206:	f240 42af 	movw	r2, #1199	; 0x4af
 800120a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_TIM6_Init+0x68>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_TIM6_Init+0x68>)
 8001214:	f003 fc3a 	bl	8004a8c <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800121e:	f7ff fc3d 	bl	8000a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_TIM6_Init+0x68>)
 8001230:	f003 fede 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800123a:	f7ff fc2f 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400007c 	.word	0x2400007c
 800124c:	40001000 	.word	0x40001000

08001250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d116      	bne.n	8001290 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 8001264:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 8001274:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2036      	movs	r0, #54	; 0x36
 8001286:	f000 fa5c 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800128a:	2036      	movs	r0, #54	; 0x36
 800128c:	f000 fa73 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40001000 	.word	0x40001000
 800129c:	58024400 	.word	0x58024400

080012a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <MX_USART3_UART_Init+0x94>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e8:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012ea:	f003 ff2d 	bl	8005148 <HAL_UART_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012f4:	f7ff fbd2 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_USART3_UART_Init+0x90>)
 80012fc:	f004 ffce 	bl	800629c <HAL_UARTEx_SetTxFifoThreshold>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001306:	f7ff fbc9 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800130e:	f005 f803 	bl	8006318 <HAL_UARTEx_SetRxFifoThreshold>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001318:	f7ff fbc0 	bl	8000a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_USART3_UART_Init+0x90>)
 800131e:	f004 ff84 	bl	800622a <HAL_UARTEx_DisableFifoMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001328:	f7ff fbb8 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	240000c8 	.word	0x240000c8
 8001334:	40004800 	.word	0x40004800

08001338 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0b8      	sub	sp, #224	; 0xe0
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	22b8      	movs	r2, #184	; 0xb8
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 f88d 	bl	8006478 <memset>
  if(uartHandle->Instance==USART3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <HAL_UART_MspInit+0xc0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d142      	bne.n	80013ee <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f85a 	bl	8003430 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001382:	f7ff fb8b 	bl	8000a9c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_UART_MspInit+0xc4>)
 8001388:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_UART_MspInit+0xc4>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001392:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_UART_MspInit+0xc4>)
 8001398:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800139c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0xc4>)
 80013b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013dc:	2307      	movs	r3, #7
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0xc8>)
 80013ea:	f000 f9df 	bl	80017ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	37e0      	adds	r7, #224	; 0xe0
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004800 	.word	0x40004800
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800144c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001418:	f7ff fe6a 	bl	80010f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	; (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001442:	f004 fff5 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff fa91 	bl	800096c <main>
  bx  lr
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001450:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001454:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001458:	080071a0 	.word	0x080071a0
  ldr r2, =_sbss
 800145c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001460:	2400015c 	.word	0x2400015c

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f000 f95c 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001474:	f001 fe06 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_Init+0x68>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	4913      	ldr	r1, [pc, #76]	; (80014d4 <HAL_Init+0x6c>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_Init+0x68>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_Init+0x6c>)
 800149c:	5cd3      	ldrb	r3, [r2, r3]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <HAL_Init+0x70>)
 80014aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_Init+0x74>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f814 	bl	80014e0 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e002      	b.n	80014c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fda5 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58024400 	.word	0x58024400
 80014d4:	08007158 	.word	0x08007158
 80014d8:	24000004 	.word	0x24000004
 80014dc:	24000000 	.word	0x24000000

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_InitTick+0x60>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e021      	b.n	8001538 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_InitTick+0x64>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_InitTick+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	fbb3 f3f1 	udiv	r3, r3, r1
 8001506:	fbb2 f3f3 	udiv	r3, r2, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f941 	bl	8001792 <HAL_SYSTICK_Config>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e00e      	b.n	8001538 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d80a      	bhi.n	8001536 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001520:	2200      	movs	r2, #0
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001528:	f000 f90b 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800152c:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_InitTick+0x68>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24000000 	.word	0x24000000
 8001548:	24000008 	.word	0x24000008

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000158 	.word	0x24000158

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	24000158 	.word	0x24000158

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <__NVIC_SetPriorityGrouping+0x40>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x40>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	05fa0000 	.word	0x05fa0000

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff40 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff33 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa4 	bl	80016e8 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ba:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_GPIO_Init+0x234>)
 80017bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017be:	e194      	b.n	8001aea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 8186 	beq.w	8001ae4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d005      	beq.n	80017f0 <HAL_GPIO_Init+0x44>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 0201 	and.w	r2, r3, #1
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b03      	cmp	r3, #3
 800185c:	d017      	beq.n	800188e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d123      	bne.n	80018e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	69b9      	ldr	r1, [r7, #24]
 80018de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0203 	and.w	r2, r3, #3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80e0 	beq.w	8001ae4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x238>)
 8001926:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800192a:	4a2e      	ldr	r2, [pc, #184]	; (80019e4 <HAL_GPIO_Init+0x238>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_GPIO_Init+0x238>)
 8001936:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a29      	ldr	r2, [pc, #164]	; (80019e8 <HAL_GPIO_Init+0x23c>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <HAL_GPIO_Init+0x240>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d052      	beq.n	8001a14 <HAL_GPIO_Init+0x268>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_GPIO_Init+0x244>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d031      	beq.n	80019da <HAL_GPIO_Init+0x22e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_GPIO_Init+0x248>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x22a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_GPIO_Init+0x24c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <HAL_GPIO_Init+0x250>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x222>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <HAL_GPIO_Init+0x254>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x21e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_GPIO_Init+0x258>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x21a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <HAL_GPIO_Init+0x25c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x216>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <HAL_GPIO_Init+0x260>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x212>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_GPIO_Init+0x264>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x20e>
 80019b6:	2309      	movs	r3, #9
 80019b8:	e02d      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019ba:	230a      	movs	r3, #10
 80019bc:	e02b      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019be:	2308      	movs	r3, #8
 80019c0:	e029      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019c2:	2307      	movs	r3, #7
 80019c4:	e027      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e025      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e023      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e021      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e01f      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e01d      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e01b      	b.n	8001a16 <HAL_GPIO_Init+0x26a>
 80019de:	bf00      	nop
 80019e0:	58000080 	.word	0x58000080
 80019e4:	58024400 	.word	0x58024400
 80019e8:	58000400 	.word	0x58000400
 80019ec:	58020000 	.word	0x58020000
 80019f0:	58020400 	.word	0x58020400
 80019f4:	58020800 	.word	0x58020800
 80019f8:	58020c00 	.word	0x58020c00
 80019fc:	58021000 	.word	0x58021000
 8001a00:	58021400 	.word	0x58021400
 8001a04:	58021800 	.word	0x58021800
 8001a08:	58021c00 	.word	0x58021c00
 8001a0c:	58022000 	.word	0x58022000
 8001a10:	58022400 	.word	0x58022400
 8001a14:	2300      	movs	r3, #0
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4938      	ldr	r1, [pc, #224]	; (8001b08 <HAL_GPIO_Init+0x35c>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f ae63 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
 8001afe:	3724      	adds	r7, #36	; 0x24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58000400 	.word	0x58000400

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fe9c 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d107      	bne.n	8001bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e006      	b.n	8001bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d104      	bne.n	8001bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_I2C_Init+0x11c>)
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69d9      	ldr	r1, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	02008000 	.word	0x02008000

08001c60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	817b      	strh	r3, [r7, #10]
 8001c72:	460b      	mov	r3, r1
 8001c74:	813b      	strh	r3, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	f040 80f9 	bne.w	8001e7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x34>
 8001c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0ed      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_I2C_Mem_Write+0x4e>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e0e6      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cb6:	f7ff fc5d 	bl	8001574 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2319      	movs	r3, #25
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f955 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0d1      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2221      	movs	r2, #33	; 0x21
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2240      	movs	r2, #64	; 0x40
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d00:	88f8      	ldrh	r0, [r7, #6]
 8001d02:	893a      	ldrh	r2, [r7, #8]
 8001d04:	8979      	ldrh	r1, [r7, #10]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 f8b9 	bl	8001e88 <I2C_RequestMemoryWrite>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0a9      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d90e      	bls.n	8001d50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	22ff      	movs	r2, #255	; 0xff
 8001d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	8979      	ldrh	r1, [r7, #10]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 fabd 	bl	80022c8 <I2C_TransferConfig>
 8001d4e:	e00f      	b.n	8001d70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 faac 	bl	80022c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f93f 	bl	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e07b      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d034      	beq.n	8001e28 <HAL_I2C_Mem_Write+0x1c8>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d130      	bne.n	8001e28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f8d1 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04d      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2bff      	cmp	r3, #255	; 0xff
 8001de8:	d90e      	bls.n	8001e08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	22ff      	movs	r2, #255	; 0xff
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	8979      	ldrh	r1, [r7, #10]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fa61 	bl	80022c8 <I2C_TransferConfig>
 8001e06:	e00f      	b.n	8001e28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	8979      	ldrh	r1, [r7, #10]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 fa50 	bl	80022c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d19e      	bne.n	8001d70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f91e 	bl	8002078 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01a      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_I2C_Mem_Write+0x224>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	fe00e800 	.word	0xfe00e800

08001e88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	4608      	mov	r0, r1
 8001e92:	4611      	mov	r1, r2
 8001e94:	461a      	mov	r2, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	817b      	strh	r3, [r7, #10]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	813b      	strh	r3, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <I2C_RequestMemoryWrite+0xa4>)
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fa09 	bl	80022c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	69b9      	ldr	r1, [r7, #24]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f89c 	bl	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e02c      	b.n	8001f24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed0:	893b      	ldrh	r3, [r7, #8]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eda:	e015      	b.n	8001f08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001edc:	893b      	ldrh	r3, [r7, #8]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f882 	bl	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e012      	b.n	8001f24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001efe:	893b      	ldrh	r3, [r7, #8]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f830 	bl	8001f78 <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	80002000 	.word	0x80002000

08001f30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d103      	bne.n	8001f4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d007      	beq.n	8001f6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	619a      	str	r2, [r3, #24]
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	e022      	b.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f90:	d01e      	beq.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff faef 	bl	8001574 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d113      	bne.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e00f      	b.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d0cd      	beq.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002004:	e02c      	b.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f870 	bl	80020f0 <I2C_IsErrorOccurred>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e02a      	b.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002020:	d01e      	beq.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7ff faa7 	bl	8001574 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	d302      	bcc.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d113      	bne.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e007      	b.n	8002070 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d1cb      	bne.n	8002006 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002084:	e028      	b.n	80020d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f830 	bl	80020f0 <I2C_IsErrorOccurred>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e026      	b.n	80020e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209a:	f7ff fa6b 	bl	8001574 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d113      	bne.n	80020d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d1cf      	bne.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d075      	beq.n	8002208 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2210      	movs	r2, #16
 8002122:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002124:	e056      	b.n	80021d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800212c:	d052      	beq.n	80021d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212e:	f7ff fa21 	bl	8001574 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <I2C_IsErrorOccurred+0x54>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d147      	bne.n	80021d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002156:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002166:	d12e      	bne.n	80021c6 <I2C_IsErrorOccurred+0xd6>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800216e:	d02a      	beq.n	80021c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b20      	cmp	r3, #32
 8002174:	d027      	beq.n	80021c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002184:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002186:	f7ff f9f5 	bl	8001574 <HAL_GetTick>
 800218a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218c:	e01b      	b.n	80021c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800218e:	f7ff f9f1 	bl	8001574 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b19      	cmp	r3, #25
 800219a:	d914      	bls.n	80021c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f043 0220 	orr.w	r2, r3, #32
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d1dc      	bne.n	800218e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d003      	beq.n	80021ea <I2C_IsErrorOccurred+0xfa>
 80021e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d09d      	beq.n	8002126 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2220      	movs	r2, #32
 80021f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800222a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01c      	beq.n	80022b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fe56 	bl	8001f30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <I2C_IsErrorOccurred+0x1d4>)
 8002290:	400b      	ands	r3, r1
 8002292:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	fe00e800 	.word	0xfe00e800

080022c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	817b      	strh	r3, [r7, #10]
 80022d6:	4613      	mov	r3, r2
 80022d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022e0:	7a7b      	ldrb	r3, [r7, #9]
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <I2C_TransferConfig+0x60>)
 8002308:	430b      	orrs	r3, r1
 800230a:	43db      	mvns	r3, r3
 800230c:	ea02 0103 	and.w	r1, r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	03ff63ff 	.word	0x03ff63ff

0800232c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	d138      	bne.n	80023b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800234c:	2302      	movs	r3, #2
 800234e:	e032      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0201 	bic.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800237e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6819      	ldr	r1, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d139      	bne.n	800244c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e033      	b.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002414:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	2b06      	cmp	r3, #6
 800246e:	d00a      	beq.n	8002486 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e040      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e03e      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002496:	f7ff f86d 	bl	8001574 <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249c:	e009      	b.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800249e:	f7ff f869 	bl	8001574 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ac:	d901      	bls.n	80024b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e028      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024be:	d1ee      	bne.n	800249e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b1e      	cmp	r3, #30
 80024c4:	d008      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b2e      	cmp	r3, #46	; 0x2e
 80024ca:	d005      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b1d      	cmp	r3, #29
 80024d0:	d002      	beq.n	80024d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b2d      	cmp	r3, #45	; 0x2d
 80024d6:	d114      	bne.n	8002502 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024d8:	f7ff f84c 	bl	8001574 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024e0:	f7ff f848 	bl	8001574 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_ConfigSupply+0xb0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58024800 	.word	0x58024800

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e3f4      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80b3 	beq.w	8002696 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b95      	ldr	r3, [pc, #596]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800253a:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	2b10      	cmp	r3, #16
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x46>
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b18      	cmp	r3, #24
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8098 	beq.w	8002694 <HAL_RCC_OscConfig+0x184>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 8093 	bne.w	8002694 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e3cc      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x7a>
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e058      	b.n	800263c <HAL_RCC_OscConfig+0x12c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0xa8>
 8002592:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7c      	ldr	r2, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a79      	ldr	r2, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b77      	ldr	r3, [pc, #476]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a76      	ldr	r2, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e041      	b.n	800263c <HAL_RCC_OscConfig+0x12c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 80025c2:	4b71      	ldr	r3, [pc, #452]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a70      	ldr	r2, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b6e      	ldr	r3, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6d      	ldr	r2, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e029      	b.n	800263c <HAL_RCC_OscConfig+0x12c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80025f0:	d112      	bne.n	8002618 <HAL_RCC_OscConfig+0x108>
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a64      	ldr	r2, [pc, #400]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e011      	b.n	800263c <HAL_RCC_OscConfig+0x12c>
 8002618:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002636:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe ff96 	bl	8001574 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe ff92 	bl	8001574 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e356      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x13c>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe ff82 	bl	8001574 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe ff7e 	bl	8001574 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e342      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x164>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 808d 	beq.w	80027be <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ae:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x1ba>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d137      	bne.n	8002730 <HAL_RCC_OscConfig+0x220>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d132      	bne.n	8002730 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e314      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0219 	bic.w	r2, r3, #25
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4926      	ldr	r1, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f4:	f7fe ff3e 	bl	8001574 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe ff3a 	bl	8001574 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e2fe      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4917      	ldr	r1, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272e:	e046      	b.n	80027be <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d029      	beq.n	800278c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 0219 	bic.w	r2, r3, #25
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4910      	ldr	r1, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe ff13 	bl	8001574 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe ff0f 	bl	8001574 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e2d3      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4902      	ldr	r1, [pc, #8]	; (8002788 <HAL_RCC_OscConfig+0x278>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x2ae>
 8002786:	bf00      	nop
 8002788:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278c:	4b97      	ldr	r3, [pc, #604]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a96      	ldr	r2, [pc, #600]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe feec 	bl	8001574 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7fe fee8 	bl	8001574 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e2ac      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b2:	4b8e      	ldr	r3, [pc, #568]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06a      	beq.n	80028a0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	4b88      	ldr	r3, [pc, #544]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027d4:	4b85      	ldr	r3, [pc, #532]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d007      	beq.n	80027f0 <HAL_RCC_OscConfig+0x2e0>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b18      	cmp	r3, #24
 80027e4:	d11b      	bne.n	800281e <HAL_RCC_OscConfig+0x30e>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d116      	bne.n	800281e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f0:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e281      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002808:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	4975      	ldr	r1, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281c:	e040      	b.n	80028a0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d023      	beq.n	800286e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002826:	4b71      	ldr	r3, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a70      	ldr	r2, [pc, #448]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fe9f 	bl	8001574 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800283a:	f7fe fe9b 	bl	8001574 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e25f      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284c:	4b67      	ldr	r3, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	4b64      	ldr	r3, [pc, #400]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4961      	ldr	r1, [pc, #388]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
 800286c:	e018      	b.n	80028a0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800286e:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5e      	ldr	r2, [pc, #376]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fe7b 	bl	8001574 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002882:	f7fe fe77 	bl	8001574 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e23b      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002894:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d036      	beq.n	800291a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d019      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b8:	4a4c      	ldr	r2, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fe58 	bl	8001574 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fe54 	bl	8001574 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e218      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028da:	4b44      	ldr	r3, [pc, #272]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3b8>
 80028e6:	e018      	b.n	800291a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7fe fe3e 	bl	8001574 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fe3a 	bl	8001574 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1fe      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d036      	beq.n	8002994 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d019      	beq.n	8002962 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2e      	ldr	r2, [pc, #184]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800293a:	f7fe fe1b 	bl	8001574 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002942:	f7fe fe17 	bl	8001574 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1db      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x432>
 8002960:	e018      	b.n	8002994 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 8002968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800296e:	f7fe fe01 	bl	8001574 <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002976:	f7fe fdfd 	bl	8001574 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1c1      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80af 	beq.w	8002b00 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fde1 	bl	8001574 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fddd 	bl	8001574 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1a1      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_OscConfig+0x4e0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4e4>
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <HAL_RCC_OscConfig+0x4dc>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e05b      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 80029ea:	bf00      	nop
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58024800 	.word	0x58024800
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x512>
 80029fc:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a9c      	ldr	r2, [pc, #624]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	4b9a      	ldr	r3, [pc, #616]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	4a99      	ldr	r2, [pc, #612]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a12:	6713      	str	r3, [r2, #112]	; 0x70
 8002a14:	4b97      	ldr	r3, [pc, #604]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a96      	ldr	r2, [pc, #600]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a1a:	f023 0304 	bic.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	e03f      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x540>
 8002a2a:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4a91      	ldr	r2, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6713      	str	r3, [r2, #112]	; 0x70
 8002a36:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a8e      	ldr	r2, [pc, #568]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a8b      	ldr	r2, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	e028      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b85      	cmp	r3, #133	; 0x85
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x56e>
 8002a58:	4b86      	ldr	r3, [pc, #536]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a85      	ldr	r2, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a82      	ldr	r2, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e011      	b.n	8002aa2 <HAL_RCC_OscConfig+0x592>
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a7c      	ldr	r2, [pc, #496]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a90:	f023 0304 	bic.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a76      	ldr	r2, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d015      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fd63 	bl	8001574 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe fd5f 	bl	8001574 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e121      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ac8:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5a2>
 8002ad4:	e014      	b.n	8002b00 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fd4d 	bl	8001574 <HAL_GetTick>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe fd49 	bl	8001574 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e10b      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002af4:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ee      	bne.n	8002ade <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8100 	beq.w	8002d0a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b12:	2b18      	cmp	r3, #24
 8002b14:	f000 80bb 	beq.w	8002c8e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f040 8095 	bne.w	8002c4c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a53      	ldr	r2, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fd21 	bl	8001574 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fd1d 	bl	8001574 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e0e1      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b48:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b58:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x768>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	430a      	orrs	r2, r1
 8002b68:	4942      	ldr	r1, [pc, #264]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	628b      	str	r3, [r1, #40]	; 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	025b      	lsls	r3, r3, #9
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	3b01      	subs	r3, #1
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b9e:	4935      	ldr	r1, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002ba4:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a32      	ldr	r2, [pc, #200]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bb0:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_OscConfig+0x76c>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bbc:	00d2      	lsls	r2, r2, #3
 8002bbe:	492d      	ldr	r1, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	f023 020c 	bic.w	r2, r3, #12
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4928      	ldr	r1, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f023 0202 	bic.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4924      	ldr	r1, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	4a1b      	ldr	r2, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fca6 	bl	8001574 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fca2 	bl	8001574 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e066      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x71c>
 8002c4a:	e05e      	b.n	8002d0a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a08      	ldr	r2, [pc, #32]	; (8002c74 <HAL_RCC_OscConfig+0x764>)
 8002c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fc8c 	bl	8001574 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fc88 	bl	8001574 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04c      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
 8002c78:	fffffc0c 	.word	0xfffffc0c
 8002c7c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x804>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x750>
 8002c8c:	e03d      	b.n	8002d0a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_RCC_OscConfig+0x804>)
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_RCC_OscConfig+0x804>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d031      	beq.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d12a      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d122      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d11a      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d111      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d108      	bne.n	8002d06 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0e1b      	lsrs	r3, r3, #24
 8002cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	; 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	58024400 	.word	0x58024400

08002d18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e19c      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b8a      	ldr	r3, [pc, #552]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b87      	ldr	r3, [pc, #540]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	4985      	ldr	r1, [pc, #532]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e184      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d908      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d78:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4975      	ldr	r1, [pc, #468]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d908      	bls.n	8002db8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	496a      	ldr	r1, [pc, #424]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d908      	bls.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dd4:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	495e      	ldr	r1, [pc, #376]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d908      	bls.n	8002e14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e02:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4953      	ldr	r1, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f023 020f 	bic.w	r2, r3, #15
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4947      	ldr	r1, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d055      	beq.n	8002efa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e4e:	4b43      	ldr	r3, [pc, #268]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	4940      	ldr	r1, [pc, #256]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d121      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0f6      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d115      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0ea      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e98:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0de      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea8:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0d6      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f023 0207 	bic.w	r2, r3, #7
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4925      	ldr	r1, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fb53 	bl	8001574 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed2:	f7fe fb4f 	bl	8001574 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0be      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1eb      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d208      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f023 020f 	bic.w	r2, r3, #15
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d214      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4906      	ldr	r1, [pc, #24]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e086      	b.n	8003066 <HAL_RCC_ClockConfig+0x34e>
 8002f58:	52002000 	.word	0x52002000
 8002f5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d010      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d208      	bcs.n	8002f8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f7c:	4b3c      	ldr	r3, [pc, #240]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	4939      	ldr	r1, [pc, #228]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d010      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	4b34      	ldr	r3, [pc, #208]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d208      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	492e      	ldr	r1, [pc, #184]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d208      	bcs.n	8002fea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4922      	ldr	r1, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003002:	429a      	cmp	r2, r3
 8003004:	d208      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4917      	ldr	r1, [pc, #92]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8003014:	4313      	orrs	r3, r2
 8003016:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003018:	f000 f834 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	4912      	ldr	r1, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x35c>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x358>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_RCC_ClockConfig+0x35c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x360>)
 800304e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x364>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x368>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fa40 	bl	80014e0 <HAL_InitTick>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	58024400 	.word	0x58024400
 8003074:	08007158 	.word	0x08007158
 8003078:	24000004 	.word	0x24000004
 800307c:	24000000 	.word	0x24000000
 8003080:	24000008 	.word	0x24000008

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	; 0x24
 8003088:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308a:	4bb3      	ldr	r3, [pc, #716]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003092:	2b18      	cmp	r3, #24
 8003094:	f200 8155 	bhi.w	8003342 <HAL_RCC_GetSysClockFreq+0x2be>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	08003105 	.word	0x08003105
 80030a4:	08003343 	.word	0x08003343
 80030a8:	08003343 	.word	0x08003343
 80030ac:	08003343 	.word	0x08003343
 80030b0:	08003343 	.word	0x08003343
 80030b4:	08003343 	.word	0x08003343
 80030b8:	08003343 	.word	0x08003343
 80030bc:	08003343 	.word	0x08003343
 80030c0:	0800312b 	.word	0x0800312b
 80030c4:	08003343 	.word	0x08003343
 80030c8:	08003343 	.word	0x08003343
 80030cc:	08003343 	.word	0x08003343
 80030d0:	08003343 	.word	0x08003343
 80030d4:	08003343 	.word	0x08003343
 80030d8:	08003343 	.word	0x08003343
 80030dc:	08003343 	.word	0x08003343
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003343 	.word	0x08003343
 80030e8:	08003343 	.word	0x08003343
 80030ec:	08003343 	.word	0x08003343
 80030f0:	08003343 	.word	0x08003343
 80030f4:	08003343 	.word	0x08003343
 80030f8:	08003343 	.word	0x08003343
 80030fc:	08003343 	.word	0x08003343
 8003100:	08003137 	.word	0x08003137
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003104:	4b94      	ldr	r3, [pc, #592]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003110:	4b91      	ldr	r3, [pc, #580]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	4a90      	ldr	r2, [pc, #576]	; (800335c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003122:	e111      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003124:	4b8d      	ldr	r3, [pc, #564]	; (800335c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003126:	61bb      	str	r3, [r7, #24]
    break;
 8003128:	e10e      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800312c:	61bb      	str	r3, [r7, #24]
    break;
 800312e:	e10b      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003130:	4b8c      	ldr	r3, [pc, #560]	; (8003364 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003132:	61bb      	str	r3, [r7, #24]
    break;
 8003134:	e108      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003136:	4b88      	ldr	r3, [pc, #544]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003140:	4b85      	ldr	r3, [pc, #532]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800314c:	4b82      	ldr	r3, [pc, #520]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003156:	4b80      	ldr	r3, [pc, #512]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	08db      	lsrs	r3, r3, #3
 800315c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80e1 	beq.w	800333c <HAL_RCC_GetSysClockFreq+0x2b8>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f000 8083 	beq.w	8003288 <HAL_RCC_GetSysClockFreq+0x204>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b02      	cmp	r3, #2
 8003186:	f200 80a1 	bhi.w	80032cc <HAL_RCC_GetSysClockFreq+0x248>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x114>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d056      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003196:	e099      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d02d      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	4a6b      	ldr	r2, [pc, #428]	; (800335c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b62      	ldr	r3, [pc, #392]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031fe:	e087      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800336c <HAL_RCC_GetSysClockFreq+0x2e8>
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b51      	ldr	r3, [pc, #324]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a02 	vldr	s12, [r7, #8]
 8003226:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e4>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003242:	e065      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003370 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	ed97 6a02 	vldr	s12, [r7, #8]
 800326a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003286:	e043      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003374 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329a:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ca:	e021      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003370 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003368 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	0a5b      	lsrs	r3, r3, #9
 8003316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331a:	3301      	adds	r3, #1
 800331c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	ee07 3a90 	vmov	s15, r3
 8003324:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003328:	edd7 6a07 	vldr	s13, [r7, #28]
 800332c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003334:	ee17 3a90 	vmov	r3, s15
 8003338:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    break;
 8003340:	e002      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003344:	61bb      	str	r3, [r7, #24]
    break;
 8003346:	bf00      	nop
  }

  return sysclockfreq;
 8003348:	69bb      	ldr	r3, [r7, #24]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	58024400 	.word	0x58024400
 800335c:	03d09000 	.word	0x03d09000
 8003360:	003d0900 	.word	0x003d0900
 8003364:	007a1200 	.word	0x007a1200
 8003368:	46000000 	.word	0x46000000
 800336c:	4c742400 	.word	0x4c742400
 8003370:	4a742400 	.word	0x4a742400
 8003374:	4af42400 	.word	0x4af42400

08003378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800337e:	f7ff fe81 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490f      	ldr	r1, [pc, #60]	; (80033cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_GetHCLKFreq+0x54>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b6:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	58024400 	.word	0x58024400
 80033cc:	08007158 	.word	0x08007158
 80033d0:	24000004 	.word	0x24000004
 80033d4:	24000000 	.word	0x24000000

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80033dc:	f7ff ffcc 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4904      	ldr	r1, [pc, #16]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400
 8003400:	08007158 	.word	0x08007158

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003408:	f7ff ffb6 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4904      	ldr	r1, [pc, #16]	; (800342c <HAL_RCC_GetPCLK2Freq+0x28>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003424:	4618      	mov	r0, r3
 8003426:	bd80      	pop	{r7, pc}
 8003428:	58024400 	.word	0x58024400
 800342c:	08007158 	.word	0x08007158

08003430 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003438:	2300      	movs	r3, #0
 800343a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343c:	2300      	movs	r3, #0
 800343e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003454:	d02a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800345a:	d824      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800345c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003460:	d018      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003466:	d81e      	bhi.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800346c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003470:	d007      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003472:	e018      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003474:	4b9f      	ldr	r3, [pc, #636]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	4a9e      	ldr	r2, [pc, #632]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800347a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003480:	e015      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f99b 	bl	80047c4 <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003492:	e00c      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3324      	adds	r3, #36	; 0x24
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f001 fa44 	bl	8004928 <RCCEx_PLL3_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
      break;
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034b4:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	498c      	ldr	r1, [pc, #560]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	650b      	str	r3, [r1, #80]	; 0x50
 80034c6:	e001      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d826      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	080034fd 	.word	0x080034fd
 80034ec:	0800350b 	.word	0x0800350b
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	08003535 	.word	0x08003535
 80034f8:	08003535 	.word	0x08003535
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4b7d      	ldr	r3, [pc, #500]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a7c      	ldr	r2, [pc, #496]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f957 	bl	80047c4 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3324      	adds	r3, #36	; 0x24
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fa00 	bl	8004928 <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353c:	4b6d      	ldr	r3, [pc, #436]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003540:	f023 0207 	bic.w	r2, r3, #7
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003548:	496a      	ldr	r1, [pc, #424]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	650b      	str	r3, [r1, #80]	; 0x50
 800354e:	e001      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	2b00      	cmp	r3, #0
 800355e:	d04a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003568:	d031      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800356a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800356e:	d82b      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003574:	d02d      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d825      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800357c:	2bc0      	cmp	r3, #192	; 0xc0
 800357e:	d02a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003580:	2bc0      	cmp	r3, #192	; 0xc0
 8003582:	d821      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d016      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003588:	2b80      	cmp	r3, #128	; 0x80
 800358a:	d81d      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d007      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003594:	e018      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	4a56      	ldr	r2, [pc, #344]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800359c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035a2:	e019      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 f90a 	bl	80047c4 <RCCEx_PLL2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035b4:	e010      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3324      	adds	r3, #36	; 0x24
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 f9b3 	bl	8004928 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035c6:	e007      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	e004      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	4942      	ldr	r1, [pc, #264]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	650b      	str	r3, [r1, #80]	; 0x50
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d04f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800360a:	d036      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800360c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003610:	d830      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003616:	d032      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361c:	d82a      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800361e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003622:	d02e      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003624:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003628:	d824      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d018      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003634:	d81e      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800363a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363e:	d007      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003640:	e018      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800364e:	e019      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f8b4 	bl	80047c4 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003660:	e010      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3324      	adds	r3, #36	; 0x24
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f001 f95d 	bl	8004928 <RCCEx_PLL3_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003672:	e007      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
      break;
 8003678:	e004      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	4917      	ldr	r1, [pc, #92]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	650b      	str	r3, [r1, #80]	; 0x50
 800369c:	e001      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d034      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d01c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d817      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d00c      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d813      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d10f      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036d6:	e010      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f870 	bl	80047c4 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036e8:	e007      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036f4:	58024400 	.word	0x58024400
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003700:	4b9b      	ldr	r3, [pc, #620]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	4998      	ldr	r1, [pc, #608]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800370e:	4313      	orrs	r3, r2
 8003710:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003712:	e001      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d047      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372c:	d030      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003732:	d82a      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003738:	d02c      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800373a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800373e:	d824      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d018      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374a:	d81e      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	d007      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003756:	e018      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b85      	ldr	r3, [pc, #532]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a84      	ldr	r2, [pc, #528]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003764:	e017      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f829 	bl	80047c4 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003776:	e00e      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3324      	adds	r3, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 f8d2 	bl	8004928 <RCCEx_PLL3_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003788:	e005      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800379c:	4b74      	ldr	r3, [pc, #464]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a8:	4971      	ldr	r1, [pc, #452]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	650b      	str	r3, [r1, #80]	; 0x50
 80037ae:	e001      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d049      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c8:	d02e      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ce:	d828      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d4:	d02a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037da:	d822      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037e0:	d026      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80037e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037e6:	d81c      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ec:	d010      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f2:	d816      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01d      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d111      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	2101      	movs	r1, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 ffdd 	bl	80047c4 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800380e:	e012      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f001 f886 	bl	8004928 <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003820:	e009      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
      break;
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003828:	bf00      	nop
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800382c:	bf00      	nop
 800382e:	e002      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003848:	4949      	ldr	r1, [pc, #292]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800384a:	4313      	orrs	r3, r2
 800384c:	650b      	str	r3, [r1, #80]	; 0x50
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d053      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003866:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800386a:	d034      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800386c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003870:	d82e      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003872:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003876:	d030      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800387c:	d828      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d02c      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d822      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800388a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800388e:	d028      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003890:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003894:	d81c      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800389a:	d010      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a0:	d816      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038aa:	d111      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ff86 	bl	80047c4 <RCCEx_PLL2_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038bc:	e014      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3324      	adds	r3, #36	; 0x24
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f82f 	bl	8004928 <RCCEx_PLL3_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038ce:	e00b      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
      break;
 80038d4:	e008      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038d6:	bf00      	nop
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038fc:	491c      	ldr	r1, [pc, #112]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	658b      	str	r3, [r1, #88]	; 0x58
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d031      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800391c:	d00e      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003922:	d814      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800392c:	d10f      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ff3e 	bl	80047c4 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	4901      	ldr	r1, [pc, #4]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800396a:	4313      	orrs	r3, r2
 800396c:	650b      	str	r3, [r1, #80]	; 0x50
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d032      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	2b03      	cmp	r3, #3
 800398a:	d81b      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039cb 	.word	0x080039cb
 8003998:	080039a5 	.word	0x080039a5
 800399c:	080039b3 	.word	0x080039b3
 80039a0:	080039cb 	.word	0x080039cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4bb2      	ldr	r3, [pc, #712]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4ab1      	ldr	r2, [pc, #708]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039b0:	e00c      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 ff03 	bl	80047c4 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80039ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039d2:	4ba7      	ldr	r3, [pc, #668]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	49a4      	ldr	r1, [pc, #656]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039e4:	e001      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8086 	beq.w	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f8:	4b9e      	ldr	r3, [pc, #632]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a9d      	ldr	r2, [pc, #628]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a04:	f7fd fdb6 	bl	8001574 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a0a:	e009      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0c:	f7fd fdb2 	bl	8001574 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d902      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a1e:	e005      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a20:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ef      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d166      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a32:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a3c:	4053      	eors	r3, r2
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a46:	4b8a      	ldr	r3, [pc, #552]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a50:	4b87      	ldr	r3, [pc, #540]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a86      	ldr	r2, [pc, #536]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5c:	4b84      	ldr	r3, [pc, #528]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a60:	4a83      	ldr	r2, [pc, #524]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a68:	4a81      	ldr	r2, [pc, #516]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fd7b 	bl	8001574 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a80:	e00b      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fd fd77 	bl	8001574 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d902      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	75fb      	strb	r3, [r7, #23]
            break;
 8003a98:	e005      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a9a:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0ed      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d126      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003abc:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aca:	0919      	lsrs	r1, r3, #4
 8003acc:	4b6a      	ldr	r3, [pc, #424]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ace:	400b      	ands	r3, r1
 8003ad0:	4967      	ldr	r1, [pc, #412]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003ad8:	4b65      	ldr	r3, [pc, #404]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	4a64      	ldr	r2, [pc, #400]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ade:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae2:	6113      	str	r3, [r2, #16]
 8003ae4:	4b62      	ldr	r3, [pc, #392]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003ae6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	495f      	ldr	r1, [pc, #380]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	670b      	str	r3, [r1, #112]	; 0x70
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	75bb      	strb	r3, [r7, #22]
 8003afe:	e001      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d07f      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b16:	2b28      	cmp	r3, #40	; 0x28
 8003b18:	d866      	bhi.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003bef 	.word	0x08003bef
 8003b24:	08003be9 	.word	0x08003be9
 8003b28:	08003be9 	.word	0x08003be9
 8003b2c:	08003be9 	.word	0x08003be9
 8003b30:	08003be9 	.word	0x08003be9
 8003b34:	08003be9 	.word	0x08003be9
 8003b38:	08003be9 	.word	0x08003be9
 8003b3c:	08003be9 	.word	0x08003be9
 8003b40:	08003bc5 	.word	0x08003bc5
 8003b44:	08003be9 	.word	0x08003be9
 8003b48:	08003be9 	.word	0x08003be9
 8003b4c:	08003be9 	.word	0x08003be9
 8003b50:	08003be9 	.word	0x08003be9
 8003b54:	08003be9 	.word	0x08003be9
 8003b58:	08003be9 	.word	0x08003be9
 8003b5c:	08003be9 	.word	0x08003be9
 8003b60:	08003bd7 	.word	0x08003bd7
 8003b64:	08003be9 	.word	0x08003be9
 8003b68:	08003be9 	.word	0x08003be9
 8003b6c:	08003be9 	.word	0x08003be9
 8003b70:	08003be9 	.word	0x08003be9
 8003b74:	08003be9 	.word	0x08003be9
 8003b78:	08003be9 	.word	0x08003be9
 8003b7c:	08003be9 	.word	0x08003be9
 8003b80:	08003bef 	.word	0x08003bef
 8003b84:	08003be9 	.word	0x08003be9
 8003b88:	08003be9 	.word	0x08003be9
 8003b8c:	08003be9 	.word	0x08003be9
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003be9 	.word	0x08003be9
 8003ba0:	08003bef 	.word	0x08003bef
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bef 	.word	0x08003bef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	2101      	movs	r1, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fdfa 	bl	80047c4 <RCCEx_PLL2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bd4:	e00c      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fea3 	bl	8004928 <RCCEx_PLL3_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c04:	491a      	ldr	r1, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	654b      	str	r3, [r1, #84]	; 0x54
 8003c0a:	e001      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d03f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c20:	2b05      	cmp	r3, #5
 8003c22:	d821      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003c45 	.word	0x08003c45
 8003c34:	08003c57 	.word	0x08003c57
 8003c38:	08003c7d 	.word	0x08003c7d
 8003c3c:	08003c7d 	.word	0x08003c7d
 8003c40:	08003c7d 	.word	0x08003c7d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fdba 	bl	80047c4 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c54:	e013      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3324      	adds	r3, #36	; 0x24
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fe63 	bl	8004928 <RCCEx_PLL3_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c66:	e00a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6c:	e007      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
 8003c74:	58024800 	.word	0x58024800
 8003c78:	00ffffcf 	.word	0x00ffffcf
      break;
 8003c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c84:	4b9f      	ldr	r3, [pc, #636]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f023 0207 	bic.w	r2, r3, #7
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c90:	499c      	ldr	r1, [pc, #624]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	654b      	str	r3, [r1, #84]	; 0x54
 8003c96:	e001      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d039      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d820      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cfb 	.word	0x08003cfb
 8003cbc:	08003cd1 	.word	0x08003cd1
 8003cc0:	08003ce3 	.word	0x08003ce3
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003cfb 	.word	0x08003cfb
 8003ccc:	08003cfb 	.word	0x08003cfb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd74 	bl	80047c4 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e00c      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3324      	adds	r3, #36	; 0x24
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe1d 	bl	8004928 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cf2:	e003      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf8:	e000      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d02:	4b80      	ldr	r3, [pc, #512]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	f023 0207 	bic.w	r2, r3, #7
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d10:	497c      	ldr	r1, [pc, #496]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	658b      	str	r3, [r1, #88]	; 0x58
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d04b      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d32:	d02e      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d38:	d828      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d02a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d822      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d4a:	d026      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d50:	d81c      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d56:	d010      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5c:	d816      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01d      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d66:	d111      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd28 	bl	80047c4 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d78:	e012      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3324      	adds	r3, #36	; 0x24
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fdd1 	bl	8004928 <RCCEx_PLL3_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e009      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003da6:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	4953      	ldr	r1, [pc, #332]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	654b      	str	r3, [r1, #84]	; 0x54
 8003dba:	e001      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d04b      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dd6:	d02e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003dd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ddc:	d828      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d02a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d822      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dee:	d026      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df4:	d81c      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d816      	bhi.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01d      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fcd6 	bl	80047c4 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e012      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fd7f 	bl	8004928 <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
      break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e58:	492a      	ldr	r1, [pc, #168]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e5e:	e001      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d04d      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e7a:	d02e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003e7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e80:	d828      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d02a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	d822      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e92:	d026      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e98:	d81c      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea4:	d816      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eae:	d111      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fc84 	bl	80047c4 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ec0:	e012      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd2d 	bl	8004928 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003eda:	bf00      	nop
 8003edc:	e004      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003efc:	4901      	ldr	r1, [pc, #4]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	658b      	str	r3, [r1, #88]	; 0x58
 8003f02:	e003      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003f04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f22:	d10a      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3324      	adds	r3, #36	; 0x24
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fcfc 	bl	8004928 <RCCEx_PLL3_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f3a:	4b8c      	ldr	r3, [pc, #560]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	4988      	ldr	r1, [pc, #544]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fcdb 	bl	8004928 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7c:	4b7b      	ldr	r3, [pc, #492]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f8a:	4978      	ldr	r1, [pc, #480]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d034      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fac:	d817      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fb8:	e011      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fbff 	bl	80047c4 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fca:	e00c      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3324      	adds	r3, #36	; 0x24
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fca8 	bl	8004928 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fec:	4b5f      	ldr	r3, [pc, #380]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ffa:	495c      	ldr	r1, [pc, #368]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	658b      	str	r3, [r1, #88]	; 0x58
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d033      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004018:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800401c:	d01c      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800401e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004022:	d816      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004028:	d003      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800402a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800402e:	d007      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004030:	e00f      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004032:	4b4e      	ldr	r3, [pc, #312]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4a4d      	ldr	r2, [pc, #308]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800403e:	e00c      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3324      	adds	r3, #36	; 0x24
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fc6e 	bl	8004928 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004050:	e003      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
      break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406e:	493f      	ldr	r1, [pc, #252]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004070:	4313      	orrs	r3, r2
 8004072:	654b      	str	r3, [r1, #84]	; 0x54
 8004074:	e001      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d029      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800408e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004092:	d007      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004094:	e00f      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b35      	ldr	r3, [pc, #212]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a34      	ldr	r2, [pc, #208]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040a2:	e00b      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fb8a 	bl	80047c4 <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040b4:	e002      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040c2:	4b2a      	ldr	r3, [pc, #168]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	4927      	ldr	r1, [pc, #156]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040d4:	e001      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3324      	adds	r3, #36	; 0x24
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fc1b 	bl	8004928 <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d035      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004112:	d017      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004118:	d811      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800411a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411e:	d013      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d80b      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d010      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800412a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412e:	d106      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	4a0d      	ldr	r2, [pc, #52]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800413c:	e007      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
      break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800414c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004162:	4902      	ldr	r1, [pc, #8]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	654b      	str	r3, [r1, #84]	; 0x54
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800416a:	bf00      	nop
 800416c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418c:	492d      	ldr	r1, [pc, #180]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800418e:	4313      	orrs	r3, r2
 8004190:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041aa:	4926      	ldr	r1, [pc, #152]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80041bc:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	491e      	ldr	r1, [pc, #120]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041e4:	6113      	str	r3, [r2, #16]
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041f0:	4914      	ldr	r1, [pc, #80]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	da08      	bge.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	490e      	ldr	r1, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800420c:	4313      	orrs	r3, r2
 800420e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800421c:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	4906      	ldr	r1, [pc, #24]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800422c:	4313      	orrs	r3, r2
 800422e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004230:	7dbb      	ldrb	r3, [r7, #22]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	58024400 	.word	0x58024400

08004248 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800424c:	f7ff f894 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4904      	ldr	r1, [pc, #16]	; (8004270 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	58024400 	.word	0x58024400
 8004270:	08007158 	.word	0x08007158

08004274 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800427c:	4ba1      	ldr	r3, [pc, #644]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004286:	4b9f      	ldr	r3, [pc, #636]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	0b1b      	lsrs	r3, r3, #12
 800428c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004290:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004292:	4b9c      	ldr	r3, [pc, #624]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800429e:	4b99      	ldr	r3, [pc, #612]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8111 	beq.w	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f000 8083 	beq.w	80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f200 80a1 	bhi.w	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d056      	beq.n	800438c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80042de:	e099      	b.n	8004414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02d      	beq.n	8004348 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042ec:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	4a84      	ldr	r2, [pc, #528]	; (8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a03 	vldr	s12, [r7, #12]
 800432a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800450c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004346:	e087      	b.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004510 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a03 	vldr	s12, [r7, #12]
 800436e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800450c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800438a:	e065      	b.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800450c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ce:	e043      	b.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800450c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004412:	e021      	b.n	8004458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004436:	ed97 6a03 	vldr	s12, [r7, #12]
 800443a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800450c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004456:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800446e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004472:	edd7 6a07 	vldr	s13, [r7, #28]
 8004476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 2a90 	vmov	r2, s15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004486:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800449c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ac:	ee17 2a90 	vmov	r2, s15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	ee17 2a90 	vmov	r2, s15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	03d09000 	.word	0x03d09000
 800450c:	46000000 	.word	0x46000000
 8004510:	4c742400 	.word	0x4c742400
 8004514:	4a742400 	.word	0x4a742400
 8004518:	4af42400 	.word	0x4af42400

0800451c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004524:	4ba1      	ldr	r3, [pc, #644]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800452e:	4b9f      	ldr	r3, [pc, #636]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	0d1b      	lsrs	r3, r3, #20
 8004534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004538:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800453a:	4b9c      	ldr	r3, [pc, #624]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	0a1b      	lsrs	r3, r3, #8
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004546:	4b99      	ldr	r3, [pc, #612]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	08db      	lsrs	r3, r3, #3
 800454c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8111 	beq.w	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b02      	cmp	r3, #2
 800456e:	f000 8083 	beq.w	8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b02      	cmp	r3, #2
 8004576:	f200 80a1 	bhi.w	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d056      	beq.n	8004634 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004586:	e099      	b.n	80046bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004588:	4b88      	ldr	r3, [pc, #544]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02d      	beq.n	80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004594:	4b85      	ldr	r3, [pc, #532]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	4a84      	ldr	r2, [pc, #528]	; (80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
 80045a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045be:	4b7b      	ldr	r3, [pc, #492]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045ee:	e087      	b.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b6a      	ldr	r3, [pc, #424]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a03 	vldr	s12, [r7, #12]
 8004616:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004632:	e065      	b.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a03 	vldr	s12, [r7, #12]
 800465a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004676:	e043      	b.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b48      	ldr	r3, [pc, #288]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a03 	vldr	s12, [r7, #12]
 800469e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ba:	e021      	b.n	8004700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a03 	vldr	s12, [r7, #12]
 80046e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004700:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	0a5b      	lsrs	r3, r3, #9
 8004706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800471a:	edd7 6a07 	vldr	s13, [r7, #28]
 800471e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004726:	ee17 2a90 	vmov	r2, s15
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800472e:	4b1f      	ldr	r3, [pc, #124]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	0c1b      	lsrs	r3, r3, #16
 8004734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004748:	edd7 6a07 	vldr	s13, [r7, #28]
 800474c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004754:	ee17 2a90 	vmov	r2, s15
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	0e1b      	lsrs	r3, r3, #24
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004776:	edd7 6a07 	vldr	s13, [r7, #28]
 800477a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004782:	ee17 2a90 	vmov	r2, s15
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800478a:	e008      	b.n	800479e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
 80047b0:	03d09000 	.word	0x03d09000
 80047b4:	46000000 	.word	0x46000000
 80047b8:	4c742400 	.word	0x4c742400
 80047bc:	4a742400 	.word	0x4a742400
 80047c0:	4af42400 	.word	0x4af42400

080047c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047d2:	4b53      	ldr	r3, [pc, #332]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d101      	bne.n	80047e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e099      	b.n	8004916 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047e2:	4b4f      	ldr	r3, [pc, #316]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a4e      	ldr	r2, [pc, #312]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ee:	f7fc fec1 	bl	8001574 <HAL_GetTick>
 80047f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047f4:	e008      	b.n	8004808 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047f6:	f7fc febd 	bl	8001574 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e086      	b.n	8004916 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004808:	4b45      	ldr	r3, [pc, #276]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	031b      	lsls	r3, r3, #12
 8004822:	493f      	ldr	r1, [pc, #252]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	628b      	str	r3, [r1, #40]	; 0x28
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	3b01      	subs	r3, #1
 800482e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	3b01      	subs	r3, #1
 8004838:	025b      	lsls	r3, r3, #9
 800483a:	b29b      	uxth	r3, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	3b01      	subs	r3, #1
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004858:	4931      	ldr	r1, [pc, #196]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800485a:	4313      	orrs	r3, r2
 800485c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800485e:	4b30      	ldr	r3, [pc, #192]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	492d      	ldr	r1, [pc, #180]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004870:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f023 0220 	bic.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	4928      	ldr	r1, [pc, #160]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800487e:	4313      	orrs	r3, r2
 8004880:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	4a26      	ldr	r2, [pc, #152]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800488e:	4b24      	ldr	r3, [pc, #144]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 8004890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <RCCEx_PLL2_Config+0x160>)
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	69d2      	ldr	r2, [r2, #28]
 800489a:	00d2      	lsls	r2, r2, #3
 800489c:	4920      	ldr	r1, [pc, #128]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048a2:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048a8:	f043 0310 	orr.w	r3, r3, #16
 80048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048c0:	e00f      	b.n	80048e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048d4:	e005      	b.n	80048e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	4a11      	ldr	r2, [pc, #68]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ee:	f7fc fe41 	bl	8001574 <HAL_GetTick>
 80048f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f4:	e008      	b.n	8004908 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048f6:	f7fc fe3d 	bl	8001574 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e006      	b.n	8004916 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <RCCEx_PLL2_Config+0x15c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	58024400 	.word	0x58024400
 8004924:	ffff0007 	.word	0xffff0007

08004928 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004936:	4b53      	ldr	r3, [pc, #332]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d101      	bne.n	8004946 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e099      	b.n	8004a7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004946:	4b4f      	ldr	r3, [pc, #316]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a4e      	ldr	r2, [pc, #312]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004952:	f7fc fe0f 	bl	8001574 <HAL_GetTick>
 8004956:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004958:	e008      	b.n	800496c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800495a:	f7fc fe0b 	bl	8001574 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e086      	b.n	8004a7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800496c:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004978:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	493f      	ldr	r1, [pc, #252]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004988:	4313      	orrs	r3, r2
 800498a:	628b      	str	r3, [r1, #40]	; 0x28
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	3b01      	subs	r3, #1
 8004992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	3b01      	subs	r3, #1
 800499c:	025b      	lsls	r3, r3, #9
 800499e:	b29b      	uxth	r3, r3
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	061b      	lsls	r3, r3, #24
 80049b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049bc:	4931      	ldr	r1, [pc, #196]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	492d      	ldr	r1, [pc, #180]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	4928      	ldr	r1, [pc, #160]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049e6:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	4a26      	ldr	r2, [pc, #152]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <RCCEx_PLL3_Config+0x160>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	69d2      	ldr	r2, [r2, #28]
 80049fe:	00d2      	lsls	r2, r2, #3
 8004a00:	4920      	ldr	r1, [pc, #128]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a06:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a24:	e00f      	b.n	8004a46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a38:	e005      	b.n	8004a46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a52:	f7fc fd8f 	bl	8001574 <HAL_GetTick>
 8004a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a58:	e008      	b.n	8004a6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a5a:	f7fc fd8b 	bl	8001574 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e006      	b.n	8004a7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
 8004a88:	ffff0007 	.word	0xffff0007

08004a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fbcc 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 f9f6 	bl	8004ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d001      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e054      	b.n	8004bfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d01d      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a22      	ldr	r2, [pc, #136]	; (8004c10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_TIM_Base_Start_IT+0xe0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_TIM_Base_Start_IT+0xe4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x80>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_TIM_Base_Start_IT+0xe8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d115      	bne.n	8004be8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_TIM_Base_Start_IT+0xec>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d015      	beq.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d011      	beq.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	e008      	b.n	8004bfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e000      	b.n	8004bfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40001800 	.word	0x40001800
 8004c24:	40014000 	.word	0x40014000
 8004c28:	00010007 	.word	0x00010007

08004c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0202 	mvn.w	r2, #2
 8004c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f905 	bl	8004e7e <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8f7 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f908 	bl	8004e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0204 	mvn.w	r2, #4
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8db 	bl	8004e7e <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8cd 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8de 	bl	8004e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d122      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0208 	mvn.w	r2, #8
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8b1 	bl	8004e7e <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8a3 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8b4 	bl	8004e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b10      	cmp	r3, #16
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0210 	mvn.w	r2, #16
 8004d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f887 	bl	8004e7e <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f879 	bl	8004e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f88a 	bl	8004e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0201 	mvn.w	r2, #1
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc f97e 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b80      	cmp	r3, #128	; 0x80
 8004dbc:	d10e      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc8:	2b80      	cmp	r3, #128	; 0x80
 8004dca:	d107      	bne.n	8004ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f9a2 	bl	8005120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f995 	bl	8005134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f838 	bl	8004ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d10e      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d107      	bne.n	8004e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0220 	mvn.w	r2, #32
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f955 	bl	800510c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d00f      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3d      	ldr	r2, [pc, #244]	; (8004fd4 <TIM_Base_SetConfig+0x118>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	; (8004fd8 <TIM_Base_SetConfig+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3b      	ldr	r2, [pc, #236]	; (8004fdc <TIM_Base_SetConfig+0x120>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3a      	ldr	r2, [pc, #232]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01f      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d01b      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <TIM_Base_SetConfig+0x118>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d017      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <TIM_Base_SetConfig+0x11c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <TIM_Base_SetConfig+0x120>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00f      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <TIM_Base_SetConfig+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <TIM_Base_SetConfig+0x12c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_Base_SetConfig+0x9a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a26      	ldr	r2, [pc, #152]	; (8004fec <TIM_Base_SetConfig+0x130>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d108      	bne.n	8004f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0xf8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0xf8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <TIM_Base_SetConfig+0x128>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <TIM_Base_SetConfig+0x12c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0xf8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0f      	ldr	r2, [pc, #60]	; (8004fec <TIM_Base_SetConfig+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	615a      	str	r2, [r3, #20]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e06d      	b.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a30      	ldr	r2, [pc, #192]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a20      	ldr	r2, [pc, #128]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d01d      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a16      	ldr	r2, [pc, #88]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a15      	ldr	r2, [pc, #84]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10c      	bne.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40010000 	.word	0x40010000
 80050f4:	40010400 	.word	0x40010400
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40001800 	.word	0x40001800
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e042      	b.n	80051e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fc f8e3 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2224      	movs	r2, #36	; 0x24
 8005176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f82c 	bl	80051e8 <UART_SetConfig>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e022      	b.n	80051e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fe8c 	bl	8005ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 ff13 	bl	8006004 <UART_CheckIdleState>
 80051de:	4603      	mov	r3, r0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ec:	b092      	sub	sp, #72	; 0x48
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	431a      	orrs	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	431a      	orrs	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	4313      	orrs	r3, r2
 800520e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4bbe      	ldr	r3, [pc, #760]	; (8005510 <UART_SetConfig+0x328>)
 8005218:	4013      	ands	r3, r2
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005220:	430b      	orrs	r3, r1
 8005222:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4ab3      	ldr	r2, [pc, #716]	; (8005514 <UART_SetConfig+0x32c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005250:	4313      	orrs	r3, r2
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	4baf      	ldr	r3, [pc, #700]	; (8005518 <UART_SetConfig+0x330>)
 800525c:	4013      	ands	r3, r2
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005264:	430b      	orrs	r3, r1
 8005266:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f023 010f 	bic.w	r1, r3, #15
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4aa6      	ldr	r2, [pc, #664]	; (800551c <UART_SetConfig+0x334>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d177      	bne.n	8005378 <UART_SetConfig+0x190>
 8005288:	4ba5      	ldr	r3, [pc, #660]	; (8005520 <UART_SetConfig+0x338>)
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005290:	2b28      	cmp	r3, #40	; 0x28
 8005292:	d86d      	bhi.n	8005370 <UART_SetConfig+0x188>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0xb4>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	08005341 	.word	0x08005341
 80052a0:	08005371 	.word	0x08005371
 80052a4:	08005371 	.word	0x08005371
 80052a8:	08005371 	.word	0x08005371
 80052ac:	08005371 	.word	0x08005371
 80052b0:	08005371 	.word	0x08005371
 80052b4:	08005371 	.word	0x08005371
 80052b8:	08005371 	.word	0x08005371
 80052bc:	08005349 	.word	0x08005349
 80052c0:	08005371 	.word	0x08005371
 80052c4:	08005371 	.word	0x08005371
 80052c8:	08005371 	.word	0x08005371
 80052cc:	08005371 	.word	0x08005371
 80052d0:	08005371 	.word	0x08005371
 80052d4:	08005371 	.word	0x08005371
 80052d8:	08005371 	.word	0x08005371
 80052dc:	08005351 	.word	0x08005351
 80052e0:	08005371 	.word	0x08005371
 80052e4:	08005371 	.word	0x08005371
 80052e8:	08005371 	.word	0x08005371
 80052ec:	08005371 	.word	0x08005371
 80052f0:	08005371 	.word	0x08005371
 80052f4:	08005371 	.word	0x08005371
 80052f8:	08005371 	.word	0x08005371
 80052fc:	08005359 	.word	0x08005359
 8005300:	08005371 	.word	0x08005371
 8005304:	08005371 	.word	0x08005371
 8005308:	08005371 	.word	0x08005371
 800530c:	08005371 	.word	0x08005371
 8005310:	08005371 	.word	0x08005371
 8005314:	08005371 	.word	0x08005371
 8005318:	08005371 	.word	0x08005371
 800531c:	08005361 	.word	0x08005361
 8005320:	08005371 	.word	0x08005371
 8005324:	08005371 	.word	0x08005371
 8005328:	08005371 	.word	0x08005371
 800532c:	08005371 	.word	0x08005371
 8005330:	08005371 	.word	0x08005371
 8005334:	08005371 	.word	0x08005371
 8005338:	08005371 	.word	0x08005371
 800533c:	08005369 	.word	0x08005369
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e326      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e322      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005356:	e31e      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800535e:	e31a      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005360:	2320      	movs	r3, #32
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005366:	e316      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536e:	e312      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e30e      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a69      	ldr	r2, [pc, #420]	; (8005524 <UART_SetConfig+0x33c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d130      	bne.n	80053e4 <UART_SetConfig+0x1fc>
 8005382:	4b67      	ldr	r3, [pc, #412]	; (8005520 <UART_SetConfig+0x338>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b05      	cmp	r3, #5
 800538c:	d826      	bhi.n	80053dc <UART_SetConfig+0x1f4>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x1ac>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	080053ad 	.word	0x080053ad
 8005398:	080053b5 	.word	0x080053b5
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e2f0      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053b4:	2304      	movs	r3, #4
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e2ec      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053bc:	2308      	movs	r3, #8
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053c2:	e2e8      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ca:	e2e4      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053cc:	2320      	movs	r3, #32
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d2:	e2e0      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053d4:	2340      	movs	r3, #64	; 0x40
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e2dc      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e2d8      	b.n	8005996 <UART_SetConfig+0x7ae>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4f      	ldr	r2, [pc, #316]	; (8005528 <UART_SetConfig+0x340>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d130      	bne.n	8005450 <UART_SetConfig+0x268>
 80053ee:	4b4c      	ldr	r3, [pc, #304]	; (8005520 <UART_SetConfig+0x338>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d826      	bhi.n	8005448 <UART_SetConfig+0x260>
 80053fa:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0x218>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
 8005408:	08005429 	.word	0x08005429
 800540c:	08005431 	.word	0x08005431
 8005410:	08005439 	.word	0x08005439
 8005414:	08005441 	.word	0x08005441
 8005418:	2300      	movs	r3, #0
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e2ba      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e2b6      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e2b2      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e2ae      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005438:	2320      	movs	r3, #32
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e2aa      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e2a6      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e2a2      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a35      	ldr	r2, [pc, #212]	; (800552c <UART_SetConfig+0x344>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d130      	bne.n	80054bc <UART_SetConfig+0x2d4>
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <UART_SetConfig+0x338>)
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b05      	cmp	r3, #5
 8005464:	d826      	bhi.n	80054b4 <UART_SetConfig+0x2cc>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x284>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	08005485 	.word	0x08005485
 8005470:	0800548d 	.word	0x0800548d
 8005474:	08005495 	.word	0x08005495
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e284      	b.n	8005996 <UART_SetConfig+0x7ae>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e280      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800549a:	e27c      	b.n	8005996 <UART_SetConfig+0x7ae>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054a2:	e278      	b.n	8005996 <UART_SetConfig+0x7ae>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e274      	b.n	8005996 <UART_SetConfig+0x7ae>
 80054ac:	2340      	movs	r3, #64	; 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e270      	b.n	8005996 <UART_SetConfig+0x7ae>
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e26c      	b.n	8005996 <UART_SetConfig+0x7ae>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1b      	ldr	r2, [pc, #108]	; (8005530 <UART_SetConfig+0x348>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d142      	bne.n	800554c <UART_SetConfig+0x364>
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <UART_SetConfig+0x338>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d838      	bhi.n	8005544 <UART_SetConfig+0x35c>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x2f0>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005535 	.word	0x08005535
 80054ec:	0800553d 	.word	0x0800553d
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054f6:	e24e      	b.n	8005996 <UART_SetConfig+0x7ae>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054fe:	e24a      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005506:	e246      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800550e:	e242      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005510:	cfff69f3 	.word	0xcfff69f3
 8005514:	58000c00 	.word	0x58000c00
 8005518:	11fff4ff 	.word	0x11fff4ff
 800551c:	40011000 	.word	0x40011000
 8005520:	58024400 	.word	0x58024400
 8005524:	40004400 	.word	0x40004400
 8005528:	40004800 	.word	0x40004800
 800552c:	40004c00 	.word	0x40004c00
 8005530:	40005000 	.word	0x40005000
 8005534:	2320      	movs	r3, #32
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e22c      	b.n	8005996 <UART_SetConfig+0x7ae>
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e228      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e224      	b.n	8005996 <UART_SetConfig+0x7ae>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4ab1      	ldr	r2, [pc, #708]	; (8005818 <UART_SetConfig+0x630>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d176      	bne.n	8005644 <UART_SetConfig+0x45c>
 8005556:	4bb1      	ldr	r3, [pc, #708]	; (800581c <UART_SetConfig+0x634>)
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555e:	2b28      	cmp	r3, #40	; 0x28
 8005560:	d86c      	bhi.n	800563c <UART_SetConfig+0x454>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0x380>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800563d 	.word	0x0800563d
 8005570:	0800563d 	.word	0x0800563d
 8005574:	0800563d 	.word	0x0800563d
 8005578:	0800563d 	.word	0x0800563d
 800557c:	0800563d 	.word	0x0800563d
 8005580:	0800563d 	.word	0x0800563d
 8005584:	0800563d 	.word	0x0800563d
 8005588:	08005615 	.word	0x08005615
 800558c:	0800563d 	.word	0x0800563d
 8005590:	0800563d 	.word	0x0800563d
 8005594:	0800563d 	.word	0x0800563d
 8005598:	0800563d 	.word	0x0800563d
 800559c:	0800563d 	.word	0x0800563d
 80055a0:	0800563d 	.word	0x0800563d
 80055a4:	0800563d 	.word	0x0800563d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800563d 	.word	0x0800563d
 80055b0:	0800563d 	.word	0x0800563d
 80055b4:	0800563d 	.word	0x0800563d
 80055b8:	0800563d 	.word	0x0800563d
 80055bc:	0800563d 	.word	0x0800563d
 80055c0:	0800563d 	.word	0x0800563d
 80055c4:	0800563d 	.word	0x0800563d
 80055c8:	08005625 	.word	0x08005625
 80055cc:	0800563d 	.word	0x0800563d
 80055d0:	0800563d 	.word	0x0800563d
 80055d4:	0800563d 	.word	0x0800563d
 80055d8:	0800563d 	.word	0x0800563d
 80055dc:	0800563d 	.word	0x0800563d
 80055e0:	0800563d 	.word	0x0800563d
 80055e4:	0800563d 	.word	0x0800563d
 80055e8:	0800562d 	.word	0x0800562d
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	0800563d 	.word	0x0800563d
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	0800563d 	.word	0x0800563d
 8005604:	0800563d 	.word	0x0800563d
 8005608:	08005635 	.word	0x08005635
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e1c0      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e1bc      	b.n	8005996 <UART_SetConfig+0x7ae>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e1b8      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e1b4      	b.n	8005996 <UART_SetConfig+0x7ae>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e1b0      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e1ac      	b.n	8005996 <UART_SetConfig+0x7ae>
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e1a8      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a75      	ldr	r2, [pc, #468]	; (8005820 <UART_SetConfig+0x638>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d130      	bne.n	80056b0 <UART_SetConfig+0x4c8>
 800564e:	4b73      	ldr	r3, [pc, #460]	; (800581c <UART_SetConfig+0x634>)
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	2b05      	cmp	r3, #5
 8005658:	d826      	bhi.n	80056a8 <UART_SetConfig+0x4c0>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <UART_SetConfig+0x478>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005679 	.word	0x08005679
 8005664:	08005681 	.word	0x08005681
 8005668:	08005689 	.word	0x08005689
 800566c:	08005691 	.word	0x08005691
 8005670:	08005699 	.word	0x08005699
 8005674:	080056a1 	.word	0x080056a1
 8005678:	2300      	movs	r3, #0
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e18a      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e186      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e182      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e17e      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e17a      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e176      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e172      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a5b      	ldr	r2, [pc, #364]	; (8005824 <UART_SetConfig+0x63c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d130      	bne.n	800571c <UART_SetConfig+0x534>
 80056ba:	4b58      	ldr	r3, [pc, #352]	; (800581c <UART_SetConfig+0x634>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d826      	bhi.n	8005714 <UART_SetConfig+0x52c>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x4e4>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056e5 	.word	0x080056e5
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	080056f5 	.word	0x080056f5
 80056d8:	080056fd 	.word	0x080056fd
 80056dc:	08005705 	.word	0x08005705
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e154      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056ec:	2304      	movs	r3, #4
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e150      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056f4:	2308      	movs	r3, #8
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e14c      	b.n	8005996 <UART_SetConfig+0x7ae>
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e148      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005704:	2320      	movs	r3, #32
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e144      	b.n	8005996 <UART_SetConfig+0x7ae>
 800570c:	2340      	movs	r3, #64	; 0x40
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e140      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e13c      	b.n	8005996 <UART_SetConfig+0x7ae>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a41      	ldr	r2, [pc, #260]	; (8005828 <UART_SetConfig+0x640>)
 8005722:	4293      	cmp	r3, r2
 8005724:	f040 8082 	bne.w	800582c <UART_SetConfig+0x644>
 8005728:	4b3c      	ldr	r3, [pc, #240]	; (800581c <UART_SetConfig+0x634>)
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005730:	2b28      	cmp	r3, #40	; 0x28
 8005732:	d86d      	bhi.n	8005810 <UART_SetConfig+0x628>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x554>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	080057e1 	.word	0x080057e1
 8005740:	08005811 	.word	0x08005811
 8005744:	08005811 	.word	0x08005811
 8005748:	08005811 	.word	0x08005811
 800574c:	08005811 	.word	0x08005811
 8005750:	08005811 	.word	0x08005811
 8005754:	08005811 	.word	0x08005811
 8005758:	08005811 	.word	0x08005811
 800575c:	080057e9 	.word	0x080057e9
 8005760:	08005811 	.word	0x08005811
 8005764:	08005811 	.word	0x08005811
 8005768:	08005811 	.word	0x08005811
 800576c:	08005811 	.word	0x08005811
 8005770:	08005811 	.word	0x08005811
 8005774:	08005811 	.word	0x08005811
 8005778:	08005811 	.word	0x08005811
 800577c:	080057f1 	.word	0x080057f1
 8005780:	08005811 	.word	0x08005811
 8005784:	08005811 	.word	0x08005811
 8005788:	08005811 	.word	0x08005811
 800578c:	08005811 	.word	0x08005811
 8005790:	08005811 	.word	0x08005811
 8005794:	08005811 	.word	0x08005811
 8005798:	08005811 	.word	0x08005811
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	08005811 	.word	0x08005811
 80057a4:	08005811 	.word	0x08005811
 80057a8:	08005811 	.word	0x08005811
 80057ac:	08005811 	.word	0x08005811
 80057b0:	08005811 	.word	0x08005811
 80057b4:	08005811 	.word	0x08005811
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005801 	.word	0x08005801
 80057c0:	08005811 	.word	0x08005811
 80057c4:	08005811 	.word	0x08005811
 80057c8:	08005811 	.word	0x08005811
 80057cc:	08005811 	.word	0x08005811
 80057d0:	08005811 	.word	0x08005811
 80057d4:	08005811 	.word	0x08005811
 80057d8:	08005811 	.word	0x08005811
 80057dc:	08005809 	.word	0x08005809
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e6:	e0d6      	b.n	8005996 <UART_SetConfig+0x7ae>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ee:	e0d2      	b.n	8005996 <UART_SetConfig+0x7ae>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f6:	e0ce      	b.n	8005996 <UART_SetConfig+0x7ae>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fe:	e0ca      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005800:	2320      	movs	r3, #32
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005806:	e0c6      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005808:	2340      	movs	r3, #64	; 0x40
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580e:	e0c2      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005816:	e0be      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005818:	40011400 	.word	0x40011400
 800581c:	58024400 	.word	0x58024400
 8005820:	40007800 	.word	0x40007800
 8005824:	40007c00 	.word	0x40007c00
 8005828:	40011800 	.word	0x40011800
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4aad      	ldr	r2, [pc, #692]	; (8005ae8 <UART_SetConfig+0x900>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d176      	bne.n	8005924 <UART_SetConfig+0x73c>
 8005836:	4bad      	ldr	r3, [pc, #692]	; (8005aec <UART_SetConfig+0x904>)
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583e:	2b28      	cmp	r3, #40	; 0x28
 8005840:	d86c      	bhi.n	800591c <UART_SetConfig+0x734>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x660>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	080058ed 	.word	0x080058ed
 800584c:	0800591d 	.word	0x0800591d
 8005850:	0800591d 	.word	0x0800591d
 8005854:	0800591d 	.word	0x0800591d
 8005858:	0800591d 	.word	0x0800591d
 800585c:	0800591d 	.word	0x0800591d
 8005860:	0800591d 	.word	0x0800591d
 8005864:	0800591d 	.word	0x0800591d
 8005868:	080058f5 	.word	0x080058f5
 800586c:	0800591d 	.word	0x0800591d
 8005870:	0800591d 	.word	0x0800591d
 8005874:	0800591d 	.word	0x0800591d
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800591d 	.word	0x0800591d
 8005880:	0800591d 	.word	0x0800591d
 8005884:	0800591d 	.word	0x0800591d
 8005888:	080058fd 	.word	0x080058fd
 800588c:	0800591d 	.word	0x0800591d
 8005890:	0800591d 	.word	0x0800591d
 8005894:	0800591d 	.word	0x0800591d
 8005898:	0800591d 	.word	0x0800591d
 800589c:	0800591d 	.word	0x0800591d
 80058a0:	0800591d 	.word	0x0800591d
 80058a4:	0800591d 	.word	0x0800591d
 80058a8:	08005905 	.word	0x08005905
 80058ac:	0800591d 	.word	0x0800591d
 80058b0:	0800591d 	.word	0x0800591d
 80058b4:	0800591d 	.word	0x0800591d
 80058b8:	0800591d 	.word	0x0800591d
 80058bc:	0800591d 	.word	0x0800591d
 80058c0:	0800591d 	.word	0x0800591d
 80058c4:	0800591d 	.word	0x0800591d
 80058c8:	0800590d 	.word	0x0800590d
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800591d 	.word	0x0800591d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	08005915 	.word	0x08005915
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f2:	e050      	b.n	8005996 <UART_SetConfig+0x7ae>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fa:	e04c      	b.n	8005996 <UART_SetConfig+0x7ae>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005902:	e048      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590a:	e044      	b.n	8005996 <UART_SetConfig+0x7ae>
 800590c:	2320      	movs	r3, #32
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005912:	e040      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591a:	e03c      	b.n	8005996 <UART_SetConfig+0x7ae>
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005922:	e038      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a71      	ldr	r2, [pc, #452]	; (8005af0 <UART_SetConfig+0x908>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d130      	bne.n	8005990 <UART_SetConfig+0x7a8>
 800592e:	4b6f      	ldr	r3, [pc, #444]	; (8005aec <UART_SetConfig+0x904>)
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b05      	cmp	r3, #5
 8005938:	d826      	bhi.n	8005988 <UART_SetConfig+0x7a0>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <UART_SetConfig+0x758>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005959 	.word	0x08005959
 8005944:	08005961 	.word	0x08005961
 8005948:	08005969 	.word	0x08005969
 800594c:	08005971 	.word	0x08005971
 8005950:	08005979 	.word	0x08005979
 8005954:	08005981 	.word	0x08005981
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595e:	e01a      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005966:	e016      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596e:	e012      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005976:	e00e      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005978:	2320      	movs	r3, #32
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597e:	e00a      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005980:	2340      	movs	r3, #64	; 0x40
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005986:	e006      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598e:	e002      	b.n	8005996 <UART_SetConfig+0x7ae>
 8005990:	2380      	movs	r3, #128	; 0x80
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a55      	ldr	r2, [pc, #340]	; (8005af0 <UART_SetConfig+0x908>)
 800599c:	4293      	cmp	r3, r2
 800599e:	f040 80f8 	bne.w	8005b92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	dc46      	bgt.n	8005a38 <UART_SetConfig+0x850>
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	db75      	blt.n	8005a9a <UART_SetConfig+0x8b2>
 80059ae:	3b02      	subs	r3, #2
 80059b0:	2b1e      	cmp	r3, #30
 80059b2:	d872      	bhi.n	8005a9a <UART_SetConfig+0x8b2>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x7d4>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a3f 	.word	0x08005a3f
 80059c0:	08005a9b 	.word	0x08005a9b
 80059c4:	08005a47 	.word	0x08005a47
 80059c8:	08005a9b 	.word	0x08005a9b
 80059cc:	08005a9b 	.word	0x08005a9b
 80059d0:	08005a9b 	.word	0x08005a9b
 80059d4:	08005a57 	.word	0x08005a57
 80059d8:	08005a9b 	.word	0x08005a9b
 80059dc:	08005a9b 	.word	0x08005a9b
 80059e0:	08005a9b 	.word	0x08005a9b
 80059e4:	08005a9b 	.word	0x08005a9b
 80059e8:	08005a9b 	.word	0x08005a9b
 80059ec:	08005a9b 	.word	0x08005a9b
 80059f0:	08005a9b 	.word	0x08005a9b
 80059f4:	08005a67 	.word	0x08005a67
 80059f8:	08005a9b 	.word	0x08005a9b
 80059fc:	08005a9b 	.word	0x08005a9b
 8005a00:	08005a9b 	.word	0x08005a9b
 8005a04:	08005a9b 	.word	0x08005a9b
 8005a08:	08005a9b 	.word	0x08005a9b
 8005a0c:	08005a9b 	.word	0x08005a9b
 8005a10:	08005a9b 	.word	0x08005a9b
 8005a14:	08005a9b 	.word	0x08005a9b
 8005a18:	08005a9b 	.word	0x08005a9b
 8005a1c:	08005a9b 	.word	0x08005a9b
 8005a20:	08005a9b 	.word	0x08005a9b
 8005a24:	08005a9b 	.word	0x08005a9b
 8005a28:	08005a9b 	.word	0x08005a9b
 8005a2c:	08005a9b 	.word	0x08005a9b
 8005a30:	08005a9b 	.word	0x08005a9b
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d02a      	beq.n	8005a92 <UART_SetConfig+0x8aa>
 8005a3c:	e02d      	b.n	8005a9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a3e:	f7fe fc03 	bl	8004248 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a44:	e02f      	b.n	8005aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fc12 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a54:	e027      	b.n	8005aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a56:	f107 0318 	add.w	r3, r7, #24
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fd5e 	bl	800451c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e01f      	b.n	8005aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <UART_SetConfig+0x904>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <UART_SetConfig+0x904>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	08db      	lsrs	r3, r3, #3
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <UART_SetConfig+0x90c>)
 8005a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a84:	e00f      	b.n	8005aa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a86:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <UART_SetConfig+0x90c>)
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a8a:	e00c      	b.n	8005aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a8c:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <UART_SetConfig+0x910>)
 8005a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a90:	e009      	b.n	8005aa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a98:	e005      	b.n	8005aa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005aa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 81ee 	beq.w	8005e8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <UART_SetConfig+0x914>)
 8005ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d305      	bcc.n	8005ade <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d910      	bls.n	8005b00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ae4:	e1d1      	b.n	8005e8a <UART_SetConfig+0xca2>
 8005ae6:	bf00      	nop
 8005ae8:	40011c00 	.word	0x40011c00
 8005aec:	58024400 	.word	0x58024400
 8005af0:	58000c00 	.word	0x58000c00
 8005af4:	03d09000 	.word	0x03d09000
 8005af8:	003d0900 	.word	0x003d0900
 8005afc:	08007168 	.word	0x08007168
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2200      	movs	r2, #0
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	60fa      	str	r2, [r7, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	4ac0      	ldr	r2, [pc, #768]	; (8005e10 <UART_SetConfig+0xc28>)
 8005b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	2200      	movs	r2, #0
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	607a      	str	r2, [r7, #4]
 8005b1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b22:	f7fa fbe3 	bl	80002ec <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	020b      	lsls	r3, r1, #8
 8005b38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b3c:	0202      	lsls	r2, r0, #8
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	6849      	ldr	r1, [r1, #4]
 8005b42:	0849      	lsrs	r1, r1, #1
 8005b44:	2000      	movs	r0, #0
 8005b46:	460c      	mov	r4, r1
 8005b48:	4605      	mov	r5, r0
 8005b4a:	eb12 0804 	adds.w	r8, r2, r4
 8005b4e:	eb43 0905 	adc.w	r9, r3, r5
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	469a      	mov	sl, r3
 8005b5a:	4693      	mov	fp, r2
 8005b5c:	4652      	mov	r2, sl
 8005b5e:	465b      	mov	r3, fp
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa fbc2 	bl	80002ec <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b76:	d308      	bcc.n	8005b8a <UART_SetConfig+0x9a2>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7e:	d204      	bcs.n	8005b8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e17f      	b.n	8005e8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005b90:	e17b      	b.n	8005e8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	f040 80bd 	bne.w	8005d18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	dc48      	bgt.n	8005c38 <UART_SetConfig+0xa50>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db7b      	blt.n	8005ca2 <UART_SetConfig+0xaba>
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d879      	bhi.n	8005ca2 <UART_SetConfig+0xaba>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0x9cc>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005c3f 	.word	0x08005c3f
 8005bb8:	08005c47 	.word	0x08005c47
 8005bbc:	08005ca3 	.word	0x08005ca3
 8005bc0:	08005ca3 	.word	0x08005ca3
 8005bc4:	08005c4f 	.word	0x08005c4f
 8005bc8:	08005ca3 	.word	0x08005ca3
 8005bcc:	08005ca3 	.word	0x08005ca3
 8005bd0:	08005ca3 	.word	0x08005ca3
 8005bd4:	08005c5f 	.word	0x08005c5f
 8005bd8:	08005ca3 	.word	0x08005ca3
 8005bdc:	08005ca3 	.word	0x08005ca3
 8005be0:	08005ca3 	.word	0x08005ca3
 8005be4:	08005ca3 	.word	0x08005ca3
 8005be8:	08005ca3 	.word	0x08005ca3
 8005bec:	08005ca3 	.word	0x08005ca3
 8005bf0:	08005ca3 	.word	0x08005ca3
 8005bf4:	08005c6f 	.word	0x08005c6f
 8005bf8:	08005ca3 	.word	0x08005ca3
 8005bfc:	08005ca3 	.word	0x08005ca3
 8005c00:	08005ca3 	.word	0x08005ca3
 8005c04:	08005ca3 	.word	0x08005ca3
 8005c08:	08005ca3 	.word	0x08005ca3
 8005c0c:	08005ca3 	.word	0x08005ca3
 8005c10:	08005ca3 	.word	0x08005ca3
 8005c14:	08005ca3 	.word	0x08005ca3
 8005c18:	08005ca3 	.word	0x08005ca3
 8005c1c:	08005ca3 	.word	0x08005ca3
 8005c20:	08005ca3 	.word	0x08005ca3
 8005c24:	08005ca3 	.word	0x08005ca3
 8005c28:	08005ca3 	.word	0x08005ca3
 8005c2c:	08005ca3 	.word	0x08005ca3
 8005c30:	08005ca3 	.word	0x08005ca3
 8005c34:	08005c95 	.word	0x08005c95
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d02e      	beq.n	8005c9a <UART_SetConfig+0xab2>
 8005c3c:	e031      	b.n	8005ca2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c3e:	f7fd fbcb 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8005c42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c44:	e033      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c46:	f7fd fbdd 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8005c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c4c:	e02f      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fb0e 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c5c:	e027      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c5e:	f107 0318 	add.w	r3, r7, #24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fc5a 	bl	800451c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c6c:	e01f      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c6e:	4b69      	ldr	r3, [pc, #420]	; (8005e14 <UART_SetConfig+0xc2c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c7a:	4b66      	ldr	r3, [pc, #408]	; (8005e14 <UART_SetConfig+0xc2c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	4a64      	ldr	r2, [pc, #400]	; (8005e18 <UART_SetConfig+0xc30>)
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c8c:	e00f      	b.n	8005cae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005c8e:	4b62      	ldr	r3, [pc, #392]	; (8005e18 <UART_SetConfig+0xc30>)
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c92:	e00c      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c94:	4b61      	ldr	r3, [pc, #388]	; (8005e1c <UART_SetConfig+0xc34>)
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c98:	e009      	b.n	8005cae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ca0:	e005      	b.n	8005cae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80ea 	beq.w	8005e8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	4a55      	ldr	r2, [pc, #340]	; (8005e10 <UART_SetConfig+0xc28>)
 8005cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc8:	005a      	lsls	r2, r3, #1
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	441a      	add	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b0f      	cmp	r3, #15
 8005ce0:	d916      	bls.n	8005d10 <UART_SetConfig+0xb28>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d212      	bcs.n	8005d10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f023 030f 	bic.w	r3, r3, #15
 8005cf2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d02:	4313      	orrs	r3, r2
 8005d04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e0bc      	b.n	8005e8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d16:	e0b8      	b.n	8005e8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	dc4b      	bgt.n	8005db8 <UART_SetConfig+0xbd0>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f2c0 8087 	blt.w	8005e34 <UART_SetConfig+0xc4c>
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	f200 8084 	bhi.w	8005e34 <UART_SetConfig+0xc4c>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0xb4c>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005dbf 	.word	0x08005dbf
 8005d38:	08005dc7 	.word	0x08005dc7
 8005d3c:	08005e35 	.word	0x08005e35
 8005d40:	08005e35 	.word	0x08005e35
 8005d44:	08005dcf 	.word	0x08005dcf
 8005d48:	08005e35 	.word	0x08005e35
 8005d4c:	08005e35 	.word	0x08005e35
 8005d50:	08005e35 	.word	0x08005e35
 8005d54:	08005ddf 	.word	0x08005ddf
 8005d58:	08005e35 	.word	0x08005e35
 8005d5c:	08005e35 	.word	0x08005e35
 8005d60:	08005e35 	.word	0x08005e35
 8005d64:	08005e35 	.word	0x08005e35
 8005d68:	08005e35 	.word	0x08005e35
 8005d6c:	08005e35 	.word	0x08005e35
 8005d70:	08005e35 	.word	0x08005e35
 8005d74:	08005def 	.word	0x08005def
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08005e35 	.word	0x08005e35
 8005d80:	08005e35 	.word	0x08005e35
 8005d84:	08005e35 	.word	0x08005e35
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005e35 	.word	0x08005e35
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e35 	.word	0x08005e35
 8005da0:	08005e35 	.word	0x08005e35
 8005da4:	08005e35 	.word	0x08005e35
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e35 	.word	0x08005e35
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e27 	.word	0x08005e27
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d037      	beq.n	8005e2c <UART_SetConfig+0xc44>
 8005dbc:	e03a      	b.n	8005e34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fd fb0b 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8005dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dc4:	e03c      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc6:	f7fd fb1d 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8005dca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005dcc:	e038      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fe fa4e 	bl	8004274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ddc:	e030      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dde:	f107 0318 	add.w	r3, r7, #24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fb9a 	bl	800451c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005dec:	e028      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <UART_SetConfig+0xc2c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dfa:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <UART_SetConfig+0xc2c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <UART_SetConfig+0xc30>)
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e0c:	e018      	b.n	8005e40 <UART_SetConfig+0xc58>
 8005e0e:	bf00      	nop
 8005e10:	08007168 	.word	0x08007168
 8005e14:	58024400 	.word	0x58024400
 8005e18:	03d09000 	.word	0x03d09000
 8005e1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b24      	ldr	r3, [pc, #144]	; (8005eb4 <UART_SetConfig+0xccc>)
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e24:	e00c      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <UART_SetConfig+0xcd0>)
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e2a:	e009      	b.n	8005e40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e32:	e005      	b.n	8005e40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005e3e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d021      	beq.n	8005e8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <UART_SetConfig+0xcd4>)
 8005e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e54:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	441a      	add	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b0f      	cmp	r3, #15
 8005e6e:	d909      	bls.n	8005e84 <UART_SetConfig+0xc9c>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e76:	d205      	bcs.n	8005e84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e002      	b.n	8005e8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ea6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3748      	adds	r7, #72	; 0x48
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eb4:	03d09000 	.word	0x03d09000
 8005eb8:	003d0900 	.word	0x003d0900
 8005ebc:	08007168 	.word	0x08007168

08005ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbe:	d10a      	bne.n	8005fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af02      	add	r7, sp, #8
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006014:	f7fb faae 	bl	8001574 <HAL_GetTick>
 8006018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b08      	cmp	r3, #8
 8006026:	d10e      	bne.n	8006046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f82f 	bl	800609a <UART_WaitOnFlagUntilTimeout>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e025      	b.n	8006092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d10e      	bne.n	8006072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f819 	bl	800609a <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e00f      	b.n	8006092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b09c      	sub	sp, #112	; 0x70
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4613      	mov	r3, r2
 80060a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060aa:	e0a9      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b2:	f000 80a5 	beq.w	8006200 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b6:	f7fb fa5d 	bl	8001574 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d302      	bcc.n	80060cc <UART_WaitOnFlagUntilTimeout+0x32>
 80060c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d140      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e0:	667b      	str	r3, [r7, #100]	; 0x64
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e6      	bne.n	80060cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	663b      	str	r3, [r7, #96]	; 0x60
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800611e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800612c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e5      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e069      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d051      	beq.n	8006200 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d149      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800618a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800619a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e6      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	613b      	str	r3, [r7, #16]
   return(result);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	66bb      	str	r3, [r7, #104]	; 0x68
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3308      	adds	r3, #8
 80061c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061c8:	623a      	str	r2, [r7, #32]
 80061ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	69f9      	ldr	r1, [r7, #28]
 80061ce:	6a3a      	ldr	r2, [r7, #32]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e010      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4013      	ands	r3, r2
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	429a      	cmp	r2, r3
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	461a      	mov	r2, r3
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	429a      	cmp	r2, r3
 800621c:	f43f af46 	beq.w	80060ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3770      	adds	r7, #112	; 0x70
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_UARTEx_DisableFifoMode+0x16>
 800623c:	2302      	movs	r3, #2
 800623e:	e027      	b.n	8006290 <HAL_UARTEx_DisableFifoMode+0x66>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800626e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e02d      	b.n	8006310 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0201 	bic.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f84f 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e02d      	b.n	800638c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0201 	bic.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f811 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063b4:	e031      	b.n	800641a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063b6:	2310      	movs	r3, #16
 80063b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ba:	2310      	movs	r3, #16
 80063bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	0e5b      	lsrs	r3, r3, #25
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	0f5b      	lsrs	r3, r3, #29
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	7b3a      	ldrb	r2, [r7, #12]
 80063e2:	4911      	ldr	r1, [pc, #68]	; (8006428 <UARTEx_SetNbDataToProcess+0x94>)
 80063e4:	5c8a      	ldrb	r2, [r1, r2]
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ea:	7b3a      	ldrb	r2, [r7, #12]
 80063ec:	490f      	ldr	r1, [pc, #60]	; (800642c <UARTEx_SetNbDataToProcess+0x98>)
 80063ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	7b7a      	ldrb	r2, [r7, #13]
 8006400:	4909      	ldr	r1, [pc, #36]	; (8006428 <UARTEx_SetNbDataToProcess+0x94>)
 8006402:	5c8a      	ldrb	r2, [r1, r2]
 8006404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006408:	7b7a      	ldrb	r2, [r7, #13]
 800640a:	4908      	ldr	r1, [pc, #32]	; (800642c <UARTEx_SetNbDataToProcess+0x98>)
 800640c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	08007180 	.word	0x08007180
 800642c:	08007188 	.word	0x08007188

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4d0d      	ldr	r5, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2600      	movs	r6, #0
 800643c:	42a6      	cmp	r6, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4d0b      	ldr	r5, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f000 f820 	bl	8006488 <_init>
 8006448:	1b64      	subs	r4, r4, r5
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2600      	movs	r6, #0
 800644e:	42a6      	cmp	r6, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f855 3b04 	ldr.w	r3, [r5], #4
 8006458:	4798      	blx	r3
 800645a:	3601      	adds	r6, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006462:	4798      	blx	r3
 8006464:	3601      	adds	r6, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	08007198 	.word	0x08007198
 800646c:	08007198 	.word	0x08007198
 8006470:	08007198 	.word	0x08007198
 8006474:	0800719c 	.word	0x0800719c

08006478 <memset>:
 8006478:	4402      	add	r2, r0
 800647a:	4603      	mov	r3, r0
 800647c:	4293      	cmp	r3, r2
 800647e:	d100      	bne.n	8006482 <memset+0xa>
 8006480:	4770      	bx	lr
 8006482:	f803 1b01 	strb.w	r1, [r3], #1
 8006486:	e7f9      	b.n	800647c <memset+0x4>

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr
