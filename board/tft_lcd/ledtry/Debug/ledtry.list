
ledtry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000343c  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080093d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000138  24000010  080093e4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000148  080093e4  00020148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012e8e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002674  00000000  00000000  00032ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cf0  00000000  00000000  00035540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000be8  00000000  00000000  00036230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030652  00000000  00000000  00036e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012dcd  00000000  00000000  0006746a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013666d  00000000  00000000  0007a237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b08a4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000340c  00000000  00000000  001b08f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005f70 	.word	0x08005f70

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08005f70 	.word	0x08005f70

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <LCD_Fill>:
                xend,yend   终止坐标
								color       要填充的颜色
      返回值：  无
******************************************************************************/
void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
{          
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4604      	mov	r4, r0
 80005fc:	4608      	mov	r0, r1
 80005fe:	4611      	mov	r1, r2
 8000600:	461a      	mov	r2, r3
 8000602:	4623      	mov	r3, r4
 8000604:	80fb      	strh	r3, [r7, #6]
 8000606:	4603      	mov	r3, r0
 8000608:	80bb      	strh	r3, [r7, #4]
 800060a:	460b      	mov	r3, r1
 800060c:	807b      	strh	r3, [r7, #2]
 800060e:	4613      	mov	r3, r2
 8000610:	803b      	strh	r3, [r7, #0]
	u16 i,j; 
	LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	3b01      	subs	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	883b      	ldrh	r3, [r7, #0]
 800061a:	3b01      	subs	r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	88b9      	ldrh	r1, [r7, #4]
 8000620:	88f8      	ldrh	r0, [r7, #6]
 8000622:	f000 fab1 	bl	8000b88 <LCD_Address_Set>
	for(i=ysta;i<yend;i++)
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	81fb      	strh	r3, [r7, #14]
 800062a:	e010      	b.n	800064e <LCD_Fill+0x5a>
	{													   	 	
		for(j=xsta;j<xend;j++)
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	81bb      	strh	r3, [r7, #12]
 8000630:	e006      	b.n	8000640 <LCD_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000632:	8c3b      	ldrh	r3, [r7, #32]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa77 	bl	8000b28 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800063a:	89bb      	ldrh	r3, [r7, #12]
 800063c:	3301      	adds	r3, #1
 800063e:	81bb      	strh	r3, [r7, #12]
 8000640:	89ba      	ldrh	r2, [r7, #12]
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3f4      	bcc.n	8000632 <LCD_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000648:	89fb      	ldrh	r3, [r7, #14]
 800064a:	3301      	adds	r3, #1
 800064c:	81fb      	strh	r3, [r7, #14]
 800064e:	89fa      	ldrh	r2, [r7, #14]
 8000650:	883b      	ldrh	r3, [r7, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3ea      	bcc.n	800062c <LCD_Fill+0x38>
		}
	} 					  	    
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}

08000660 <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y,u16 color)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	460b      	mov	r3, r1
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	4613      	mov	r3, r2
 8000670:	807b      	strh	r3, [r7, #2]
	LCD_Address_Set(x,y,x,y);//设置光标位置 
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	88b9      	ldrh	r1, [r7, #4]
 8000678:	88f8      	ldrh	r0, [r7, #6]
 800067a:	f000 fa85 	bl	8000b88 <LCD_Address_Set>
	LCD_WR_DATA(color);
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 fa51 	bl	8000b28 <LCD_WR_DATA>
} 
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	4603      	mov	r3, r0
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
 80006aa:	4613      	mov	r3, r2
 80006ac:	803b      	strh	r3, [r7, #0]
	u8 temp,sizex,t,m=0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	757b      	strb	r3, [r7, #21]
	u16 i,TypefaceNum;//一个字符所占字节大小
	u16 x0=x;
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80006b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006ba:	085b      	lsrs	r3, r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	fb12 f303 	smulbb	r3, r2, r3
 80006e6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';    //得到偏移后的值
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	3b20      	subs	r3, #32
 80006ec:	70fb      	strb	r3, [r7, #3]
	LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置 
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	4413      	add	r3, r2
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b29c      	uxth	r4, r3
 80006fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000700:	b29a      	uxth	r2, r3
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b01      	subs	r3, #1
 800070a:	b29b      	uxth	r3, r3
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88f8      	ldrh	r0, [r7, #6]
 8000710:	4622      	mov	r2, r4
 8000712:	f000 fa39 	bl	8000b88 <LCD_Address_Set>
	for(i=0;i<TypefaceNum;i++)
 8000716:	2300      	movs	r3, #0
 8000718:	827b      	strh	r3, [r7, #18]
 800071a:	e086      	b.n	800082a <LCD_ShowChar+0x19a>
	{ 
		if(sizey==12)temp=ascii_1206[num][i];		       //调用6x12字体
 800071c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000720:	2b0c      	cmp	r3, #12
 8000722:	d10b      	bne.n	800073c <LCD_ShowChar+0xac>
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	8a79      	ldrh	r1, [r7, #18]
 8000728:	4845      	ldr	r0, [pc, #276]	; (8000840 <LCD_ShowChar+0x1b0>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4403      	add	r3, r0
 8000734:	440b      	add	r3, r1
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	75fb      	strb	r3, [r7, #23]
 800073a:	e028      	b.n	800078e <LCD_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[num][i];		 //调用8x16字体
 800073c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000740:	2b10      	cmp	r3, #16
 8000742:	d108      	bne.n	8000756 <LCD_ShowChar+0xc6>
 8000744:	78fa      	ldrb	r2, [r7, #3]
 8000746:	8a7b      	ldrh	r3, [r7, #18]
 8000748:	493e      	ldr	r1, [pc, #248]	; (8000844 <LCD_ShowChar+0x1b4>)
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	440a      	add	r2, r1
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	75fb      	strb	r3, [r7, #23]
 8000754:	e01b      	b.n	800078e <LCD_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[num][i];		 //调用12x24字体
 8000756:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800075a:	2b18      	cmp	r3, #24
 800075c:	d10b      	bne.n	8000776 <LCD_ShowChar+0xe6>
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	8a79      	ldrh	r1, [r7, #18]
 8000762:	4839      	ldr	r0, [pc, #228]	; (8000848 <LCD_ShowChar+0x1b8>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	011b      	lsls	r3, r3, #4
 800076c:	4403      	add	r3, r0
 800076e:	440b      	add	r3, r1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	75fb      	strb	r3, [r7, #23]
 8000774:	e00b      	b.n	800078e <LCD_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[num][i];		 //调用16x32字体
 8000776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800077a:	2b20      	cmp	r3, #32
 800077c:	d15b      	bne.n	8000836 <LCD_ShowChar+0x1a6>
 800077e:	78fa      	ldrb	r2, [r7, #3]
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	4932      	ldr	r1, [pc, #200]	; (800084c <LCD_ShowChar+0x1bc>)
 8000784:	0192      	lsls	r2, r2, #6
 8000786:	440a      	add	r2, r1
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800078e:	2300      	movs	r3, #0
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	e044      	b.n	800081e <LCD_ShowChar+0x18e>
		{
			if(!mode)//非叠加模式
 8000794:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000798:	2b00      	cmp	r3, #0
 800079a:	d120      	bne.n	80007de <LCD_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800079c:	7dfa      	ldrb	r2, [r7, #23]
 800079e:	7dbb      	ldrb	r3, [r7, #22]
 80007a0:	fa42 f303 	asr.w	r3, r2, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <LCD_ShowChar+0x126>
 80007ac:	883b      	ldrh	r3, [r7, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f9ba 	bl	8000b28 <LCD_WR_DATA>
 80007b4:	e003      	b.n	80007be <LCD_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 80007b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f9b5 	bl	8000b28 <LCD_WR_DATA>
				m++;
 80007be:	7d7b      	ldrb	r3, [r7, #21]
 80007c0:	3301      	adds	r3, #1
 80007c2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80007c4:	7d7b      	ldrb	r3, [r7, #21]
 80007c6:	7bfa      	ldrb	r2, [r7, #15]
 80007c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80007cc:	fb01 f202 	mul.w	r2, r1, r2
 80007d0:	1a9b      	subs	r3, r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d11f      	bne.n	8000818 <LCD_ShowChar+0x188>
				{
					m=0;
 80007d8:	2300      	movs	r3, #0
 80007da:	757b      	strb	r3, [r7, #21]
					break;
 80007dc:	e022      	b.n	8000824 <LCD_ShowChar+0x194>
				}
			}
			else//叠加模式
			{
				if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
 80007de:	7dfa      	ldrb	r2, [r7, #23]
 80007e0:	7dbb      	ldrb	r3, [r7, #22]
 80007e2:	fa42 f303 	asr.w	r3, r2, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <LCD_ShowChar+0x16a>
 80007ee:	883a      	ldrh	r2, [r7, #0]
 80007f0:	88b9      	ldrh	r1, [r7, #4]
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff33 	bl	8000660 <LCD_DrawPoint>
				x++;
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	3301      	adds	r3, #1
 80007fe:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000800:	88fa      	ldrh	r2, [r7, #6]
 8000802:	8a3b      	ldrh	r3, [r7, #16]
 8000804:	1ad2      	subs	r2, r2, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	429a      	cmp	r2, r3
 800080a:	d105      	bne.n	8000818 <LCD_ShowChar+0x188>
				{
					x=x0;
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	80bb      	strh	r3, [r7, #4]
					break;
 8000816:	e005      	b.n	8000824 <LCD_ShowChar+0x194>
		for(t=0;t<8;t++)
 8000818:	7dbb      	ldrb	r3, [r7, #22]
 800081a:	3301      	adds	r3, #1
 800081c:	75bb      	strb	r3, [r7, #22]
 800081e:	7dbb      	ldrb	r3, [r7, #22]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d9b7      	bls.n	8000794 <LCD_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 8000824:	8a7b      	ldrh	r3, [r7, #18]
 8000826:	3301      	adds	r3, #1
 8000828:	827b      	strh	r3, [r7, #18]
 800082a:	8a7a      	ldrh	r2, [r7, #18]
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	429a      	cmp	r2, r3
 8000830:	f4ff af74 	bcc.w	800071c <LCD_ShowChar+0x8c>
 8000834:	e000      	b.n	8000838 <LCD_ShowChar+0x1a8>
		else return;
 8000836:	bf00      	nop
				}
			}
		}
	}   	 	  
}
 8000838:	371c      	adds	r7, #28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	08005f98 	.word	0x08005f98
 8000844:	0800640c 	.word	0x0800640c
 8000848:	080069fc 	.word	0x080069fc
 800084c:	08007bcc 	.word	0x08007bcc

08000850 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
{         
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af04      	add	r7, sp, #16
 8000856:	60ba      	str	r2, [r7, #8]
 8000858:	461a      	mov	r2, r3
 800085a:	4603      	mov	r3, r0
 800085c:	81fb      	strh	r3, [r7, #14]
 800085e:	460b      	mov	r3, r1
 8000860:	81bb      	strh	r3, [r7, #12]
 8000862:	4613      	mov	r3, r2
 8000864:	80fb      	strh	r3, [r7, #6]
	while(*p!='\0')
 8000866:	e01a      	b.n	800089e <LCD_ShowString+0x4e>
	{       
		LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	88fc      	ldrh	r4, [r7, #6]
 800086e:	89b9      	ldrh	r1, [r7, #12]
 8000870:	89f8      	ldrh	r0, [r7, #14]
 8000872:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	8c3b      	ldrh	r3, [r7, #32]
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4623      	mov	r3, r4
 8000884:	f7ff ff04 	bl	8000690 <LCD_ShowChar>
		x+=sizey/2;
 8000888:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	b29a      	uxth	r2, r3
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	4413      	add	r3, r2
 8000896:	81fb      	strh	r3, [r7, #14]
		p++;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	3301      	adds	r3, #1
 800089c:	60bb      	str	r3, [r7, #8]
	while(*p!='\0')
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1e0      	bne.n	8000868 <LCD_ShowString+0x18>
	}  
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <mypow>:
      函数说明：显示数字
      入口数据：m底数，n指数
      返回值：  无
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80008c4:	e004      	b.n	80008d0 <mypow+0x20>
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	71ba      	strb	r2, [r7, #6]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1f5      	bne.n	80008c6 <mypow+0x16>
	return result;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <LCD_ShowIntNum>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowIntNum(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey)
{         	
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af04      	add	r7, sp, #16
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	807b      	strh	r3, [r7, #2]
 8000902:	4613      	mov	r3, r2
 8000904:	707b      	strb	r3, [r7, #1]
	u8 t,temp;
	u8 enshow=0;
 8000906:	2300      	movs	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]
	u8 sizex=sizey/2;
 800090a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000912:	2300      	movs	r3, #0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	e059      	b.n	80009cc <LCD_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000918:	887c      	ldrh	r4, [r7, #2]
 800091a:	787a      	ldrb	r2, [r7, #1]
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4619      	mov	r1, r3
 8000928:	200a      	movs	r0, #10
 800092a:	f7ff ffc1 	bl	80008b0 <mypow>
 800092e:	4603      	mov	r3, r0
 8000930:	fbb4 f1f3 	udiv	r1, r4, r3
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <LCD_ShowIntNum+0xf8>)
 8000936:	fba3 2301 	umull	r2, r3, r3, r1
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	1aca      	subs	r2, r1, r3
 8000946:	4613      	mov	r3, r2
 8000948:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d121      	bne.n	8000994 <LCD_ShowIntNum+0xac>
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	787b      	ldrb	r3, [r7, #1]
 8000954:	3b01      	subs	r3, #1
 8000956:	429a      	cmp	r2, r3
 8000958:	da1c      	bge.n	8000994 <LCD_ShowIntNum+0xac>
		{
			if(temp==0)
 800095a:	7b3b      	ldrb	r3, [r7, #12]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d117      	bne.n	8000990 <LCD_ShowIntNum+0xa8>
			{
				LCD_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	b29a      	uxth	r2, r3
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	b29b      	uxth	r3, r3
 8000968:	fb12 f303 	smulbb	r3, r2, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	4413      	add	r3, r2
 8000972:	b298      	uxth	r0, r3
 8000974:	8c3a      	ldrh	r2, [r7, #32]
 8000976:	88b9      	ldrh	r1, [r7, #4]
 8000978:	2300      	movs	r3, #0
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4613      	mov	r3, r2
 8000988:	2220      	movs	r2, #32
 800098a:	f7ff fe81 	bl	8000690 <LCD_ShowChar>
				continue;
 800098e:	e01a      	b.n	80009c6 <LCD_ShowIntNum+0xde>
			}else enshow=1; 
 8000990:	2301      	movs	r3, #1
 8000992:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	b29a      	uxth	r2, r3
 8000998:	7b7b      	ldrb	r3, [r7, #13]
 800099a:	b29b      	uxth	r3, r3
 800099c:	fb12 f303 	smulbb	r3, r2, r3
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	4413      	add	r3, r2
 80009a6:	b298      	uxth	r0, r3
 80009a8:	7b3b      	ldrb	r3, [r7, #12]
 80009aa:	3330      	adds	r3, #48	; 0x30
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	8c3c      	ldrh	r4, [r7, #32]
 80009b0:	88b9      	ldrh	r1, [r7, #4]
 80009b2:	2300      	movs	r3, #0
 80009b4:	9302      	str	r3, [sp, #8]
 80009b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	4623      	mov	r3, r4
 80009c2:	f7ff fe65 	bl	8000690 <LCD_ShowChar>
	for(t=0;t<len;t++)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	3301      	adds	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	7bfa      	ldrb	r2, [r7, #15]
 80009ce:	787b      	ldrb	r3, [r7, #1]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d3a1      	bcc.n	8000918 <LCD_ShowIntNum+0x30>
	}
} 
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	cccccccd 	.word	0xcccccccd

080009e4 <LCD_ShowFloatNum1>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowFloatNum1(u16 x,u16 y,float num,u8 len,u16 fc,u16 bc,u8 sizey)
{         	
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b08b      	sub	sp, #44	; 0x2c
 80009e8:	af04      	add	r7, sp, #16
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4623      	mov	r3, r4
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	4603      	mov	r3, r0
 80009fc:	81bb      	strh	r3, [r7, #12]
 80009fe:	460b      	mov	r3, r1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	4613      	mov	r3, r2
 8000a04:	80bb      	strh	r3, [r7, #4]
	u8 t,temp,sizex;
	u16 num1;
	sizex=sizey/2;
 8000a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a0a:	085b      	lsrs	r3, r3, #1
 8000a0c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8000a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a12:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000aec <LCD_ShowFloatNum1+0x108>
 8000a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1e:	ee17 3a90 	vmov	r3, s15
 8000a22:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	75fb      	strb	r3, [r7, #23]
 8000a28:	e057      	b.n	8000ada <LCD_ShowFloatNum1+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8000a2a:	8abc      	ldrh	r4, [r7, #20]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f7ff ff38 	bl	80008b0 <mypow>
 8000a40:	4603      	mov	r3, r0
 8000a42:	fbb4 f1f3 	udiv	r1, r4, r3
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <LCD_ShowFloatNum1+0x10c>)
 8000a48:	fba3 2301 	umull	r2, r3, r3, r1
 8000a4c:	08da      	lsrs	r2, r3, #3
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1aca      	subs	r2, r1, r3
 8000a58:	4613      	mov	r3, r2
 8000a5a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8000a5c:	7dfa      	ldrb	r2, [r7, #23]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	3b02      	subs	r3, #2
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d11d      	bne.n	8000aa2 <LCD_ShowFloatNum1+0xbe>
		{
			LCD_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	7dbb      	ldrb	r3, [r7, #22]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	fb12 f303 	smulbb	r3, r2, r3
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	89fb      	ldrh	r3, [r7, #14]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b298      	uxth	r0, r3
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	89b9      	ldrh	r1, [r7, #12]
 8000a80:	2300      	movs	r3, #0
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	222e      	movs	r2, #46	; 0x2e
 8000a92:	f7ff fdfd 	bl	8000690 <LCD_ShowChar>
			t++;
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
		}
	 	LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000aa2:	7dfb      	ldrb	r3, [r7, #23]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	7dbb      	ldrb	r3, [r7, #22]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	fb12 f303 	smulbb	r3, r2, r3
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b298      	uxth	r0, r3
 8000ab6:	7cfb      	ldrb	r3, [r7, #19]
 8000ab8:	3330      	adds	r3, #48	; 0x30
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	88bc      	ldrh	r4, [r7, #4]
 8000abe:	89b9      	ldrh	r1, [r7, #12]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	4623      	mov	r3, r4
 8000ad0:	f7ff fdde 	bl	8000690 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
 8000ada:	7dfa      	ldrb	r2, [r7, #23]
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d3a3      	bcc.n	8000a2a <LCD_ShowFloatNum1+0x46>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	42c80000 	.word	0x42c80000
 8000af0:	cccccccd 	.word	0xcccccccd

08000af4 <LCD_WR_DATA8>:
// 	while(t--);
// }

// 定义发送数据的函数
void LCD_WR_DATA8(uint8_t data)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); // 设置为数据模式
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <LCD_WR_DATA8+0x2c>)
 8000b06:	f001 f97f 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY); // 发送数据
 8000b0a:	1df9      	adds	r1, r7, #7
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b10:	2201      	movs	r2, #1
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <LCD_WR_DATA8+0x30>)
 8000b14:	f003 fdb0 	bl	8004678 <HAL_SPI_Transmit>
    // HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); 
  	// while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//检查接收标志位
	// SPI_I2S_SendData(SPI1,dat);
	// delay(1);
    // HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); 
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58021800 	.word	0x58021800
 8000b24:	2400002c 	.word	0x2400002c

08000b28 <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA(uint16_t dat)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	LCD_WR_DATA8(dat>>8);
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ffda 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(dat);
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ffd5 	bl	8000af4 <LCD_WR_DATA8>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <LCD_WR_REG>:

// 定义发送命令的函数
void LCD_WR_REG(uint8_t command)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // 设置为命令模式
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <LCD_WR_REG+0x2c>)
 8000b66:	f001 f94f 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY); // 发送命令
 8000b6a:	1df9      	adds	r1, r7, #7
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b70:	2201      	movs	r2, #1
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <LCD_WR_REG+0x30>)
 8000b74:	f003 fd80 	bl	8004678 <HAL_SPI_Transmit>
    // HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); 
	// LCD_WR_DATA8(dat);
    // HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); 
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58021800 	.word	0x58021800
 8000b84:	2400002c 	.word	0x2400002c

08000b88 <LCD_Address_Set>:
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4608      	mov	r0, r1
 8000b92:	4611      	mov	r1, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	80fb      	strh	r3, [r7, #6]
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80bb      	strh	r3, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	803b      	strh	r3, [r7, #0]
		LCD_WR_DATA(y2+1);
		LCD_WR_REG(0x2c);//储存器写
	}
	else if(USE_HORIZONTAL==1)
	{
		LCD_WR_REG(0x2a);//列地址设置
 8000ba6:	202a      	movs	r0, #42	; 0x2a
 8000ba8:	f7ff ffd4 	bl	8000b54 <LCD_WR_REG>
		LCD_WR_DATA(x1+2);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	3302      	adds	r3, #2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ffb8 	bl	8000b28 <LCD_WR_DATA>
		LCD_WR_DATA(x2+2);
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	3302      	adds	r3, #2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffb2 	bl	8000b28 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);//行地址设置
 8000bc4:	202b      	movs	r0, #43	; 0x2b
 8000bc6:	f7ff ffc5 	bl	8000b54 <LCD_WR_REG>
		LCD_WR_DATA(y1+1);
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffa9 	bl	8000b28 <LCD_WR_DATA>
		LCD_WR_DATA(y2+1);
 8000bd6:	883b      	ldrh	r3, [r7, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffa3 	bl	8000b28 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);//储存器写
 8000be2:	202c      	movs	r0, #44	; 0x2c
 8000be4:	f7ff ffb6 	bl	8000b54 <LCD_WR_REG>
		LCD_WR_REG(0x2b);//行地址设置
		LCD_WR_DATA(y1+2);
		LCD_WR_DATA(y2+2);
		LCD_WR_REG(0x2c);//储存器写
	}
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd90      	pop	{r4, r7, pc}

08000bf0 <LCD_Init>:

void LCD_Init(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af02      	add	r7, sp, #8
    // 复位
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	4885      	ldr	r0, [pc, #532]	; (8000e14 <LCD_Init+0x224>)
 8000bfe:	f001 f903 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	4883      	ldr	r0, [pc, #524]	; (8000e18 <LCD_Init+0x228>)
 8000c0a:	f001 f8fd 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c0e:	2064      	movs	r0, #100	; 0x64
 8000c10:	f000 fe42 	bl	8001898 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1a:	487f      	ldr	r0, [pc, #508]	; (8000e18 <LCD_Init+0x228>)
 8000c1c:	f001 f8f4 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fe39 	bl	8001898 <HAL_Delay>
    
    //************* Start Initial Sequence **********//
	LCD_WR_REG(0x11); //Sleep out 
 8000c26:	2011      	movs	r0, #17
 8000c28:	f7ff ff94 	bl	8000b54 <LCD_WR_REG>
	HAL_Delay(120);              //Delay 120ms 
 8000c2c:	2078      	movs	r0, #120	; 0x78
 8000c2e:	f000 fe33 	bl	8001898 <HAL_Delay>
	//------------------------------------ST7735S Frame Rate-----------------------------------------// 
	LCD_WR_REG(0xB1); 
 8000c32:	20b1      	movs	r0, #177	; 0xb1
 8000c34:	f7ff ff8e 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x05); 
 8000c38:	2005      	movs	r0, #5
 8000c3a:	f7ff ff5b 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c3e:	203c      	movs	r0, #60	; 0x3c
 8000c40:	f7ff ff58 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c44:	203c      	movs	r0, #60	; 0x3c
 8000c46:	f7ff ff55 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xB2); 
 8000c4a:	20b2      	movs	r0, #178	; 0xb2
 8000c4c:	f7ff ff82 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x05);
 8000c50:	2005      	movs	r0, #5
 8000c52:	f7ff ff4f 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c56:	203c      	movs	r0, #60	; 0x3c
 8000c58:	f7ff ff4c 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c5c:	203c      	movs	r0, #60	; 0x3c
 8000c5e:	f7ff ff49 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xB3); 
 8000c62:	20b3      	movs	r0, #179	; 0xb3
 8000c64:	f7ff ff76 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x05); 
 8000c68:	2005      	movs	r0, #5
 8000c6a:	f7ff ff43 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c6e:	203c      	movs	r0, #60	; 0x3c
 8000c70:	f7ff ff40 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c74:	203c      	movs	r0, #60	; 0x3c
 8000c76:	f7ff ff3d 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x05); 
 8000c7a:	2005      	movs	r0, #5
 8000c7c:	f7ff ff3a 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c80:	203c      	movs	r0, #60	; 0x3c
 8000c82:	f7ff ff37 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3C); 
 8000c86:	203c      	movs	r0, #60	; 0x3c
 8000c88:	f7ff ff34 	bl	8000af4 <LCD_WR_DATA8>
	//------------------------------------End ST7735S Frame Rate---------------------------------// 
	LCD_WR_REG(0xB4); //Dot inversion 
 8000c8c:	20b4      	movs	r0, #180	; 0xb4
 8000c8e:	f7ff ff61 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x03); 
 8000c92:	2003      	movs	r0, #3
 8000c94:	f7ff ff2e 	bl	8000af4 <LCD_WR_DATA8>
	//------------------------------------ST7735S Power Sequence---------------------------------// 
	LCD_WR_REG(0xC0); 
 8000c98:	20c0      	movs	r0, #192	; 0xc0
 8000c9a:	f7ff ff5b 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x28); 
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f7ff ff28 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x08); 
 8000ca4:	2008      	movs	r0, #8
 8000ca6:	f7ff ff25 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04); 
 8000caa:	2004      	movs	r0, #4
 8000cac:	f7ff ff22 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xC1); 
 8000cb0:	20c1      	movs	r0, #193	; 0xc1
 8000cb2:	f7ff ff4f 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0XC0); 
 8000cb6:	20c0      	movs	r0, #192	; 0xc0
 8000cb8:	f7ff ff1c 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xC2); 
 8000cbc:	20c2      	movs	r0, #194	; 0xc2
 8000cbe:	f7ff ff49 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x0D); 
 8000cc2:	200d      	movs	r0, #13
 8000cc4:	f7ff ff16 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00); 
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ff13 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xC3); 
 8000cce:	20c3      	movs	r0, #195	; 0xc3
 8000cd0:	f7ff ff40 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D); 
 8000cd4:	208d      	movs	r0, #141	; 0x8d
 8000cd6:	f7ff ff0d 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2A); 
 8000cda:	202a      	movs	r0, #42	; 0x2a
 8000cdc:	f7ff ff0a 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xC4); 
 8000ce0:	20c4      	movs	r0, #196	; 0xc4
 8000ce2:	f7ff ff37 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x8D); 
 8000ce6:	208d      	movs	r0, #141	; 0x8d
 8000ce8:	f7ff ff04 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0xEE); 
 8000cec:	20ee      	movs	r0, #238	; 0xee
 8000cee:	f7ff ff01 	bl	8000af4 <LCD_WR_DATA8>
	//---------------------------------End ST7735S Power Sequence-------------------------------------// 
	LCD_WR_REG(0xC5); //VCOM 
 8000cf2:	20c5      	movs	r0, #197	; 0xc5
 8000cf4:	f7ff ff2e 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x1A); 
 8000cf8:	201a      	movs	r0, #26
 8000cfa:	f7ff fefb 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0x36); //MX, MY, RGB mode 
 8000cfe:	2036      	movs	r0, #54	; 0x36
 8000d00:	f7ff ff28 	bl	8000b54 <LCD_WR_REG>
	if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
	else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
 8000d04:	20c0      	movs	r0, #192	; 0xc0
 8000d06:	f7ff fef5 	bl	8000af4 <LCD_WR_DATA8>
	else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
	else LCD_WR_DATA8(0xA0); 
	//------------------------------------ST7735S Gamma Sequence---------------------------------// 
	LCD_WR_REG(0xE0); 
 8000d0a:	20e0      	movs	r0, #224	; 0xe0
 8000d0c:	f7ff ff22 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x04); 
 8000d10:	2004      	movs	r0, #4
 8000d12:	f7ff feef 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x22); 
 8000d16:	2022      	movs	r0, #34	; 0x22
 8000d18:	f7ff feec 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x07); 
 8000d1c:	2007      	movs	r0, #7
 8000d1e:	f7ff fee9 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0A); 
 8000d22:	200a      	movs	r0, #10
 8000d24:	f7ff fee6 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2E); 
 8000d28:	202e      	movs	r0, #46	; 0x2e
 8000d2a:	f7ff fee3 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x30); 
 8000d2e:	2030      	movs	r0, #48	; 0x30
 8000d30:	f7ff fee0 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25); 
 8000d34:	2025      	movs	r0, #37	; 0x25
 8000d36:	f7ff fedd 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2A); 
 8000d3a:	202a      	movs	r0, #42	; 0x2a
 8000d3c:	f7ff feda 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x28); 
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f7ff fed7 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x26); 
 8000d46:	2026      	movs	r0, #38	; 0x26
 8000d48:	f7ff fed4 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2E); 
 8000d4c:	202e      	movs	r0, #46	; 0x2e
 8000d4e:	f7ff fed1 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3A); 
 8000d52:	203a      	movs	r0, #58	; 0x3a
 8000d54:	f7ff fece 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00); 
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fecb 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01); 
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fec8 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x03); 
 8000d64:	2003      	movs	r0, #3
 8000d66:	f7ff fec5 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13); 
 8000d6a:	2013      	movs	r0, #19
 8000d6c:	f7ff fec2 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0xE1); 
 8000d70:	20e1      	movs	r0, #225	; 0xe1
 8000d72:	f7ff feef 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x04); 
 8000d76:	2004      	movs	r0, #4
 8000d78:	f7ff febc 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x16); 
 8000d7c:	2016      	movs	r0, #22
 8000d7e:	f7ff feb9 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x06); 
 8000d82:	2006      	movs	r0, #6
 8000d84:	f7ff feb6 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x0D); 
 8000d88:	200d      	movs	r0, #13
 8000d8a:	f7ff feb3 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2D); 
 8000d8e:	202d      	movs	r0, #45	; 0x2d
 8000d90:	f7ff feb0 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x26); 
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f7ff fead 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x23); 
 8000d9a:	2023      	movs	r0, #35	; 0x23
 8000d9c:	f7ff feaa 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x27); 
 8000da0:	2027      	movs	r0, #39	; 0x27
 8000da2:	f7ff fea7 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x27); 
 8000da6:	2027      	movs	r0, #39	; 0x27
 8000da8:	f7ff fea4 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x25); 
 8000dac:	2025      	movs	r0, #37	; 0x25
 8000dae:	f7ff fea1 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x2D); 
 8000db2:	202d      	movs	r0, #45	; 0x2d
 8000db4:	f7ff fe9e 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x3B); 
 8000db8:	203b      	movs	r0, #59	; 0x3b
 8000dba:	f7ff fe9b 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x00); 
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fe98 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x01); 
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fe95 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x04); 
 8000dca:	2004      	movs	r0, #4
 8000dcc:	f7ff fe92 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_DATA8(0x13); 
 8000dd0:	2013      	movs	r0, #19
 8000dd2:	f7ff fe8f 	bl	8000af4 <LCD_WR_DATA8>
	//------------------------------------End ST7735S Gamma Sequence-----------------------------// 
	LCD_WR_REG(0x3A); //65k mode 
 8000dd6:	203a      	movs	r0, #58	; 0x3a
 8000dd8:	f7ff febc 	bl	8000b54 <LCD_WR_REG>
	LCD_WR_DATA8(0x05); 
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f7ff fe89 	bl	8000af4 <LCD_WR_DATA8>
	LCD_WR_REG(0x29); //Display on 
 8000de2:	2029      	movs	r0, #41	; 0x29
 8000de4:	f7ff feb6 	bl	8000b54 <LCD_WR_REG>

	LCD_Fill(0,0,LCD_W,LCD_H,WHITE);
 8000de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fbfd 	bl	80005f4 <LCD_Fill>
    
	// 打开背光
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <LCD_Init+0x224>)
 8000e02:	f001 f801 	bl	8001e08 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f000 fd46 	bl	8001898 <HAL_Delay>

 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	58020c00 	.word	0x58020c00
 8000e18:	58021800 	.word	0x58021800

08000e1c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b95      	ldr	r3, [pc, #596]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	4a93      	ldr	r2, [pc, #588]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e42:	4b91      	ldr	r3, [pc, #580]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e50:	4b8d      	ldr	r3, [pc, #564]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	4a8c      	ldr	r2, [pc, #560]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e60:	4b89      	ldr	r3, [pc, #548]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b86      	ldr	r3, [pc, #536]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	4a84      	ldr	r2, [pc, #528]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7e:	4b82      	ldr	r3, [pc, #520]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b7e      	ldr	r3, [pc, #504]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	4a7d      	ldr	r2, [pc, #500]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e9c:	4b7a      	ldr	r3, [pc, #488]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b77      	ldr	r3, [pc, #476]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	4a75      	ldr	r2, [pc, #468]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eba:	4b73      	ldr	r3, [pc, #460]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000ebc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed8:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee6:	4b68      	ldr	r3, [pc, #416]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000ee8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eec:	4a66      	ldr	r2, [pc, #408]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef6:	4b64      	ldr	r3, [pc, #400]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000ef8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f04:	4b60      	ldr	r3, [pc, #384]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000f06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f14:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <MX_GPIO_Init+0x26c>)
 8000f16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f28:	4858      	ldr	r0, [pc, #352]	; (800108c <MX_GPIO_Init+0x270>)
 8000f2a:	f000 ff6d 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f34:	4856      	ldr	r0, [pc, #344]	; (8001090 <MX_GPIO_Init+0x274>)
 8000f36:	f000 ff67 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	4854      	ldr	r0, [pc, #336]	; (8001094 <MX_GPIO_Init+0x278>)
 8000f42:	f000 ff61 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000f4c:	4852      	ldr	r0, [pc, #328]	; (8001098 <MX_GPIO_Init+0x27c>)
 8000f4e:	f000 ff5b 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	4851      	ldr	r0, [pc, #324]	; (800109c <MX_GPIO_Init+0x280>)
 8000f58:	f000 ff56 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	484b      	ldr	r0, [pc, #300]	; (80010a0 <MX_GPIO_Init+0x284>)
 8000f72:	f000 fd99 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	483f      	ldr	r0, [pc, #252]	; (800108c <MX_GPIO_Init+0x270>)
 8000f90:	f000 fd8a 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4838      	ldr	r0, [pc, #224]	; (8001090 <MX_GPIO_Init+0x274>)
 8000fae:	f000 fd7b 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4832      	ldr	r0, [pc, #200]	; (8001094 <MX_GPIO_Init+0x278>)
 8000fcc:	f000 fd6c 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482c      	ldr	r0, [pc, #176]	; (8001098 <MX_GPIO_Init+0x27c>)
 8000fe6:	f000 fd5f 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4829      	ldr	r0, [pc, #164]	; (80010a4 <MX_GPIO_Init+0x288>)
 8001000:	f000 fd52 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001016:	230a      	movs	r3, #10
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4820      	ldr	r0, [pc, #128]	; (80010a4 <MX_GPIO_Init+0x288>)
 8001022:	f000 fd41 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4819      	ldr	r0, [pc, #100]	; (80010a4 <MX_GPIO_Init+0x288>)
 8001040:	f000 fd32 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8001044:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_GPIO_Init+0x27c>)
 800105e:	f000 fd23 	bl	8001aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001062:	2302      	movs	r3, #2
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <MX_GPIO_Init+0x280>)
 800107a:	f000 fd15 	bl	8001aa8 <HAL_GPIO_Init>

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	; 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58024400 	.word	0x58024400
 800108c:	58021400 	.word	0x58021400
 8001090:	58020400 	.word	0x58020400
 8001094:	58020c00 	.word	0x58020c00
 8001098:	58021800 	.word	0x58021800
 800109c:	58021000 	.word	0x58021000
 80010a0:	58020800 	.word	0x58020800
 80010a4:	58020000 	.word	0x58020000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fb61 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f885 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f7ff feb1 	bl	8000e1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010ba:	f000 fa77 	bl	80015ac <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80010be:	f000 fb27 	bl	8001710 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 80010c2:	f000 f8f9 	bl	80012b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 80010c6:	f7ff fd93 	bl	8000bf0 <LCD_Init>
  LCD_Fill(0,0,LCD_W/2,LCD_H/2,RED);
 80010ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2350      	movs	r3, #80	; 0x50
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fa8c 	bl	80005f4 <LCD_Fill>
  float t=0;
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	4832      	ldr	r0, [pc, #200]	; (80011b0 <main+0x108>)
 80010e8:	f000 fe8e 	bl	8001e08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2102      	movs	r1, #2
 80010f0:	4830      	ldr	r0, [pc, #192]	; (80011b4 <main+0x10c>)
 80010f2:	f000 fe89 	bl	8001e08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <main+0x108>)
 80010fe:	f000 fe83 	bl	8001e08 <HAL_GPIO_WritePin>
    LCD_ShowString(24,30,"LCD_W:",RED,WHITE,16,0);
 8001102:	2300      	movs	r3, #0
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2310      	movs	r3, #16
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <main+0x110>)
 8001116:	211e      	movs	r1, #30
 8001118:	2018      	movs	r0, #24
 800111a:	f7ff fb99 	bl	8000850 <LCD_ShowString>
		LCD_ShowIntNum(72,30,LCD_W,3,RED,WHITE,16);
 800111e:	2310      	movs	r3, #16
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2303      	movs	r3, #3
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	211e      	movs	r1, #30
 8001134:	2048      	movs	r0, #72	; 0x48
 8001136:	f7ff fbd7 	bl	80008e8 <LCD_ShowIntNum>
		LCD_ShowString(24,50,"LCD_H:",RED,WHITE,16,0);
 800113a:	2300      	movs	r3, #0
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2310      	movs	r3, #16
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <main+0x114>)
 800114e:	2132      	movs	r1, #50	; 0x32
 8001150:	2018      	movs	r0, #24
 8001152:	f7ff fb7d 	bl	8000850 <LCD_ShowString>
		LCD_ShowIntNum(72,50,LCD_H,3,RED,WHITE,16);
 8001156:	2310      	movs	r3, #16
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2303      	movs	r3, #3
 8001168:	22a0      	movs	r2, #160	; 0xa0
 800116a:	2132      	movs	r1, #50	; 0x32
 800116c:	2048      	movs	r0, #72	; 0x48
 800116e:	f7ff fbbb 	bl	80008e8 <LCD_ShowIntNum>
		LCD_ShowFloatNum1(20,80,t,4,RED,WHITE,16);
 8001172:	2310      	movs	r3, #16
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001180:	2204      	movs	r2, #4
 8001182:	ed97 0a01 	vldr	s0, [r7, #4]
 8001186:	2150      	movs	r1, #80	; 0x50
 8001188:	2014      	movs	r0, #20
 800118a:	f7ff fc2b 	bl	80009e4 <LCD_ShowFloatNum1>
    t+=0.11;
 800118e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001196:	ed9f 6b04 	vldr	d6, [pc, #16]	; 80011a8 <main+0x100>
 800119a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800119e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a2:	edc7 7a01 	vstr	s15, [r7, #4]
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80011a6:	e79c      	b.n	80010e2 <main+0x3a>
 80011a8:	c28f5c29 	.word	0xc28f5c29
 80011ac:	3fbc28f5 	.word	0x3fbc28f5
 80011b0:	58020400 	.word	0x58020400
 80011b4:	58021000 	.word	0x58021000
 80011b8:	08005f88 	.word	0x08005f88
 80011bc:	08005f90 	.word	0x08005f90

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09c      	sub	sp, #112	; 0x70
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	224c      	movs	r2, #76	; 0x4c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fec6 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2220      	movs	r2, #32
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fec0 	bl	8005f60 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <SystemClock_Config+0xe4>)
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f000 fe26 	bl	8001e3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011f0:	2300      	movs	r3, #0
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <SystemClock_Config+0xe8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <SystemClock_Config+0xe8>)
 80011fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <SystemClock_Config+0xe8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800120c:	bf00      	nop
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <SystemClock_Config+0xe8>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800121a:	d1f8      	bne.n	800120e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800121c:	2321      	movs	r3, #33	; 0x21
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001220:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001226:	2301      	movs	r3, #1
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	2302      	movs	r3, #2
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001236:	2318      	movs	r3, #24
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800123e:	2304      	movs	r3, #4
 8001240:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001246:	230c      	movs	r3, #12
 8001248:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800124a:	2300      	movs	r3, #0
 800124c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe4a 	bl	8001ef0 <HAL_RCC_OscConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001262:	f000 f823 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	233f      	movs	r3, #63	; 0x3f
 8001268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2303      	movs	r3, #3
 800126c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fa34 	bl	80026f8 <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001296:	f000 f809 	bl	80012ac <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3770      	adds	r7, #112	; 0x70
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58024800 	.word	0x58024800

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <MX_SPI1_Init+0xac>)
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <MX_SPI1_Init+0xb0>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_SPI1_Init+0xac>)
 80012c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_SPI1_Init+0xac>)
 80012cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_SPI1_Init+0xac>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_SPI1_Init+0xac>)
 80012da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <MX_SPI1_Init+0xac>)
 80012e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80012e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_SPI1_Init+0xac>)
 80012ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_SPI1_Init+0xac>)
 80012f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI1_Init+0xac>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_SPI1_Init+0xac>)
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_SPI1_Init+0xac>)
 8001306:	2200      	movs	r2, #0
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI1_Init+0xac>)
 800130c:	2200      	movs	r2, #0
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI1_Init+0xac>)
 8001312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI1_Init+0xac>)
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI1_Init+0xac>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI1_Init+0xac>)
 8001326:	2200      	movs	r2, #0
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI1_Init+0xac>)
 800132c:	2200      	movs	r2, #0
 800132e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI1_Init+0xac>)
 8001332:	2200      	movs	r2, #0
 8001334:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI1_Init+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI1_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI1_Init+0xac>)
 8001344:	2200      	movs	r2, #0
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI1_Init+0xac>)
 800134a:	2200      	movs	r2, #0
 800134c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_SPI1_Init+0xac>)
 8001350:	f003 f88c 	bl	800446c <HAL_SPI_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_SPI1_Init+0xa6>
  {
    Error_Handler();
 800135a:	f7ff ffa7 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2400002c 	.word	0x2400002c
 8001368:	40013000 	.word	0x40013000

0800136c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0b8      	sub	sp, #224	; 0xe0
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	22b8      	movs	r2, #184	; 0xb8
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 fde7 	bl	8005f60 <memset>
  if(spiHandle->Instance==SPI1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a24      	ldr	r2, [pc, #144]	; (8001428 <HAL_SPI_MspInit+0xbc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d141      	bne.n	8001420 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fd30 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80013b6:	f7ff ff79 	bl	80012ac <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_SPI_MspInit+0xc0>)
 80013ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin_Pin|LCD_SDA_Pin_Pin;
 80013f6:	23a0      	movs	r3, #160	; 0xa0
 80013f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140e:	2305      	movs	r3, #5
 8001410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <HAL_SPI_MspInit+0xc4>)
 800141c:	f000 fb44 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	37e0      	adds	r7, #224	; 0xe0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013000 	.word	0x40013000
 800142c:	58024400 	.word	0x58024400
 8001430:	58020000 	.word	0x58020000

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_MspInit+0x30>)
 800143c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001440:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x30>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x30>)
 800144c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	58024400 	.word	0x58024400

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f9d0 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <SystemInit+0xd0>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c6:	4a31      	ldr	r2, [pc, #196]	; (800158c <SystemInit+0xd0>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SystemInit+0xd4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d807      	bhi.n	80014ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <SystemInit+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <SystemInit+0xd4>)
 80014e6:	f043 0303 	orr.w	r3, r3, #3
 80014ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SystemInit+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <SystemInit+0xd8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <SystemInit+0xd8>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4924      	ldr	r1, [pc, #144]	; (8001594 <SystemInit+0xd8>)
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SystemInit+0xdc>)
 8001506:	4013      	ands	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SystemInit+0xd4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <SystemInit+0xd4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 030f 	bic.w	r3, r3, #15
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <SystemInit+0xd4>)
 8001520:	f043 0303 	orr.w	r3, r3, #3
 8001524:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001526:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <SystemInit+0xd8>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <SystemInit+0xd8>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <SystemInit+0xd8>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <SystemInit+0xd8>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <SystemInit+0xe0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <SystemInit+0xd8>)
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <SystemInit+0xe4>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <SystemInit+0xd8>)
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <SystemInit+0xe8>)
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <SystemInit+0xd8>)
 800154c:	2200      	movs	r2, #0
 800154e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <SystemInit+0xd8>)
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <SystemInit+0xe8>)
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <SystemInit+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <SystemInit+0xd8>)
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <SystemInit+0xe8>)
 8001560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SystemInit+0xd8>)
 8001564:	2200      	movs	r2, #0
 8001566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SystemInit+0xd8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <SystemInit+0xd8>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <SystemInit+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SystemInit+0xec>)
 800157c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001580:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	52002000 	.word	0x52002000
 8001594:	58024400 	.word	0x58024400
 8001598:	eaf6ed7f 	.word	0xeaf6ed7f
 800159c:	02020200 	.word	0x02020200
 80015a0:	01ff0000 	.word	0x01ff0000
 80015a4:	01010280 	.word	0x01010280
 80015a8:	52004000 	.word	0x52004000

080015ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <MX_USART3_UART_Init+0x94>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b16      	ldr	r3, [pc, #88]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <MX_USART3_UART_Init+0x90>)
 80015f6:	f003 fb1a 	bl	8004c2e <HAL_UART_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001600:	f7ff fe54 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_USART3_UART_Init+0x90>)
 8001608:	f004 fbbc 	bl	8005d84 <HAL_UARTEx_SetTxFifoThreshold>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001612:	f7ff fe4b 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <MX_USART3_UART_Init+0x90>)
 800161a:	f004 fbf1 	bl	8005e00 <HAL_UARTEx_SetRxFifoThreshold>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001624:	f7ff fe42 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_USART3_UART_Init+0x90>)
 800162a:	f004 fb72 	bl	8005d12 <HAL_UARTEx_DisableFifoMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001634:	f7ff fe3a 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	240000b4 	.word	0x240000b4
 8001640:	40004800 	.word	0x40004800

08001644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0b8      	sub	sp, #224	; 0xe0
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	22b8      	movs	r2, #184	; 0xb8
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fc7b 	bl	8005f60 <memset>
  if(uartHandle->Instance==USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <HAL_UART_MspInit+0xc0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d142      	bne.n	80016fa <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001674:	2302      	movs	r3, #2
 8001676:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fbc4 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800168e:	f7ff fe0d 	bl	80012ac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_UART_MspInit+0xc4>)
 8001694:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_UART_MspInit+0xc4>)
 800169a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_UART_MspInit+0xc4>)
 80016c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e8:	2307      	movs	r3, #7
 80016ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_UART_MspInit+0xc8>)
 80016f6:	f000 f9d7 	bl	8001aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016fa:	bf00      	nop
 80016fc:	37e0      	adds	r7, #224	; 0xe0
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40004800 	.word	0x40004800
 8001708:	58024400 	.word	0x58024400
 800170c:	58020c00 	.word	0x58020c00

08001710 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <Reset_Handler>:
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001758 <LoopFillZerobss+0xe>
 8001724:	f7ff feca 	bl	80014bc <SystemInit>
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <LoopFillZerobss+0x12>)
 800172a:	490d      	ldr	r1, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <LoopFillZerobss+0x1a>)
 800172e:	2300      	movs	r3, #0
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:
 8001732:	58d4      	ldr	r4, [r2, r3]
 8001734:	50c4      	str	r4, [r0, r3]
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:
 8001738:	18c4      	adds	r4, r0, r3
 800173a:	428c      	cmp	r4, r1
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <LoopFillZerobss+0x1e>)
 8001740:	4c0a      	ldr	r4, [pc, #40]	; (800176c <LoopFillZerobss+0x22>)
 8001742:	2300      	movs	r3, #0
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:
 800174a:	42a2      	cmp	r2, r4
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>
 800174e:	f004 fbe3 	bl	8005f18 <__libc_init_array>
 8001752:	f7ff fca9 	bl	80010a8 <main>
 8001756:	4770      	bx	lr
 8001758:	24100000 	.word	0x24100000
 800175c:	24000000 	.word	0x24000000
 8001760:	24000010 	.word	0x24000010
 8001764:	080093d4 	.word	0x080093d4
 8001768:	24000010 	.word	0x24000010
 800176c:	24000148 	.word	0x24000148

08001770 <ADC_IRQHandler>:
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177a:	2003      	movs	r0, #3
 800177c:	f000 f962 	bl	8001a44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001780:	f001 f970 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8001784:	4602      	mov	r2, r0
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_Init+0x68>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	4913      	ldr	r1, [pc, #76]	; (80017e0 <HAL_Init+0x6c>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_Init+0x68>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_Init+0x6c>)
 80017a8:	5cd3      	ldrb	r3, [r2, r3]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <HAL_Init+0x70>)
 80017b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_Init+0x74>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f814 	bl	80017ec <HAL_InitTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e002      	b.n	80017d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ce:	f7ff fe31 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	58024400 	.word	0x58024400
 80017e0:	0800938c 	.word	0x0800938c
 80017e4:	24000004 	.word	0x24000004
 80017e8:	24000000 	.word	0x24000000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_InitTick+0x60>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e021      	b.n	8001844 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_InitTick+0x64>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_InitTick+0x60>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f939 	bl	8001a8e <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001834:	f000 f911 	bl	8001a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x68>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2400000c 	.word	0x2400000c
 8001850:	24000000 	.word	0x24000000
 8001854:	24000008 	.word	0x24000008

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2400000c 	.word	0x2400000c
 800187c:	24000144 	.word	0x24000144

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	24000144 	.word	0x24000144

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2400000c 	.word	0x2400000c

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	4313      	orrs	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	05fa0000 	.word	0x05fa0000

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	; (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	; (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	; 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a10:	d301      	bcc.n	8001a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00f      	b.n	8001a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <SysTick_Config+0x40>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a24:	f7ff ff8e 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <SysTick_Config+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SysTick_Config+0x40>)
 8001a30:	2207      	movs	r2, #7
 8001a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	e000e010 	.word	0xe000e010

08001a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff47 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff5e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffb2 	bl	8001a00 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ab6:	4b89      	ldr	r3, [pc, #548]	; (8001cdc <HAL_GPIO_Init+0x234>)
 8001ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aba:	e194      	b.n	8001de6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8186 	beq.w	8001de0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x44>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80e0 	beq.w	8001de0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x238>)
 8001c22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c26:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <HAL_GPIO_Init+0x238>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_GPIO_Init+0x238>)
 8001c32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_GPIO_Init+0x23c>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_GPIO_Init+0x240>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d052      	beq.n	8001d10 <HAL_GPIO_Init+0x268>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_GPIO_Init+0x244>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d031      	beq.n	8001cd6 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <HAL_GPIO_Init+0x248>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <HAL_GPIO_Init+0x22a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_GPIO_Init+0x24c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d025      	beq.n	8001cce <HAL_GPIO_Init+0x226>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_GPIO_Init+0x250>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <HAL_GPIO_Init+0x222>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_GPIO_Init+0x254>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x21e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <HAL_GPIO_Init+0x258>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x21a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_GPIO_Init+0x25c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x216>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <HAL_GPIO_Init+0x260>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x212>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_GPIO_Init+0x264>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x20e>
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	e02d      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	e02b      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e029      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e027      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e025      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e023      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	e021      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e01f      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e01d      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e01b      	b.n	8001d12 <HAL_GPIO_Init+0x26a>
 8001cda:	bf00      	nop
 8001cdc:	58000080 	.word	0x58000080
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58000400 	.word	0x58000400
 8001ce8:	58020000 	.word	0x58020000
 8001cec:	58020400 	.word	0x58020400
 8001cf0:	58020800 	.word	0x58020800
 8001cf4:	58020c00 	.word	0x58020c00
 8001cf8:	58021000 	.word	0x58021000
 8001cfc:	58021400 	.word	0x58021400
 8001d00:	58021800 	.word	0x58021800
 8001d04:	58021c00 	.word	0x58021c00
 8001d08:	58022000 	.word	0x58022000
 8001d0c:	58022400 	.word	0x58022400
 8001d10:	2300      	movs	r3, #0
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d22:	4938      	ldr	r1, [pc, #224]	; (8001e04 <HAL_GPIO_Init+0x35c>)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3301      	adds	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f ae63 	bne.w	8001abc <HAL_GPIO_Init+0x14>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58000400 	.word	0x58000400

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e24:	e003      	b.n	8001e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	041a      	lsls	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d00a      	beq.n	8001e66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e040      	b.n	8001ee4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e03e      	b.n	8001ee4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001e6e:	491f      	ldr	r1, [pc, #124]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e76:	f7ff fd03 	bl	8001880 <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e7c:	e009      	b.n	8001e92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e7e:	f7ff fcff 	bl	8001880 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8c:	d901      	bls.n	8001e92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e028      	b.n	8001ee4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b1e      	cmp	r3, #30
 8001ea4:	d008      	beq.n	8001eb8 <HAL_PWREx_ConfigSupply+0x7c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8001eaa:	d005      	beq.n	8001eb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b1d      	cmp	r3, #29
 8001eb0:	d002      	beq.n	8001eb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b2d      	cmp	r3, #45	; 0x2d
 8001eb6:	d114      	bne.n	8001ee2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001eb8:	f7ff fce2 	bl	8001880 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ebe:	e009      	b.n	8001ed4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ec0:	f7ff fcde 	bl	8001880 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ece:	d901      	bls.n	8001ed4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e007      	b.n	8001ee4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_PWREx_ConfigSupply+0xb0>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d1ee      	bne.n	8001ec0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58024800 	.word	0x58024800

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e3f4      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80b3 	beq.w	8002076 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f10:	4b95      	ldr	r3, [pc, #596]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f1a:	4b93      	ldr	r3, [pc, #588]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d007      	beq.n	8001f36 <HAL_RCC_OscConfig+0x46>
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	2b18      	cmp	r3, #24
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d10d      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f36:	4b8c      	ldr	r3, [pc, #560]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8098 	beq.w	8002074 <HAL_RCC_OscConfig+0x184>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 8093 	bne.w	8002074 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e3cc      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x7a>
 8001f5c:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a81      	ldr	r2, [pc, #516]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e058      	b.n	800201c <HAL_RCC_OscConfig+0x12c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d112      	bne.n	8001f98 <HAL_RCC_OscConfig+0xa8>
 8001f72:	4b7d      	ldr	r3, [pc, #500]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a7c      	ldr	r2, [pc, #496]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a79      	ldr	r2, [pc, #484]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b77      	ldr	r3, [pc, #476]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a76      	ldr	r2, [pc, #472]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e041      	b.n	800201c <HAL_RCC_OscConfig+0x12c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa0:	d112      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xd8>
 8001fa2:	4b71      	ldr	r3, [pc, #452]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6d      	ldr	r2, [pc, #436]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6a      	ldr	r2, [pc, #424]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e029      	b.n	800201c <HAL_RCC_OscConfig+0x12c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x108>
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a64      	ldr	r2, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a61      	ldr	r2, [pc, #388]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e011      	b.n	800201c <HAL_RCC_OscConfig+0x12c>
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a57      	ldr	r2, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b55      	ldr	r3, [pc, #340]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a54      	ldr	r2, [pc, #336]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002016:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800201a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff fc2c 	bl	8001880 <HAL_GetTick>
 8002028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff fc28 	bl	8001880 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e356      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203e:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x13c>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff fc18 	bl	8001880 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fc14 	bl	8001880 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e342      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002066:	4b40      	ldr	r3, [pc, #256]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x164>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 808d 	beq.w	800219e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800208c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <HAL_RCC_OscConfig+0x1ba>
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	2b18      	cmp	r3, #24
 800209e:	d137      	bne.n	8002110 <HAL_RCC_OscConfig+0x220>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d132      	bne.n	8002110 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1d2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e314      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0219 	bic.w	r2, r3, #25
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4926      	ldr	r1, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d4:	f7ff fbd4 	bl	8001880 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fbd0 	bl	8001880 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e2fe      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	4917      	ldr	r1, [pc, #92]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210e:	e046      	b.n	800219e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d029      	beq.n	800216c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0219 	bic.w	r2, r3, #25
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4910      	ldr	r1, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff fba9 	bl	8001880 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7ff fba5 	bl	8001880 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e2d3      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	4902      	ldr	r1, [pc, #8]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x2ae>
 8002166:	bf00      	nop
 8002168:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216c:	4b97      	ldr	r3, [pc, #604]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff fb82 	bl	8001880 <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002180:	f7ff fb7e 	bl	8001880 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e2ac      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06a      	beq.n	8002280 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b4:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d007      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2e0>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b18      	cmp	r3, #24
 80021c4:	d11b      	bne.n	80021fe <HAL_RCC_OscConfig+0x30e>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d116      	bne.n	80021fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e281      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021e8:	4b78      	ldr	r3, [pc, #480]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	4975      	ldr	r1, [pc, #468]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021fc:	e040      	b.n	8002280 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002206:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a70      	ldr	r2, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800220c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff fb35 	bl	8001880 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800221a:	f7ff fb31 	bl	8001880 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e25f      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800222c:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002238:	4b64      	ldr	r3, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	4961      	ldr	r1, [pc, #388]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
 800224c:	e018      	b.n	8002280 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5e      	ldr	r2, [pc, #376]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff fb11 	bl	8001880 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002262:	f7ff fb0d 	bl	8001880 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e23b      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002274:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d036      	beq.n	80022fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d019      	beq.n	80022c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002294:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff faee 	bl	8001880 <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a8:	f7ff faea 	bl	8001880 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e218      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ba:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80022bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x3b8>
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80022ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022cc:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff fad4 	bl	8001880 <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff fad0 	bl	8001880 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1fe      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d036      	beq.n	8002374 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800231a:	f7ff fab1 	bl	8001880 <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002322:	f7ff faad 	bl	8001880 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1db      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x432>
 8002340:	e018      	b.n	8002374 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 8002348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800234c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800234e:	f7ff fa97 	bl	8001880 <HAL_GetTick>
 8002352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002356:	f7ff fa93 	bl	8001880 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1c1      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80af 	beq.w	80024e0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_RCC_OscConfig+0x4e0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_RCC_OscConfig+0x4e0>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800238e:	f7ff fa77 	bl	8001880 <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fa73 	bl	8001880 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1a1      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_OscConfig+0x4e0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4e4>
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a02      	ldr	r2, [pc, #8]	; (80023cc <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e05b      	b.n	8002482 <HAL_RCC_OscConfig+0x592>
 80023ca:	bf00      	nop
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58024800 	.word	0x58024800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d112      	bne.n	8002402 <HAL_RCC_OscConfig+0x512>
 80023dc:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a9c      	ldr	r2, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a99      	ldr	r2, [pc, #612]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b97      	ldr	r3, [pc, #604]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a96      	ldr	r2, [pc, #600]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e03f      	b.n	8002482 <HAL_RCC_OscConfig+0x592>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x540>
 800240a:	4b92      	ldr	r3, [pc, #584]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a91      	ldr	r2, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a8e      	ldr	r2, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800241c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	4b8c      	ldr	r3, [pc, #560]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a8b      	ldr	r2, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	e028      	b.n	8002482 <HAL_RCC_OscConfig+0x592>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b85      	cmp	r3, #133	; 0x85
 8002436:	d112      	bne.n	800245e <HAL_RCC_OscConfig+0x56e>
 8002438:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a85      	ldr	r2, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	4b83      	ldr	r3, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a82      	ldr	r2, [pc, #520]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	4b80      	ldr	r3, [pc, #512]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a7f      	ldr	r2, [pc, #508]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	e011      	b.n	8002482 <HAL_RCC_OscConfig+0x592>
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a79      	ldr	r2, [pc, #484]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a76      	ldr	r2, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800247c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d015      	beq.n	80024b6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7ff f9f9 	bl	8001880 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff f9f5 	bl	8001880 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e121      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ee      	beq.n	8002492 <HAL_RCC_OscConfig+0x5a2>
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7ff f9e3 	bl	8001880 <HAL_GetTick>
 80024ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024bc:	e00a      	b.n	80024d4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7ff f9df 	bl	8001880 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e10b      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024d4:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8100 	beq.w	80026ea <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024f2:	2b18      	cmp	r3, #24
 80024f4:	f000 80bb 	beq.w	800266e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	f040 8095 	bne.w	800262c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b54      	ldr	r3, [pc, #336]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a53      	ldr	r2, [pc, #332]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff f9b7 	bl	8001880 <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff f9b3 	bl	8001880 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0e1      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002528:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002538:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_OscConfig+0x768>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	430a      	orrs	r2, r1
 8002548:	4942      	ldr	r1, [pc, #264]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800254a:	4313      	orrs	r3, r2
 800254c:	628b      	str	r3, [r1, #40]	; 0x28
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	3b01      	subs	r3, #1
 8002554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	3b01      	subs	r3, #1
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	b29b      	uxth	r3, r3
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	3b01      	subs	r3, #1
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	3b01      	subs	r3, #1
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800257e:	4935      	ldr	r1, [pc, #212]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	4a32      	ldr	r2, [pc, #200]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002590:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x76c>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800259c:	00d2      	lsls	r2, r2, #3
 800259e:	492d      	ldr	r1, [pc, #180]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025a4:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	f023 020c 	bic.w	r2, r3, #12
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	4928      	ldr	r1, [pc, #160]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f023 0202 	bic.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4924      	ldr	r1, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4a18      	ldr	r2, [pc, #96]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff f93c 	bl	8001880 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f7ff f938 	bl	8001880 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e066      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x71c>
 800262a:	e05e      	b.n	80026ea <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCC_OscConfig+0x764>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f922 	bl	8001880 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800263e:	e00f      	b.n	8002660 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f91e 	bl	8001880 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d908      	bls.n	8002660 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e04c      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
 8002652:	bf00      	nop
 8002654:	58024400 	.word	0x58024400
 8002658:	fffffc0c 	.word	0xfffffc0c
 800265c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x804>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e9      	bne.n	8002640 <HAL_RCC_OscConfig+0x750>
 800266c:	e03d      	b.n	80026ea <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x804>)
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_RCC_OscConfig+0x804>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2b01      	cmp	r3, #1
 8002680:	d031      	beq.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f003 0203 	and.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268c:	429a      	cmp	r2, r3
 800268e:	d12a      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d122      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11a      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	0a5b      	lsrs	r3, r3, #9
 80026b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d111      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d108      	bne.n	80026e6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0e1b      	lsrs	r3, r3, #24
 80026d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3730      	adds	r7, #48	; 0x30
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	58024400 	.word	0x58024400

080026f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e19c      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b87      	ldr	r3, [pc, #540]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	4985      	ldr	r1, [pc, #532]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b83      	ldr	r3, [pc, #524]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e184      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	4b7b      	ldr	r3, [pc, #492]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002754:	429a      	cmp	r2, r3
 8002756:	d908      	bls.n	800276a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002758:	4b78      	ldr	r3, [pc, #480]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	4975      	ldr	r1, [pc, #468]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002766:	4313      	orrs	r3, r2
 8002768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d010      	beq.n	8002798 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	4b70      	ldr	r3, [pc, #448]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002782:	429a      	cmp	r2, r3
 8002784:	d908      	bls.n	8002798 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002786:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	496a      	ldr	r1, [pc, #424]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d010      	beq.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d908      	bls.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027b4:	4b61      	ldr	r3, [pc, #388]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	495e      	ldr	r1, [pc, #376]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	4b59      	ldr	r3, [pc, #356]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027de:	429a      	cmp	r2, r3
 80027e0:	d908      	bls.n	80027f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027e2:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4953      	ldr	r1, [pc, #332]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	429a      	cmp	r2, r3
 800280e:	d908      	bls.n	8002822 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f023 020f 	bic.w	r2, r3, #15
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4947      	ldr	r1, [pc, #284]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800281e:	4313      	orrs	r3, r2
 8002820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d055      	beq.n	80028da <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4940      	ldr	r1, [pc, #256]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800283c:	4313      	orrs	r3, r2
 800283e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d107      	bne.n	8002858 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002848:	4b3c      	ldr	r3, [pc, #240]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d121      	bne.n	8002898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0f6      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d107      	bne.n	8002870 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d115      	bne.n	8002898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0ea      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002878:	4b30      	ldr	r3, [pc, #192]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0de      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002888:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d6      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f023 0207 	bic.w	r2, r3, #7
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4925      	ldr	r1, [pc, #148]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe ffe9 	bl	8001880 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7fe ffe5 	bl	8001880 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0be      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1eb      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b14      	ldr	r3, [pc, #80]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d208      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f023 020f 	bic.w	r2, r3, #15
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	490e      	ldr	r1, [pc, #56]	; (800293c <HAL_RCC_ClockConfig+0x244>)
 8002904:	4313      	orrs	r3, r2
 8002906:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d214      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 020f 	bic.w	r2, r3, #15
 800291e:	4906      	ldr	r1, [pc, #24]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e086      	b.n	8002a46 <HAL_RCC_ClockConfig+0x34e>
 8002938:	52002000 	.word	0x52002000
 800293c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d010      	beq.n	800296e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002958:	429a      	cmp	r2, r3
 800295a:	d208      	bcs.n	800296e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4939      	ldr	r1, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 800296a:	4313      	orrs	r3, r2
 800296c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002986:	429a      	cmp	r2, r3
 8002988:	d208      	bcs.n	800299c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	492e      	ldr	r1, [pc, #184]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 8002998:	4313      	orrs	r3, r2
 800299a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	4b28      	ldr	r3, [pc, #160]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d208      	bcs.n	80029ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d208      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4917      	ldr	r1, [pc, #92]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80029f8:	f000 f834 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	4912      	ldr	r1, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x35c>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x358>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_RCC_ClockConfig+0x35c>)
 8002a20:	5cd3      	ldrb	r3, [r2, r3]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x360>)
 8002a2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x364>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_ClockConfig+0x368>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fed6 	bl	80017ec <HAL_InitTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	58024400 	.word	0x58024400
 8002a54:	0800938c 	.word	0x0800938c
 8002a58:	24000004 	.word	0x24000004
 8002a5c:	24000000 	.word	0x24000000
 8002a60:	24000008 	.word	0x24000008

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a6a:	4bb3      	ldr	r3, [pc, #716]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a72:	2b18      	cmp	r3, #24
 8002a74:	f200 8155 	bhi.w	8002d22 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a78:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7e:	bf00      	nop
 8002a80:	08002ae5 	.word	0x08002ae5
 8002a84:	08002d23 	.word	0x08002d23
 8002a88:	08002d23 	.word	0x08002d23
 8002a8c:	08002d23 	.word	0x08002d23
 8002a90:	08002d23 	.word	0x08002d23
 8002a94:	08002d23 	.word	0x08002d23
 8002a98:	08002d23 	.word	0x08002d23
 8002a9c:	08002d23 	.word	0x08002d23
 8002aa0:	08002b0b 	.word	0x08002b0b
 8002aa4:	08002d23 	.word	0x08002d23
 8002aa8:	08002d23 	.word	0x08002d23
 8002aac:	08002d23 	.word	0x08002d23
 8002ab0:	08002d23 	.word	0x08002d23
 8002ab4:	08002d23 	.word	0x08002d23
 8002ab8:	08002d23 	.word	0x08002d23
 8002abc:	08002d23 	.word	0x08002d23
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002d23 	.word	0x08002d23
 8002ac8:	08002d23 	.word	0x08002d23
 8002acc:	08002d23 	.word	0x08002d23
 8002ad0:	08002d23 	.word	0x08002d23
 8002ad4:	08002d23 	.word	0x08002d23
 8002ad8:	08002d23 	.word	0x08002d23
 8002adc:	08002d23 	.word	0x08002d23
 8002ae0:	08002b17 	.word	0x08002b17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ae4:	4b94      	ldr	r3, [pc, #592]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002af0:	4b91      	ldr	r3, [pc, #580]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	4a90      	ldr	r2, [pc, #576]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
 8002b00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b02:	e111      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b04:	4b8d      	ldr	r3, [pc, #564]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b06:	61bb      	str	r3, [r7, #24]
    break;
 8002b08:	e10e      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b0a:	4b8d      	ldr	r3, [pc, #564]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b0c:	61bb      	str	r3, [r7, #24]
    break;
 8002b0e:	e10b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b10:	4b8c      	ldr	r3, [pc, #560]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b12:	61bb      	str	r3, [r7, #24]
    break;
 8002b14:	e108      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b20:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b2c:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b36:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	08db      	lsrs	r3, r3, #3
 8002b3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	ee07 3a90 	vmov	s15, r3
 8002b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80e1 	beq.w	8002d1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f000 8083 	beq.w	8002c68 <HAL_RCC_GetSysClockFreq+0x204>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f200 80a1 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x248>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x114>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d056      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b76:	e099      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b78:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02d      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b84:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	4a6b      	ldr	r2, [pc, #428]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002bde:	e087      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002d4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c22:	e065      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c36:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c66:	e043      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002caa:	e021      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002d48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	0a5b      	lsrs	r3, r3, #9
 8002cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	ee07 3a90 	vmov	s15, r3
 8002d04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d14:	ee17 3a90 	vmov	r3, s15
 8002d18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002d22:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d24:	61bb      	str	r3, [r7, #24]
    break;
 8002d26:	bf00      	nop
  }

  return sysclockfreq;
 8002d28:	69bb      	ldr	r3, [r7, #24]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	58024400 	.word	0x58024400
 8002d3c:	03d09000 	.word	0x03d09000
 8002d40:	003d0900 	.word	0x003d0900
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	46000000 	.word	0x46000000
 8002d4c:	4c742400 	.word	0x4c742400
 8002d50:	4a742400 	.word	0x4a742400
 8002d54:	4af42400 	.word	0x4af42400

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002d5e:	f7ff fe81 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	490f      	ldr	r1, [pc, #60]	; (8002dac <HAL_RCC_GetHCLKFreq+0x54>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_GetHCLKFreq+0x54>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d96:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	58024400 	.word	0x58024400
 8002dac:	0800938c 	.word	0x0800938c
 8002db0:	24000004 	.word	0x24000004
 8002db4:	24000000 	.word	0x24000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002dbc:	f7ff ffcc 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4904      	ldr	r1, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	0800938c 	.word	0x0800938c

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002de8:	f7ff ffb6 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	0800938c 	.word	0x0800938c

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d03f      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e34:	d02a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e3a:	d824      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e40:	d018      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e46:	d81e      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e50:	d007      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e52:	e018      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e54:	4b9f      	ldr	r3, [pc, #636]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4a9e      	ldr	r2, [pc, #632]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e60:	e015      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f99b 	bl	80041a4 <RCCEx_PLL2_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e72:	e00c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3324      	adds	r3, #36	; 0x24
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fa44 	bl	8004308 <RCCEx_PLL3_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea0:	498c      	ldr	r1, [pc, #560]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03d      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d826      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ec0:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec6:	bf00      	nop
 8002ec8:	08002edd 	.word	0x08002edd
 8002ecc:	08002eeb 	.word	0x08002eeb
 8002ed0:	08002efd 	.word	0x08002efd
 8002ed4:	08002f15 	.word	0x08002f15
 8002ed8:	08002f15 	.word	0x08002f15
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002edc:	4b7d      	ldr	r3, [pc, #500]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a7c      	ldr	r2, [pc, #496]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e015      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 f957 	bl	80041a4 <RCCEx_PLL2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002efa:	e00c      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3324      	adds	r3, #36	; 0x24
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fa00 	bl	8004308 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e003      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
      break;
 8002f12:	e000      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1c:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	f023 0207 	bic.w	r2, r3, #7
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	496a      	ldr	r1, [pc, #424]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	650b      	str	r3, [r1, #80]	; 0x50
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7dfb      	ldrb	r3, [r7, #23]
 8002f32:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d04a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f48:	d031      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002f4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002f4e:	d82b      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d02d      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f5a:	d825      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f5c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f5e:	d02a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002f60:	2bc0      	cmp	r3, #192	; 0xc0
 8002f62:	d821      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f64:	2b80      	cmp	r3, #128	; 0x80
 8002f66:	d016      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d81d      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d007      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002f74:	e018      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f76:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002f82:	e019      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 f90a 	bl	80041a4 <RCCEx_PLL2_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002f94:	e010      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3324      	adds	r3, #36	; 0x24
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f9b3 	bl	8004308 <RCCEx_PLL3_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002fa6:	e007      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
      break;
 8002fac:	e004      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	4942      	ldr	r1, [pc, #264]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	650b      	str	r3, [r1, #80]	; 0x50
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d04f      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002fea:	d036      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002fec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ff0:	d830      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff6:	d032      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffc:	d82a      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ffe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003002:	d02e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003004:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003008:	d824      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d018      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d81e      	bhi.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d007      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003020:	e018      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800302e:	e019      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f001 f8b4 	bl	80041a4 <RCCEx_PLL2_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003040:	e010      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3324      	adds	r3, #36	; 0x24
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f001 f95d 	bl	8004308 <RCCEx_PLL3_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003052:	e007      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
      break;
 8003058:	e004      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800305a:	bf00      	nop
 800305c:	e002      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	4917      	ldr	r1, [pc, #92]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	650b      	str	r3, [r1, #80]	; 0x50
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d034      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003092:	2b30      	cmp	r3, #48	; 0x30
 8003094:	d01c      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	d817      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800309a:	2b20      	cmp	r3, #32
 800309c:	d00c      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d813      	bhi.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d018      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d10f      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80030b6:	e010      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	2102      	movs	r1, #2
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f870 	bl	80041a4 <RCCEx_PLL2_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80030c8:	e007      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
      break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80030d0:	bf00      	nop
 80030d2:	e002      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80030d4:	58024400 	.word	0x58024400
      break;
 80030d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030e0:	4b9b      	ldr	r3, [pc, #620]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	4998      	ldr	r1, [pc, #608]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030f2:	e001      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d047      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310c:	d030      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800310e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003112:	d82a      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003114:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003118:	d02c      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800311a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800311e:	d824      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d018      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d81e      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d007      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003136:	e018      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003138:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	4a84      	ldr	r2, [pc, #528]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800313e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003144:	e017      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f829 	bl	80041a4 <RCCEx_PLL2_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003156:	e00e      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f8d2 	bl	8004308 <RCCEx_PLL3_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003168:	e005      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
      break;
 800316e:	e002      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800317c:	4b74      	ldr	r3, [pc, #464]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	4971      	ldr	r1, [pc, #452]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800318a:	4313      	orrs	r3, r2
 800318c:	650b      	str	r3, [r1, #80]	; 0x50
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d049      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d02e      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ae:	d828      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80031b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b4:	d02a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80031b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ba:	d822      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80031bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031c0:	d026      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80031c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031c6:	d81c      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80031c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031cc:	d010      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80031ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d2:	d816      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031dc:	d111      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 ffdd 	bl	80041a4 <RCCEx_PLL2_Config>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031ee:	e012      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3324      	adds	r3, #36	; 0x24
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f886 	bl	8004308 <RCCEx_PLL3_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003200:	e009      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
      break;
 8003206:	e006      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003208:	bf00      	nop
 800320a:	e004      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	4949      	ldr	r1, [pc, #292]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800322a:	4313      	orrs	r3, r2
 800322c:	650b      	str	r3, [r1, #80]	; 0x50
 800322e:	e001      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d053      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003246:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800324a:	d034      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800324c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003250:	d82e      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d030      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d828      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d02c      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d822      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800326a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800326e:	d028      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003274:	d81c      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800327a:	d010      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d816      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003282:	2b00      	cmp	r3, #0
 8003284:	d01f      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d111      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f000 ff86 	bl	80041a4 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800329c:	e014      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f82f 	bl	8004308 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80032ae:	e00b      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e008      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80032c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032dc:	491c      	ldr	r1, [pc, #112]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	658b      	str	r3, [r1, #88]	; 0x58
 80032e2:	e001      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d031      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fc:	d00e      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80032fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003302:	d814      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800330c:	d10f      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800331a:	e00c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff3e 	bl	80041a4 <RCCEx_PLL2_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
      break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800334a:	4313      	orrs	r3, r2
 800334c:	650b      	str	r3, [r1, #80]	; 0x50
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d032      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	2b03      	cmp	r3, #3
 800336a:	d81b      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	080033ab 	.word	0x080033ab
 8003378:	08003385 	.word	0x08003385
 800337c:	08003393 	.word	0x08003393
 8003380:	080033ab 	.word	0x080033ab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4bb2      	ldr	r3, [pc, #712]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4ab1      	ldr	r2, [pc, #708]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003390:	e00c      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 ff03 	bl	80041a4 <RCCEx_PLL2_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80033aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033b2:	4ba7      	ldr	r3, [pc, #668]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	49a4      	ldr	r1, [pc, #656]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033c4:	e001      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8086 	beq.w	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d8:	4b9e      	ldr	r3, [pc, #632]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a9d      	ldr	r2, [pc, #628]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fa4c 	bl	8001880 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ec:	f7fe fa48 	bl	8001880 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d902      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	75fb      	strb	r3, [r7, #23]
        break;
 80033fe:	e005      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003400:	4b94      	ldr	r3, [pc, #592]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ef      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d166      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003412:	4b8f      	ldr	r3, [pc, #572]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800341c:	4053      	eors	r3, r2
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d013      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003426:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003430:	4b87      	ldr	r3, [pc, #540]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a86      	ldr	r2, [pc, #536]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b84      	ldr	r3, [pc, #528]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	4a83      	ldr	r2, [pc, #524]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003448:	4a81      	ldr	r2, [pc, #516]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003458:	d115      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fa11 	bl	8001880 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003460:	e00b      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe fa0d 	bl	8001880 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d902      	bls.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	75fb      	strb	r3, [r7, #23]
            break;
 8003478:	e005      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800347a:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0ed      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d126      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349a:	d10d      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800349c:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034aa:	0919      	lsrs	r1, r3, #4
 80034ac:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ae:	400b      	ands	r3, r1
 80034b0:	4967      	ldr	r1, [pc, #412]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	610b      	str	r3, [r1, #16]
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80034b8:	4b65      	ldr	r3, [pc, #404]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4a64      	ldr	r2, [pc, #400]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034c2:	6113      	str	r3, [r2, #16]
 80034c4:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d2:	495f      	ldr	r1, [pc, #380]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	670b      	str	r3, [r1, #112]	; 0x70
 80034d8:	e004      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	75bb      	strb	r3, [r7, #22]
 80034de:	e001      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d07f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f6:	2b28      	cmp	r3, #40	; 0x28
 80034f8:	d866      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	080035cf 	.word	0x080035cf
 8003504:	080035c9 	.word	0x080035c9
 8003508:	080035c9 	.word	0x080035c9
 800350c:	080035c9 	.word	0x080035c9
 8003510:	080035c9 	.word	0x080035c9
 8003514:	080035c9 	.word	0x080035c9
 8003518:	080035c9 	.word	0x080035c9
 800351c:	080035c9 	.word	0x080035c9
 8003520:	080035a5 	.word	0x080035a5
 8003524:	080035c9 	.word	0x080035c9
 8003528:	080035c9 	.word	0x080035c9
 800352c:	080035c9 	.word	0x080035c9
 8003530:	080035c9 	.word	0x080035c9
 8003534:	080035c9 	.word	0x080035c9
 8003538:	080035c9 	.word	0x080035c9
 800353c:	080035c9 	.word	0x080035c9
 8003540:	080035b7 	.word	0x080035b7
 8003544:	080035c9 	.word	0x080035c9
 8003548:	080035c9 	.word	0x080035c9
 800354c:	080035c9 	.word	0x080035c9
 8003550:	080035c9 	.word	0x080035c9
 8003554:	080035c9 	.word	0x080035c9
 8003558:	080035c9 	.word	0x080035c9
 800355c:	080035c9 	.word	0x080035c9
 8003560:	080035cf 	.word	0x080035cf
 8003564:	080035c9 	.word	0x080035c9
 8003568:	080035c9 	.word	0x080035c9
 800356c:	080035c9 	.word	0x080035c9
 8003570:	080035c9 	.word	0x080035c9
 8003574:	080035c9 	.word	0x080035c9
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035cf 	.word	0x080035cf
 8003584:	080035c9 	.word	0x080035c9
 8003588:	080035c9 	.word	0x080035c9
 800358c:	080035c9 	.word	0x080035c9
 8003590:	080035c9 	.word	0x080035c9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035c9 	.word	0x080035c9
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	080035cf 	.word	0x080035cf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fdfa 	bl	80041a4 <RCCEx_PLL2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035b4:	e00c      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3324      	adds	r3, #36	; 0x24
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fea3 	bl	8004308 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80035ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035da:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e4:	491a      	ldr	r1, [pc, #104]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	654b      	str	r3, [r1, #84]	; 0x54
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03f      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003600:	2b05      	cmp	r3, #5
 8003602:	d821      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800365d 	.word	0x0800365d
 8003610:	08003625 	.word	0x08003625
 8003614:	08003637 	.word	0x08003637
 8003618:	0800365d 	.word	0x0800365d
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800365d 	.word	0x0800365d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fdba 	bl	80041a4 <RCCEx_PLL2_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003634:	e013      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3324      	adds	r3, #36	; 0x24
 800363a:	2101      	movs	r1, #1
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fe63 	bl	8004308 <RCCEx_PLL3_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	75fb      	strb	r3, [r7, #23]
      break;
 800364c:	e007      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	58024800 	.word	0x58024800
 8003658:	00ffffcf 	.word	0x00ffffcf
      break;
 800365c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003664:	4b9f      	ldr	r3, [pc, #636]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003670:	499c      	ldr	r1, [pc, #624]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	654b      	str	r3, [r1, #84]	; 0x54
 8003676:	e001      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d039      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368e:	2b05      	cmp	r3, #5
 8003690:	d820      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003692:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	080036db 	.word	0x080036db
 800369c:	080036b1 	.word	0x080036b1
 80036a0:	080036c3 	.word	0x080036c3
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036db 	.word	0x080036db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fd74 	bl	80041a4 <RCCEx_PLL2_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036c0:	e00c      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3324      	adds	r3, #36	; 0x24
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fe1d 	bl	8004308 <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80036d2:	e003      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
      break;
 80036d8:	e000      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80036da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036e2:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f023 0207 	bic.w	r2, r3, #7
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f0:	497c      	ldr	r1, [pc, #496]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	658b      	str	r3, [r1, #88]	; 0x58
 80036f6:	e001      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d04b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003712:	d02e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003718:	d828      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d02a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d822      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800372a:	d026      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800372c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003730:	d81c      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003736:	d010      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800373c:	d816      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01d      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003746:	d111      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3304      	adds	r3, #4
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fd28 	bl	80041a4 <RCCEx_PLL2_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003758:	e012      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3324      	adds	r3, #36	; 0x24
 800375e:	2102      	movs	r1, #2
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fdd1 	bl	8004308 <RCCEx_PLL3_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
      break;
 8003770:	e006      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003772:	bf00      	nop
 8003774:	e004      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003776:	bf00      	nop
 8003778:	e002      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800377e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003794:	4953      	ldr	r1, [pc, #332]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	654b      	str	r3, [r1, #84]	; 0x54
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d04b      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037b6:	d02e      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80037b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80037bc:	d828      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d02a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c8:	d822      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80037ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ce:	d026      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d4:	d81c      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037da:	d010      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d816      	bhi.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01d      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	d111      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fcd6 	bl	80041a4 <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037fc:	e012      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	2102      	movs	r1, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fd7f 	bl	8004308 <RCCEx_PLL3_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800380e:	e009      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800382a:	4b2e      	ldr	r3, [pc, #184]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800382c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003838:	492a      	ldr	r1, [pc, #168]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	658b      	str	r3, [r1, #88]	; 0x58
 800383e:	e001      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d04d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003856:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800385a:	d02e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800385c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003860:	d828      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003866:	d02a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800386c:	d822      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800386e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003872:	d026      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003874:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003878:	d81c      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800387a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387e:	d010      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003884:	d816      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01d      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d111      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fc84 	bl	80041a4 <RCCEx_PLL2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80038a0:	e012      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3324      	adds	r3, #36	; 0x24
 80038a6:	2102      	movs	r1, #2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd2d 	bl	8004308 <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80038b2:	e009      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
      break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80038c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038dc:	4901      	ldr	r1, [pc, #4]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	658b      	str	r3, [r1, #88]	; 0x58
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80038e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	d10a      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fcfc 	bl	8004308 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800391a:	4b8c      	ldr	r3, [pc, #560]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	4988      	ldr	r1, [pc, #544]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800392a:	4313      	orrs	r3, r2
 800392c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003944:	d10a      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3324      	adds	r3, #36	; 0x24
 800394a:	2102      	movs	r1, #2
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fcdb 	bl	8004308 <RCCEx_PLL3_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800395c:	4b7b      	ldr	r3, [pc, #492]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	4978      	ldr	r1, [pc, #480]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d034      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003986:	d01d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800398c:	d817      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003996:	d009      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003998:	e011      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fbff 	bl	80041a4 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80039aa:	e00c      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3324      	adds	r3, #36	; 0x24
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fca8 	bl	8004308 <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80039bc:	e003      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
      break;
 80039c2:	e000      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80039c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039cc:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039da:	495c      	ldr	r1, [pc, #368]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	658b      	str	r3, [r1, #88]	; 0x58
 80039e0:	e001      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d033      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039fc:	d01c      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80039fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a02:	d816      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a08:	d003      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003a10:	e00f      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	4a4d      	ldr	r2, [pc, #308]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3324      	adds	r3, #36	; 0x24
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc6e 	bl	8004308 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
      break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a40:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4e:	493f      	ldr	r1, [pc, #252]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	654b      	str	r3, [r1, #84]	; 0x54
 8003a54:	e001      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d029      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d007      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a76:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a82:	e00b      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3304      	adds	r3, #4
 8003a88:	2102      	movs	r1, #2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fb8a 	bl	80041a4 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4927      	ldr	r1, [pc, #156]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ab4:	e001      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3324      	adds	r3, #36	; 0x24
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fc1b 	bl	8004308 <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d035      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d017      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af8:	d811      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afe:	d013      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b04:	d80b      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d010      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003b1c:	e007      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
      break;
 8003b22:	e004      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b24:	bf00      	nop
 8003b26:	e002      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	4902      	ldr	r1, [pc, #8]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	654b      	str	r3, [r1, #84]	; 0x54
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b4a:	bf00      	nop
 8003b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6c:	492d      	ldr	r1, [pc, #180]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8a:	4926      	ldr	r1, [pc, #152]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	491e      	ldr	r1, [pc, #120]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bba:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bc4:	6113      	str	r3, [r2, #16]
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bd0:	4914      	ldr	r1, [pc, #80]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	da08      	bge.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	490e      	ldr	r1, [pc, #56]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4906      	ldr	r1, [pc, #24]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003c10:	7dbb      	ldrb	r3, [r7, #22]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	58024400 	.word	0x58024400

08003c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003c2c:	f7ff f894 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4904      	ldr	r1, [pc, #16]	; (8003c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	0800938c 	.word	0x0800938c

08003c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c5c:	4ba1      	ldr	r3, [pc, #644]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c66:	4b9f      	ldr	r3, [pc, #636]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	0b1b      	lsrs	r3, r3, #12
 8003c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c72:	4b9c      	ldr	r3, [pc, #624]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c7e:	4b99      	ldr	r3, [pc, #612]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8111 	beq.w	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f000 8083 	beq.w	8003db0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	f200 80a1 	bhi.w	8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d056      	beq.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003cbe:	e099      	b.n	8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cc0:	4b88      	ldr	r3, [pc, #544]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d02d      	beq.n	8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ccc:	4b85      	ldr	r3, [pc, #532]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	08db      	lsrs	r3, r3, #3
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	4a84      	ldr	r2, [pc, #528]	; (8003ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cdc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003d26:	e087      	b.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d6a:	e065      	b.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7e:	4b59      	ldr	r3, [pc, #356]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dae:	e043      	b.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b48      	ldr	r3, [pc, #288]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003df2:	e021      	b.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b37      	ldr	r3, [pc, #220]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003e36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	0a5b      	lsrs	r3, r3, #9
 8003e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e5e:	ee17 2a90 	vmov	r2, s15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	0c1b      	lsrs	r3, r3, #16
 8003e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8c:	ee17 2a90 	vmov	r2, s15
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	0e1b      	lsrs	r3, r3, #24
 8003e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eba:	ee17 2a90 	vmov	r2, s15
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
}
 8003ed6:	bf00      	nop
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	03d09000 	.word	0x03d09000
 8003eec:	46000000 	.word	0x46000000
 8003ef0:	4c742400 	.word	0x4c742400
 8003ef4:	4a742400 	.word	0x4a742400
 8003ef8:	4af42400 	.word	0x4af42400

08003efc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b089      	sub	sp, #36	; 0x24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f04:	4ba1      	ldr	r3, [pc, #644]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003f0e:	4b9f      	ldr	r3, [pc, #636]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	0d1b      	lsrs	r3, r3, #20
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003f1a:	4b9c      	ldr	r3, [pc, #624]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003f26:	4b99      	ldr	r3, [pc, #612]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	08db      	lsrs	r3, r3, #3
 8003f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8111 	beq.w	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	f000 8083 	beq.w	8004058 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	f200 80a1 	bhi.w	800409c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d056      	beq.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f66:	e099      	b.n	800409c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f68:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02d      	beq.n	8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f74:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	08db      	lsrs	r3, r3, #3
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	4a84      	ldr	r2, [pc, #528]	; (8004190 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9e:	4b7b      	ldr	r3, [pc, #492]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003fce:	e087      	b.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004012:	e065      	b.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800419c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004026:	4b59      	ldr	r3, [pc, #356]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004036:	ed97 6a03 	vldr	s12, [r7, #12]
 800403a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800403e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004056:	e043      	b.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406a:	4b48      	ldr	r3, [pc, #288]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407a:	ed97 6a03 	vldr	s12, [r7, #12]
 800407e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800409a:	e021      	b.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800419c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	4b37      	ldr	r3, [pc, #220]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040be:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80040e0:	4b2a      	ldr	r3, [pc, #168]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	0a5b      	lsrs	r3, r3, #9
 80040e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80040fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004106:	ee17 2a90 	vmov	r2, s15
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004128:	edd7 6a07 	vldr	s13, [r7, #28]
 800412c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004134:	ee17 2a90 	vmov	r2, s15
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	0e1b      	lsrs	r3, r3, #24
 8004142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004156:	edd7 6a07 	vldr	s13, [r7, #28]
 800415a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004162:	ee17 2a90 	vmov	r2, s15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800416a:	e008      	b.n	800417e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400
 8004190:	03d09000 	.word	0x03d09000
 8004194:	46000000 	.word	0x46000000
 8004198:	4c742400 	.word	0x4c742400
 800419c:	4a742400 	.word	0x4a742400
 80041a0:	4af42400 	.word	0x4af42400

080041a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041b2:	4b53      	ldr	r3, [pc, #332]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d101      	bne.n	80041c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e099      	b.n	80042f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80041c2:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ce:	f7fd fb57 	bl	8001880 <HAL_GetTick>
 80041d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80041d6:	f7fd fb53 	bl	8001880 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e086      	b.n	80042f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041e8:	4b45      	ldr	r3, [pc, #276]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041f4:	4b42      	ldr	r3, [pc, #264]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	031b      	lsls	r3, r3, #12
 8004202:	493f      	ldr	r1, [pc, #252]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	628b      	str	r3, [r1, #40]	; 0x28
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	3b01      	subs	r3, #1
 800420e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	025b      	lsls	r3, r3, #9
 800421a:	b29b      	uxth	r3, r3
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	041b      	lsls	r3, r3, #16
 8004226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	3b01      	subs	r3, #1
 8004232:	061b      	lsls	r3, r3, #24
 8004234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004238:	4931      	ldr	r1, [pc, #196]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	492d      	ldr	r1, [pc, #180]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004250:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f023 0220 	bic.w	r2, r3, #32
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4928      	ldr	r1, [pc, #160]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4a26      	ldr	r2, [pc, #152]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <RCCEx_PLL2_Config+0x160>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	69d2      	ldr	r2, [r2, #28]
 800427a:	00d2      	lsls	r2, r2, #3
 800427c:	4920      	ldr	r1, [pc, #128]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004282:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004288:	f043 0310 	orr.w	r3, r3, #16
 800428c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 800429a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800429e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a0:	e00f      	b.n	80042c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d106      	bne.n	80042b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a14      	ldr	r2, [pc, #80]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042b4:	e005      	b.n	80042c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	4a11      	ldr	r2, [pc, #68]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a0e      	ldr	r2, [pc, #56]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ce:	f7fd fad7 	bl	8001880 <HAL_GetTick>
 80042d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042d4:	e008      	b.n	80042e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042d6:	f7fd fad3 	bl	8001880 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e006      	b.n	80042f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <RCCEx_PLL2_Config+0x15c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
 8004304:	ffff0007 	.word	0xffff0007

08004308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004316:	4b53      	ldr	r3, [pc, #332]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b03      	cmp	r3, #3
 8004320:	d101      	bne.n	8004326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e099      	b.n	800445a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004326:	4b4f      	ldr	r3, [pc, #316]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4e      	ldr	r2, [pc, #312]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004332:	f7fd faa5 	bl	8001880 <HAL_GetTick>
 8004336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004338:	e008      	b.n	800434c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800433a:	f7fd faa1 	bl	8001880 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e086      	b.n	800445a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800434c:	4b45      	ldr	r3, [pc, #276]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004358:	4b42      	ldr	r3, [pc, #264]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	051b      	lsls	r3, r3, #20
 8004366:	493f      	ldr	r1, [pc, #252]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	628b      	str	r3, [r1, #40]	; 0x28
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	3b01      	subs	r3, #1
 800437c:	025b      	lsls	r3, r3, #9
 800437e:	b29b      	uxth	r3, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	3b01      	subs	r3, #1
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800439c:	4931      	ldr	r1, [pc, #196]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80043a2:	4b30      	ldr	r3, [pc, #192]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	492d      	ldr	r1, [pc, #180]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	4928      	ldr	r1, [pc, #160]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80043c6:	4b27      	ldr	r3, [pc, #156]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <RCCEx_PLL3_Config+0x160>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	69d2      	ldr	r2, [r2, #28]
 80043de:	00d2      	lsls	r2, r2, #3
 80043e0:	4920      	ldr	r1, [pc, #128]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 80043fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004404:	e00f      	b.n	8004426 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d106      	bne.n	800441a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800440c:	4b15      	ldr	r3, [pc, #84]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004418:	e005      	b.n	8004426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004432:	f7fd fa25 	bl	8001880 <HAL_GetTick>
 8004436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004438:	e008      	b.n	800444c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800443a:	f7fd fa21 	bl	8001880 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e006      	b.n	800445a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <RCCEx_PLL3_Config+0x15c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	58024400 	.word	0x58024400
 8004468:	ffff0007 	.word	0xffff0007

0800446c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e0f1      	b.n	8004662 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a78      	ldr	r2, [pc, #480]	; (800466c <HAL_SPI_Init+0x200>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00f      	beq.n	80044ae <HAL_SPI_Init+0x42>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a77      	ldr	r2, [pc, #476]	; (8004670 <HAL_SPI_Init+0x204>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00a      	beq.n	80044ae <HAL_SPI_Init+0x42>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a75      	ldr	r2, [pc, #468]	; (8004674 <HAL_SPI_Init+0x208>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d005      	beq.n	80044ae <HAL_SPI_Init+0x42>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b0f      	cmp	r3, #15
 80044a8:	d901      	bls.n	80044ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0d9      	b.n	8004662 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fba2 	bl	8004bf8 <SPI_GetPacketSize>
 80044b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6c      	ldr	r2, [pc, #432]	; (800466c <HAL_SPI_Init+0x200>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00c      	beq.n	80044da <HAL_SPI_Init+0x6e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6a      	ldr	r2, [pc, #424]	; (8004670 <HAL_SPI_Init+0x204>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <HAL_SPI_Init+0x6e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <HAL_SPI_Init+0x208>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Init+0x6e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d811      	bhi.n	80044fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80044de:	4a63      	ldr	r2, [pc, #396]	; (800466c <HAL_SPI_Init+0x200>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a61      	ldr	r2, [pc, #388]	; (8004670 <HAL_SPI_Init+0x204>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_SPI_Init+0x8c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a60      	ldr	r2, [pc, #384]	; (8004674 <HAL_SPI_Init+0x208>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d104      	bne.n	8004502 <HAL_SPI_Init+0x96>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d901      	bls.n	8004502 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0af      	b.n	8004662 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d106      	bne.n	800451c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc ff28 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800453e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004548:	d119      	bne.n	800457e <HAL_SPI_Init+0x112>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004552:	d103      	bne.n	800455c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10c      	bne.n	800457e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456c:	d107      	bne.n	800457e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	431a      	orrs	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045de:	ea42 0103 	orr.w	r1, r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d113      	bne.n	800461e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004608:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800461c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40013000 	.word	0x40013000
 8004670:	40003800 	.word	0x40003800
 8004674:	40003c00 	.word	0x40003c00

08004678 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3320      	adds	r3, #32
 800468e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_SPI_Transmit+0x2a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e1d7      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046aa:	f7fd f8e9 	bl	8001880 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d007      	beq.n	80046cc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
 80046be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80046c8:	7efb      	ldrb	r3, [r7, #27]
 80046ca:	e1c2      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Transmit+0x60>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d107      	bne.n	80046e8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80046e4:	7efb      	ldrb	r3, [r7, #27]
 80046e6:	e1b4      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2203      	movs	r2, #3
 80046ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004738:	d107      	bne.n	800474a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	4b96      	ldr	r3, [pc, #600]	; (80049ac <HAL_SPI_Transmit+0x334>)
 8004752:	4013      	ands	r3, r2
 8004754:	88f9      	ldrh	r1, [r7, #6]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	430b      	orrs	r3, r1
 800475c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004776:	d107      	bne.n	8004788 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004786:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d947      	bls.n	8004820 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004790:	e03f      	b.n	8004812 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d114      	bne.n	80047ca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80047c8:	e023      	b.n	8004812 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ca:	f7fd f859 	bl	8001880 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d803      	bhi.n	80047e2 <HAL_SPI_Transmit+0x16a>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e0:	d102      	bne.n	80047e8 <HAL_SPI_Transmit+0x170>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d114      	bne.n	8004812 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f937 	bl	8004a5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e11f      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1b9      	bne.n	8004792 <HAL_SPI_Transmit+0x11a>
 800481e:	e0f2      	b.n	8004a06 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b07      	cmp	r3, #7
 8004826:	f240 80e7 	bls.w	80049f8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800482a:	e05d      	b.n	80048e8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d132      	bne.n	80048a0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d918      	bls.n	8004878 <HAL_SPI_Transmit+0x200>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b02      	subs	r3, #2
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004876:	e037      	b.n	80048e8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800489e:	e023      	b.n	80048e8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a0:	f7fc ffee 	bl	8001880 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d803      	bhi.n	80048b8 <HAL_SPI_Transmit+0x240>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b6:	d102      	bne.n	80048be <HAL_SPI_Transmit+0x246>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d114      	bne.n	80048e8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8cc 	bl	8004a5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0b4      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d19b      	bne.n	800482c <HAL_SPI_Transmit+0x1b4>
 80048f4:	e087      	b.n	8004a06 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d155      	bne.n	80049b0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d918      	bls.n	8004942 <HAL_SPI_Transmit+0x2ca>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d914      	bls.n	8004942 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	1d1a      	adds	r2, r3, #4
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b04      	subs	r3, #4
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004940:	e05a      	b.n	80049f8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d917      	bls.n	800497e <HAL_SPI_Transmit+0x306>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d013      	beq.n	800497e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b02      	subs	r3, #2
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800497c:	e03c      	b.n	80049f8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3320      	adds	r3, #32
 8004988:	7812      	ldrb	r2, [r2, #0]
 800498a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80049a8:	e026      	b.n	80049f8 <HAL_SPI_Transmit+0x380>
 80049aa:	bf00      	nop
 80049ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b0:	f7fc ff66 	bl	8001880 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d803      	bhi.n	80049c8 <HAL_SPI_Transmit+0x350>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Transmit+0x356>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d114      	bne.n	80049f8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f844 	bl	8004a5c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e02c      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f47f af78 	bne.w	80048f6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2108      	movs	r1, #8
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8c3 	bl	8004b9c <SPI_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f815 	bl	8004a5c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004a50:	7efb      	ldrb	r3, [r7, #27]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop

08004a5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0210 	orr.w	r2, r2, #16
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6919      	ldr	r1, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b3c      	ldr	r3, [pc, #240]	; (8004b98 <SPI_CloseTransfer+0x13c>)
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004aba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d014      	beq.n	8004af2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00f      	beq.n	8004af2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699a      	ldr	r2, [r3, #24]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0220 	orr.w	r2, r2, #32
 8004af0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d014      	beq.n	8004b28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00f      	beq.n	8004b28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b38:	f043 0201 	orr.w	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00f      	beq.n	8004b7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699a      	ldr	r2, [r3, #24]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	fffffc90 	.word	0xfffffc90

08004b9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004bac:	e010      	b.n	8004bd0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bae:	f7fc fe67 	bl	8001880 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d803      	bhi.n	8004bc6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc4:	d102      	bne.n	8004bcc <SPI_WaitOnFlagUntilTimeout+0x30>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e00f      	b.n	8004bf0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d0df      	beq.n	8004bae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	3307      	adds	r3, #7
 8004c16:	08db      	lsrs	r3, r3, #3
 8004c18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e042      	b.n	8004cc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fcf6 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f82d 	bl	8004cd0 <UART_SetConfig>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e022      	b.n	8004cc6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fe8d 	bl	80059a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 ff14 	bl	8005aec <UART_CheckIdleState>
 8004cc4:	4603      	mov	r3, r0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd4:	b092      	sub	sp, #72	; 0x48
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4bbe      	ldr	r3, [pc, #760]	; (8004ff8 <UART_SetConfig+0x328>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4ab3      	ldr	r2, [pc, #716]	; (8004ffc <UART_SetConfig+0x32c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	4baf      	ldr	r3, [pc, #700]	; (8005000 <UART_SetConfig+0x330>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f023 010f 	bic.w	r1, r3, #15
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4aa6      	ldr	r2, [pc, #664]	; (8005004 <UART_SetConfig+0x334>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d177      	bne.n	8004e60 <UART_SetConfig+0x190>
 8004d70:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <UART_SetConfig+0x338>)
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d78:	2b28      	cmp	r3, #40	; 0x28
 8004d7a:	d86d      	bhi.n	8004e58 <UART_SetConfig+0x188>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0xb4>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004e29 	.word	0x08004e29
 8004d88:	08004e59 	.word	0x08004e59
 8004d8c:	08004e59 	.word	0x08004e59
 8004d90:	08004e59 	.word	0x08004e59
 8004d94:	08004e59 	.word	0x08004e59
 8004d98:	08004e59 	.word	0x08004e59
 8004d9c:	08004e59 	.word	0x08004e59
 8004da0:	08004e59 	.word	0x08004e59
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e59 	.word	0x08004e59
 8004dac:	08004e59 	.word	0x08004e59
 8004db0:	08004e59 	.word	0x08004e59
 8004db4:	08004e59 	.word	0x08004e59
 8004db8:	08004e59 	.word	0x08004e59
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e59 	.word	0x08004e59
 8004dc4:	08004e39 	.word	0x08004e39
 8004dc8:	08004e59 	.word	0x08004e59
 8004dcc:	08004e59 	.word	0x08004e59
 8004dd0:	08004e59 	.word	0x08004e59
 8004dd4:	08004e59 	.word	0x08004e59
 8004dd8:	08004e59 	.word	0x08004e59
 8004ddc:	08004e59 	.word	0x08004e59
 8004de0:	08004e59 	.word	0x08004e59
 8004de4:	08004e41 	.word	0x08004e41
 8004de8:	08004e59 	.word	0x08004e59
 8004dec:	08004e59 	.word	0x08004e59
 8004df0:	08004e59 	.word	0x08004e59
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004e59 	.word	0x08004e59
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004e59 	.word	0x08004e59
 8004e04:	08004e49 	.word	0x08004e49
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e59 	.word	0x08004e59
 8004e14:	08004e59 	.word	0x08004e59
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e59 	.word	0x08004e59
 8004e20:	08004e59 	.word	0x08004e59
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e326      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e322      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e31e      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e46:	e31a      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e48:	2320      	movs	r3, #32
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4e:	e316      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e50:	2340      	movs	r3, #64	; 0x40
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e56:	e312      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5e:	e30e      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a69      	ldr	r2, [pc, #420]	; (800500c <UART_SetConfig+0x33c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d130      	bne.n	8004ecc <UART_SetConfig+0x1fc>
 8004e6a:	4b67      	ldr	r3, [pc, #412]	; (8005008 <UART_SetConfig+0x338>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	d826      	bhi.n	8004ec4 <UART_SetConfig+0x1f4>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x1ac>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e95 	.word	0x08004e95
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	08004ea5 	.word	0x08004ea5
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004eb5 	.word	0x08004eb5
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9a:	e2f0      	b.n	800547e <UART_SetConfig+0x7ae>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea2:	e2ec      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ea4:	2308      	movs	r3, #8
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eaa:	e2e8      	b.n	800547e <UART_SetConfig+0x7ae>
 8004eac:	2310      	movs	r3, #16
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb2:	e2e4      	b.n	800547e <UART_SetConfig+0x7ae>
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e2e0      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ebc:	2340      	movs	r3, #64	; 0x40
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e2dc      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e2d8      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a4f      	ldr	r2, [pc, #316]	; (8005010 <UART_SetConfig+0x340>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d130      	bne.n	8004f38 <UART_SetConfig+0x268>
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <UART_SetConfig+0x338>)
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d826      	bhi.n	8004f30 <UART_SetConfig+0x260>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x218>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f01 	.word	0x08004f01
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	08004f11 	.word	0x08004f11
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e2ba      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e2b6      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e2b2      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e2ae      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f20:	2320      	movs	r3, #32
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e2aa      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f28:	2340      	movs	r3, #64	; 0x40
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e2a6      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e2a2      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a35      	ldr	r2, [pc, #212]	; (8005014 <UART_SetConfig+0x344>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d130      	bne.n	8004fa4 <UART_SetConfig+0x2d4>
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <UART_SetConfig+0x338>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d826      	bhi.n	8004f9c <UART_SetConfig+0x2cc>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x284>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f6d 	.word	0x08004f6d
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f7d 	.word	0x08004f7d
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e284      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e280      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e27c      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e278      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e274      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e270      	b.n	800547e <UART_SetConfig+0x7ae>
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e26c      	b.n	800547e <UART_SetConfig+0x7ae>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <UART_SetConfig+0x348>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d142      	bne.n	8005034 <UART_SetConfig+0x364>
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <UART_SetConfig+0x338>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d838      	bhi.n	800502c <UART_SetConfig+0x35c>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x2f0>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	0800501d 	.word	0x0800501d
 8004fd4:	08005025 	.word	0x08005025
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e24e      	b.n	800547e <UART_SetConfig+0x7ae>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e24a      	b.n	800547e <UART_SetConfig+0x7ae>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e246      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e242      	b.n	800547e <UART_SetConfig+0x7ae>
 8004ff8:	cfff69f3 	.word	0xcfff69f3
 8004ffc:	58000c00 	.word	0x58000c00
 8005000:	11fff4ff 	.word	0x11fff4ff
 8005004:	40011000 	.word	0x40011000
 8005008:	58024400 	.word	0x58024400
 800500c:	40004400 	.word	0x40004400
 8005010:	40004800 	.word	0x40004800
 8005014:	40004c00 	.word	0x40004c00
 8005018:	40005000 	.word	0x40005000
 800501c:	2320      	movs	r3, #32
 800501e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005022:	e22c      	b.n	800547e <UART_SetConfig+0x7ae>
 8005024:	2340      	movs	r3, #64	; 0x40
 8005026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502a:	e228      	b.n	800547e <UART_SetConfig+0x7ae>
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e224      	b.n	800547e <UART_SetConfig+0x7ae>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4ab1      	ldr	r2, [pc, #708]	; (8005300 <UART_SetConfig+0x630>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d176      	bne.n	800512c <UART_SetConfig+0x45c>
 800503e:	4bb1      	ldr	r3, [pc, #708]	; (8005304 <UART_SetConfig+0x634>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005046:	2b28      	cmp	r3, #40	; 0x28
 8005048:	d86c      	bhi.n	8005124 <UART_SetConfig+0x454>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x380>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050f5 	.word	0x080050f5
 8005054:	08005125 	.word	0x08005125
 8005058:	08005125 	.word	0x08005125
 800505c:	08005125 	.word	0x08005125
 8005060:	08005125 	.word	0x08005125
 8005064:	08005125 	.word	0x08005125
 8005068:	08005125 	.word	0x08005125
 800506c:	08005125 	.word	0x08005125
 8005070:	080050fd 	.word	0x080050fd
 8005074:	08005125 	.word	0x08005125
 8005078:	08005125 	.word	0x08005125
 800507c:	08005125 	.word	0x08005125
 8005080:	08005125 	.word	0x08005125
 8005084:	08005125 	.word	0x08005125
 8005088:	08005125 	.word	0x08005125
 800508c:	08005125 	.word	0x08005125
 8005090:	08005105 	.word	0x08005105
 8005094:	08005125 	.word	0x08005125
 8005098:	08005125 	.word	0x08005125
 800509c:	08005125 	.word	0x08005125
 80050a0:	08005125 	.word	0x08005125
 80050a4:	08005125 	.word	0x08005125
 80050a8:	08005125 	.word	0x08005125
 80050ac:	08005125 	.word	0x08005125
 80050b0:	0800510d 	.word	0x0800510d
 80050b4:	08005125 	.word	0x08005125
 80050b8:	08005125 	.word	0x08005125
 80050bc:	08005125 	.word	0x08005125
 80050c0:	08005125 	.word	0x08005125
 80050c4:	08005125 	.word	0x08005125
 80050c8:	08005125 	.word	0x08005125
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005115 	.word	0x08005115
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005125 	.word	0x08005125
 80050dc:	08005125 	.word	0x08005125
 80050e0:	08005125 	.word	0x08005125
 80050e4:	08005125 	.word	0x08005125
 80050e8:	08005125 	.word	0x08005125
 80050ec:	08005125 	.word	0x08005125
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fa:	e1c0      	b.n	800547e <UART_SetConfig+0x7ae>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005102:	e1bc      	b.n	800547e <UART_SetConfig+0x7ae>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e1b8      	b.n	800547e <UART_SetConfig+0x7ae>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e1b4      	b.n	800547e <UART_SetConfig+0x7ae>
 8005114:	2320      	movs	r3, #32
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e1b0      	b.n	800547e <UART_SetConfig+0x7ae>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e1ac      	b.n	800547e <UART_SetConfig+0x7ae>
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e1a8      	b.n	800547e <UART_SetConfig+0x7ae>
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a75      	ldr	r2, [pc, #468]	; (8005308 <UART_SetConfig+0x638>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d130      	bne.n	8005198 <UART_SetConfig+0x4c8>
 8005136:	4b73      	ldr	r3, [pc, #460]	; (8005304 <UART_SetConfig+0x634>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	2b05      	cmp	r3, #5
 8005140:	d826      	bhi.n	8005190 <UART_SetConfig+0x4c0>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <UART_SetConfig+0x478>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005161 	.word	0x08005161
 800514c:	08005169 	.word	0x08005169
 8005150:	08005171 	.word	0x08005171
 8005154:	08005179 	.word	0x08005179
 8005158:	08005181 	.word	0x08005181
 800515c:	08005189 	.word	0x08005189
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e18a      	b.n	800547e <UART_SetConfig+0x7ae>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e186      	b.n	800547e <UART_SetConfig+0x7ae>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e182      	b.n	800547e <UART_SetConfig+0x7ae>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e17e      	b.n	800547e <UART_SetConfig+0x7ae>
 8005180:	2320      	movs	r3, #32
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e17a      	b.n	800547e <UART_SetConfig+0x7ae>
 8005188:	2340      	movs	r3, #64	; 0x40
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e176      	b.n	800547e <UART_SetConfig+0x7ae>
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e172      	b.n	800547e <UART_SetConfig+0x7ae>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5b      	ldr	r2, [pc, #364]	; (800530c <UART_SetConfig+0x63c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d130      	bne.n	8005204 <UART_SetConfig+0x534>
 80051a2:	4b58      	ldr	r3, [pc, #352]	; (8005304 <UART_SetConfig+0x634>)
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d826      	bhi.n	80051fc <UART_SetConfig+0x52c>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x4e4>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051cd 	.word	0x080051cd
 80051b8:	080051d5 	.word	0x080051d5
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d2:	e154      	b.n	800547e <UART_SetConfig+0x7ae>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051da:	e150      	b.n	800547e <UART_SetConfig+0x7ae>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e14c      	b.n	800547e <UART_SetConfig+0x7ae>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e148      	b.n	800547e <UART_SetConfig+0x7ae>
 80051ec:	2320      	movs	r3, #32
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e144      	b.n	800547e <UART_SetConfig+0x7ae>
 80051f4:	2340      	movs	r3, #64	; 0x40
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e140      	b.n	800547e <UART_SetConfig+0x7ae>
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e13c      	b.n	800547e <UART_SetConfig+0x7ae>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a41      	ldr	r2, [pc, #260]	; (8005310 <UART_SetConfig+0x640>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f040 8082 	bne.w	8005314 <UART_SetConfig+0x644>
 8005210:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <UART_SetConfig+0x634>)
 8005212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005218:	2b28      	cmp	r3, #40	; 0x28
 800521a:	d86d      	bhi.n	80052f8 <UART_SetConfig+0x628>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <UART_SetConfig+0x554>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	080052c9 	.word	0x080052c9
 8005228:	080052f9 	.word	0x080052f9
 800522c:	080052f9 	.word	0x080052f9
 8005230:	080052f9 	.word	0x080052f9
 8005234:	080052f9 	.word	0x080052f9
 8005238:	080052f9 	.word	0x080052f9
 800523c:	080052f9 	.word	0x080052f9
 8005240:	080052f9 	.word	0x080052f9
 8005244:	080052d1 	.word	0x080052d1
 8005248:	080052f9 	.word	0x080052f9
 800524c:	080052f9 	.word	0x080052f9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052f9 	.word	0x080052f9
 8005258:	080052f9 	.word	0x080052f9
 800525c:	080052f9 	.word	0x080052f9
 8005260:	080052f9 	.word	0x080052f9
 8005264:	080052d9 	.word	0x080052d9
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052f9 	.word	0x080052f9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052f9 	.word	0x080052f9
 800527c:	080052f9 	.word	0x080052f9
 8005280:	080052f9 	.word	0x080052f9
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052f9 	.word	0x080052f9
 800528c:	080052f9 	.word	0x080052f9
 8005290:	080052f9 	.word	0x080052f9
 8005294:	080052f9 	.word	0x080052f9
 8005298:	080052f9 	.word	0x080052f9
 800529c:	080052f9 	.word	0x080052f9
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052e9 	.word	0x080052e9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052f9 	.word	0x080052f9
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052f9 	.word	0x080052f9
 80052c0:	080052f9 	.word	0x080052f9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e0d6      	b.n	800547e <UART_SetConfig+0x7ae>
 80052d0:	2304      	movs	r3, #4
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e0d2      	b.n	800547e <UART_SetConfig+0x7ae>
 80052d8:	2308      	movs	r3, #8
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e0ce      	b.n	800547e <UART_SetConfig+0x7ae>
 80052e0:	2310      	movs	r3, #16
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e0ca      	b.n	800547e <UART_SetConfig+0x7ae>
 80052e8:	2320      	movs	r3, #32
 80052ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ee:	e0c6      	b.n	800547e <UART_SetConfig+0x7ae>
 80052f0:	2340      	movs	r3, #64	; 0x40
 80052f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052f6:	e0c2      	b.n	800547e <UART_SetConfig+0x7ae>
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e0be      	b.n	800547e <UART_SetConfig+0x7ae>
 8005300:	40011400 	.word	0x40011400
 8005304:	58024400 	.word	0x58024400
 8005308:	40007800 	.word	0x40007800
 800530c:	40007c00 	.word	0x40007c00
 8005310:	40011800 	.word	0x40011800
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4aad      	ldr	r2, [pc, #692]	; (80055d0 <UART_SetConfig+0x900>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d176      	bne.n	800540c <UART_SetConfig+0x73c>
 800531e:	4bad      	ldr	r3, [pc, #692]	; (80055d4 <UART_SetConfig+0x904>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005326:	2b28      	cmp	r3, #40	; 0x28
 8005328:	d86c      	bhi.n	8005404 <UART_SetConfig+0x734>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x660>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	080053d5 	.word	0x080053d5
 8005334:	08005405 	.word	0x08005405
 8005338:	08005405 	.word	0x08005405
 800533c:	08005405 	.word	0x08005405
 8005340:	08005405 	.word	0x08005405
 8005344:	08005405 	.word	0x08005405
 8005348:	08005405 	.word	0x08005405
 800534c:	08005405 	.word	0x08005405
 8005350:	080053dd 	.word	0x080053dd
 8005354:	08005405 	.word	0x08005405
 8005358:	08005405 	.word	0x08005405
 800535c:	08005405 	.word	0x08005405
 8005360:	08005405 	.word	0x08005405
 8005364:	08005405 	.word	0x08005405
 8005368:	08005405 	.word	0x08005405
 800536c:	08005405 	.word	0x08005405
 8005370:	080053e5 	.word	0x080053e5
 8005374:	08005405 	.word	0x08005405
 8005378:	08005405 	.word	0x08005405
 800537c:	08005405 	.word	0x08005405
 8005380:	08005405 	.word	0x08005405
 8005384:	08005405 	.word	0x08005405
 8005388:	08005405 	.word	0x08005405
 800538c:	08005405 	.word	0x08005405
 8005390:	080053ed 	.word	0x080053ed
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	08005405 	.word	0x08005405
 80053ac:	08005405 	.word	0x08005405
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053da:	e050      	b.n	800547e <UART_SetConfig+0x7ae>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e04c      	b.n	800547e <UART_SetConfig+0x7ae>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e048      	b.n	800547e <UART_SetConfig+0x7ae>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e044      	b.n	800547e <UART_SetConfig+0x7ae>
 80053f4:	2320      	movs	r3, #32
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e040      	b.n	800547e <UART_SetConfig+0x7ae>
 80053fc:	2340      	movs	r3, #64	; 0x40
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e03c      	b.n	800547e <UART_SetConfig+0x7ae>
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e038      	b.n	800547e <UART_SetConfig+0x7ae>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a71      	ldr	r2, [pc, #452]	; (80055d8 <UART_SetConfig+0x908>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d130      	bne.n	8005478 <UART_SetConfig+0x7a8>
 8005416:	4b6f      	ldr	r3, [pc, #444]	; (80055d4 <UART_SetConfig+0x904>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b05      	cmp	r3, #5
 8005420:	d826      	bhi.n	8005470 <UART_SetConfig+0x7a0>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0x758>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	08005441 	.word	0x08005441
 800542c:	08005449 	.word	0x08005449
 8005430:	08005451 	.word	0x08005451
 8005434:	08005459 	.word	0x08005459
 8005438:	08005461 	.word	0x08005461
 800543c:	08005469 	.word	0x08005469
 8005440:	2302      	movs	r3, #2
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e01a      	b.n	800547e <UART_SetConfig+0x7ae>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e016      	b.n	800547e <UART_SetConfig+0x7ae>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e012      	b.n	800547e <UART_SetConfig+0x7ae>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e00e      	b.n	800547e <UART_SetConfig+0x7ae>
 8005460:	2320      	movs	r3, #32
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e00a      	b.n	800547e <UART_SetConfig+0x7ae>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e006      	b.n	800547e <UART_SetConfig+0x7ae>
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e002      	b.n	800547e <UART_SetConfig+0x7ae>
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a55      	ldr	r2, [pc, #340]	; (80055d8 <UART_SetConfig+0x908>)
 8005484:	4293      	cmp	r3, r2
 8005486:	f040 80f8 	bne.w	800567a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800548a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800548e:	2b20      	cmp	r3, #32
 8005490:	dc46      	bgt.n	8005520 <UART_SetConfig+0x850>
 8005492:	2b02      	cmp	r3, #2
 8005494:	db75      	blt.n	8005582 <UART_SetConfig+0x8b2>
 8005496:	3b02      	subs	r3, #2
 8005498:	2b1e      	cmp	r3, #30
 800549a:	d872      	bhi.n	8005582 <UART_SetConfig+0x8b2>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0x7d4>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	08005527 	.word	0x08005527
 80054a8:	08005583 	.word	0x08005583
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	08005583 	.word	0x08005583
 80054b4:	08005583 	.word	0x08005583
 80054b8:	08005583 	.word	0x08005583
 80054bc:	0800553f 	.word	0x0800553f
 80054c0:	08005583 	.word	0x08005583
 80054c4:	08005583 	.word	0x08005583
 80054c8:	08005583 	.word	0x08005583
 80054cc:	08005583 	.word	0x08005583
 80054d0:	08005583 	.word	0x08005583
 80054d4:	08005583 	.word	0x08005583
 80054d8:	08005583 	.word	0x08005583
 80054dc:	0800554f 	.word	0x0800554f
 80054e0:	08005583 	.word	0x08005583
 80054e4:	08005583 	.word	0x08005583
 80054e8:	08005583 	.word	0x08005583
 80054ec:	08005583 	.word	0x08005583
 80054f0:	08005583 	.word	0x08005583
 80054f4:	08005583 	.word	0x08005583
 80054f8:	08005583 	.word	0x08005583
 80054fc:	08005583 	.word	0x08005583
 8005500:	08005583 	.word	0x08005583
 8005504:	08005583 	.word	0x08005583
 8005508:	08005583 	.word	0x08005583
 800550c:	08005583 	.word	0x08005583
 8005510:	08005583 	.word	0x08005583
 8005514:	08005583 	.word	0x08005583
 8005518:	08005583 	.word	0x08005583
 800551c:	08005575 	.word	0x08005575
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d02a      	beq.n	800557a <UART_SetConfig+0x8aa>
 8005524:	e02d      	b.n	8005582 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005526:	f7fe fb7f 	bl	8003c28 <HAL_RCCEx_GetD3PCLK1Freq>
 800552a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800552c:	e02f      	b.n	800558e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe fb8e 	bl	8003c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800553c:	e027      	b.n	800558e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fcda 	bl	8003efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554c:	e01f      	b.n	800558e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <UART_SetConfig+0x904>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <UART_SetConfig+0x904>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	08db      	lsrs	r3, r3, #3
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <UART_SetConfig+0x90c>)
 8005566:	fa22 f303 	lsr.w	r3, r2, r3
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800556c:	e00f      	b.n	800558e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800556e:	4b1b      	ldr	r3, [pc, #108]	; (80055dc <UART_SetConfig+0x90c>)
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005572:	e00c      	b.n	800558e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <UART_SetConfig+0x910>)
 8005576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005578:	e009      	b.n	800558e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005580:	e005      	b.n	800558e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800558c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800558e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 81ee 	beq.w	8005972 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	4a12      	ldr	r2, [pc, #72]	; (80055e4 <UART_SetConfig+0x914>)
 800559c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d910      	bls.n	80055e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055cc:	e1d1      	b.n	8005972 <UART_SetConfig+0xca2>
 80055ce:	bf00      	nop
 80055d0:	40011c00 	.word	0x40011c00
 80055d4:	58024400 	.word	0x58024400
 80055d8:	58000c00 	.word	0x58000c00
 80055dc:	03d09000 	.word	0x03d09000
 80055e0:	003d0900 	.word	0x003d0900
 80055e4:	0800939c 	.word	0x0800939c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	2200      	movs	r2, #0
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	60fa      	str	r2, [r7, #12]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f4:	4ac0      	ldr	r2, [pc, #768]	; (80058f8 <UART_SetConfig+0xc28>)
 80055f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2200      	movs	r2, #0
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800560a:	f7fa fe71 	bl	80002f0 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	020b      	lsls	r3, r1, #8
 8005620:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005624:	0202      	lsls	r2, r0, #8
 8005626:	6979      	ldr	r1, [r7, #20]
 8005628:	6849      	ldr	r1, [r1, #4]
 800562a:	0849      	lsrs	r1, r1, #1
 800562c:	2000      	movs	r0, #0
 800562e:	460c      	mov	r4, r1
 8005630:	4605      	mov	r5, r0
 8005632:	eb12 0804 	adds.w	r8, r2, r4
 8005636:	eb43 0905 	adc.w	r9, r3, r5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	469a      	mov	sl, r3
 8005642:	4693      	mov	fp, r2
 8005644:	4652      	mov	r2, sl
 8005646:	465b      	mov	r3, fp
 8005648:	4640      	mov	r0, r8
 800564a:	4649      	mov	r1, r9
 800564c:	f7fa fe50 	bl	80002f0 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800565e:	d308      	bcc.n	8005672 <UART_SetConfig+0x9a2>
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005666:	d204      	bcs.n	8005672 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e17f      	b.n	8005972 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005678:	e17b      	b.n	8005972 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005682:	f040 80bd 	bne.w	8005800 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005686:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800568a:	2b20      	cmp	r3, #32
 800568c:	dc48      	bgt.n	8005720 <UART_SetConfig+0xa50>
 800568e:	2b00      	cmp	r3, #0
 8005690:	db7b      	blt.n	800578a <UART_SetConfig+0xaba>
 8005692:	2b20      	cmp	r3, #32
 8005694:	d879      	bhi.n	800578a <UART_SetConfig+0xaba>
 8005696:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x9cc>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	08005727 	.word	0x08005727
 80056a0:	0800572f 	.word	0x0800572f
 80056a4:	0800578b 	.word	0x0800578b
 80056a8:	0800578b 	.word	0x0800578b
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800578b 	.word	0x0800578b
 80056b4:	0800578b 	.word	0x0800578b
 80056b8:	0800578b 	.word	0x0800578b
 80056bc:	08005747 	.word	0x08005747
 80056c0:	0800578b 	.word	0x0800578b
 80056c4:	0800578b 	.word	0x0800578b
 80056c8:	0800578b 	.word	0x0800578b
 80056cc:	0800578b 	.word	0x0800578b
 80056d0:	0800578b 	.word	0x0800578b
 80056d4:	0800578b 	.word	0x0800578b
 80056d8:	0800578b 	.word	0x0800578b
 80056dc:	08005757 	.word	0x08005757
 80056e0:	0800578b 	.word	0x0800578b
 80056e4:	0800578b 	.word	0x0800578b
 80056e8:	0800578b 	.word	0x0800578b
 80056ec:	0800578b 	.word	0x0800578b
 80056f0:	0800578b 	.word	0x0800578b
 80056f4:	0800578b 	.word	0x0800578b
 80056f8:	0800578b 	.word	0x0800578b
 80056fc:	0800578b 	.word	0x0800578b
 8005700:	0800578b 	.word	0x0800578b
 8005704:	0800578b 	.word	0x0800578b
 8005708:	0800578b 	.word	0x0800578b
 800570c:	0800578b 	.word	0x0800578b
 8005710:	0800578b 	.word	0x0800578b
 8005714:	0800578b 	.word	0x0800578b
 8005718:	0800578b 	.word	0x0800578b
 800571c:	0800577d 	.word	0x0800577d
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d02e      	beq.n	8005782 <UART_SetConfig+0xab2>
 8005724:	e031      	b.n	800578a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005726:	f7fd fb47 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 800572a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800572c:	e033      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572e:	f7fd fb59 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8005732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005734:	e02f      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fa8a 	bl	8003c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005744:	e027      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005746:	f107 0318 	add.w	r3, r7, #24
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fbd6 	bl	8003efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005754:	e01f      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005756:	4b69      	ldr	r3, [pc, #420]	; (80058fc <UART_SetConfig+0xc2c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005762:	4b66      	ldr	r3, [pc, #408]	; (80058fc <UART_SetConfig+0xc2c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	08db      	lsrs	r3, r3, #3
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	4a64      	ldr	r2, [pc, #400]	; (8005900 <UART_SetConfig+0xc30>)
 800576e:	fa22 f303 	lsr.w	r3, r2, r3
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005774:	e00f      	b.n	8005796 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005776:	4b62      	ldr	r3, [pc, #392]	; (8005900 <UART_SetConfig+0xc30>)
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800577a:	e00c      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800577c:	4b61      	ldr	r3, [pc, #388]	; (8005904 <UART_SetConfig+0xc34>)
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e009      	b.n	8005796 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005788:	e005      	b.n	8005796 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80ea 	beq.w	8005972 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	4a55      	ldr	r2, [pc, #340]	; (80058f8 <UART_SetConfig+0xc28>)
 80057a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b0:	005a      	lsls	r2, r3, #1
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	441a      	add	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d916      	bls.n	80057f8 <UART_SetConfig+0xb28>
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d212      	bcs.n	80057f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f023 030f 	bic.w	r3, r3, #15
 80057da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ea:	4313      	orrs	r3, r2
 80057ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057f4:	60da      	str	r2, [r3, #12]
 80057f6:	e0bc      	b.n	8005972 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057fe:	e0b8      	b.n	8005972 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005800:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005804:	2b20      	cmp	r3, #32
 8005806:	dc4b      	bgt.n	80058a0 <UART_SetConfig+0xbd0>
 8005808:	2b00      	cmp	r3, #0
 800580a:	f2c0 8087 	blt.w	800591c <UART_SetConfig+0xc4c>
 800580e:	2b20      	cmp	r3, #32
 8005810:	f200 8084 	bhi.w	800591c <UART_SetConfig+0xc4c>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0xb4c>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	080058a7 	.word	0x080058a7
 8005820:	080058af 	.word	0x080058af
 8005824:	0800591d 	.word	0x0800591d
 8005828:	0800591d 	.word	0x0800591d
 800582c:	080058b7 	.word	0x080058b7
 8005830:	0800591d 	.word	0x0800591d
 8005834:	0800591d 	.word	0x0800591d
 8005838:	0800591d 	.word	0x0800591d
 800583c:	080058c7 	.word	0x080058c7
 8005840:	0800591d 	.word	0x0800591d
 8005844:	0800591d 	.word	0x0800591d
 8005848:	0800591d 	.word	0x0800591d
 800584c:	0800591d 	.word	0x0800591d
 8005850:	0800591d 	.word	0x0800591d
 8005854:	0800591d 	.word	0x0800591d
 8005858:	0800591d 	.word	0x0800591d
 800585c:	080058d7 	.word	0x080058d7
 8005860:	0800591d 	.word	0x0800591d
 8005864:	0800591d 	.word	0x0800591d
 8005868:	0800591d 	.word	0x0800591d
 800586c:	0800591d 	.word	0x0800591d
 8005870:	0800591d 	.word	0x0800591d
 8005874:	0800591d 	.word	0x0800591d
 8005878:	0800591d 	.word	0x0800591d
 800587c:	0800591d 	.word	0x0800591d
 8005880:	0800591d 	.word	0x0800591d
 8005884:	0800591d 	.word	0x0800591d
 8005888:	0800591d 	.word	0x0800591d
 800588c:	0800591d 	.word	0x0800591d
 8005890:	0800591d 	.word	0x0800591d
 8005894:	0800591d 	.word	0x0800591d
 8005898:	0800591d 	.word	0x0800591d
 800589c:	0800590f 	.word	0x0800590f
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d037      	beq.n	8005914 <UART_SetConfig+0xc44>
 80058a4:	e03a      	b.n	800591c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a6:	f7fd fa87 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80058aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058ac:	e03c      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ae:	f7fd fa99 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 80058b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058b4:	e038      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe f9ca 	bl	8003c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058c4:	e030      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c6:	f107 0318 	add.w	r3, r7, #24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fb16 	bl	8003efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d4:	e028      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <UART_SetConfig+0xc2c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d012      	beq.n	8005908 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <UART_SetConfig+0xc2c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	08db      	lsrs	r3, r3, #3
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <UART_SetConfig+0xc30>)
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058f4:	e018      	b.n	8005928 <UART_SetConfig+0xc58>
 80058f6:	bf00      	nop
 80058f8:	0800939c 	.word	0x0800939c
 80058fc:	58024400 	.word	0x58024400
 8005900:	03d09000 	.word	0x03d09000
 8005904:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005908:	4b24      	ldr	r3, [pc, #144]	; (800599c <UART_SetConfig+0xccc>)
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590c:	e00c      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <UART_SetConfig+0xcd0>)
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005912:	e009      	b.n	8005928 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591a:	e005      	b.n	8005928 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005926:	bf00      	nop
    }

    if (pclk != 0U)
 8005928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d021      	beq.n	8005972 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <UART_SetConfig+0xcd4>)
 8005934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005938:	461a      	mov	r2, r3
 800593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	085b      	lsrs	r3, r3, #1
 8005946:	441a      	add	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d909      	bls.n	800596c <UART_SetConfig+0xc9c>
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595e:	d205      	bcs.n	800596c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	b29a      	uxth	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e002      	b.n	8005972 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2201      	movs	r2, #1
 8005976:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800598e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005992:	4618      	mov	r0, r3
 8005994:	3748      	adds	r7, #72	; 0x48
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599c:	03d09000 	.word	0x03d09000
 80059a0:	003d0900 	.word	0x003d0900
 80059a4:	0800939c 	.word	0x0800939c

080059a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01a      	beq.n	8005abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa6:	d10a      	bne.n	8005abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005afc:	f7fb fec0 	bl	8001880 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d10e      	bne.n	8005b2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f82f 	bl	8005b82 <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e025      	b.n	8005b7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d10e      	bne.n	8005b5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f819 	bl	8005b82 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00f      	b.n	8005b7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b09c      	sub	sp, #112	; 0x70
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b92:	e0a9      	b.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9a:	f000 80a5 	beq.w	8005ce8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fb fe6f 	bl	8001880 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d140      	bne.n	8005c36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e6      	bne.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c06:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e069      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d051      	beq.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d149      	bne.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cb0:	623a      	str	r2, [r7, #32]
 8005cb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	69f9      	ldr	r1, [r7, #28]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e5      	bne.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e010      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	f43f af46 	beq.w	8005b94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3770      	adds	r7, #112	; 0x70
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e027      	b.n	8005d78 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	; 0x24
 8005d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e02d      	b.n	8005df8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	; 0x24
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f84f 	bl	8005e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e02d      	b.n	8005e74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	; 0x24
 8005e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f811 	bl	8005e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d108      	bne.n	8005e9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e9c:	e031      	b.n	8005f02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	0e5b      	lsrs	r3, r3, #25
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	0f5b      	lsrs	r3, r3, #29
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	7b3a      	ldrb	r2, [r7, #12]
 8005eca:	4911      	ldr	r1, [pc, #68]	; (8005f10 <UARTEx_SetNbDataToProcess+0x94>)
 8005ecc:	5c8a      	ldrb	r2, [r1, r2]
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ed2:	7b3a      	ldrb	r2, [r7, #12]
 8005ed4:	490f      	ldr	r1, [pc, #60]	; (8005f14 <UARTEx_SetNbDataToProcess+0x98>)
 8005ed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	7b7a      	ldrb	r2, [r7, #13]
 8005ee8:	4909      	ldr	r1, [pc, #36]	; (8005f10 <UARTEx_SetNbDataToProcess+0x94>)
 8005eea:	5c8a      	ldrb	r2, [r1, r2]
 8005eec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ef0:	7b7a      	ldrb	r2, [r7, #13]
 8005ef2:	4908      	ldr	r1, [pc, #32]	; (8005f14 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ef6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	080093b4 	.word	0x080093b4
 8005f14:	080093bc 	.word	0x080093bc

08005f18 <__libc_init_array>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4d0d      	ldr	r5, [pc, #52]	; (8005f50 <__libc_init_array+0x38>)
 8005f1c:	4c0d      	ldr	r4, [pc, #52]	; (8005f54 <__libc_init_array+0x3c>)
 8005f1e:	1b64      	subs	r4, r4, r5
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	2600      	movs	r6, #0
 8005f24:	42a6      	cmp	r6, r4
 8005f26:	d109      	bne.n	8005f3c <__libc_init_array+0x24>
 8005f28:	4d0b      	ldr	r5, [pc, #44]	; (8005f58 <__libc_init_array+0x40>)
 8005f2a:	4c0c      	ldr	r4, [pc, #48]	; (8005f5c <__libc_init_array+0x44>)
 8005f2c:	f000 f820 	bl	8005f70 <_init>
 8005f30:	1b64      	subs	r4, r4, r5
 8005f32:	10a4      	asrs	r4, r4, #2
 8005f34:	2600      	movs	r6, #0
 8005f36:	42a6      	cmp	r6, r4
 8005f38:	d105      	bne.n	8005f46 <__libc_init_array+0x2e>
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f40:	4798      	blx	r3
 8005f42:	3601      	adds	r6, #1
 8005f44:	e7ee      	b.n	8005f24 <__libc_init_array+0xc>
 8005f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4a:	4798      	blx	r3
 8005f4c:	3601      	adds	r6, #1
 8005f4e:	e7f2      	b.n	8005f36 <__libc_init_array+0x1e>
 8005f50:	080093cc 	.word	0x080093cc
 8005f54:	080093cc 	.word	0x080093cc
 8005f58:	080093cc 	.word	0x080093cc
 8005f5c:	080093d0 	.word	0x080093d0

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
