#include "stm32h7xx_hal.h"
#include "utils.h"
#include "usart.h"
#include "tim.h"
#include "led_control.h"
#include "camera.h"
#include "oled.h"
#include <string.h>

extern int t;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
	if (huart->Instance == USART3) {
		if (Size == 1)
		{
			if (receive_data[0] == 'a')
			{
				DrawText(0);
			}
			if (receive_data[0] == 'b')
			{
				DrawText(2);
			}
			else if (receive_data[0] == 'c')
			{
				DrawBG();
			}
		}
		else if (Size > 1)
		{
			int count = 0;
			double* array = parseStringToArray(res, &count);
//				char msg[10];
//				sprintf(msg, "%d\n", Size);

//				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, sizeof(msg));
//			HAL_UART_Transmit_DMA(&huart3, receive_data, Size);
			Led_All_Reset(&led);
			if (array != NULL) {
				for (int i = 0; i < count; i++) {
					Led_Range_Set(&led, (float)array[i], 0, 212, 70);
				}
				Led_Start(&led);
			}
			free(array);
		    free(str);

			HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receive_data, BUFFER_SIZE);
			__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
		Led_Send(&led);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM3)
	{
		Camera_Take(&camera, 60);
	}
	else if (htim->Instance == TIM6) {
	    DrawMouch(t);
	    t = (t+1) % 4;
	}
}
