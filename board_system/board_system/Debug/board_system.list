
board_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a84  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  24000000  08007da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d4  24000040  08007de4  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000214  08007de4  00020214  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a8e2  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003238  00000000  00000000  0003a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  0003db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001308  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003257d  00000000  00000000  000402b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a398  00000000  00000000  00072835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146f48  00000000  00000000  0008cbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3b15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005528  00000000  00000000  001d3b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000040 	.word	0x24000040
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08007d18 	.word	0x08007d18

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000044 	.word	0x24000044
 80002e8:	08007d18 	.word	0x08007d18

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b974 	b.w	80005fc <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468e      	mov	lr, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d14d      	bne.n	80003d6 <__udivmoddi4+0xaa>
 800033a:	428a      	cmp	r2, r1
 800033c:	4694      	mov	ip, r2
 800033e:	d969      	bls.n	8000414 <__udivmoddi4+0xe8>
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	b152      	cbz	r2, 800035c <__udivmoddi4+0x30>
 8000346:	fa01 f302 	lsl.w	r3, r1, r2
 800034a:	f1c2 0120 	rsb	r1, r2, #32
 800034e:	fa20 f101 	lsr.w	r1, r0, r1
 8000352:	fa0c fc02 	lsl.w	ip, ip, r2
 8000356:	ea41 0e03 	orr.w	lr, r1, r3
 800035a:	4094      	lsls	r4, r2
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	0c21      	lsrs	r1, r4, #16
 8000362:	fbbe f6f8 	udiv	r6, lr, r8
 8000366:	fa1f f78c 	uxth.w	r7, ip
 800036a:	fb08 e316 	mls	r3, r8, r6, lr
 800036e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000372:	fb06 f107 	mul.w	r1, r6, r7
 8000376:	4299      	cmp	r1, r3
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x64>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000382:	f080 811f 	bcs.w	80005c4 <__udivmoddi4+0x298>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 811c 	bls.w	80005c4 <__udivmoddi4+0x298>
 800038c:	3e02      	subs	r6, #2
 800038e:	4463      	add	r3, ip
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0f8 	udiv	r0, r3, r8
 8000398:	fb08 3310 	mls	r3, r8, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 f707 	mul.w	r7, r0, r7
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x92>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b0:	f080 810a 	bcs.w	80005c8 <__udivmoddi4+0x29c>
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	f240 8107 	bls.w	80005c8 <__udivmoddi4+0x29c>
 80003ba:	4464      	add	r4, ip
 80003bc:	3802      	subs	r0, #2
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	1be4      	subs	r4, r4, r7
 80003c4:	2600      	movs	r6, #0
 80003c6:	b11d      	cbz	r5, 80003d0 <__udivmoddi4+0xa4>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c5 4300 	strd	r4, r3, [r5]
 80003d0:	4631      	mov	r1, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xc2>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80ef 	beq.w	80005be <__udivmoddi4+0x292>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x160>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd4>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80f9 	bhi.w	80005f2 <__udivmoddi4+0x2c6>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	469e      	mov	lr, r3
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa4>
 800040e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa4>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xec>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 8092 	bne.w	8000546 <__udivmoddi4+0x21a>
 8000422:	eba1 010c 	sub.w	r1, r1, ip
 8000426:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	2601      	movs	r6, #1
 8000430:	0c20      	lsrs	r0, r4, #16
 8000432:	fbb1 f3f7 	udiv	r3, r1, r7
 8000436:	fb07 1113 	mls	r1, r7, r3, r1
 800043a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043e:	fb0e f003 	mul.w	r0, lr, r3
 8000442:	4288      	cmp	r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x12c>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f103 38ff 	add.w	r8, r3, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x12a>
 8000450:	4288      	cmp	r0, r1
 8000452:	f200 80cb 	bhi.w	80005ec <__udivmoddi4+0x2c0>
 8000456:	4643      	mov	r3, r8
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1110 	mls	r1, r7, r0, r1
 8000464:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000468:	fb0e fe00 	mul.w	lr, lr, r0
 800046c:	45a6      	cmp	lr, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x156>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d202      	bcs.n	8000480 <__udivmoddi4+0x154>
 800047a:	45a6      	cmp	lr, r4
 800047c:	f200 80bb 	bhi.w	80005f6 <__udivmoddi4+0x2ca>
 8000480:	4608      	mov	r0, r1
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800048a:	e79c      	b.n	80003c6 <__udivmoddi4+0x9a>
 800048c:	f1c6 0720 	rsb	r7, r6, #32
 8000490:	40b3      	lsls	r3, r6
 8000492:	fa22 fc07 	lsr.w	ip, r2, r7
 8000496:	ea4c 0c03 	orr.w	ip, ip, r3
 800049a:	fa20 f407 	lsr.w	r4, r0, r7
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	431c      	orrs	r4, r3
 80004a4:	40f9      	lsrs	r1, r7
 80004a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004aa:	fa00 f306 	lsl.w	r3, r0, r6
 80004ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80004b2:	0c20      	lsrs	r0, r4, #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fb09 1118 	mls	r1, r9, r8, r1
 80004bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c0:	fb08 f00e 	mul.w	r0, r8, lr
 80004c4:	4288      	cmp	r0, r1
 80004c6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ca:	d90b      	bls.n	80004e4 <__udivmoddi4+0x1b8>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004d4:	f080 8088 	bcs.w	80005e8 <__udivmoddi4+0x2bc>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f240 8085 	bls.w	80005e8 <__udivmoddi4+0x2bc>
 80004de:	f1a8 0802 	sub.w	r8, r8, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1a09      	subs	r1, r1, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004ec:	fb09 1110 	mls	r1, r9, r0, r1
 80004f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f8:	458e      	cmp	lr, r1
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1e2>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f100 34ff 	add.w	r4, r0, #4294967295
 8000504:	d26c      	bcs.n	80005e0 <__udivmoddi4+0x2b4>
 8000506:	458e      	cmp	lr, r1
 8000508:	d96a      	bls.n	80005e0 <__udivmoddi4+0x2b4>
 800050a:	3802      	subs	r0, #2
 800050c:	4461      	add	r1, ip
 800050e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000512:	fba0 9402 	umull	r9, r4, r0, r2
 8000516:	eba1 010e 	sub.w	r1, r1, lr
 800051a:	42a1      	cmp	r1, r4
 800051c:	46c8      	mov	r8, r9
 800051e:	46a6      	mov	lr, r4
 8000520:	d356      	bcc.n	80005d0 <__udivmoddi4+0x2a4>
 8000522:	d053      	beq.n	80005cc <__udivmoddi4+0x2a0>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x212>
 8000526:	ebb3 0208 	subs.w	r2, r3, r8
 800052a:	eb61 010e 	sbc.w	r1, r1, lr
 800052e:	fa01 f707 	lsl.w	r7, r1, r7
 8000532:	fa22 f306 	lsr.w	r3, r2, r6
 8000536:	40f1      	lsrs	r1, r6
 8000538:	431f      	orrs	r7, r3
 800053a:	e9c5 7100 	strd	r7, r1, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	40d8      	lsrs	r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa21 f303 	lsr.w	r3, r1, r3
 8000554:	4091      	lsls	r1, r2
 8000556:	4301      	orrs	r1, r0
 8000558:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fbb3 f0f7 	udiv	r0, r3, r7
 8000564:	fb07 3610 	mls	r6, r7, r0, r3
 8000568:	0c0b      	lsrs	r3, r1, #16
 800056a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056e:	fb00 f60e 	mul.w	r6, r0, lr
 8000572:	429e      	cmp	r6, r3
 8000574:	fa04 f402 	lsl.w	r4, r4, r2
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x260>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000582:	d22f      	bcs.n	80005e4 <__udivmoddi4+0x2b8>
 8000584:	429e      	cmp	r6, r3
 8000586:	d92d      	bls.n	80005e4 <__udivmoddi4+0x2b8>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1b9b      	subs	r3, r3, r6
 800058e:	b289      	uxth	r1, r1
 8000590:	fbb3 f6f7 	udiv	r6, r3, r7
 8000594:	fb07 3316 	mls	r3, r7, r6, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb06 f30e 	mul.w	r3, r6, lr
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x28a>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005ac:	d216      	bcs.n	80005dc <__udivmoddi4+0x2b0>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d914      	bls.n	80005dc <__udivmoddi4+0x2b0>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	1ac9      	subs	r1, r1, r3
 80005b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005bc:	e738      	b.n	8000430 <__udivmoddi4+0x104>
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e705      	b.n	80003d0 <__udivmoddi4+0xa4>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e3      	b.n	8000390 <__udivmoddi4+0x64>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6f8      	b.n	80003be <__udivmoddi4+0x92>
 80005cc:	454b      	cmp	r3, r9
 80005ce:	d2a9      	bcs.n	8000524 <__udivmoddi4+0x1f8>
 80005d0:	ebb9 0802 	subs.w	r8, r9, r2
 80005d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005d8:	3801      	subs	r0, #1
 80005da:	e7a3      	b.n	8000524 <__udivmoddi4+0x1f8>
 80005dc:	4646      	mov	r6, r8
 80005de:	e7ea      	b.n	80005b6 <__udivmoddi4+0x28a>
 80005e0:	4620      	mov	r0, r4
 80005e2:	e794      	b.n	800050e <__udivmoddi4+0x1e2>
 80005e4:	4640      	mov	r0, r8
 80005e6:	e7d1      	b.n	800058c <__udivmoddi4+0x260>
 80005e8:	46d0      	mov	r8, sl
 80005ea:	e77b      	b.n	80004e4 <__udivmoddi4+0x1b8>
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4461      	add	r1, ip
 80005f0:	e732      	b.n	8000458 <__udivmoddi4+0x12c>
 80005f2:	4630      	mov	r0, r6
 80005f4:	e709      	b.n	800040a <__udivmoddi4+0xde>
 80005f6:	4464      	add	r4, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e742      	b.n	8000482 <__udivmoddi4+0x156>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4604      	mov	r4, r0
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4623      	mov	r3, r4
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	4603      	mov	r3, r0
 8000614:	71bb      	strb	r3, [r7, #6]
 8000616:	460b      	mov	r3, r1
 8000618:	80bb      	strh	r3, [r7, #4]
 800061a:	4613      	mov	r3, r2
 800061c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d902      	bls.n	800062a <socket+0x2a>
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	e0f2      	b.n	8000810 <socket+0x210>
	switch(protocol)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d005      	beq.n	800063c <socket+0x3c>
 8000630:	2b00      	cmp	r3, #0
 8000632:	dd11      	ble.n	8000658 <socket+0x58>
 8000634:	3b02      	subs	r3, #2
 8000636:	2b02      	cmp	r3, #2
 8000638:	d80e      	bhi.n	8000658 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800063a:	e011      	b.n	8000660 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2204      	movs	r2, #4
 8000642:	4619      	mov	r1, r3
 8000644:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000648:	f000 fd1c 	bl	8001084 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <socket+0x5e>
 8000652:	f06f 0302 	mvn.w	r3, #2
 8000656:	e0db      	b.n	8000810 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000658:	f06f 0304 	mvn.w	r3, #4
 800065c:	e0d8      	b.n	8000810 <socket+0x210>
	    break;
 800065e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <socket+0x70>
 800066a:	f06f 0305 	mvn.w	r3, #5
 800066e:	e0cf      	b.n	8000810 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d025      	beq.n	80006c2 <socket+0xc2>
	{
   	switch(protocol)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <socket+0x82>
 800067c:	2b02      	cmp	r3, #2
 800067e:	d008      	beq.n	8000692 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000680:	e024      	b.n	80006cc <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000682:	78fb      	ldrb	r3, [r7, #3]
 8000684:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000688:	2b00      	cmp	r3, #0
 800068a:	d11c      	bne.n	80006c6 <socket+0xc6>
 800068c:	f06f 0305 	mvn.w	r3, #5
 8000690:	e0be      	b.n	8000810 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	2b00      	cmp	r3, #0
 800069a:	d006      	beq.n	80006aa <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800069c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db02      	blt.n	80006aa <socket+0xaa>
 80006a4:	f06f 0305 	mvn.w	r3, #5
 80006a8:	e0b2      	b.n	8000810 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00a      	beq.n	80006ca <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80006b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db06      	blt.n	80006ca <socket+0xca>
 80006bc:	f06f 0305 	mvn.w	r3, #5
 80006c0:	e0a6      	b.n	8000810 <socket+0x210>
   	}
   }
 80006c2:	bf00      	nop
 80006c4:	e002      	b.n	80006cc <socket+0xcc>
   	      break;
 80006c6:	bf00      	nop
 80006c8:	e000      	b.n	80006cc <socket+0xcc>
   	      break;
 80006ca:	bf00      	nop
	close(sn);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f8ac 	bl	800082c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	3301      	adds	r3, #1
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006e2:	f023 030f 	bic.w	r3, r3, #15
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	f000 fc78 	bl	8000fe8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d110      	bne.n	8000720 <socket+0x120>
	{
	   port = sock_any_port++;
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <socket+0x218>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	b291      	uxth	r1, r2
 8000706:	4a44      	ldr	r2, [pc, #272]	; (8000818 <socket+0x218>)
 8000708:	8011      	strh	r1, [r2, #0]
 800070a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <socket+0x218>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000714:	4293      	cmp	r3, r2
 8000716:	d103      	bne.n	8000720 <socket+0x120>
 8000718:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <socket+0x218>)
 800071a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800071e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3301      	adds	r3, #1
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800072c:	461a      	mov	r2, r3
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	b29b      	uxth	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	4610      	mov	r0, r2
 800073a:	f000 fc55 	bl	8000fe8 <WIZCHIP_WRITE>
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3301      	adds	r3, #1
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800074a:	461a      	mov	r2, r3
 800074c:	88bb      	ldrh	r3, [r7, #4]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f000 fc48 	bl	8000fe8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	3301      	adds	r3, #1
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fc3e 	bl	8000fe8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800076c:	bf00      	nop
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3301      	adds	r3, #1
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fbe8 	bl	8000f50 <WIZCHIP_READ>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f3      	bne.n	800076e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2201      	movs	r2, #1
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	b21b      	sxth	r3, r3
 8000790:	43db      	mvns	r3, r3
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <socket+0x21c>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4013      	ands	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <socket+0x21c>)
 80007a2:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	f003 0201 	and.w	r2, r3, #1
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <socket+0x21c>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <socket+0x21c>)
 80007c0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2201      	movs	r2, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	43db      	mvns	r3, r3
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <socket+0x220>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4013      	ands	r3, r2
 80007d8:	b21b      	sxth	r3, r3
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <socket+0x220>)
 80007de:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <socket+0x224>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <socket+0x228>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80007f2:	bf00      	nop
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	3301      	adds	r3, #1
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fba5 	bl	8000f50 <WIZCHIP_READ>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0f3      	beq.n	80007f4 <socket+0x1f4>
   return (int8_t)sn;
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	24000000 	.word	0x24000000
 800081c:	2400005c 	.word	0x2400005c
 8000820:	2400005e 	.word	0x2400005e
 8000824:	24000060 	.word	0x24000060
 8000828:	24000070 	.word	0x24000070

0800082c <close>:

int8_t close(uint8_t sn)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d902      	bls.n	8000842 <close+0x16>
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	e055      	b.n	80008ee <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	3301      	adds	r3, #1
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800084e:	2110      	movs	r1, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fbc9 	bl	8000fe8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000856:	bf00      	nop
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	3301      	adds	r3, #1
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fb73 	bl	8000f50 <WIZCHIP_READ>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f3      	bne.n	8000858 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	3301      	adds	r3, #1
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800087c:	211f      	movs	r1, #31
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fbb2 	bl	8000fe8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2201      	movs	r2, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	b21b      	sxth	r3, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	b21a      	sxth	r2, r3
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <close+0xcc>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	b21b      	sxth	r3, r3
 8000898:	4013      	ands	r3, r2
 800089a:	b21b      	sxth	r3, r3
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <close+0xcc>)
 80008a0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2201      	movs	r2, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <close+0xd0>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4013      	ands	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <close+0xd0>)
 80008be:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <close+0xd4>)
 80008c4:	2100      	movs	r1, #0
 80008c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <close+0xd8>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80008d2:	bf00      	nop
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	3301      	adds	r3, #1
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fb35 	bl	8000f50 <WIZCHIP_READ>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f3      	bne.n	80008d4 <close+0xa8>
	return SOCK_OK;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2400005c 	.word	0x2400005c
 80008fc:	2400005e 	.word	0x2400005e
 8000900:	24000060 	.word	0x24000060
 8000904:	24000070 	.word	0x24000070

08000908 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
 8000916:	4613      	mov	r3, r2
 8000918:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b08      	cmp	r3, #8
 8000926:	d902      	bls.n	800092e <sendto+0x26>
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	e11b      	b.n	8000b66 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	3301      	adds	r3, #1
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fb0a 	bl	8000f50 <WIZCHIP_READ>
 800093c:	4603      	mov	r3, r0
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b02      	subs	r3, #2
 8000944:	2b02      	cmp	r3, #2
 8000946:	d902      	bls.n	800094e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000948:	f06f 0304 	mvn.w	r3, #4
 800094c:	e10b      	b.n	8000b66 <sendto+0x25e>
         break;
 800094e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8000950:	89bb      	ldrh	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <sendto+0x54>
 8000956:	f06f 030d 	mvn.w	r3, #13
 800095a:	e104      	b.n	8000b66 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	3201      	adds	r2, #1
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	4413      	add	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	3202      	adds	r2, #2
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	4413      	add	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	3203      	adds	r2, #3
 8000986:	7812      	ldrb	r2, [r2, #0]
 8000988:	4413      	add	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10e      	bne.n	80009b0 <sendto+0xa8>
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	3301      	adds	r3, #1
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fad8 	bl	8000f50 <WIZCHIP_READ>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d002      	beq.n	80009b0 <sendto+0xa8>
 80009aa:	f06f 030b 	mvn.w	r3, #11
 80009ae:	e0da      	b.n	8000b66 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80009b0:	8c3b      	ldrh	r3, [r7, #32]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <sendto+0xcc>
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	3301      	adds	r3, #1
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fac6 	bl	8000f50 <WIZCHIP_READ>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	d002      	beq.n	80009d4 <sendto+0xcc>
 80009ce:	f06f 030a 	mvn.w	r3, #10
 80009d2:	e0c8      	b.n	8000b66 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	3301      	adds	r3, #1
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 fab5 	bl	8000f50 <WIZCHIP_READ>
 80009e6:	4603      	mov	r3, r0
 80009e8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
 80009ec:	2b42      	cmp	r3, #66	; 0x42
 80009ee:	d008      	beq.n	8000a02 <sendto+0xfa>
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b22      	cmp	r3, #34	; 0x22
 80009f4:	d005      	beq.n	8000a02 <sendto+0xfa>
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	2b32      	cmp	r3, #50	; 0x32
 80009fa:	d002      	beq.n	8000a02 <sendto+0xfa>
 80009fc:	f06f 0306 	mvn.w	r3, #6
 8000a00:	e0b1      	b.n	8000b66 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	3301      	adds	r3, #1
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000a0e:	2204      	movs	r2, #4
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fb96 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a24:	461a      	mov	r2, r3
 8000a26:	8c3b      	ldrh	r3, [r7, #32]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4610      	mov	r0, r2
 8000a32:	f000 fad9 	bl	8000fe8 <WIZCHIP_WRITE>
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a42:	461a      	mov	r2, r3
 8000a44:	8c3b      	ldrh	r3, [r7, #32]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	f000 facc 	bl	8000fe8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	3301      	adds	r3, #1
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fa77 	bl	8000f50 <WIZCHIP_READ>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000a6a:	89ba      	ldrh	r2, [r7, #12]
 8000a6c:	8abb      	ldrh	r3, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d901      	bls.n	8000a76 <sendto+0x16e>
 8000a72:	8abb      	ldrh	r3, [r7, #20]
 8000a74:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fbc3 	bl	8001204 <getSn_TX_FSR>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	3301      	adds	r3, #1
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fa5e 	bl	8000f50 <WIZCHIP_READ>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <sendto+0x198>
 8000a9a:	f06f 0303 	mvn.w	r3, #3
 8000a9e:	e062      	b.n	8000b66 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <sendto+0x268>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	fa42 f303 	asr.w	r3, r2, r3
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <sendto+0x1b8>
 8000ab4:	89ba      	ldrh	r2, [r7, #12]
 8000ab6:	8abb      	ldrh	r3, [r7, #20]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d901      	bls.n	8000ac0 <sendto+0x1b8>
 8000abc:	2300      	movs	r3, #0
 8000abe:	e052      	b.n	8000b66 <sendto+0x25e>
      if(len <= freesize) break;
 8000ac0:	89ba      	ldrh	r2, [r7, #12]
 8000ac2:	8abb      	ldrh	r3, [r7, #20]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d900      	bls.n	8000aca <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8000ac8:	e7d5      	b.n	8000a76 <sendto+0x16e>
      if(len <= freesize) break;
 8000aca:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8000acc:	89ba      	ldrh	r2, [r7, #12]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fc2c 	bl	8001330 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	3301      	adds	r3, #1
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fa7e 	bl	8000fe8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8000aec:	bf00      	nop
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	3301      	adds	r3, #1
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fa28 	bl	8000f50 <WIZCHIP_READ>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f3      	bne.n	8000aee <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fa1c 	bl	8000f50 <WIZCHIP_READ>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00c      	beq.n	8000b44 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b36:	2110      	movs	r1, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fa55 	bl	8000fe8 <WIZCHIP_WRITE>
         break;
 8000b3e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000b40:	89bb      	ldrh	r3, [r7, #12]
 8000b42:	e010      	b.n	8000b66 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0db      	beq.n	8000b06 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	3301      	adds	r3, #1
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fa43 	bl	8000fe8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8000b62:	f06f 030c 	mvn.w	r3, #12
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400005c 	.word	0x2400005c

08000b74 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	4613      	mov	r3, r2
 8000b84:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d902      	bls.n	8000b96 <recvfrom+0x22>
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	e1d4      	b.n	8000f40 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f9d6 	bl	8000f50 <WIZCHIP_READ>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	777b      	strb	r3, [r7, #29]
 8000ba8:	7f7b      	ldrb	r3, [r7, #29]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d902      	bls.n	8000bba <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8000bb4:	f06f 0304 	mvn.w	r3, #4
 8000bb8:	e1c2      	b.n	8000f40 <recvfrom+0x3cc>
         break;
 8000bba:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <recvfrom+0x54>
 8000bc2:	f06f 030d 	mvn.w	r3, #13
 8000bc6:	e1bb      	b.n	8000f40 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	4a88      	ldr	r2, [pc, #544]	; (8000dec <recvfrom+0x278>)
 8000bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d128      	bne.n	8000c26 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fb5f 	bl	800129a <getSn_RX_RSR>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	3301      	adds	r3, #1
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f9af 	bl	8000f50 <WIZCHIP_READ>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <recvfrom+0x8a>
 8000bf8:	f06f 0303 	mvn.w	r3, #3
 8000bfc:	e1a0      	b.n	8000f40 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8000bfe:	4b7c      	ldr	r3, [pc, #496]	; (8000df0 <recvfrom+0x27c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	fa42 f303 	asr.w	r3, r2, r3
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <recvfrom+0xa8>
 8000c12:	8bfb      	ldrh	r3, [r7, #30]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <recvfrom+0xa8>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e191      	b.n	8000f40 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8000c1c:	8bfb      	ldrh	r3, [r7, #30]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d100      	bne.n	8000c24 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8000c22:	e7d7      	b.n	8000bd4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8000c24:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8000c26:	7f7b      	ldrb	r3, [r7, #29]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d079      	beq.n	8000d24 <recvfrom+0x1b0>
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	f300 8142 	bgt.w	8000eba <recvfrom+0x346>
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d003      	beq.n	8000c42 <recvfrom+0xce>
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	f000 80dc 	beq.w	8000df8 <recvfrom+0x284>
 8000c40:	e13b      	b.n	8000eba <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	4a69      	ldr	r2, [pc, #420]	; (8000dec <recvfrom+0x278>)
 8000c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d152      	bne.n	8000cf4 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8000c4e:	f107 0114 	add.w	r1, r7, #20
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	2208      	movs	r2, #8
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fbc6 	bl	80013e8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	3301      	adds	r3, #1
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f9bc 	bl	8000fe8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8000c70:	bf00      	nop
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	3301      	adds	r3, #1
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f966 	bl	8000f50 <WIZCHIP_READ>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f3      	bne.n	8000c72 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8000c8a:	7d3a      	ldrb	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	7d7a      	ldrb	r2, [r7, #21]
 8000c96:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	7dba      	ldrb	r2, [r7, #22]
 8000c9e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	7dfa      	ldrb	r2, [r7, #23]
 8000ca6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8000ca8:	7e3b      	ldrb	r3, [r7, #24]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	7e7b      	ldrb	r3, [r7, #25]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8000cc4:	7eba      	ldrb	r2, [r7, #26]
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	b291      	uxth	r1, r2
 8000cca:	4a48      	ldr	r2, [pc, #288]	; (8000dec <recvfrom+0x278>)
 8000ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	4a46      	ldr	r2, [pc, #280]	; (8000dec <recvfrom+0x278>)
 8000cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	7efb      	ldrb	r3, [r7, #27]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	440a      	add	r2, r1
 8000ce4:	b291      	uxth	r1, r2
 8000ce6:	4a41      	ldr	r2, [pc, #260]	; (8000dec <recvfrom+0x278>)
 8000ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <recvfrom+0x280>)
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4a3d      	ldr	r2, [pc, #244]	; (8000dec <recvfrom+0x278>)
 8000cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfc:	89ba      	ldrh	r2, [r7, #12]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d202      	bcs.n	8000d08 <recvfrom+0x194>
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	83fb      	strh	r3, [r7, #30]
 8000d06:	e004      	b.n	8000d12 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <recvfrom+0x278>)
 8000d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d10:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8000d12:	8bfb      	ldrh	r3, [r7, #30]
 8000d14:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8000d16:	8bfa      	ldrh	r2, [r7, #30]
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fb63 	bl	80013e8 <wiz_recv_data>
			break;
 8000d22:	e0d6      	b.n	8000ed2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	4a31      	ldr	r2, [pc, #196]	; (8000dec <recvfrom+0x278>)
 8000d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d146      	bne.n	8000dbe <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8000d30:	f107 0114 	add.w	r1, r7, #20
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2202      	movs	r2, #2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fb55 	bl	80013e8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	3301      	adds	r3, #1
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f94b 	bl	8000fe8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8000d52:	bf00      	nop
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	3301      	adds	r3, #1
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f8f5 	bl	8000f50 <WIZCHIP_READ>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f3      	bne.n	8000d54 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8000d6c:	7d3a      	ldrb	r2, [r7, #20]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	b291      	uxth	r1, r2
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <recvfrom+0x278>)
 8000d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <recvfrom+0x278>)
 8000d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7d7b      	ldrb	r3, [r7, #21]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3a02      	subs	r2, #2
 8000d90:	b291      	uxth	r1, r2
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <recvfrom+0x278>)
 8000d94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <recvfrom+0x278>)
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d906      	bls.n	8000db6 <recvfrom+0x242>
   			{
   			   close(sn);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd3e 	bl	800082c <close>
   			   return SOCKFATAL_PACKLEN;
 8000db0:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8000db4:	e0c4      	b.n	8000f40 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <recvfrom+0x280>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <recvfrom+0x278>)
 8000dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc6:	89ba      	ldrh	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d202      	bcs.n	8000dd2 <recvfrom+0x25e>
 8000dcc:	89bb      	ldrh	r3, [r7, #12]
 8000dce:	83fb      	strh	r3, [r7, #30]
 8000dd0:	e004      	b.n	8000ddc <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	4a05      	ldr	r2, [pc, #20]	; (8000dec <recvfrom+0x278>)
 8000dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dda:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8000ddc:	8bfa      	ldrh	r2, [r7, #30]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fb00 	bl	80013e8 <wiz_recv_data>
		   break;
 8000de8:	e073      	b.n	8000ed2 <recvfrom+0x35e>
 8000dea:	bf00      	nop
 8000dec:	24000060 	.word	0x24000060
 8000df0:	2400005c 	.word	0x2400005c
 8000df4:	24000070 	.word	0x24000070
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	4a53      	ldr	r2, [pc, #332]	; (8000f48 <recvfrom+0x3d4>)
 8000dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d144      	bne.n	8000e8e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8000e04:	f107 0114 	add.w	r1, r7, #20
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 faeb 	bl	80013e8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	3301      	adds	r3, #1
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e1e:	2140      	movs	r1, #64	; 0x40
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f8e1 	bl	8000fe8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8000e26:	bf00      	nop
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f88b 	bl	8000f50 <WIZCHIP_READ>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f3      	bne.n	8000e28 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8000e40:	7d3a      	ldrb	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	7d7a      	ldrb	r2, [r7, #21]
 8000e4c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3302      	adds	r3, #2
 8000e52:	7dba      	ldrb	r2, [r7, #22]
 8000e54:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3303      	adds	r3, #3
 8000e5a:	7dfa      	ldrb	r2, [r7, #23]
 8000e5c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8000e5e:	7e3a      	ldrb	r2, [r7, #24]
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	b291      	uxth	r1, r2
 8000e64:	4a38      	ldr	r2, [pc, #224]	; (8000f48 <recvfrom+0x3d4>)
 8000e66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	4a36      	ldr	r2, [pc, #216]	; (8000f48 <recvfrom+0x3d4>)
 8000e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b299      	uxth	r1, r3
 8000e76:	7e7b      	ldrb	r3, [r7, #25]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	440a      	add	r2, r1
 8000e7e:	b291      	uxth	r1, r2
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <recvfrom+0x3d4>)
 8000e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	4a30      	ldr	r2, [pc, #192]	; (8000f4c <recvfrom+0x3d8>)
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <recvfrom+0x3d4>)
 8000e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e96:	89ba      	ldrh	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d202      	bcs.n	8000ea2 <recvfrom+0x32e>
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	83fb      	strh	r3, [r7, #30]
 8000ea0:	e004      	b.n	8000eac <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4a28      	ldr	r2, [pc, #160]	; (8000f48 <recvfrom+0x3d4>)
 8000ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eaa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8000eac:	8bfa      	ldrh	r2, [r7, #30]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa98 	bl	80013e8 <wiz_recv_data>
			break;
 8000eb8:	e00b      	b.n	8000ed2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8000eba:	8bfa      	ldrh	r2, [r7, #30]
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 faed 	bl	80014a0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	491f      	ldr	r1, [pc, #124]	; (8000f48 <recvfrom+0x3d4>)
 8000eca:	8bfa      	ldrh	r2, [r7, #30]
 8000ecc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8000ed0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ede:	2140      	movs	r1, #64	; 0x40
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f881 	bl	8000fe8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8000ee6:	bf00      	nop
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	3301      	adds	r3, #1
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f82b 	bl	8000f50 <WIZCHIP_READ>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f3      	bne.n	8000ee8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <recvfrom+0x3d4>)
 8000f04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	8bfa      	ldrh	r2, [r7, #30]
 8000f0c:	1a8a      	subs	r2, r1, r2
 8000f0e:	b291      	uxth	r1, r2
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <recvfrom+0x3d4>)
 8000f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <recvfrom+0x3d4>)
 8000f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d009      	beq.n	8000f36 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <recvfrom+0x3d8>)
 8000f26:	5cd2      	ldrb	r2, [r2, r3]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	b2d1      	uxtb	r1, r2
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <recvfrom+0x3d8>)
 8000f32:	54d1      	strb	r1, [r2, r3]
 8000f34:	e003      	b.n	8000f3e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <recvfrom+0x3d8>)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8000f3e:	8bfb      	ldrh	r3, [r7, #30]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	24000060 	.word	0x24000060
 8000f4c:	24000070 	.word	0x24000070

08000f50 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <WIZCHIP_READ+0x24>
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d114      	bne.n	8000f9e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	0c12      	lsrs	r2, r2, #16
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	0a12      	lsrs	r2, r2, #8
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4798      	blx	r3
 8000f9c:	e011      	b.n	8000fc2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f107 020c 	add.w	r2, r7, #12
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4798      	blx	r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <WIZCHIP_READ+0x94>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4798      	blx	r3
   return ret;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	24000004 	.word	0x24000004

08000fe8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <WIZCHIP_WRITE+0x98>)
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	2b00      	cmp	r3, #0
 800100e:	d119      	bne.n	8001044 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	0c12      	lsrs	r2, r2, #16
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	4610      	mov	r0, r2
 800101c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	0a12      	lsrs	r2, r2, #8
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	4610      	mov	r0, r2
 800102a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <WIZCHIP_WRITE+0x98>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	4610      	mov	r0, r2
 8001036:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <WIZCHIP_WRITE+0x98>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	4610      	mov	r0, r2
 8001040:	4798      	blx	r3
 8001042:	e013      	b.n	800106c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	b2db      	uxtb	r3, r3
 800104a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b2db      	uxtb	r3, r3
 8001052:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f107 020c 	add.w	r2, r7, #12
 8001066:	2104      	movs	r1, #4
 8001068:	4610      	mov	r0, r2
 800106a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <WIZCHIP_WRITE+0x98>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001072:	4b03      	ldr	r3, [pc, #12]	; (8001080 <WIZCHIP_WRITE+0x98>)
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	4798      	blx	r3
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000004 	.word	0x24000004

08001084 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <WIZCHIP_READ_BUF+0x2a>
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d126      	bne.n	80010fc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	0c12      	lsrs	r2, r2, #16
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	4610      	mov	r0, r2
 80010ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	0a12      	lsrs	r2, r2, #8
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	4610      	mov	r0, r2
 80010c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	4610      	mov	r0, r2
 80010d4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	82fb      	strh	r3, [r7, #22]
 80010da:	e00a      	b.n	80010f2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	8afa      	ldrh	r2, [r7, #22]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	188c      	adds	r4, r1, r2
 80010e6:	4798      	blx	r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	3301      	adds	r3, #1
 80010f0:	82fb      	strh	r3, [r7, #22]
 80010f2:	8afa      	ldrh	r2, [r7, #22]
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3f0      	bcc.n	80010dc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010fa:	e017      	b.n	800112c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	0c1b      	lsrs	r3, r3, #16
 8001100:	b2db      	uxtb	r3, r3
 8001102:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b2db      	uxtb	r3, r3
 800110a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	f107 0210 	add.w	r2, r7, #16
 800111a:	2103      	movs	r1, #3
 800111c:	4610      	mov	r0, r2
 800111e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	4611      	mov	r1, r2
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <WIZCHIP_READ_BUF+0xbc>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4798      	blx	r3
}
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	24000004 	.word	0x24000004

08001144 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	2b00      	cmp	r3, #0
 800116c:	d126      	bne.n	80011bc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	0c12      	lsrs	r2, r2, #16
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	4610      	mov	r0, r2
 800117a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	0a12      	lsrs	r2, r2, #8
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	4610      	mov	r0, r2
 8001188:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	4610      	mov	r0, r2
 8001194:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001196:	2300      	movs	r3, #0
 8001198:	82fb      	strh	r3, [r7, #22]
 800119a:	e00a      	b.n	80011b2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	8afa      	ldrh	r2, [r7, #22]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	440a      	add	r2, r1
 80011a6:	7812      	ldrb	r2, [r2, #0]
 80011a8:	4610      	mov	r0, r2
 80011aa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	3301      	adds	r3, #1
 80011b0:	82fb      	strh	r3, [r7, #22]
 80011b2:	8afa      	ldrh	r2, [r7, #22]
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3f0      	bcc.n	800119c <WIZCHIP_WRITE_BUF+0x58>
 80011ba:	e017      	b.n	80011ec <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	0c1b      	lsrs	r3, r3, #16
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	0a1b      	lsrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	2103      	movs	r1, #3
 80011dc:	4610      	mov	r0, r2
 80011de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	4611      	mov	r1, r2
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <WIZCHIP_WRITE_BUF+0xbc>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	24000004 	.word	0x24000004

08001204 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800120e:	2300      	movs	r3, #0
 8001210:	81fb      	strh	r3, [r7, #14]
 8001212:	2300      	movs	r3, #0
 8001214:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	3301      	adds	r3, #1
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe94 	bl	8000f50 <WIZCHIP_READ>
 8001228:	4603      	mov	r3, r0
 800122a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800122c:	89bb      	ldrh	r3, [r7, #12]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b29c      	uxth	r4, r3
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3301      	adds	r3, #1
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fe86 	bl	8000f50 <WIZCHIP_READ>
 8001244:	4603      	mov	r3, r0
 8001246:	b29b      	uxth	r3, r3
 8001248:	4423      	add	r3, r4
 800124a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01a      	beq.n	8001288 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	3301      	adds	r3, #1
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe76 	bl	8000f50 <WIZCHIP_READ>
 8001264:	4603      	mov	r3, r0
 8001266:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b29c      	uxth	r4, r3
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	3301      	adds	r3, #1
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe68 	bl	8000f50 <WIZCHIP_READ>
 8001280:	4603      	mov	r3, r0
 8001282:	b29b      	uxth	r3, r3
 8001284:	4423      	add	r3, r4
 8001286:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	89bb      	ldrh	r3, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d1c2      	bne.n	8001216 <getSn_TX_FSR+0x12>
   return val;
 8001290:	89fb      	ldrh	r3, [r7, #14]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bd90      	pop	{r4, r7, pc}

0800129a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3301      	adds	r3, #1
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe49 	bl	8000f50 <WIZCHIP_READ>
 80012be:	4603      	mov	r3, r0
 80012c0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b29c      	uxth	r4, r3
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	3301      	adds	r3, #1
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe3b 	bl	8000f50 <WIZCHIP_READ>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4423      	add	r3, r4
 80012e0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01a      	beq.n	800131e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3301      	adds	r3, #1
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe2b 	bl	8000f50 <WIZCHIP_READ>
 80012fa:	4603      	mov	r3, r0
 80012fc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b29c      	uxth	r4, r3
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3301      	adds	r3, #1
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe1d 	bl	8000f50 <WIZCHIP_READ>
 8001316:	4603      	mov	r3, r0
 8001318:	b29b      	uxth	r3, r3
 800131a:	4423      	add	r3, r4
 800131c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800131e:	89fa      	ldrh	r2, [r7, #14]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d1c2      	bne.n	80012ac <getSn_RX_RSR+0x12>
   return val;
 8001326:	89fb      	ldrh	r3, [r7, #14]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}

08001330 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d048      	beq.n	80013e0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3301      	adds	r3, #1
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fdf8 	bl	8000f50 <WIZCHIP_READ>
 8001360:	4603      	mov	r3, r0
 8001362:	b29b      	uxth	r3, r3
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b29c      	uxth	r4, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	3301      	adds	r3, #1
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fdeb 	bl	8000f50 <WIZCHIP_READ>
 800137a:	4603      	mov	r3, r0
 800137c:	b29b      	uxth	r3, r3
 800137e:	4423      	add	r3, r4
 8001380:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	3202      	adds	r2, #2
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	4413      	add	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001392:	88bb      	ldrh	r3, [r7, #4]
 8001394:	461a      	mov	r2, r3
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff fed3 	bl	8001144 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3301      	adds	r3, #1
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80013b2:	461a      	mov	r2, r3
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f7ff fe12 	bl	8000fe8 <WIZCHIP_WRITE>
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	3301      	adds	r3, #1
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80013d0:	461a      	mov	r2, r3
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff fe05 	bl	8000fe8 <WIZCHIP_WRITE>
 80013de:	e000      	b.n	80013e2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80013e0:	bf00      	nop
}
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd90      	pop	{r4, r7, pc}

080013e8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	4613      	mov	r3, r2
 80013f6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d048      	beq.n	8001498 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	3301      	adds	r3, #1
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd9c 	bl	8000f50 <WIZCHIP_READ>
 8001418:	4603      	mov	r3, r0
 800141a:	b29b      	uxth	r3, r3
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b29c      	uxth	r4, r3
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	3301      	adds	r3, #1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd8f 	bl	8000f50 <WIZCHIP_READ>
 8001432:	4603      	mov	r3, r0
 8001434:	b29b      	uxth	r3, r3
 8001436:	4423      	add	r3, r4
 8001438:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	3203      	adds	r2, #3
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	4413      	add	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	461a      	mov	r2, r3
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f7ff fe17 	bl	8001084 <WIZCHIP_READ_BUF>
   ptr += len;
 8001456:	89fa      	ldrh	r2, [r7, #14]
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	3301      	adds	r3, #1
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800146a:	461a      	mov	r2, r3
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f7ff fdb6 	bl	8000fe8 <WIZCHIP_WRITE>
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	3301      	adds	r3, #1
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001488:	461a      	mov	r2, r3
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f7ff fda9 	bl	8000fe8 <WIZCHIP_WRITE>
 8001496:	e000      	b.n	800149a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001498:	bf00      	nop
}
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}

080014a0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	3301      	adds	r3, #1
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd45 	bl	8000f50 <WIZCHIP_READ>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b29c      	uxth	r4, r3
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3301      	adds	r3, #1
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd38 	bl	8000f50 <WIZCHIP_READ>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4423      	add	r3, r4
 80014e6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80014e8:	89fa      	ldrh	r2, [r7, #14]
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	3301      	adds	r3, #1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80014fc:	461a      	mov	r2, r3
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff fd6d 	bl	8000fe8 <WIZCHIP_WRITE>
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	3301      	adds	r3, #1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800151a:	461a      	mov	r2, r3
 800151c:	89fb      	ldrh	r3, [r7, #14]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7ff fd60 	bl	8000fe8 <WIZCHIP_WRITE>
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}

08001530 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {__set_PRIMASK(1);}
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	2301      	movs	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f383 8810 	msr	PRIMASK, r3
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {__set_PRIMASK(0);}
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f383 8810 	msr	PRIMASK, r3
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);}
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <wizchip_cs_select+0x14>)
 8001578:	f001 fbde 	bl	8002d38 <HAL_GPIO_WritePin>
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	58020c00 	.word	0x58020c00

08001584 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);}
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <wizchip_cs_deselect+0x14>)
 8001590:	f001 fbd2 	bl	8002d38 <HAL_GPIO_WritePin>
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58020c00 	.word	0x58020c00

0800159c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <wizchip_spi_readbyte>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (HAL_SPI_Receive(&hspi1, &value, 1, 1000) != HAL_OK) {
 80015da:	1df9      	adds	r1, r7, #7
 80015dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e0:	2201      	movs	r2, #1
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <wizchip_spi_readbyte+0x28>)
 80015e4:	f004 fcfe 	bl	8005fe4 <HAL_SPI_Receive>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <wizchip_spi_readbyte+0x1e>
		value = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	71fb      	strb	r3, [r7, #7]
	}

	return value;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	240000a8 	.word	0x240000a8

08001600 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &wb, 1, 1000);//SPI单字节写
 800160a:	1df9      	adds	r1, r7, #7
 800160c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001610:	2201      	movs	r2, #1
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <wizchip_spi_writebyte+0x20>)
 8001614:	f004 faea 	bl	8005bec <HAL_SPI_Transmit>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	240000a8 	.word	0x240000a8

08001624 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
	if (!pBuf) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <wizchip_spi_readburst+0x22>
		return;
	}

	HAL_SPI_Receive(&hspi1, pBuf, len, 1000);//SPI多字节读
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <wizchip_spi_readburst+0x2c>)
 8001640:	f004 fcd0 	bl	8005fe4 <HAL_SPI_Receive>
 8001644:	e000      	b.n	8001648 <wizchip_spi_readburst+0x24>
		return;
 8001646:	bf00      	nop
}
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	240000a8 	.word	0x240000a8

08001654 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
    if (!pBuf) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <wizchip_spi_writeburst+0x22>
        return;
    }

    HAL_SPI_Transmit(&hspi1, pBuf, len, 1000);//SPI多字节写
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <wizchip_spi_writeburst+0x2c>)
 8001670:	f004 fabc 	bl	8005bec <HAL_SPI_Transmit>
 8001674:	e000      	b.n	8001678 <wizchip_spi_writeburst+0x24>
        return;
 8001676:	bf00      	nop
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	240000a8 	.word	0x240000a8

08001684 <w5500_regFunc>:

    }
};

void w5500_regFunc(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	reg_wizchip_cris_cbfunc(wizchip_cris_enter, wizchip_cris_exit);
 8001688:	4908      	ldr	r1, [pc, #32]	; (80016ac <w5500_regFunc+0x28>)
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <w5500_regFunc+0x2c>)
 800168c:	f000 f81e 	bl	80016cc <reg_wizchip_cris_cbfunc>
	reg_wizchip_cs_cbfunc(wizchip_cs_select, wizchip_cs_deselect);
 8001690:	4908      	ldr	r1, [pc, #32]	; (80016b4 <w5500_regFunc+0x30>)
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <w5500_regFunc+0x34>)
 8001694:	f000 f840 	bl	8001718 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_spi_readbyte, wizchip_spi_writebyte);
 8001698:	4908      	ldr	r1, [pc, #32]	; (80016bc <w5500_regFunc+0x38>)
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <w5500_regFunc+0x3c>)
 800169c:	f000 f862 	bl	8001764 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_spi_readburst, wizchip_spi_writeburst);
 80016a0:	4908      	ldr	r1, [pc, #32]	; (80016c4 <w5500_regFunc+0x40>)
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <w5500_regFunc+0x44>)
 80016a4:	f000 f88a 	bl	80017bc <reg_wizchip_spiburst_cbfunc>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	0800154f 	.word	0x0800154f
 80016b0:	08001531 	.word	0x08001531
 80016b4:	08001585 	.word	0x08001585
 80016b8:	0800156d 	.word	0x0800156d
 80016bc:	08001601 	.word	0x08001601
 80016c0:	080015d5 	.word	0x080015d5
 80016c4:	08001655 	.word	0x08001655
 80016c8:	08001625 	.word	0x08001625

080016cc <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <reg_wizchip_cris_cbfunc+0x16>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <reg_wizchip_cris_cbfunc+0x40>)
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <reg_wizchip_cris_cbfunc+0x44>)
 80016e6:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <reg_wizchip_cris_cbfunc+0x40>)
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <reg_wizchip_cris_cbfunc+0x48>)
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	e006      	b.n	80016fe <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <reg_wizchip_cris_cbfunc+0x40>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <reg_wizchip_cris_cbfunc+0x40>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6113      	str	r3, [r2, #16]
   }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	24000004 	.word	0x24000004
 8001710:	08001531 	.word	0x08001531
 8001714:	0800154f 	.word	0x0800154f

08001718 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <reg_wizchip_cs_cbfunc+0x16>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <reg_wizchip_cs_cbfunc+0x40>)
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <reg_wizchip_cs_cbfunc+0x44>)
 8001732:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <reg_wizchip_cs_cbfunc+0x40>)
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <reg_wizchip_cs_cbfunc+0x48>)
 8001738:	619a      	str	r2, [r3, #24]
 800173a:	e006      	b.n	800174a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <reg_wizchip_cs_cbfunc+0x40>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <reg_wizchip_cs_cbfunc+0x40>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6193      	str	r3, [r2, #24]
   }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	24000004 	.word	0x24000004
 800175c:	0800156d 	.word	0x0800156d
 8001760:	08001585 	.word	0x08001585

08001764 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800176e:	bf00      	nop
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f9      	beq.n	8001770 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <reg_wizchip_spi_cbfunc+0x24>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <reg_wizchip_spi_cbfunc+0x50>)
 800178c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <reg_wizchip_spi_cbfunc+0x54>)
 8001792:	621a      	str	r2, [r3, #32]
 8001794:	e006      	b.n	80017a4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001796:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6213      	str	r3, [r2, #32]
   }
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	24000004 	.word	0x24000004
 80017b4:	080015d5 	.word	0x080015d5
 80017b8:	08001601 	.word	0x08001601

080017bc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80017c6:	bf00      	nop
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f9      	beq.n	80017c8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <reg_wizchip_spiburst_cbfunc+0x24>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <reg_wizchip_spiburst_cbfunc+0x50>)
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017e8:	4a09      	ldr	r2, [pc, #36]	; (8001810 <reg_wizchip_spiburst_cbfunc+0x54>)
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
 80017ec:	e006      	b.n	80017fc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	24000004 	.word	0x24000004
 800180c:	08001625 	.word	0x08001625
 8001810:	08001655 	.word	0x08001655

08001814 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2206      	movs	r2, #6
 800181e:	4619      	mov	r1, r3
 8001820:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001824:	f7ff fc2e 	bl	8001084 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2204      	movs	r2, #4
 800182e:	4619      	mov	r1, r3
 8001830:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001834:	f7ff fc26 	bl	8001084 <WIZCHIP_READ_BUF>
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2204      	movs	r2, #4
 800183e:	4619      	mov	r1, r3
 8001840:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001844:	f7ff fc1e 	bl	8001084 <WIZCHIP_READ_BUF>
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2204      	movs	r2, #4
 800184e:	4619      	mov	r1, r3
 8001850:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001854:	f7ff fc16 	bl	8001084 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fbc4 	bl	8000fe8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fb75 	bl	8000f50 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2206      	movs	r2, #6
 800186a:	4619      	mov	r1, r3
 800186c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001870:	f7ff fc68 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2204      	movs	r2, #4
 800187a:	4619      	mov	r1, r3
 800187c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001880:	f7ff fc60 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001890:	f7ff fc58 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2204      	movs	r2, #4
 800189a:	4619      	mov	r1, r3
 800189c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80018a0:	f7ff fc50 	bl	8001144 <WIZCHIP_WRITE_BUF>
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80018ba:	f7ff ffab 	bl	8001814 <wizchip_sw_reset>
   if(txsize)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d03b      	beq.n	800193c <wizchip_init+0x90>
   {
      tmp = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e015      	b.n	80018fa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	4413      	add	r3, r2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80018e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	dd02      	ble.n	80018ee <wizchip_init+0x42>
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	e066      	b.n	80019bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	dde5      	ble.n	80018ce <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e015      	b.n	8001934 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3301      	adds	r3, #1
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001916:	4618      	mov	r0, r3
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff fb60 	bl	8000fe8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	2b07      	cmp	r3, #7
 800193a:	dde5      	ble.n	8001908 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03b      	beq.n	80019ba <wizchip_init+0x10e>
   {
      tmp = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001946:	2300      	movs	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e015      	b.n	8001978 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	4413      	add	r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800195e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001962:	2b10      	cmp	r3, #16
 8001964:	dd02      	ble.n	800196c <wizchip_init+0xc0>
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	e027      	b.n	80019bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800196c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	2b07      	cmp	r3, #7
 800197e:	dde5      	ble.n	800194c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e015      	b.n	80019b2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	3301      	adds	r3, #1
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001994:	4618      	mov	r0, r3
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff fb21 	bl	8000fe8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	2b07      	cmp	r3, #7
 80019b8:	dde5      	ble.n	8001986 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80019ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019ce:	f7ff fabf 	bl	8000f50 <WIZCHIP_READ>
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019dc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019e6:	f7ff faff 	bl	8000fe8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80019ea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80019ee:	f7ff faaf 	bl	8000f50 <WIZCHIP_READ>
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a06:	f7ff faef 	bl	8000fe8 <WIZCHIP_WRITE>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d104      	bne.n	8001a30 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e003      	b.n	8001a38 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a36:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d104      	bne.n	8001a4a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e019      	b.n	8001a7e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	78db      	ldrb	r3, [r3, #3]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10d      	bne.n	8001a6e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	789b      	ldrb	r3, [r3, #2]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d104      	bne.n	8001a64 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f043 0318 	orr.w	r3, r3, #24
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e00c      	b.n	8001a7e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e007      	b.n	8001a7e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d103      	bne.n	8001a7e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a86:	f7ff faaf 	bl	8000fe8 <WIZCHIP_WRITE>
   wizphy_reset();
 8001a8a:	f7ff ff9b 	bl	80019c4 <wizphy_reset>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2206      	movs	r2, #6
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001aaa:	f7ff fb4b 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	330e      	adds	r3, #14
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aba:	f7ff fb43 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	330a      	adds	r3, #10
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001aca:	f7ff fb3b 	bl	8001144 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3306      	adds	r3, #6
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001ada:	f7ff fb33 	bl	8001144 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7c9a      	ldrb	r2, [r3, #18]
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <wizchip_setnetinfo+0x78>)
 8001ae4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7cda      	ldrb	r2, [r3, #19]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <wizchip_setnetinfo+0x78>)
 8001aec:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7d1a      	ldrb	r2, [r3, #20]
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <wizchip_setnetinfo+0x78>)
 8001af4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7d5a      	ldrb	r2, [r3, #21]
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <wizchip_setnetinfo+0x78>)
 8001afc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7d9a      	ldrb	r2, [r3, #22]
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <wizchip_setnetinfo+0x7c>)
 8001b04:	701a      	strb	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	24000078 	.word	0x24000078
 8001b14:	2400007c 	.word	0x2400007c

08001b18 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2206      	movs	r2, #6
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001b2a:	f7ff faab 	bl	8001084 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	330e      	adds	r3, #14
 8001b32:	2204      	movs	r2, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b3a:	f7ff faa3 	bl	8001084 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	330a      	adds	r3, #10
 8001b42:	2204      	movs	r2, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001b4a:	f7ff fa9b 	bl	8001084 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3306      	adds	r3, #6
 8001b52:	2204      	movs	r2, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b5a:	f7ff fa93 	bl	8001084 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <wizchip_getnetinfo+0x78>)
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <wizchip_getnetinfo+0x78>)
 8001b68:	785a      	ldrb	r2, [r3, #1]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <wizchip_getnetinfo+0x78>)
 8001b70:	789a      	ldrb	r2, [r3, #2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <wizchip_getnetinfo+0x78>)
 8001b78:	78da      	ldrb	r2, [r3, #3]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <wizchip_getnetinfo+0x7c>)
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	759a      	strb	r2, [r3, #22]
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24000078 	.word	0x24000078
 8001b94:	2400007c 	.word	0x2400007c

08001b98 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
 8001bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bd2:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bf0:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bf2:	f043 0308 	orr.w	r3, r3, #8
 8001bf6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <MX_GPIO_Init+0xf8>)
 8001bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0e:	4821      	ldr	r0, [pc, #132]	; (8001c94 <MX_GPIO_Init+0xfc>)
 8001c10:	f001 f892 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	481f      	ldr	r0, [pc, #124]	; (8001c98 <MX_GPIO_Init+0x100>)
 8001c1c:	f001 f88c 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8001c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	4816      	ldr	r0, [pc, #88]	; (8001c94 <MX_GPIO_Init+0xfc>)
 8001c3a:	f000 fecd 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8001c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	4810      	ldr	r0, [pc, #64]	; (8001c98 <MX_GPIO_Init+0x100>)
 8001c58:	f000 febe 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 8001c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_GPIO_Init+0x100>)
 8001c74:	f000 feb0 	bl	80029d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2017      	movs	r0, #23
 8001c7e:	f000 fe76 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c82:	2017      	movs	r0, #23
 8001c84:	f000 fe8d 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 8001c88:	bf00      	nop
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020c00 	.word	0x58020c00
 8001c98:	58020400 	.word	0x58020400

08001c9c <w5500_hard_rst>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void w5500_hard_rst(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <w5500_hard_rst+0x2c>)
 8001ca8:	f001 f846 	bl	8002d38 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001cac:	2032      	movs	r0, #50	; 0x32
 8001cae:	f000 fd5f 	bl	8002770 <HAL_Delay>
	HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <w5500_hard_rst+0x2c>)
 8001cba:	f001 f83d 	bl	8002d38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f000 fd56 	bl	8002770 <HAL_Delay>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58020400 	.word	0x58020400

08001ccc <w5500_chip_init>:


static int w5500_chip_init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <w5500_chip_init+0x28>)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cda:	e883 0003 	stmia.w	r3, {r0, r1}
	return wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001cde:	463a      	mov	r2, r7
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fde1 	bl	80018ac <wizchip_init>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	08007d30 	.word	0x08007d30

08001cf8 <w5500_phy_init>:

static void w5500_phy_init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
    wiz_PhyConf conf;

    conf.by = PHY_CONFBY_SW;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	713b      	strb	r3, [r7, #4]
    conf.mode = PHY_MODE_MANUAL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	717b      	strb	r3, [r7, #5]
    conf.speed = PHY_SPEED_10;
 8001d06:	2300      	movs	r3, #0
 8001d08:	71bb      	strb	r3, [r7, #6]
    conf.duplex = PHY_DUPLEX_FULL;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	71fb      	strb	r3, [r7, #7]
    wizphy_setphyconf(&conf);
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe7e 	bl	8001a12 <wizphy_setphyconf>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <w5500_network_init>:

static void w5500_network_init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
    wiz_NetInfo info;

    uint8_t mac[6] = {0x00,0x08,0xdc,0x78,0x00,0x02};
 8001d26:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <w5500_network_init+0x6c>)
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d30:	6018      	str	r0, [r3, #0]
 8001d32:	3304      	adds	r3, #4
 8001d34:	8019      	strh	r1, [r3, #0]
    uint8_t ip[4] = {192,168,1,199};
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <w5500_network_init+0x70>)
 8001d38:	60fb      	str	r3, [r7, #12]
    uint8_t sn[4] = {255,255,255,0};
 8001d3a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001d3e:	60bb      	str	r3, [r7, #8]
    uint8_t gw[4] = {192,168,1,1};
 8001d40:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <w5500_network_init+0x74>)
 8001d42:	607b      	str	r3, [r7, #4]
    uint8_t dns[4] = {0,0,0,0};
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]

    memcpy(info.mac, mac, 6);
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	f107 0210 	add.w	r2, r7, #16
 8001d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d54:	6018      	str	r0, [r3, #0]
 8001d56:	3304      	adds	r3, #4
 8001d58:	8019      	strh	r1, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    memcpy(info.ip, ip, 4);
 8001d5c:	f8c7 301e 	str.w	r3, [r7, #30]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    memcpy(info.sn, sn, 4);
 8001d62:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
 8001d66:	687b      	ldr	r3, [r7, #4]
    memcpy(info.gw, gw, 4);
 8001d68:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
 8001d6c:	683b      	ldr	r3, [r7, #0]
    memcpy(info.dns, dns, 4);
 8001d6e:	f8c7 302a 	str.w	r3, [r7, #42]	; 0x2a

    info.dhcp = NETINFO_STATIC;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e


    wizchip_setnetinfo(&info);
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fe8b 	bl	8001a98 <wizchip_setnetinfo>
}
 8001d82:	bf00      	nop
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08007d38 	.word	0x08007d38
 8001d90:	c701a8c0 	.word	0xc701a8c0
 8001d94:	0101a8c0 	.word	0x0101a8c0

08001d98 <w5500_init>:

void w5500_init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
	w5500_hard_rst();//硬件复位W5500
 8001d9e:	f7ff ff7d 	bl	8001c9c <w5500_hard_rst>
	w5500_regFunc();//绑定SPI函数
 8001da2:	f7ff fc6f 	bl	8001684 <w5500_regFunc>
	if(w5500_chip_init()!=0)//芯片初始�??????
 8001da6:	f7ff ff91 	bl	8001ccc <w5500_chip_init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d000      	beq.n	8001db2 <w5500_init+0x1a>
	{
		while(1);
 8001db0:	e7fe      	b.n	8001db0 <w5500_init+0x18>
	}
	w5500_phy_init();//物理层初始化
 8001db2:	f7ff ffa1 	bl	8001cf8 <w5500_phy_init>
	w5500_network_init();//网络初始�??????
 8001db6:	f7ff ffb3 	bl	8001d20 <w5500_network_init>

    wiz_NetInfo info;

    wizchip_getnetinfo(&info);//信息回读
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff feab 	bl	8001b18 <wizchip_getnetinfo>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <uart_printf>:

void uart_printf(char * msg)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fa89 	bl	80002ec <strlen>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <uart_printf+0x28>)
 8001de6:	f004 fd45 	bl	8006874 <HAL_UART_Transmit>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2400017c 	.word	0x2400017c

08001df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af02      	add	r7, sp, #8
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <main+0x1d0>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11b      	bne.n	8001e42 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e0a:	f3bf 8f4f 	dsb	sy
}
 8001e0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e10:	f3bf 8f6f 	isb	sy
}
 8001e14:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e16:	4b6c      	ldr	r3, [pc, #432]	; (8001fc8 <main+0x1d0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1e:	f3bf 8f4f 	dsb	sy
}
 8001e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e24:	f3bf 8f6f 	isb	sy
}
 8001e28:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <main+0x1d0>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4a66      	ldr	r2, [pc, #408]	; (8001fc8 <main+0x1d0>)
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e36:	f3bf 8f4f 	dsb	sy
}
 8001e3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e3c:	f3bf 8f6f 	isb	sy
}
 8001e40:	e000      	b.n	8001e44 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e42:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <main+0x1d0>)
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d138      	bne.n	8001ec2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e50:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <main+0x1d0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e58:	f3bf 8f4f 	dsb	sy
}
 8001e5c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <main+0x1d0>)
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	623b      	str	r3, [r7, #32]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	0b5b      	lsrs	r3, r3, #13
 8001e6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e6e:	61fb      	str	r3, [r7, #28]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	08db      	lsrs	r3, r3, #3
 8001e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e78:	61bb      	str	r3, [r7, #24]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001e82:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e88:	494f      	ldr	r1, [pc, #316]	; (8001fc8 <main+0x1d0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	61ba      	str	r2, [r7, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ef      	bne.n	8001e7a <main+0x82>
    } while(sets-- != 0U);
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	61fa      	str	r2, [r7, #28]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e5      	bne.n	8001e70 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea4:	f3bf 8f4f 	dsb	sy
}
 8001ea8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <main+0x1d0>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4a46      	ldr	r2, [pc, #280]	; (8001fc8 <main+0x1d0>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb6:	f3bf 8f4f 	dsb	sy
}
 8001eba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ebc:	f3bf 8f6f 	isb	sy
}
 8001ec0:	e000      	b.n	8001ec4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ec2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f000 fbc2 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f88a 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ecc:	f7ff fe64 	bl	8001b98 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001ed0:	f000 f902 	bl	80020d8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8001ed4:	f000 fa82 	bl	80023dc <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001ed8:	f000 fad8 	bl	800248c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  w5500_init();
 8001edc:	f7ff ff5c 	bl	8001d98 <w5500_init>
  uart_printf("init finished");
 8001ee0:	483a      	ldr	r0, [pc, #232]	; (8001fcc <main+0x1d4>)
 8001ee2:	f7ff ff73 	bl	8001dcc <uart_printf>
	uint8_t remote_ip[4]={192,168,1,101};
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <main+0x1d8>)
 8001ee8:	617b      	str	r3, [r7, #20]
	uint16_t remote_port=6000;
 8001eea:	f241 7370 	movw	r3, #6000	; 0x1770
 8001eee:	827b      	strh	r3, [r7, #18]
	uint16_t local_port=5000;
 8001ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ef4:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint16_t len=0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t buffff[]="Tx Via UDP0";
 8001efa:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <main+0x1dc>)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  socket(0, Sn_MR_UDP, local_port, 0);//设置Socket0
 8001f04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f06:	2300      	movs	r3, #0
 8001f08:	2102      	movs	r1, #2
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7fe fb78 	bl	8000600 <socket>
	  sendto(0, buffff, sizeof(buffff), remote_ip, remote_port);//Socket0发�??
 8001f10:	8a7b      	ldrh	r3, [r7, #18]
 8001f12:	f107 0214 	add.w	r2, r7, #20
 8001f16:	1d39      	adds	r1, r7, #4
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7fe fcf2 	bl	8000908 <sendto>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sendto(0, buffff, sizeof(buffff), remote_ip, remote_port);//Socket0发�??
 8001f24:	8a7b      	ldrh	r3, [r7, #18]
 8001f26:	f107 0214 	add.w	r2, r7, #20
 8001f2a:	1d39      	adds	r1, r7, #4
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	220c      	movs	r2, #12
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7fe fce8 	bl	8000908 <sendto>
	  HAL_Delay(500);
 8001f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f3c:	f000 fc18 	bl	8002770 <HAL_Delay>
	  switch(getSn_SR(0))
 8001f40:	f44f 7042 	mov.w	r0, #776	; 0x308
 8001f44:	f7ff f804 	bl	8000f50 <WIZCHIP_READ>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b22      	cmp	r3, #34	; 0x22
 8001f4c:	d1ea      	bne.n	8001f24 <main+0x12c>
	  {
		  case SOCK_UDP:
		  {

				if(getSn_IR(0) & Sn_IR_RECV)
 8001f4e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001f52:	f7fe fffd 	bl	8000f50 <WIZCHIP_READ>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <main+0x172>
				{
					setSn_IR(0, Sn_IR_RECV);
 8001f60:	2104      	movs	r1, #4
 8001f62:	f44f 7002 	mov.w	r0, #520	; 0x208
 8001f66:	f7ff f83f 	bl	8000fe8 <WIZCHIP_WRITE>
				}
				if((len=getSn_RX_RSR(0))>0)//收到了UDP数据
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff f995 	bl	800129a <getSn_RX_RSR>
 8001f70:	4603      	mov	r3, r0
 8001f72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0d4      	beq.n	8001f24 <main+0x12c>
				{
					memset(rxBuf,0,sizeof(rxBuf));
 8001f7a:	2214      	movs	r2, #20
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <main+0x1e0>)
 8001f80:	f005 fec2 	bl	8007d08 <memset>
					len = recvfrom(0,rxBuf, len, remote_ip,&remote_port);//数据回收
 8001f84:	f107 0114 	add.w	r1, r7, #20
 8001f88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f8a:	f107 0312 	add.w	r3, r7, #18
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	460b      	mov	r3, r1
 8001f92:	4911      	ldr	r1, [pc, #68]	; (8001fd8 <main+0x1e0>)
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7fe fded 	bl	8000b74 <recvfrom>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
					if(remote_port==6000)//如果来自6000
 8001f9e:	8a7b      	ldrh	r3, [r7, #18]
 8001fa0:	f241 7270 	movw	r2, #6000	; 0x1770
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d1bd      	bne.n	8001f24 <main+0x12c>
					{
						memset(rxBuf1,0,sizeof(rxBuf1));
 8001fa8:	2214      	movs	r2, #20
 8001faa:	2100      	movs	r1, #0
 8001fac:	480b      	ldr	r0, [pc, #44]	; (8001fdc <main+0x1e4>)
 8001fae:	f005 feab 	bl	8007d08 <memset>
						memcpy(rxBuf1,rxBuf,len);
 8001fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <main+0x1e0>)
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <main+0x1e4>)
 8001fba:	f005 fe97 	bl	8007cec <memcpy>
						uart_printf((char *)rxBuf1);
 8001fbe:	4807      	ldr	r0, [pc, #28]	; (8001fdc <main+0x1e4>)
 8001fc0:	f7ff ff04 	bl	8001dcc <uart_printf>
	  sendto(0, buffff, sizeof(buffff), remote_ip, remote_port);//Socket0发�??
 8001fc4:	e7ae      	b.n	8001f24 <main+0x12c>
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	08007d40 	.word	0x08007d40
 8001fd0:	6501a8c0 	.word	0x6501a8c0
 8001fd4:	08007d50 	.word	0x08007d50
 8001fd8:	24000080 	.word	0x24000080
 8001fdc:	24000094 	.word	0x24000094

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09c      	sub	sp, #112	; 0x70
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	224c      	movs	r2, #76	; 0x4c
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 fe8a 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f005 fe84 	bl	8007d08 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <SystemClock_Config+0xe4>)
 8002002:	f04f 32ff 	mov.w	r2, #4294967295
 8002006:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800200a:	2004      	movs	r0, #4
 800200c:	f000 fed2 	bl	8002db4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002010:	2300      	movs	r3, #0
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <SystemClock_Config+0xe8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <SystemClock_Config+0xe8>)
 800201a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <SystemClock_Config+0xe8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800202c:	bf00      	nop
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <SystemClock_Config+0xe8>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203a:	d1f8      	bne.n	800202e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800203c:	2302      	movs	r3, #2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002040:	2301      	movs	r3, #1
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002044:	2340      	movs	r3, #64	; 0x40
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002048:	2302      	movs	r3, #2
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800204c:	2300      	movs	r3, #0
 800204e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002050:	2304      	movs	r3, #4
 8002052:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002054:	2320      	movs	r3, #32
 8002056:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800205c:	2302      	movs	r3, #2
 800205e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002060:	2302      	movs	r3, #2
 8002062:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002064:	230c      	movs	r3, #12
 8002066:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002068:	2300      	movs	r3, #0
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fef7 	bl	8002e68 <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002080:	f000 f824 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	233f      	movs	r3, #63	; 0x3f
 8002086:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002088:	2303      	movs	r3, #3
 800208a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002090:	2308      	movs	r3, #8
 8002092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002094:	2340      	movs	r3, #64	; 0x40
 8002096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002098:	2340      	movs	r3, #64	; 0x40
 800209a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800209c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020a2:	2340      	movs	r3, #64	; 0x40
 80020a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2103      	movs	r1, #3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fb0e 	bl	80036cc <HAL_RCC_ClockConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0xda>
  {
    Error_Handler();
 80020b6:	f000 f809 	bl	80020cc <Error_Handler>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3770      	adds	r7, #112	; 0x70
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58024800 	.word	0x58024800

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <MX_SPI1_Init+0xa4>)
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <MX_SPI1_Init+0xa8>)
 80020e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <MX_SPI1_Init+0xa4>)
 80020e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <MX_SPI1_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_SPI1_Init+0xa4>)
 80020f2:	2207      	movs	r2, #7
 80020f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_SPI1_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <MX_SPI1_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_SPI1_Init+0xa4>)
 8002104:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_SPI1_Init+0xa4>)
 800210c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002110:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_SPI1_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_SPI1_Init+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_SPI1_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_SPI1_Init+0xa4>)
 8002126:	2200      	movs	r2, #0
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_SPI1_Init+0xa4>)
 800212c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_SPI1_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <MX_SPI1_Init+0xa4>)
 800213a:	2200      	movs	r2, #0
 800213c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_SPI1_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <MX_SPI1_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_SPI1_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_SPI1_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <MX_SPI1_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <MX_SPI1_Init+0xa4>)
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_SPI1_Init+0xa4>)
 8002164:	2200      	movs	r2, #0
 8002166:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_SPI1_Init+0xa4>)
 800216a:	f003 fc1b 	bl	80059a4 <HAL_SPI_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002174:	f7ff ffaa 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	240000a8 	.word	0x240000a8
 8002180:	40013000 	.word	0x40013000

08002184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0ba      	sub	sp, #232	; 0xe8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	22c0      	movs	r2, #192	; 0xc0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f005 fdaf 	bl	8007d08 <memset>
  if(spiHandle->Instance==SPI1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_SPI_MspInit+0xc4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d144      	bne.n	800223e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fe0b 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021d4:	f7ff ff7a 	bl	80020cc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80021de:	4a1b      	ldr	r2, [pc, #108]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021e4:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021ea:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_SPI_MspInit+0xc8>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_SPI_MspInit+0xc8>)
 8002208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = W5500_CLK_Pin|W5500_SO_Pin|W5500_SI_Pin;
 8002214:	23e0      	movs	r3, #224	; 0xe0
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222c:	2305      	movs	r3, #5
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <HAL_SPI_MspInit+0xcc>)
 800223a:	f000 fbcd 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800223e:	bf00      	nop
 8002240:	37e8      	adds	r7, #232	; 0xe8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40013000 	.word	0x40013000
 800224c:	58024400 	.word	0x58024400
 8002250:	58020000 	.word	0x58020000

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_MspInit+0x30>)
 800225c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002260:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_MspInit+0x30>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_MspInit+0x30>)
 800226c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	58024400 	.word	0x58024400

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800228c:	e7fe      	b.n	800228c <NMI_Handler+0x4>

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f000 fa2c 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 80022e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022e4:	f000 fd41 	bl	8002d6a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022f0:	4b32      	ldr	r3, [pc, #200]	; (80023bc <SystemInit+0xd0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a31      	ldr	r2, [pc, #196]	; (80023bc <SystemInit+0xd0>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002300:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <SystemInit+0xd4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	2b02      	cmp	r3, #2
 800230a:	d807      	bhi.n	800231c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <SystemInit+0xd4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 030f 	bic.w	r3, r3, #15
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <SystemInit+0xd4>)
 8002316:	f043 0303 	orr.w	r3, r3, #3
 800231a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <SystemInit+0xd8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a28      	ldr	r2, [pc, #160]	; (80023c4 <SystemInit+0xd8>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <SystemInit+0xd8>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <SystemInit+0xd8>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4924      	ldr	r1, [pc, #144]	; (80023c4 <SystemInit+0xd8>)
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <SystemInit+0xdc>)
 8002336:	4013      	ands	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <SystemInit+0xd4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <SystemInit+0xd4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 030f 	bic.w	r3, r3, #15
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <SystemInit+0xd4>)
 8002350:	f043 0303 	orr.w	r3, r3, #3
 8002354:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <SystemInit+0xd8>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <SystemInit+0xd8>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <SystemInit+0xd8>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <SystemInit+0xd8>)
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <SystemInit+0xe0>)
 800236c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <SystemInit+0xd8>)
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <SystemInit+0xe4>)
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <SystemInit+0xd8>)
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <SystemInit+0xe8>)
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <SystemInit+0xd8>)
 800237c:	2200      	movs	r2, #0
 800237e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <SystemInit+0xd8>)
 8002382:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <SystemInit+0xe8>)
 8002384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0xd8>)
 8002388:	2200      	movs	r2, #0
 800238a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <SystemInit+0xd8>)
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <SystemInit+0xe8>)
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <SystemInit+0xd8>)
 8002394:	2200      	movs	r2, #0
 8002396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <SystemInit+0xd8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <SystemInit+0xd8>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <SystemInit+0xd8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <SystemInit+0xec>)
 80023ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	52002000 	.word	0x52002000
 80023c4:	58024400 	.word	0x58024400
 80023c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80023cc:	02020200 	.word	0x02020200
 80023d0:	01ff0000 	.word	0x01ff0000
 80023d4:	01010280 	.word	0x01010280
 80023d8:	52004000 	.word	0x52004000

080023dc <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_TIM7_Init+0x64>)
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <MX_TIM7_Init+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_TIM7_Init+0x64>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_TIM7_Init+0x64>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_TIM7_Init+0x64>)
 8002400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002404:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_TIM7_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800240c:	480c      	ldr	r0, [pc, #48]	; (8002440 <MX_TIM7_Init+0x64>)
 800240e:	f004 f862 	bl	80064d6 <HAL_TIM_Base_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002418:	f7ff fe58 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_TIM7_Init+0x64>)
 800242a:	f004 f945 	bl	80066b8 <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002434:	f7ff fe4a 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	24000130 	.word	0x24000130
 8002444:	40001400 	.word	0x40001400

08002448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_TIM_Base_MspInit+0x3c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_TIM_Base_MspInit+0x40>)
 800245c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002460:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_TIM_Base_MspInit+0x40>)
 8002462:	f043 0320 	orr.w	r3, r3, #32
 8002466:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_TIM_Base_MspInit+0x40>)
 800246c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40001400 	.word	0x40001400
 8002488:	58024400 	.word	0x58024400

0800248c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <MX_USART3_UART_Init+0x90>)
 8002492:	4a23      	ldr	r2, [pc, #140]	; (8002520 <MX_USART3_UART_Init+0x94>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002496:	4b21      	ldr	r3, [pc, #132]	; (800251c <MX_USART3_UART_Init+0x90>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024d6:	f004 f97d 	bl	80067d4 <HAL_UART_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80024e0:	f7ff fdf4 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e4:	2100      	movs	r1, #0
 80024e6:	480d      	ldr	r0, [pc, #52]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024e8:	f005 fb11 	bl	8007b0e <HAL_UARTEx_SetTxFifoThreshold>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80024f2:	f7ff fdeb 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f6:	2100      	movs	r1, #0
 80024f8:	4808      	ldr	r0, [pc, #32]	; (800251c <MX_USART3_UART_Init+0x90>)
 80024fa:	f005 fb46 	bl	8007b8a <HAL_UARTEx_SetRxFifoThreshold>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002504:	f7ff fde2 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <MX_USART3_UART_Init+0x90>)
 800250a:	f005 fac7 	bl	8007a9c <HAL_UARTEx_DisableFifoMode>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002514:	f7ff fdda 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2400017c 	.word	0x2400017c
 8002520:	40004800 	.word	0x40004800

08002524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0ba      	sub	sp, #232	; 0xe8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	22c0      	movs	r2, #192	; 0xc0
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f005 fbdf 	bl	8007d08 <memset>
  if(uartHandle->Instance==USART3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a27      	ldr	r2, [pc, #156]	; (80025ec <HAL_UART_MspInit+0xc8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d146      	bne.n	80025e2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002554:	f04f 0202 	mov.w	r2, #2
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fc3a 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002576:	f7ff fda9 	bl	80020cc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800257c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 8002582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002586:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800258c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 800259a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_UART_MspInit+0xcc>)
 80025aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d0:	2307      	movs	r3, #7
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025da:	4619      	mov	r1, r3
 80025dc:	4805      	ldr	r0, [pc, #20]	; (80025f4 <HAL_UART_MspInit+0xd0>)
 80025de:	f000 f9fb 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	37e8      	adds	r7, #232	; 0xe8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004800 	.word	0x40004800
 80025f0:	58024400 	.word	0x58024400
 80025f4:	58020400 	.word	0x58020400

080025f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025fc:	f7ff fe76 	bl	80022ec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	; (800263c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	; (8002644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002626:	f005 fb3d 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262a:	f7ff fbe5 	bl	8001df8 <main>
  bx  lr
 800262e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002630:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002634:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002638:	24000040 	.word	0x24000040
  ldr r2, =_sidata
 800263c:	08007da4 	.word	0x08007da4
  ldr r2, =_sbss
 8002640:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 8002644:	24000214 	.word	0x24000214

08002648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002652:	2003      	movs	r0, #3
 8002654:	f000 f980 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002658:	f001 f9ee 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_Init+0x68>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	4913      	ldr	r1, [pc, #76]	; (80026b8 <HAL_Init+0x6c>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_Init+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_Init+0x6c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_Init+0x70>)
 800268e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_Init+0x74>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f814 	bl	80026c4 <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e002      	b.n	80026ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a6:	f7ff fdd5 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08007d5c 	.word	0x08007d5c
 80026bc:	24000034 	.word	0x24000034
 80026c0:	24000030 	.word	0x24000030

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_InitTick+0x60>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e021      	b.n	800271c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_InitTick+0x64>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_InitTick+0x60>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f965 	bl	80029be <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f000 f92f 	bl	800296e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_InitTick+0x68>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2400003c 	.word	0x2400003c
 8002728:	24000030 	.word	0x24000030
 800272c:	24000038 	.word	0x24000038

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	2400003c 	.word	0x2400003c
 8002754:	24000210 	.word	0x24000210

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	24000210 	.word	0x24000210

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f7ff ffde 	bl	8002758 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2400003c 	.word	0x2400003c

080027b8 <__NVIC_SetPriorityGrouping>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <__NVIC_SetPriorityGrouping+0x40>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x40>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00
 80027fc:	05fa0000 	.word	0x05fa0000

08002800 <__NVIC_GetPriorityGrouping>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7ff ff8e 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff29 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff40 	bl	8002800 <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff90 	bl	80028ac <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5f 	bl	8002858 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff33 	bl	800281c <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa4 	bl	8002914 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029e6:	4b89      	ldr	r3, [pc, #548]	; (8002c0c <HAL_GPIO_Init+0x234>)
 80029e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029ea:	e194      	b.n	8002d16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8186 	beq.w	8002d10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d005      	beq.n	8002a1c <HAL_GPIO_Init+0x44>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d130      	bne.n	8002a7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a52:	2201      	movs	r2, #1
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0201 	and.w	r2, r3, #1
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d017      	beq.n	8002aba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d123      	bne.n	8002b0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	08da      	lsrs	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	69b9      	ldr	r1, [r7, #24]
 8002b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80e0 	beq.w	8002d10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_GPIO_Init+0x238>)
 8002b52:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b56:	4a2e      	ldr	r2, [pc, #184]	; (8002c10 <HAL_GPIO_Init+0x238>)
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_GPIO_Init+0x238>)
 8002b62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_GPIO_Init+0x23c>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_GPIO_Init+0x240>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d052      	beq.n	8002c40 <HAL_GPIO_Init+0x268>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_GPIO_Init+0x244>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0x22e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_GPIO_Init+0x248>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02b      	beq.n	8002c02 <HAL_GPIO_Init+0x22a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_GPIO_Init+0x24c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x226>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_GPIO_Init+0x250>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x222>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_GPIO_Init+0x254>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x21e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_GPIO_Init+0x258>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x21a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_GPIO_Init+0x25c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x216>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_GPIO_Init+0x260>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x212>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_GPIO_Init+0x264>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x20e>
 8002be2:	2309      	movs	r3, #9
 8002be4:	e02d      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002be6:	230a      	movs	r3, #10
 8002be8:	e02b      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e029      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e027      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e025      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	e023      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e021      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e01f      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e01d      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e01b      	b.n	8002c42 <HAL_GPIO_Init+0x26a>
 8002c0a:	bf00      	nop
 8002c0c:	58000080 	.word	0x58000080
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58000400 	.word	0x58000400
 8002c18:	58020000 	.word	0x58020000
 8002c1c:	58020400 	.word	0x58020400
 8002c20:	58020800 	.word	0x58020800
 8002c24:	58020c00 	.word	0x58020c00
 8002c28:	58021000 	.word	0x58021000
 8002c2c:	58021400 	.word	0x58021400
 8002c30:	58021800 	.word	0x58021800
 8002c34:	58021c00 	.word	0x58021c00
 8002c38:	58022000 	.word	0x58022000
 8002c3c:	58022400 	.word	0x58022400
 8002c40:	2300      	movs	r3, #0
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	f002 0203 	and.w	r2, r2, #3
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c52:	4938      	ldr	r1, [pc, #224]	; (8002d34 <HAL_GPIO_Init+0x35c>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f ae63 	bne.w	80029ec <HAL_GPIO_Init+0x14>
  }
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	3724      	adds	r7, #36	; 0x24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	58000400 	.word	0x58000400

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f804 	bl	8002d9e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d00a      	beq.n	8002dde <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dc8:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e040      	b.n	8002e5c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e03e      	b.n	8002e5c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002de6:	491f      	ldr	r1, [pc, #124]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dee:	f7ff fcb3 	bl	8002758 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002df4:	e009      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002df6:	f7ff fcaf 	bl	8002758 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e04:	d901      	bls.n	8002e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e028      	b.n	8002e5c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d1ee      	bne.n	8002df6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b1e      	cmp	r3, #30
 8002e1c:	d008      	beq.n	8002e30 <HAL_PWREx_ConfigSupply+0x7c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b2e      	cmp	r3, #46	; 0x2e
 8002e22:	d005      	beq.n	8002e30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b1d      	cmp	r3, #29
 8002e28:	d002      	beq.n	8002e30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e2e:	d114      	bne.n	8002e5a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e30:	f7ff fc92 	bl	8002758 <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e36:	e009      	b.n	8002e4c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e38:	f7ff fc8e 	bl	8002758 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e46:	d901      	bls.n	8002e4c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d1ee      	bne.n	8002e38 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58024800 	.word	0x58024800

08002e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f000 bc1f 	b.w	80036ba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80b3 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	4b95      	ldr	r3, [pc, #596]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d007      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x48>
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b18      	cmp	r3, #24
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0x64>
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8098 	beq.w	8002fee <HAL_RCC_OscConfig+0x186>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8093 	bne.w	8002fee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e3f6      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x7c>
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a81      	ldr	r2, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e058      	b.n	8002f96 <HAL_RCC_OscConfig+0x12e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d112      	bne.n	8002f12 <HAL_RCC_OscConfig+0xaa>
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a7b      	ldr	r2, [pc, #492]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a78      	ldr	r2, [pc, #480]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002efe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a75      	ldr	r2, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e041      	b.n	8002f96 <HAL_RCC_OscConfig+0x12e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1a:	d112      	bne.n	8002f42 <HAL_RCC_OscConfig+0xda>
 8002f1c:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6f      	ldr	r2, [pc, #444]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a6c      	ldr	r2, [pc, #432]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a69      	ldr	r2, [pc, #420]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e029      	b.n	8002f96 <HAL_RCC_OscConfig+0x12e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x10a>
 8002f4c:	4b64      	ldr	r3, [pc, #400]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a63      	ldr	r2, [pc, #396]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a60      	ldr	r2, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5d      	ldr	r2, [pc, #372]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e011      	b.n	8002f96 <HAL_RCC_OscConfig+0x12e>
 8002f72:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b55      	ldr	r3, [pc, #340]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a54      	ldr	r2, [pc, #336]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002f90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f94:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d013      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7ff fbdb 	bl	8002758 <HAL_GetTick>
 8002fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa6:	f7ff fbd7 	bl	8002758 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e380      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x13e>
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7ff fbc7 	bl	8002758 <HAL_GetTick>
 8002fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fce:	f7ff fbc3 	bl	8002758 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e36c      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x166>
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 808c 	beq.w	8003116 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003006:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_RCC_OscConfig+0x1bc>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b18      	cmp	r3, #24
 8003018:	d137      	bne.n	800308a <HAL_RCC_OscConfig+0x222>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d132      	bne.n	800308a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003024:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x1d4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e33e      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0219 	bic.w	r2, r3, #25
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4925      	ldr	r1, [pc, #148]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7ff fb83 	bl	8002758 <HAL_GetTick>
 8003052:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7ff fb7f 	bl	8002758 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e328      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	4917      	ldr	r1, [pc, #92]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003088:	e045      	b.n	8003116 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d028      	beq.n	80030e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 0219 	bic.w	r2, r3, #25
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4910      	ldr	r1, [pc, #64]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff fb58 	bl	8002758 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ac:	f7ff fb54 	bl	8002758 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e2fd      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	4901      	ldr	r1, [pc, #4]	; (80030e0 <HAL_RCC_OscConfig+0x278>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
 80030de:	e01a      	b.n	8003116 <HAL_RCC_OscConfig+0x2ae>
 80030e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e4:	4b97      	ldr	r3, [pc, #604]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a96      	ldr	r2, [pc, #600]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7ff fb32 	bl	8002758 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7ff fb2e 	bl	8002758 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e2d7      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800310a:	4b8e      	ldr	r3, [pc, #568]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06a      	beq.n	80031f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800312a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800312c:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d007      	beq.n	8003148 <HAL_RCC_OscConfig+0x2e0>
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b18      	cmp	r3, #24
 800313c:	d11b      	bne.n	8003176 <HAL_RCC_OscConfig+0x30e>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d116      	bne.n	8003176 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003148:	4b7e      	ldr	r3, [pc, #504]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x2f8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e2ac      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003160:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	4975      	ldr	r1, [pc, #468]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003174:	e040      	b.n	80031f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d023      	beq.n	80031c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800317e:	4b71      	ldr	r3, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a70      	ldr	r2, [pc, #448]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7ff fae5 	bl	8002758 <HAL_GetTick>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003192:	f7ff fae1 	bl	8002758 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e28a      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a4:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	4961      	ldr	r1, [pc, #388]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
 80031c4:	e018      	b.n	80031f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031c6:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a5e      	ldr	r2, [pc, #376]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7ff fac1 	bl	8002758 <HAL_GetTick>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031da:	f7ff fabd 	bl	8002758 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e266      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031ec:	4b55      	ldr	r3, [pc, #340]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d036      	beq.n	8003272 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d019      	beq.n	8003240 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320c:	4b4d      	ldr	r3, [pc, #308]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7ff fa9e 	bl	8002758 <HAL_GetTick>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7ff fa9a 	bl	8002758 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e243      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003232:	4b44      	ldr	r3, [pc, #272]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x3b8>
 800323e:	e018      	b.n	8003272 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324c:	f7ff fa84 	bl	8002758 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7ff fa80 	bl	8002758 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e229      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d036      	beq.n	80032ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2e      	ldr	r2, [pc, #184]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800328c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003290:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003292:	f7ff fa61 	bl	8002758 <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329a:	f7ff fa5d 	bl	8002758 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e206      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x432>
 80032b8:	e018      	b.n	80032ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80032c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032c6:	f7ff fa47 	bl	8002758 <HAL_GetTick>
 80032ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ce:	f7ff fa43 	bl	8002758 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1ec      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80af 	beq.w	8003458 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_OscConfig+0x4e0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_RCC_OscConfig+0x4e0>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003306:	f7ff fa27 	bl	8002758 <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330e:	f7ff fa23 	bl	8002758 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b64      	cmp	r3, #100	; 0x64
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1cc      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x4e0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x4e4>
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a02      	ldr	r2, [pc, #8]	; (8003344 <HAL_RCC_OscConfig+0x4dc>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e05b      	b.n	80033fa <HAL_RCC_OscConfig+0x592>
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
 8003348:	58024800 	.word	0x58024800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d112      	bne.n	800337a <HAL_RCC_OscConfig+0x512>
 8003354:	4b9d      	ldr	r3, [pc, #628]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a9c      	ldr	r2, [pc, #624]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	4b9a      	ldr	r3, [pc, #616]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a99      	ldr	r2, [pc, #612]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	4b97      	ldr	r3, [pc, #604]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a96      	ldr	r2, [pc, #600]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003372:	f023 0304 	bic.w	r3, r3, #4
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e03f      	b.n	80033fa <HAL_RCC_OscConfig+0x592>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x540>
 8003382:	4b92      	ldr	r3, [pc, #584]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a91      	ldr	r2, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b8f      	ldr	r3, [pc, #572]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a8e      	ldr	r2, [pc, #568]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a8b      	ldr	r2, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e028      	b.n	80033fa <HAL_RCC_OscConfig+0x592>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b85      	cmp	r3, #133	; 0x85
 80033ae:	d112      	bne.n	80033d6 <HAL_RCC_OscConfig+0x56e>
 80033b0:	4b86      	ldr	r3, [pc, #536]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a85      	ldr	r2, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b83      	ldr	r3, [pc, #524]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a82      	ldr	r2, [pc, #520]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b80      	ldr	r3, [pc, #512]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a7f      	ldr	r2, [pc, #508]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e011      	b.n	80033fa <HAL_RCC_OscConfig+0x592>
 80033d6:	4b7d      	ldr	r3, [pc, #500]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a7c      	ldr	r2, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a79      	ldr	r2, [pc, #484]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b77      	ldr	r3, [pc, #476]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a76      	ldr	r2, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80033f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7ff f9a9 	bl	8002758 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7ff f9a5 	bl	8002758 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e14c      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003420:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x5a2>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7ff f993 	bl	8002758 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7ff f98f 	bl	8002758 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e136      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344c:	4b5f      	ldr	r3, [pc, #380]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 812b 	beq.w	80036b8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003462:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346a:	2b18      	cmp	r3, #24
 800346c:	f000 80bb 	beq.w	80035e6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b02      	cmp	r3, #2
 8003476:	f040 8095 	bne.w	80035a4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b54      	ldr	r3, [pc, #336]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a53      	ldr	r2, [pc, #332]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7ff f967 	bl	8002758 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7ff f963 	bl	8002758 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e10c      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a0:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80034ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b0:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_RCC_OscConfig+0x768>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	430a      	orrs	r2, r1
 80034c0:	4942      	ldr	r1, [pc, #264]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	628b      	str	r3, [r1, #40]	; 0x28
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	3b01      	subs	r3, #1
 80034cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	3b01      	subs	r3, #1
 80034d6:	025b      	lsls	r3, r3, #9
 80034d8:	b29b      	uxth	r3, r3
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	3b01      	subs	r3, #1
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034f6:	4935      	ldr	r1, [pc, #212]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a32      	ldr	r2, [pc, #200]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003508:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800350a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350c:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_RCC_OscConfig+0x76c>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003514:	00d2      	lsls	r2, r2, #3
 8003516:	492d      	ldr	r1, [pc, #180]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003518:	4313      	orrs	r3, r2
 800351a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f023 020c 	bic.w	r2, r3, #12
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4928      	ldr	r1, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800352a:	4313      	orrs	r3, r2
 800352c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f023 0202 	bic.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	4924      	ldr	r1, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800353c:	4313      	orrs	r3, r2
 800353e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003558:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7ff f8ec 	bl	8002758 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7ff f8e8 	bl	8002758 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e091      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x71c>
 80035a2:	e089      	b.n	80036b8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_RCC_OscConfig+0x764>)
 80035aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7ff f8d2 	bl	8002758 <HAL_GetTick>
 80035b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b6:	e00f      	b.n	80035d8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7ff f8ce 	bl	8002758 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d908      	bls.n	80035d8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e077      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
 80035d0:	fffffc0c 	.word	0xfffffc0c
 80035d4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d8:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e9      	bne.n	80035b8 <HAL_RCC_OscConfig+0x750>
 80035e4:	e068      	b.n	80036b8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035e6:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035ec:	4b35      	ldr	r3, [pc, #212]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d031      	beq.n	800365e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0203 	and.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d12a      	bne.n	800365e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d122      	bne.n	800365e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d11a      	bne.n	800365e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	0a5b      	lsrs	r3, r3, #9
 800362c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d111      	bne.n	800365e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d108      	bne.n	800365e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	0e1b      	lsrs	r3, r3, #24
 8003650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e02b      	b.n	80036ba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	08db      	lsrs	r3, r3, #3
 8003668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800366c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d01f      	beq.n	80036b8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003684:	f7ff f868 	bl	8002758 <HAL_GetTick>
 8003688:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800368a:	bf00      	nop
 800368c:	f7ff f864 	bl	8002758 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	4293      	cmp	r3, r2
 8003696:	d0f9      	beq.n	800368c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 800369a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <HAL_RCC_OscConfig+0x860>)
 800369e:	4013      	ands	r3, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036a4:	00d2      	lsls	r2, r2, #3
 80036a6:	4907      	ldr	r1, [pc, #28]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_OscConfig+0x85c>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3730      	adds	r7, #48	; 0x30
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
 80036c8:	ffff0007 	.word	0xffff0007

080036cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e19c      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b8a      	ldr	r3, [pc, #552]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 020f 	bic.w	r2, r3, #15
 80036f6:	4985      	ldr	r1, [pc, #532]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e184      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d010      	beq.n	800373e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	4b7b      	ldr	r3, [pc, #492]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003728:	429a      	cmp	r2, r3
 800372a:	d908      	bls.n	800373e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800372c:	4b78      	ldr	r3, [pc, #480]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	4975      	ldr	r1, [pc, #468]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800373a:	4313      	orrs	r3, r2
 800373c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003756:	429a      	cmp	r2, r3
 8003758:	d908      	bls.n	800376c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800375a:	4b6d      	ldr	r3, [pc, #436]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	496a      	ldr	r1, [pc, #424]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b00      	cmp	r3, #0
 8003776:	d010      	beq.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	4b64      	ldr	r3, [pc, #400]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003784:	429a      	cmp	r2, r3
 8003786:	d908      	bls.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003788:	4b61      	ldr	r3, [pc, #388]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	495e      	ldr	r1, [pc, #376]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003796:	4313      	orrs	r3, r2
 8003798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69da      	ldr	r2, [r3, #28]
 80037aa:	4b59      	ldr	r3, [pc, #356]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d908      	bls.n	80037c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037b6:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4953      	ldr	r1, [pc, #332]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d908      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f023 020f 	bic.w	r2, r3, #15
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4947      	ldr	r1, [pc, #284]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d055      	beq.n	80038ae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003802:	4b43      	ldr	r3, [pc, #268]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4940      	ldr	r1, [pc, #256]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003810:	4313      	orrs	r3, r2
 8003812:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800381c:	4b3c      	ldr	r3, [pc, #240]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d121      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0f6      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d107      	bne.n	8003844 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d115      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ea      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800384c:	4b30      	ldr	r3, [pc, #192]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0de      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d6      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4925      	ldr	r1, [pc, #148]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800387a:	4313      	orrs	r3, r2
 800387c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387e:	f7fe ff6b 	bl	8002758 <HAL_GetTick>
 8003882:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003884:	e00a      	b.n	800389c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003886:	f7fe ff67 	bl	8002758 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0be      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d1eb      	bne.n	8003886 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d208      	bcs.n	80038dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	490e      	ldr	r1, [pc, #56]	; (8003910 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d214      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	4906      	ldr	r1, [pc, #24]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <HAL_RCC_ClockConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e086      	b.n	8003a1a <HAL_RCC_ClockConfig+0x34e>
 800390c:	52002000 	.word	0x52002000
 8003910:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392c:	429a      	cmp	r2, r3
 800392e:	d208      	bcs.n	8003942 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003930:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	4939      	ldr	r1, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800393e:	4313      	orrs	r3, r2
 8003940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d010      	beq.n	8003970 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395a:	429a      	cmp	r2, r3
 800395c:	d208      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	492e      	ldr	r1, [pc, #184]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003988:	429a      	cmp	r2, r3
 800398a:	d208      	bcs.n	800399e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	4922      	ldr	r1, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 800399a:	4313      	orrs	r3, r2
 800399c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d208      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4917      	ldr	r1, [pc, #92]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039cc:	f000 f834 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	4912      	ldr	r1, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x35c>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x358>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <HAL_RCC_ClockConfig+0x35c>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x360>)
 8003a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x364>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x368>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fe58 	bl	80026c4 <HAL_InitTick>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
 8003a28:	08007d5c 	.word	0x08007d5c
 8003a2c:	24000034 	.word	0x24000034
 8003a30:	24000030 	.word	0x24000030
 8003a34:	24000038 	.word	0x24000038

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3e:	4bb3      	ldr	r3, [pc, #716]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a46:	2b18      	cmp	r3, #24
 8003a48:	f200 8155 	bhi.w	8003cf6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003ab9 	.word	0x08003ab9
 8003a58:	08003cf7 	.word	0x08003cf7
 8003a5c:	08003cf7 	.word	0x08003cf7
 8003a60:	08003cf7 	.word	0x08003cf7
 8003a64:	08003cf7 	.word	0x08003cf7
 8003a68:	08003cf7 	.word	0x08003cf7
 8003a6c:	08003cf7 	.word	0x08003cf7
 8003a70:	08003cf7 	.word	0x08003cf7
 8003a74:	08003adf 	.word	0x08003adf
 8003a78:	08003cf7 	.word	0x08003cf7
 8003a7c:	08003cf7 	.word	0x08003cf7
 8003a80:	08003cf7 	.word	0x08003cf7
 8003a84:	08003cf7 	.word	0x08003cf7
 8003a88:	08003cf7 	.word	0x08003cf7
 8003a8c:	08003cf7 	.word	0x08003cf7
 8003a90:	08003cf7 	.word	0x08003cf7
 8003a94:	08003ae5 	.word	0x08003ae5
 8003a98:	08003cf7 	.word	0x08003cf7
 8003a9c:	08003cf7 	.word	0x08003cf7
 8003aa0:	08003cf7 	.word	0x08003cf7
 8003aa4:	08003cf7 	.word	0x08003cf7
 8003aa8:	08003cf7 	.word	0x08003cf7
 8003aac:	08003cf7 	.word	0x08003cf7
 8003ab0:	08003cf7 	.word	0x08003cf7
 8003ab4:	08003aeb 	.word	0x08003aeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab8:	4b94      	ldr	r3, [pc, #592]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d009      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ac4:	4b91      	ldr	r3, [pc, #580]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ad6:	e111      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ad8:	4b8d      	ldr	r3, [pc, #564]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ada:	61bb      	str	r3, [r7, #24]
      break;
 8003adc:	e10e      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ade:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ae0:	61bb      	str	r3, [r7, #24]
      break;
 8003ae2:	e10b      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ae4:	4b8c      	ldr	r3, [pc, #560]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ae6:	61bb      	str	r3, [r7, #24]
      break;
 8003ae8:	e108      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aea:	4b88      	ldr	r3, [pc, #544]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003af4:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b00:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b0a:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	08db      	lsrs	r3, r3, #3
 8003b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80e1 	beq.w	8003cf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f000 8083 	beq.w	8003c3c <HAL_RCC_GetSysClockFreq+0x204>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f200 80a1 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x248>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x114>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d056      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b4a:	e099      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02d      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b58:	4b6c      	ldr	r3, [pc, #432]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	4a6b      	ldr	r2, [pc, #428]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003bb2:	e087      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bda:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bf6:	e065      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c3a:	e043      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4e:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c7e:	e021      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c92:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	0a5b      	lsrs	r3, r3, #9
 8003cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cce:	3301      	adds	r3, #1
 8003cd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce8:	ee17 3a90 	vmov	r3, s15
 8003cec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
      break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf8:	61bb      	str	r3, [r7, #24]
      break;
 8003cfa:	bf00      	nop
  }

  return sysclockfreq;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	03d09000 	.word	0x03d09000
 8003d14:	003d0900 	.word	0x003d0900
 8003d18:	016e3600 	.word	0x016e3600
 8003d1c:	46000000 	.word	0x46000000
 8003d20:	4c742400 	.word	0x4c742400
 8003d24:	4a742400 	.word	0x4a742400
 8003d28:	4bb71b00 	.word	0x4bb71b00

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003d32:	f7ff fe81 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490f      	ldr	r1, [pc, #60]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a07      	ldr	r2, [pc, #28]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58024400 	.word	0x58024400
 8003d80:	08007d5c 	.word	0x08007d5c
 8003d84:	24000034 	.word	0x24000034
 8003d88:	24000030 	.word	0x24000030

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d90:	f7ff ffcc 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	58024400 	.word	0x58024400
 8003db4:	08007d5c 	.word	0x08007d5c

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003dbc:	f7ff ffb6 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	08007d5c 	.word	0x08007d5c

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b0c8      	sub	sp, #288	; 0x120
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003e08:	2500      	movs	r5, #0
 8003e0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003e0e:	d049      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e1a:	d02f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e20:	d828      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e26:	d01a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2c:	d822      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	d007      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e38:	e01c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3a:	4ba7      	ldr	r3, [pc, #668]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	4aa6      	ldr	r2, [pc, #664]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e46:	e01a      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 fc43 	bl	80056dc <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e62:	3328      	adds	r3, #40	; 0x28
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fcea 	bl	8005840 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e86:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e94:	4a90      	ldr	r2, [pc, #576]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6513      	str	r3, [r2, #80]	; 0x50
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003eb0:	f04f 0900 	mov.w	r9, #0
 8003eb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003eb8:	d047      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d82a      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003eef 	.word	0x08003eef
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003f23 	.word	0x08003f23
 8003edc:	08003f23 	.word	0x08003f23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4a7c      	ldr	r2, [pc, #496]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eec:	e01a      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fbf0 	bl	80056dc <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f02:	e00f      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	3328      	adds	r3, #40	; 0x28
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 fc97 	bl	8005840 <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f30:	f023 0107 	bic.w	r1, r3, #7
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003f56:	f04f 0b00 	mov.w	fp, #0
 8003f5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f5e:	d054      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f6a:	d036      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003f6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f70:	d82f      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	d032      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d829      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f80:	d02f      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f82:	2bc0      	cmp	r3, #192	; 0xc0
 8003f84:	d825      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f86:	2b80      	cmp	r3, #128	; 0x80
 8003f88:	d018      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d821      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fa4:	e01e      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003faa:	3308      	adds	r3, #8
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fb94 	bl	80056dc <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fba:	e013      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc0:	3328      	adds	r3, #40	; 0x28
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fc3b 	bl	8005840 <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003fec:	4b3a      	ldr	r3, [pc, #232]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	4a37      	ldr	r2, [pc, #220]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6513      	str	r3, [r2, #80]	; 0x50
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004006:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800400a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004016:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004020:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d05c      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004034:	d03b      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004036:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800403a:	d834      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d037      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004046:	d82e      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004048:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800404c:	d033      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800404e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004052:	d828      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004058:	d01a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d822      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800406a:	e01c      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004078:	e01e      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407e:	3308      	adds	r3, #8
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fb2a 	bl	80056dc <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800408e:	e013      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004094:	3328      	adds	r3, #40	; 0x28
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fbd1 	bl	8005840 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80040a4:	e008      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040ac:	e004      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6513      	str	r3, [r2, #80]	; 0x50
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80040f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d03a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	2b30      	cmp	r3, #48	; 0x30
 800410c:	d01f      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	d819      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d00c      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004116:	2b20      	cmp	r3, #32
 8004118:	d815      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800411e:	2b10      	cmp	r3, #16
 8004120:	d111      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4bae      	ldr	r3, [pc, #696]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4aad      	ldr	r2, [pc, #692]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800412e:	e011      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004134:	3308      	adds	r3, #8
 8004136:	2102      	movs	r1, #2
 8004138:	4618      	mov	r0, r3
 800413a:	f001 facf 	bl	80056dc <RCCEx_PLL2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800414c:	e002      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800415c:	4b9f      	ldr	r3, [pc, #636]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4a9c      	ldr	r2, [pc, #624]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800416c:	430b      	orrs	r3, r1
 800416e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004176:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004190:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d051      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a4:	d035      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041aa:	d82e      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041b0:	d031      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80041b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041b6:	d828      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041bc:	d01a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80041be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c2:	d822      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80041c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041cc:	d007      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80041ce:	e01c      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d0:	4b82      	ldr	r3, [pc, #520]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a81      	ldr	r2, [pc, #516]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041dc:	e01c      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e2:	3308      	adds	r3, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fa78 	bl	80056dc <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041f2:	e011      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f8:	3328      	adds	r3, #40	; 0x28
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fb1f 	bl	8005840 <RCCEx_PLL3_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004220:	4b6e      	ldr	r3, [pc, #440]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422e:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6513      	str	r3, [r2, #80]	; 0x50
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800423a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800424a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004254:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004258:	460b      	mov	r3, r1
 800425a:	4313      	orrs	r3, r2
 800425c:	d053      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800425e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004268:	d033      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800426a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800426e:	d82c      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004274:	d02f      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800427a:	d826      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800427c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004280:	d02b      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004286:	d820      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428c:	d012      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004292:	d81a      	bhi.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d022      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d115      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a2:	3308      	adds	r3, #8
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fa18 	bl	80056dc <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042b2:	e015      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	3328      	adds	r3, #40	; 0x28
 80042ba:	2101      	movs	r1, #1
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 fabf 	bl	8005840 <RCCEx_PLL3_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042c8:	e00a      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042d2:	bf00      	nop
 80042d4:	e004      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f6:	4a39      	ldr	r2, [pc, #228]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6513      	str	r3, [r2, #80]	; 0x50
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004302:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800431c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004320:	460b      	mov	r3, r1
 8004322:	4313      	orrs	r3, r2
 8004324:	d060      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800432e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004332:	d039      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004334:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004338:	d832      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800433a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800433e:	d035      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004344:	d82c      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d031      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d826      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004356:	d02d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800435c:	d820      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800435e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004362:	d012      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004368:	d81a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d024      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004372:	d115      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004378:	3308      	adds	r3, #8
 800437a:	2101      	movs	r1, #1
 800437c:	4618      	mov	r0, r3
 800437e:	f001 f9ad 	bl	80056dc <RCCEx_PLL2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004388:	e017      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800438a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	2101      	movs	r1, #1
 8004392:	4618      	mov	r0, r3
 8004394:	f001 fa54 	bl	8005840 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800439e:	e00c      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043a6:	e008      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a8:	bf00      	nop
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043ac:	bf00      	nop
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b0:	bf00      	nop
 80043b2:	e002      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b4:	bf00      	nop
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10e      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043d2:	4a02      	ldr	r2, [pc, #8]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
 80043d8:	e006      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d037      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004412:	d00e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d816      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004422:	d111      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4bc4      	ldr	r3, [pc, #784]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4ac3      	ldr	r2, [pc, #780]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004436:	3308      	adds	r3, #8
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f94e 	bl	80056dc <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800445a:	4bb7      	ldr	r3, [pc, #732]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004468:	4ab3      	ldr	r2, [pc, #716]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6513      	str	r3, [r2, #80]	; 0x50
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800448e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d039      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d81c      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044b9 	.word	0x080044b9
 80044b0:	080044c7 	.word	0x080044c7
 80044b4:	080044e5 	.word	0x080044e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4b9f      	ldr	r3, [pc, #636]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a9e      	ldr	r2, [pc, #632]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	3308      	adds	r3, #8
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f904 	bl	80056dc <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044ee:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	f023 0103 	bic.w	r1, r3, #3
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	4a8e      	ldr	r2, [pc, #568]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004522:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	f000 8099 	beq.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452e:	4b83      	ldr	r3, [pc, #524]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a82      	ldr	r2, [pc, #520]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453a:	f7fe f90d 	bl	8002758 <HAL_GetTick>
 800453e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004542:	e00b      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fe f908 	bl	8002758 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	; 0x64
 8004552:	d903      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455c:	4b77      	ldr	r3, [pc, #476]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ed      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004568:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800456c:	2b00      	cmp	r3, #0
 800456e:	d173      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004570:	4b71      	ldr	r3, [pc, #452]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800457c:	4053      	eors	r3, r2
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d015      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004586:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b69      	ldr	r3, [pc, #420]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a68      	ldr	r2, [pc, #416]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	4b66      	ldr	r3, [pc, #408]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a65      	ldr	r2, [pc, #404]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045aa:	4a63      	ldr	r2, [pc, #396]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d118      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fe f8ca 	bl	8002758 <HAL_GetTick>
 80045c4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c8:	e00d      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fe f8c5 	bl	8002758 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0eb      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d129      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460a:	d10e      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800460c:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800461c:	091a      	lsrs	r2, r3, #4
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004620:	4013      	ands	r3, r2
 8004622:	4a45      	ldr	r2, [pc, #276]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6113      	str	r3, [r2, #16]
 8004628:	e005      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4a42      	ldr	r2, [pc, #264]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004634:	6113      	str	r3, [r2, #16]
 8004636:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004638:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800464e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004652:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004656:	e003      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800465c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f002 0301 	and.w	r3, r2, #1
 800466c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004676:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800467a:	460b      	mov	r3, r1
 800467c:	4313      	orrs	r3, r2
 800467e:	f000 8090 	beq.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	2b28      	cmp	r3, #40	; 0x28
 800468c:	d870      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	08004779 	.word	0x08004779
 8004698:	08004771 	.word	0x08004771
 800469c:	08004771 	.word	0x08004771
 80046a0:	08004771 	.word	0x08004771
 80046a4:	08004771 	.word	0x08004771
 80046a8:	08004771 	.word	0x08004771
 80046ac:	08004771 	.word	0x08004771
 80046b0:	08004771 	.word	0x08004771
 80046b4:	08004745 	.word	0x08004745
 80046b8:	08004771 	.word	0x08004771
 80046bc:	08004771 	.word	0x08004771
 80046c0:	08004771 	.word	0x08004771
 80046c4:	08004771 	.word	0x08004771
 80046c8:	08004771 	.word	0x08004771
 80046cc:	08004771 	.word	0x08004771
 80046d0:	08004771 	.word	0x08004771
 80046d4:	0800475b 	.word	0x0800475b
 80046d8:	08004771 	.word	0x08004771
 80046dc:	08004771 	.word	0x08004771
 80046e0:	08004771 	.word	0x08004771
 80046e4:	08004771 	.word	0x08004771
 80046e8:	08004771 	.word	0x08004771
 80046ec:	08004771 	.word	0x08004771
 80046f0:	08004771 	.word	0x08004771
 80046f4:	08004779 	.word	0x08004779
 80046f8:	08004771 	.word	0x08004771
 80046fc:	08004771 	.word	0x08004771
 8004700:	08004771 	.word	0x08004771
 8004704:	08004771 	.word	0x08004771
 8004708:	08004771 	.word	0x08004771
 800470c:	08004771 	.word	0x08004771
 8004710:	08004771 	.word	0x08004771
 8004714:	08004779 	.word	0x08004779
 8004718:	08004771 	.word	0x08004771
 800471c:	08004771 	.word	0x08004771
 8004720:	08004771 	.word	0x08004771
 8004724:	08004771 	.word	0x08004771
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
 8004734:	08004779 	.word	0x08004779
 8004738:	58024400 	.word	0x58024400
 800473c:	58024800 	.word	0x58024800
 8004740:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	3308      	adds	r3, #8
 800474a:	2101      	movs	r1, #1
 800474c:	4618      	mov	r0, r3
 800474e:	f000 ffc5 	bl	80056dc <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004758:	e00f      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475e:	3328      	adds	r3, #40	; 0x28
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f001 f86c 	bl	8005840 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004782:	4bc0      	ldr	r3, [pc, #768]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004792:	4abc      	ldr	r2, [pc, #752]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6553      	str	r3, [r2, #84]	; 0x54
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800479e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f002 0302 	and.w	r3, r2, #2
 80047ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d043      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ca:	2b05      	cmp	r3, #5
 80047cc:	d824      	bhi.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004821 	.word	0x08004821
 80047d8:	080047ed 	.word	0x080047ed
 80047dc:	08004803 	.word	0x08004803
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004821 	.word	0x08004821
 80047e8:	08004821 	.word	0x08004821
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f0:	3308      	adds	r3, #8
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 ff71 	bl	80056dc <RCCEx_PLL2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004800:	e00f      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004806:	3328      	adds	r3, #40	; 0x28
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f001 f818 	bl	8005840 <RCCEx_PLL3_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004816:	e004      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800481e:	e000      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004822:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800482a:	4b96      	ldr	r3, [pc, #600]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f023 0107 	bic.w	r1, r3, #7
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483a:	4a92      	ldr	r2, [pc, #584]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6553      	str	r3, [r2, #84]	; 0x54
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004846:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800484a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f002 0304 	and.w	r3, r2, #4
 8004856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004860:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d043      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800486e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004872:	2b05      	cmp	r3, #5
 8004874:	d824      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048c9 	.word	0x080048c9
 8004880:	08004895 	.word	0x08004895
 8004884:	080048ab 	.word	0x080048ab
 8004888:	080048c9 	.word	0x080048c9
 800488c:	080048c9 	.word	0x080048c9
 8004890:	080048c9 	.word	0x080048c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004898:	3308      	adds	r3, #8
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 ff1d 	bl	80056dc <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048a8:	e00f      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ae:	3328      	adds	r3, #40	; 0x28
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ffc4 	bl	8005840 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048be:	e004      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048c6:	e000      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80048c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10b      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d2:	4b6c      	ldr	r3, [pc, #432]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	f023 0107 	bic.w	r1, r3, #7
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e2:	4a68      	ldr	r2, [pc, #416]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048e4:	430b      	orrs	r3, r1
 80048e6:	6593      	str	r3, [r2, #88]	; 0x58
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f002 0320 	and.w	r3, r2, #32
 80048fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004908:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d055      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800491a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491e:	d033      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004924:	d82c      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d02f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d826      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004936:	d02b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800493c:	d820      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800493e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004942:	d012      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004948:	d81a      	bhi.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d022      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800494e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004952:	d115      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004958:	3308      	adds	r3, #8
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 febd 	bl	80056dc <RCCEx_PLL2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004968:	e015      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	3328      	adds	r3, #40	; 0x28
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 ff64 	bl	8005840 <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800497e:	e00a      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004986:	e006      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004988:	bf00      	nop
 800498a:	e004      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004996:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499e:	4b39      	ldr	r3, [pc, #228]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ae:	4a35      	ldr	r2, [pc, #212]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6553      	str	r3, [r2, #84]	; 0x54
 80049b4:	e003      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ce:	2300      	movs	r3, #0
 80049d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d058      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ea:	d033      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049f0:	d82c      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d02f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d826      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a02:	d02b      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a08:	d820      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d012      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d81a      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d022      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d115      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a24:	3308      	adds	r3, #8
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe57 	bl	80056dc <RCCEx_PLL2_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a34:	e015      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3a:	3328      	adds	r3, #40	; 0x28
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fefe 	bl	8005840 <RCCEx_PLL3_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a52:	e006      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a54:	bf00      	nop
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10e      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a7a:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d055      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ab8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004abc:	d033      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004abe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ac2:	d82c      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d02f      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ace:	d826      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ad0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad4:	d02b      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ad6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ada:	d820      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae0:	d012      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae6:	d81a      	bhi.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d022      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af0:	d115      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af6:	3308      	adds	r3, #8
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fdee 	bl	80056dc <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b06:	e015      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	3328      	adds	r3, #40	; 0x28
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fe95 	bl	8005840 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b24:	e006      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b26:	bf00      	nop
 8004b28:	e004      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b3c:	4ba1      	ldr	r3, [pc, #644]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b4c:	4a9d      	ldr	r2, [pc, #628]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6593      	str	r3, [r2, #88]	; 0x58
 8004b52:	e003      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 0308 	and.w	r3, r2, #8
 8004b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d01e      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8e:	3328      	adds	r3, #40	; 0x28
 8004b90:	2102      	movs	r1, #2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fe54 	bl	8005840 <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ba4:	4b87      	ldr	r3, [pc, #540]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb4:	4a83      	ldr	r2, [pc, #524]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f002 0310 	and.w	r3, r2, #16
 8004bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	d01e      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bec:	3328      	adds	r3, #40	; 0x28
 8004bee:	2102      	movs	r1, #2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fe25 	bl	8005840 <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c02:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c12:	4a6c      	ldr	r2, [pc, #432]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d03e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c44:	d022      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4a:	d81b      	bhi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004c56:	e015      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fd3b 	bl	80056dc <RCCEx_PLL2_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c6c:	e00f      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c72:	3328      	adds	r3, #40	; 0x28
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fde2 	bl	8005840 <RCCEx_PLL3_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c82:	e004      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c8a:	e000      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ca6:	4a47      	ldr	r2, [pc, #284]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d03b      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ce4:	d818      	bhi.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004cf2:	e011      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d00:	e00f      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d06:	3328      	adds	r3, #40	; 0x28
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd98 	bl	8005840 <RCCEx_PLL3_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d16:	e004      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d1e:	e000      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10b      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6553      	str	r3, [r2, #84]	; 0x54
 8004d40:	e003      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d56:	673b      	str	r3, [r7, #112]	; 0x70
 8004d58:	2300      	movs	r3, #0
 8004d5a:	677b      	str	r3, [r7, #116]	; 0x74
 8004d5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d034      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d007      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004d76:	e011      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d78:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d84:	e00e      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fca4 	bl	80056dc <RCCEx_PLL2_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d9a:	e003      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	4a02      	ldr	r2, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dde:	2300      	movs	r3, #0
 8004de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004de2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004de6:	460b      	mov	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	d00c      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df0:	3328      	adds	r3, #40	; 0x28
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fd23 	bl	8005840 <RCCEx_PLL3_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e12:	663b      	str	r3, [r7, #96]	; 0x60
 8004e14:	2300      	movs	r3, #0
 8004e16:	667b      	str	r3, [r7, #100]	; 0x64
 8004e18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	d038      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d018      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e34:	d811      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3a:	d014      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d80b      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4c:	4bc3      	ldr	r3, [pc, #780]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	4ac2      	ldr	r2, [pc, #776]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e58:	e008      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e60:	e004      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e74:	4bb9      	ldr	r3, [pc, #740]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	4ab5      	ldr	r2, [pc, #724]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e86:	430b      	orrs	r3, r1
 8004e88:	6553      	str	r3, [r2, #84]	; 0x54
 8004e8a:	e003      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ea0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eb0:	4baa      	ldr	r3, [pc, #680]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ebe:	4aa7      	ldr	r2, [pc, #668]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ed0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee0:	4b9e      	ldr	r3, [pc, #632]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	4a9b      	ldr	r2, [pc, #620]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f02:	2300      	movs	r3, #0
 8004f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004f10:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	4a8f      	ldr	r2, [pc, #572]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f20:	430b      	orrs	r3, r1
 8004f22:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
 8004f32:	2300      	movs	r3, #0
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
 8004f36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f40:	4b86      	ldr	r3, [pc, #536]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4a85      	ldr	r2, [pc, #532]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f4a:	6113      	str	r3, [r2, #16]
 8004f4c:	4b83      	ldr	r3, [pc, #524]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f4e:	6919      	ldr	r1, [r3, #16]
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f58:	4a80      	ldr	r2, [pc, #512]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f74:	460b      	mov	r3, r1
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f7a:	4b78      	ldr	r3, [pc, #480]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	4a74      	ldr	r2, [pc, #464]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004faa:	4b6c      	ldr	r3, [pc, #432]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fba:	4a68      	ldr	r2, [pc, #416]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d011      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fb79 	bl	80056dc <RCCEx_PLL2_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ffc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005000:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	2100      	movs	r1, #0
 800500a:	6239      	str	r1, [r7, #32]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
 8005012:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005016:	460b      	mov	r3, r1
 8005018:	4313      	orrs	r3, r2
 800501a:	d011      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800501c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005020:	3308      	adds	r3, #8
 8005022:	2101      	movs	r1, #1
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb59 	bl	80056dc <RCCEx_PLL2_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800503c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	2100      	movs	r1, #0
 800504a:	61b9      	str	r1, [r7, #24]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005056:	460b      	mov	r3, r1
 8005058:	4313      	orrs	r3, r2
 800505a:	d011      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800505c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005060:	3308      	adds	r3, #8
 8005062:	2102      	movs	r1, #2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fb39 	bl	80056dc <RCCEx_PLL2_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800507c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	2100      	movs	r1, #0
 800508a:	6139      	str	r1, [r7, #16]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d011      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800509c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a0:	3328      	adds	r3, #40	; 0x28
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fbcb 	bl	8005840 <RCCEx_PLL3_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80050b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	2100      	movs	r1, #0
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d011      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e0:	3328      	adds	r3, #40	; 0x28
 80050e2:	2101      	movs	r1, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fbab 	bl	8005840 <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	2100      	movs	r1, #0
 800510a:	6039      	str	r1, [r7, #0]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d011      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb8b 	bl	8005840 <RCCEx_PLL3_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800513c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005140:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515a:	bf00      	nop
 800515c:	58024400 	.word	0x58024400

08005160 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005164:	f7fe fde2 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4904      	ldr	r1, [pc, #16]	; (8005188 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	58024400 	.word	0x58024400
 8005188:	08007d5c 	.word	0x08007d5c

0800518c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	; 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005194:	4ba1      	ldr	r3, [pc, #644]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800519e:	4b9f      	ldr	r3, [pc, #636]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	0b1b      	lsrs	r3, r3, #12
 80051a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051aa:	4b9c      	ldr	r3, [pc, #624]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051b6:	4b99      	ldr	r3, [pc, #612]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8111 	beq.w	80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f000 8083 	beq.w	80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f200 80a1 	bhi.w	800532c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d056      	beq.n	80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051f6:	e099      	b.n	800532c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f8:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02d      	beq.n	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005204:	4b85      	ldr	r3, [pc, #532]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	4a84      	ldr	r2, [pc, #528]	; (8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
 8005214:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522e:	4b7b      	ldr	r3, [pc, #492]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800524a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800525e:	e087      	b.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800526e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005282:	ed97 6a03 	vldr	s12, [r7, #12]
 8005286:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800528a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800528e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800529a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800529e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052a2:	e065      	b.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b6:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052e6:	e043      	b.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b48      	ldr	r3, [pc, #288]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a03 	vldr	s12, [r7, #12]
 800530e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800532a:	e021      	b.n	8005370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800542c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005352:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005370:	4b2a      	ldr	r3, [pc, #168]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	0a5b      	lsrs	r3, r3, #9
 8005376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538a:	edd7 6a07 	vldr	s13, [r7, #28]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005396:	ee17 2a90 	vmov	r2, s15
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800539e:	4b1f      	ldr	r3, [pc, #124]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	0c1b      	lsrs	r3, r3, #16
 80053a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c4:	ee17 2a90 	vmov	r2, s15
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053f2:	ee17 2a90 	vmov	r2, s15
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053fa:	e008      	b.n	800540e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	609a      	str	r2, [r3, #8]
}
 800540e:	bf00      	nop
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	58024400 	.word	0x58024400
 8005420:	03d09000 	.word	0x03d09000
 8005424:	46000000 	.word	0x46000000
 8005428:	4c742400 	.word	0x4c742400
 800542c:	4a742400 	.word	0x4a742400
 8005430:	4bb71b00 	.word	0x4bb71b00

08005434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800543c:	4ba1      	ldr	r3, [pc, #644]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005446:	4b9f      	ldr	r3, [pc, #636]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	0d1b      	lsrs	r3, r3, #20
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005452:	4b9c      	ldr	r3, [pc, #624]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800545e:	4b99      	ldr	r3, [pc, #612]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	08db      	lsrs	r3, r3, #3
 8005464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8111 	beq.w	80056a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b02      	cmp	r3, #2
 8005486:	f000 8083 	beq.w	8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f200 80a1 	bhi.w	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d056      	beq.n	800554c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800549e:	e099      	b.n	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a0:	4b88      	ldr	r3, [pc, #544]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02d      	beq.n	8005508 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054ac:	4b85      	ldr	r3, [pc, #532]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	4a84      	ldr	r2, [pc, #528]	; (80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
 80054bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d6:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054de:	ee07 3a90 	vmov	s15, r3
 80054e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005506:	e087      	b.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800551a:	4b6a      	ldr	r3, [pc, #424]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552a:	ed97 6a03 	vldr	s12, [r7, #12]
 800552e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800553e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800554a:	e065      	b.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800558e:	e043      	b.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055d2:	e021      	b.n	8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005616:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005618:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	0a5b      	lsrs	r3, r3, #9
 800561e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800562e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005632:	edd7 6a07 	vldr	s13, [r7, #28]
 8005636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800563a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563e:	ee17 2a90 	vmov	r2, s15
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005646:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800565c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005660:	edd7 6a07 	vldr	s13, [r7, #28]
 8005664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566c:	ee17 2a90 	vmov	r2, s15
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005674:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	0e1b      	lsrs	r3, r3, #24
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800569a:	ee17 2a90 	vmov	r2, s15
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056a2:	e008      	b.n	80056b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
}
 80056b6:	bf00      	nop
 80056b8:	3724      	adds	r7, #36	; 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	58024400 	.word	0x58024400
 80056c8:	03d09000 	.word	0x03d09000
 80056cc:	46000000 	.word	0x46000000
 80056d0:	4c742400 	.word	0x4c742400
 80056d4:	4a742400 	.word	0x4a742400
 80056d8:	4bb71b00 	.word	0x4bb71b00

080056dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ea:	4b53      	ldr	r3, [pc, #332]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d101      	bne.n	80056fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e099      	b.n	800582e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056fa:	4b4f      	ldr	r3, [pc, #316]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a4e      	ldr	r2, [pc, #312]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005706:	f7fd f827 	bl	8002758 <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800570c:	e008      	b.n	8005720 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800570e:	f7fd f823 	bl	8002758 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e086      	b.n	800582e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005720:	4b45      	ldr	r3, [pc, #276]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800572c:	4b42      	ldr	r3, [pc, #264]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	493f      	ldr	r1, [pc, #252]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	628b      	str	r3, [r1, #40]	; 0x28
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	3b01      	subs	r3, #1
 8005746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	3b01      	subs	r3, #1
 8005750:	025b      	lsls	r3, r3, #9
 8005752:	b29b      	uxth	r3, r3
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	3b01      	subs	r3, #1
 800576a:	061b      	lsls	r3, r3, #24
 800576c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005770:	4931      	ldr	r1, [pc, #196]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005776:	4b30      	ldr	r3, [pc, #192]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	492d      	ldr	r1, [pc, #180]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005784:	4313      	orrs	r3, r2
 8005786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005788:	4b2b      	ldr	r3, [pc, #172]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f023 0220 	bic.w	r2, r3, #32
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	4928      	ldr	r1, [pc, #160]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800579a:	4b27      	ldr	r3, [pc, #156]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	4a26      	ldr	r2, [pc, #152]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057a0:	f023 0310 	bic.w	r3, r3, #16
 80057a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057a6:	4b24      	ldr	r3, [pc, #144]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057aa:	4b24      	ldr	r3, [pc, #144]	; (800583c <RCCEx_PLL2_Config+0x160>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	69d2      	ldr	r2, [r2, #28]
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	4920      	ldr	r1, [pc, #128]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057ba:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057c0:	f043 0310 	orr.w	r3, r3, #16
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d8:	e00f      	b.n	80057fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057e0:	4b15      	ldr	r3, [pc, #84]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	4a14      	ldr	r2, [pc, #80]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057ec:	e005      	b.n	80057fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	4a11      	ldr	r2, [pc, #68]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057fa:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a0e      	ldr	r2, [pc, #56]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005806:	f7fc ffa7 	bl	8002758 <HAL_GetTick>
 800580a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800580c:	e008      	b.n	8005820 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800580e:	f7fc ffa3 	bl	8002758 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e006      	b.n	800582e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <RCCEx_PLL2_Config+0x15c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
 800583c:	ffff0007 	.word	0xffff0007

08005840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800584e:	4b53      	ldr	r3, [pc, #332]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b03      	cmp	r3, #3
 8005858:	d101      	bne.n	800585e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e099      	b.n	8005992 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800585e:	4b4f      	ldr	r3, [pc, #316]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4e      	ldr	r2, [pc, #312]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fc ff75 	bl	8002758 <HAL_GetTick>
 800586e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005870:	e008      	b.n	8005884 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005872:	f7fc ff71 	bl	8002758 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e086      	b.n	8005992 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005884:	4b45      	ldr	r3, [pc, #276]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005890:	4b42      	ldr	r3, [pc, #264]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	051b      	lsls	r3, r3, #20
 800589e:	493f      	ldr	r1, [pc, #252]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	628b      	str	r3, [r1, #40]	; 0x28
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	025b      	lsls	r3, r3, #9
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	3b01      	subs	r3, #1
 80058c0:	041b      	lsls	r3, r3, #16
 80058c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	061b      	lsls	r3, r3, #24
 80058d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d4:	4931      	ldr	r1, [pc, #196]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058da:	4b30      	ldr	r3, [pc, #192]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	492d      	ldr	r1, [pc, #180]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058ec:	4b2b      	ldr	r3, [pc, #172]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	4928      	ldr	r1, [pc, #160]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058fe:	4b27      	ldr	r3, [pc, #156]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a26      	ldr	r2, [pc, #152]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 800590c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590e:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <RCCEx_PLL3_Config+0x160>)
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	69d2      	ldr	r2, [r2, #28]
 8005916:	00d2      	lsls	r2, r2, #3
 8005918:	4920      	ldr	r1, [pc, #128]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800591e:	4b1f      	ldr	r3, [pc, #124]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800593a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800593c:	e00f      	b.n	800595e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d106      	bne.n	8005952 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005944:	4b15      	ldr	r3, [pc, #84]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a14      	ldr	r2, [pc, #80]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 800594a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005950:	e005      	b.n	800595e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	4a11      	ldr	r2, [pc, #68]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a0e      	ldr	r2, [pc, #56]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596a:	f7fc fef5 	bl	8002758 <HAL_GetTick>
 800596e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005970:	e008      	b.n	8005984 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005972:	f7fc fef1 	bl	8002758 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e006      	b.n	8005992 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <RCCEx_PLL3_Config+0x15c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	58024400 	.word	0x58024400
 80059a0:	ffff0007 	.word	0xffff0007

080059a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e10f      	b.n	8005bd6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a87      	ldr	r2, [pc, #540]	; (8005be0 <HAL_SPI_Init+0x23c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <HAL_SPI_Init+0x42>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a86      	ldr	r2, [pc, #536]	; (8005be4 <HAL_SPI_Init+0x240>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00a      	beq.n	80059e6 <HAL_SPI_Init+0x42>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a84      	ldr	r2, [pc, #528]	; (8005be8 <HAL_SPI_Init+0x244>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d005      	beq.n	80059e6 <HAL_SPI_Init+0x42>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	d901      	bls.n	80059e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0f7      	b.n	8005bd6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fd5a 	bl	80064a0 <SPI_GetPacketSize>
 80059ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a7b      	ldr	r2, [pc, #492]	; (8005be0 <HAL_SPI_Init+0x23c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00c      	beq.n	8005a12 <HAL_SPI_Init+0x6e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a79      	ldr	r2, [pc, #484]	; (8005be4 <HAL_SPI_Init+0x240>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <HAL_SPI_Init+0x6e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a78      	ldr	r2, [pc, #480]	; (8005be8 <HAL_SPI_Init+0x244>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d002      	beq.n	8005a12 <HAL_SPI_Init+0x6e>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d811      	bhi.n	8005a36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005a16:	4a72      	ldr	r2, [pc, #456]	; (8005be0 <HAL_SPI_Init+0x23c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d009      	beq.n	8005a30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a70      	ldr	r2, [pc, #448]	; (8005be4 <HAL_SPI_Init+0x240>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_SPI_Init+0x8c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6f      	ldr	r2, [pc, #444]	; (8005be8 <HAL_SPI_Init+0x244>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d104      	bne.n	8005a3a <HAL_SPI_Init+0x96>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d901      	bls.n	8005a3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0cd      	b.n	8005bd6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fb98 	bl	8002184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005a76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a80:	d119      	bne.n	8005ab6 <HAL_SPI_Init+0x112>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8a:	d103      	bne.n	8005a94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10c      	bne.n	8005ab6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa4:	d107      	bne.n	8005ab6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00f      	beq.n	8005ae2 <HAL_SPI_Init+0x13e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b06      	cmp	r3, #6
 8005ac8:	d90b      	bls.n	8005ae2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e007      	b.n	8005af2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69da      	ldr	r2, [r3, #28]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	ea42 0103 	orr.w	r1, r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	ea42 0103 	orr.w	r1, r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40013000 	.word	0x40013000
 8005be4:	40003800 	.word	0x40003800
 8005be8:	40003c00 	.word	0x40003c00

08005bec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3320      	adds	r3, #32
 8005c02:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_SPI_Transmit+0x2a>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e1e1      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c1e:	f7fc fd9b 	bl	8002758 <HAL_GetTick>
 8005c22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d007      	beq.n	8005c40 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c3c:	7efb      	ldrb	r3, [r7, #27]
 8005c3e:	e1cc      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_SPI_Transmit+0x60>
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d107      	bne.n	8005c5c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005c58:	7efb      	ldrb	r3, [r7, #27]
 8005c5a:	e1be      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005cac:	d108      	bne.n	8005cc0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	e009      	b.n	8005cd4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005cd2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	4b96      	ldr	r3, [pc, #600]	; (8005f34 <HAL_SPI_Transmit+0x348>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	88f9      	ldrh	r1, [r7, #6]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d00:	d107      	bne.n	8005d12 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d947      	bls.n	8005daa <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005d1a:	e03f      	b.n	8005d9c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d114      	bne.n	8005d54 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005d52:	e023      	b.n	8005d9c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d54:	f7fc fd00 	bl	8002758 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d803      	bhi.n	8005d6c <HAL_SPI_Transmit+0x180>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d102      	bne.n	8005d72 <HAL_SPI_Transmit+0x186>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d114      	bne.n	8005d9c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fac6 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e11e      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1b9      	bne.n	8005d1c <HAL_SPI_Transmit+0x130>
 8005da8:	e0f1      	b.n	8005f8e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b07      	cmp	r3, #7
 8005db0:	f240 80e6 	bls.w	8005f80 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005db4:	e05d      	b.n	8005e72 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d132      	bne.n	8005e2a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d918      	bls.n	8005e02 <HAL_SPI_Transmit+0x216>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d014      	beq.n	8005e02 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b02      	subs	r3, #2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e00:	e037      	b.n	8005e72 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e06:	881a      	ldrh	r2, [r3, #0]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005e28:	e023      	b.n	8005e72 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2a:	f7fc fc95 	bl	8002758 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d803      	bhi.n	8005e42 <HAL_SPI_Transmit+0x256>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d102      	bne.n	8005e48 <HAL_SPI_Transmit+0x25c>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d114      	bne.n	8005e72 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fa5b 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0b3      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d19b      	bne.n	8005db6 <HAL_SPI_Transmit+0x1ca>
 8005e7e:	e086      	b.n	8005f8e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d154      	bne.n	8005f38 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d918      	bls.n	8005ecc <HAL_SPI_Transmit+0x2e0>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d914      	bls.n	8005ecc <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	1d1a      	adds	r2, r3, #4
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005eca:	e059      	b.n	8005f80 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d917      	bls.n	8005f08 <HAL_SPI_Transmit+0x31c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b02      	subs	r3, #2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f06:	e03b      	b.n	8005f80 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3320      	adds	r3, #32
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005f32:	e025      	b.n	8005f80 <HAL_SPI_Transmit+0x394>
 8005f34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f38:	f7fc fc0e 	bl	8002758 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d803      	bhi.n	8005f50 <HAL_SPI_Transmit+0x364>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d102      	bne.n	8005f56 <HAL_SPI_Transmit+0x36a>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d114      	bne.n	8005f80 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f9d4 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e02c      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af79 	bne.w	8005e80 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2108      	movs	r1, #8
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fa53 	bl	8006444 <SPI_WaitOnFlagUntilTimeout>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d007      	beq.n	8005fb4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f9a5 	bl	8006304 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005fd8:	7efb      	ldrb	r3, [r7, #27]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3330      	adds	r3, #48	; 0x30
 8005ffe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_SPI_Receive+0x2a>
 800600a:	2302      	movs	r3, #2
 800600c:	e173      	b.n	80062f6 <HAL_SPI_Receive+0x312>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006016:	f7fc fb9f 	bl	8002758 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8006028:	2302      	movs	r3, #2
 800602a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006034:	7ffb      	ldrb	r3, [r7, #31]
 8006036:	e15e      	b.n	80062f6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Receive+0x60>
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006050:	7ffb      	ldrb	r3, [r7, #31]
 8006052:	e150      	b.n	80062f6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2204      	movs	r2, #4
 8006058:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80060a4:	d108      	bne.n	80060b8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e009      	b.n	80060cc <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80060ca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <HAL_SPI_Receive+0x31c>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	88f9      	ldrh	r1, [r7, #6]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	430b      	orrs	r3, r1
 80060de:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f8:	d107      	bne.n	800610a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b0f      	cmp	r3, #15
 8006110:	d948      	bls.n	80061a4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006112:	e040      	b.n	8006196 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	f248 0308 	movw	r3, #32776	; 0x8008
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d014      	beq.n	800614e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800612e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800614c:	e023      	b.n	8006196 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614e:	f7fc fb03 	bl	8002758 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d803      	bhi.n	8006166 <HAL_SPI_Receive+0x182>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d102      	bne.n	800616c <HAL_SPI_Receive+0x188>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d114      	bne.n	8006196 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f8c9 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006180:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e0af      	b.n	80062f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1b8      	bne.n	8006114 <HAL_SPI_Receive+0x130>
 80061a2:	e095      	b.n	80062d0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	f240 808b 	bls.w	80062c4 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80061ae:	e03f      	b.n	8006230 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d114      	bne.n	80061e8 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	8812      	ldrh	r2, [r2, #0]
 80061c6:	b292      	uxth	r2, r2
 80061c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80061e6:	e023      	b.n	8006230 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e8:	f7fc fab6 	bl	8002758 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d803      	bhi.n	8006200 <HAL_SPI_Receive+0x21c>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Receive+0x222>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d114      	bne.n	8006230 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 f87c 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e062      	b.n	80062f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1b9      	bne.n	80061b0 <HAL_SPI_Receive+0x1cc>
 800623c:	e048      	b.n	80062d0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d117      	bne.n	800627c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800626e:	b29b      	uxth	r3, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800627a:	e023      	b.n	80062c4 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800627c:	f7fc fa6c 	bl	8002758 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d803      	bhi.n	8006294 <HAL_SPI_Receive+0x2b0>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d102      	bne.n	800629a <HAL_SPI_Receive+0x2b6>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d114      	bne.n	80062c4 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f832 	bl	8006304 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e018      	b.n	80062f6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1b6      	bne.n	800623e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f817 	bl	8006304 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80062f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	ffff0000 	.word	0xffff0000

08006304 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0210 	orr.w	r2, r2, #16
 8006332:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6919      	ldr	r1, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b3c      	ldr	r3, [pc, #240]	; (8006440 <SPI_CloseTransfer+0x13c>)
 8006350:	400b      	ands	r3, r1
 8006352:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006362:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b04      	cmp	r3, #4
 800636e:	d014      	beq.n	800639a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00f      	beq.n	800639a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006380:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0220 	orr.w	r2, r2, #32
 8006398:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d014      	beq.n	80063d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00f      	beq.n	80063d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00f      	beq.n	80063fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	f043 0201 	orr.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00f      	beq.n	8006424 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640a:	f043 0208 	orr.w	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006422:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffffc90 	.word	0xfffffc90

08006444 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006454:	e010      	b.n	8006478 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006456:	f7fc f97f 	bl	8002758 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d803      	bhi.n	800646e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d102      	bne.n	8006474 <SPI_WaitOnFlagUntilTimeout+0x30>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e00f      	b.n	8006498 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	429a      	cmp	r2, r3
 8006494:	d0df      	beq.n	8006456 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3307      	adds	r3, #7
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e049      	b.n	800657c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fb ffa3 	bl	8002448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 f835 	bl	8006584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a40      	ldr	r2, [pc, #256]	; (8006698 <TIM_Base_SetConfig+0x114>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d00f      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a3d      	ldr	r2, [pc, #244]	; (800669c <TIM_Base_SetConfig+0x118>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a3c      	ldr	r2, [pc, #240]	; (80066a0 <TIM_Base_SetConfig+0x11c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <TIM_Base_SetConfig+0x120>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a3a      	ldr	r2, [pc, #232]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <TIM_Base_SetConfig+0x114>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01f      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d01b      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a2c      	ldr	r2, [pc, #176]	; (800669c <TIM_Base_SetConfig+0x118>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d017      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a2b      	ldr	r2, [pc, #172]	; (80066a0 <TIM_Base_SetConfig+0x11c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d013      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2a      	ldr	r2, [pc, #168]	; (80066a4 <TIM_Base_SetConfig+0x120>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a28      	ldr	r2, [pc, #160]	; (80066ac <TIM_Base_SetConfig+0x128>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <TIM_Base_SetConfig+0x12c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <TIM_Base_SetConfig+0x130>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d108      	bne.n	8006630 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a10      	ldr	r2, [pc, #64]	; (8006698 <TIM_Base_SetConfig+0x114>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <TIM_Base_SetConfig+0xf8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <TIM_Base_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_Base_SetConfig+0xf8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a11      	ldr	r2, [pc, #68]	; (80066ac <TIM_Base_SetConfig+0x128>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_Base_SetConfig+0xf8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a10      	ldr	r2, [pc, #64]	; (80066b0 <TIM_Base_SetConfig+0x12c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_Base_SetConfig+0xf8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a0f      	ldr	r2, [pc, #60]	; (80066b4 <TIM_Base_SetConfig+0x130>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d103      	bne.n	8006684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	615a      	str	r2, [r3, #20]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40010400 	.word	0x40010400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800

080066b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e06d      	b.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a30      	ldr	r2, [pc, #192]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a2f      	ldr	r2, [pc, #188]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d108      	bne.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800670a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d022      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006742:	d01d      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1c      	ldr	r2, [pc, #112]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a16      	ldr	r2, [pc, #88]	; (80067cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	4313      	orrs	r3, r2
 8006790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40010400 	.word	0x40010400
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40001800 	.word	0x40001800
 80067d0:	40014000 	.word	0x40014000

080067d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e042      	b.n	800686c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb fe93 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2224      	movs	r2, #36	; 0x24
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0201 	bic.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8ba 	bl	8006990 <UART_SetConfig>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e022      	b.n	800686c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 ff1a 	bl	8007668 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 ffa1 	bl	80077ac <UART_CheckIdleState>
 800686a:	4603      	mov	r3, r0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	2b20      	cmp	r3, #32
 800688c:	d17b      	bne.n	8006986 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_UART_Transmit+0x26>
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e074      	b.n	8006988 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2221      	movs	r2, #33	; 0x21
 80068aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ae:	f7fb ff53 	bl	8002758 <HAL_GetTick>
 80068b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	88fa      	ldrh	r2, [r7, #6]
 80068b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	88fa      	ldrh	r2, [r7, #6]
 80068c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068cc:	d108      	bne.n	80068e0 <HAL_UART_Transmit+0x6c>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	e003      	b.n	80068e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068e8:	e030      	b.n	800694c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2200      	movs	r2, #0
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f001 f803 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e03d      	b.n	8006988 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10b      	bne.n	800692a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	3302      	adds	r3, #2
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e007      	b.n	800693a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	3301      	adds	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1c8      	bne.n	80068ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	2140      	movs	r1, #64	; 0x40
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 ffcc 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e006      	b.n	8006988 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006986:	2302      	movs	r3, #2
  }
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006994:	b092      	sub	sp, #72	; 0x48
 8006996:	af00      	add	r7, sp, #0
 8006998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	431a      	orrs	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4bbe      	ldr	r3, [pc, #760]	; (8006cb8 <UART_SetConfig+0x328>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4ab3      	ldr	r2, [pc, #716]	; (8006cbc <UART_SetConfig+0x32c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f8:	4313      	orrs	r3, r2
 80069fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	4baf      	ldr	r3, [pc, #700]	; (8006cc0 <UART_SetConfig+0x330>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f023 010f 	bic.w	r1, r3, #15
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4aa6      	ldr	r2, [pc, #664]	; (8006cc4 <UART_SetConfig+0x334>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d177      	bne.n	8006b20 <UART_SetConfig+0x190>
 8006a30:	4ba5      	ldr	r3, [pc, #660]	; (8006cc8 <UART_SetConfig+0x338>)
 8006a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a38:	2b28      	cmp	r3, #40	; 0x28
 8006a3a:	d86d      	bhi.n	8006b18 <UART_SetConfig+0x188>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <UART_SetConfig+0xb4>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006ae9 	.word	0x08006ae9
 8006a48:	08006b19 	.word	0x08006b19
 8006a4c:	08006b19 	.word	0x08006b19
 8006a50:	08006b19 	.word	0x08006b19
 8006a54:	08006b19 	.word	0x08006b19
 8006a58:	08006b19 	.word	0x08006b19
 8006a5c:	08006b19 	.word	0x08006b19
 8006a60:	08006b19 	.word	0x08006b19
 8006a64:	08006af1 	.word	0x08006af1
 8006a68:	08006b19 	.word	0x08006b19
 8006a6c:	08006b19 	.word	0x08006b19
 8006a70:	08006b19 	.word	0x08006b19
 8006a74:	08006b19 	.word	0x08006b19
 8006a78:	08006b19 	.word	0x08006b19
 8006a7c:	08006b19 	.word	0x08006b19
 8006a80:	08006b19 	.word	0x08006b19
 8006a84:	08006af9 	.word	0x08006af9
 8006a88:	08006b19 	.word	0x08006b19
 8006a8c:	08006b19 	.word	0x08006b19
 8006a90:	08006b19 	.word	0x08006b19
 8006a94:	08006b19 	.word	0x08006b19
 8006a98:	08006b19 	.word	0x08006b19
 8006a9c:	08006b19 	.word	0x08006b19
 8006aa0:	08006b19 	.word	0x08006b19
 8006aa4:	08006b01 	.word	0x08006b01
 8006aa8:	08006b19 	.word	0x08006b19
 8006aac:	08006b19 	.word	0x08006b19
 8006ab0:	08006b19 	.word	0x08006b19
 8006ab4:	08006b19 	.word	0x08006b19
 8006ab8:	08006b19 	.word	0x08006b19
 8006abc:	08006b19 	.word	0x08006b19
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b09 	.word	0x08006b09
 8006ac8:	08006b19 	.word	0x08006b19
 8006acc:	08006b19 	.word	0x08006b19
 8006ad0:	08006b19 	.word	0x08006b19
 8006ad4:	08006b19 	.word	0x08006b19
 8006ad8:	08006b19 	.word	0x08006b19
 8006adc:	08006b19 	.word	0x08006b19
 8006ae0:	08006b19 	.word	0x08006b19
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aee:	e326      	b.n	800713e <UART_SetConfig+0x7ae>
 8006af0:	2304      	movs	r3, #4
 8006af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af6:	e322      	b.n	800713e <UART_SetConfig+0x7ae>
 8006af8:	2308      	movs	r3, #8
 8006afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afe:	e31e      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b00:	2310      	movs	r3, #16
 8006b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b06:	e31a      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b08:	2320      	movs	r3, #32
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0e:	e316      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b16:	e312      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b18:	2380      	movs	r3, #128	; 0x80
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1e:	e30e      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a69      	ldr	r2, [pc, #420]	; (8006ccc <UART_SetConfig+0x33c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d130      	bne.n	8006b8c <UART_SetConfig+0x1fc>
 8006b2a:	4b67      	ldr	r3, [pc, #412]	; (8006cc8 <UART_SetConfig+0x338>)
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d826      	bhi.n	8006b84 <UART_SetConfig+0x1f4>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0x1ac>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b55 	.word	0x08006b55
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b7d 	.word	0x08006b7d
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b5a:	e2f0      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b62:	e2ec      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6a:	e2e8      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b72:	e2e4      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b74:	2320      	movs	r3, #32
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e2e0      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b82:	e2dc      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b84:	2380      	movs	r3, #128	; 0x80
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8a:	e2d8      	b.n	800713e <UART_SetConfig+0x7ae>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a4f      	ldr	r2, [pc, #316]	; (8006cd0 <UART_SetConfig+0x340>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d130      	bne.n	8006bf8 <UART_SetConfig+0x268>
 8006b96:	4b4c      	ldr	r3, [pc, #304]	; (8006cc8 <UART_SetConfig+0x338>)
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d826      	bhi.n	8006bf0 <UART_SetConfig+0x260>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0x218>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bc6:	e2ba      	b.n	800713e <UART_SetConfig+0x7ae>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bce:	e2b6      	b.n	800713e <UART_SetConfig+0x7ae>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd6:	e2b2      	b.n	800713e <UART_SetConfig+0x7ae>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bde:	e2ae      	b.n	800713e <UART_SetConfig+0x7ae>
 8006be0:	2320      	movs	r3, #32
 8006be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be6:	e2aa      	b.n	800713e <UART_SetConfig+0x7ae>
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bee:	e2a6      	b.n	800713e <UART_SetConfig+0x7ae>
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e2a2      	b.n	800713e <UART_SetConfig+0x7ae>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a35      	ldr	r2, [pc, #212]	; (8006cd4 <UART_SetConfig+0x344>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d130      	bne.n	8006c64 <UART_SetConfig+0x2d4>
 8006c02:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <UART_SetConfig+0x338>)
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d826      	bhi.n	8006c5c <UART_SetConfig+0x2cc>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0x284>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c2d 	.word	0x08006c2d
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	08006c3d 	.word	0x08006c3d
 8006c20:	08006c45 	.word	0x08006c45
 8006c24:	08006c4d 	.word	0x08006c4d
 8006c28:	08006c55 	.word	0x08006c55
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c32:	e284      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3a:	e280      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c42:	e27c      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4a:	e278      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c52:	e274      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c54:	2340      	movs	r3, #64	; 0x40
 8006c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c5a:	e270      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e26c      	b.n	800713e <UART_SetConfig+0x7ae>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <UART_SetConfig+0x348>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d142      	bne.n	8006cf4 <UART_SetConfig+0x364>
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <UART_SetConfig+0x338>)
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b05      	cmp	r3, #5
 8006c78:	d838      	bhi.n	8006cec <UART_SetConfig+0x35c>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x2f0>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cdd 	.word	0x08006cdd
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e24e      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e24a      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ca8:	2308      	movs	r3, #8
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e246      	b.n	800713e <UART_SetConfig+0x7ae>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e242      	b.n	800713e <UART_SetConfig+0x7ae>
 8006cb8:	cfff69f3 	.word	0xcfff69f3
 8006cbc:	58000c00 	.word	0x58000c00
 8006cc0:	11fff4ff 	.word	0x11fff4ff
 8006cc4:	40011000 	.word	0x40011000
 8006cc8:	58024400 	.word	0x58024400
 8006ccc:	40004400 	.word	0x40004400
 8006cd0:	40004800 	.word	0x40004800
 8006cd4:	40004c00 	.word	0x40004c00
 8006cd8:	40005000 	.word	0x40005000
 8006cdc:	2320      	movs	r3, #32
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e22c      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e228      	b.n	800713e <UART_SetConfig+0x7ae>
 8006cec:	2380      	movs	r3, #128	; 0x80
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e224      	b.n	800713e <UART_SetConfig+0x7ae>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4ab1      	ldr	r2, [pc, #708]	; (8006fc0 <UART_SetConfig+0x630>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d176      	bne.n	8006dec <UART_SetConfig+0x45c>
 8006cfe:	4bb1      	ldr	r3, [pc, #708]	; (8006fc4 <UART_SetConfig+0x634>)
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d06:	2b28      	cmp	r3, #40	; 0x28
 8006d08:	d86c      	bhi.n	8006de4 <UART_SetConfig+0x454>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x380>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006db5 	.word	0x08006db5
 8006d14:	08006de5 	.word	0x08006de5
 8006d18:	08006de5 	.word	0x08006de5
 8006d1c:	08006de5 	.word	0x08006de5
 8006d20:	08006de5 	.word	0x08006de5
 8006d24:	08006de5 	.word	0x08006de5
 8006d28:	08006de5 	.word	0x08006de5
 8006d2c:	08006de5 	.word	0x08006de5
 8006d30:	08006dbd 	.word	0x08006dbd
 8006d34:	08006de5 	.word	0x08006de5
 8006d38:	08006de5 	.word	0x08006de5
 8006d3c:	08006de5 	.word	0x08006de5
 8006d40:	08006de5 	.word	0x08006de5
 8006d44:	08006de5 	.word	0x08006de5
 8006d48:	08006de5 	.word	0x08006de5
 8006d4c:	08006de5 	.word	0x08006de5
 8006d50:	08006dc5 	.word	0x08006dc5
 8006d54:	08006de5 	.word	0x08006de5
 8006d58:	08006de5 	.word	0x08006de5
 8006d5c:	08006de5 	.word	0x08006de5
 8006d60:	08006de5 	.word	0x08006de5
 8006d64:	08006de5 	.word	0x08006de5
 8006d68:	08006de5 	.word	0x08006de5
 8006d6c:	08006de5 	.word	0x08006de5
 8006d70:	08006dcd 	.word	0x08006dcd
 8006d74:	08006de5 	.word	0x08006de5
 8006d78:	08006de5 	.word	0x08006de5
 8006d7c:	08006de5 	.word	0x08006de5
 8006d80:	08006de5 	.word	0x08006de5
 8006d84:	08006de5 	.word	0x08006de5
 8006d88:	08006de5 	.word	0x08006de5
 8006d8c:	08006de5 	.word	0x08006de5
 8006d90:	08006dd5 	.word	0x08006dd5
 8006d94:	08006de5 	.word	0x08006de5
 8006d98:	08006de5 	.word	0x08006de5
 8006d9c:	08006de5 	.word	0x08006de5
 8006da0:	08006de5 	.word	0x08006de5
 8006da4:	08006de5 	.word	0x08006de5
 8006da8:	08006de5 	.word	0x08006de5
 8006dac:	08006de5 	.word	0x08006de5
 8006db0:	08006ddd 	.word	0x08006ddd
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e1c0      	b.n	800713e <UART_SetConfig+0x7ae>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e1bc      	b.n	800713e <UART_SetConfig+0x7ae>
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e1b8      	b.n	800713e <UART_SetConfig+0x7ae>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e1b4      	b.n	800713e <UART_SetConfig+0x7ae>
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e1b0      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ddc:	2340      	movs	r3, #64	; 0x40
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e1ac      	b.n	800713e <UART_SetConfig+0x7ae>
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dea:	e1a8      	b.n	800713e <UART_SetConfig+0x7ae>
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a75      	ldr	r2, [pc, #468]	; (8006fc8 <UART_SetConfig+0x638>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d130      	bne.n	8006e58 <UART_SetConfig+0x4c8>
 8006df6:	4b73      	ldr	r3, [pc, #460]	; (8006fc4 <UART_SetConfig+0x634>)
 8006df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	d826      	bhi.n	8006e50 <UART_SetConfig+0x4c0>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x478>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e21 	.word	0x08006e21
 8006e0c:	08006e29 	.word	0x08006e29
 8006e10:	08006e31 	.word	0x08006e31
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	2300      	movs	r3, #0
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e18a      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e186      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e30:	2308      	movs	r3, #8
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e182      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e17e      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e40:	2320      	movs	r3, #32
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e17a      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e176      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e56:	e172      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5b      	ldr	r2, [pc, #364]	; (8006fcc <UART_SetConfig+0x63c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d130      	bne.n	8006ec4 <UART_SetConfig+0x534>
 8006e62:	4b58      	ldr	r3, [pc, #352]	; (8006fc4 <UART_SetConfig+0x634>)
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b05      	cmp	r3, #5
 8006e6c:	d826      	bhi.n	8006ebc <UART_SetConfig+0x52c>
 8006e6e:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <UART_SetConfig+0x4e4>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e8d 	.word	0x08006e8d
 8006e78:	08006e95 	.word	0x08006e95
 8006e7c:	08006e9d 	.word	0x08006e9d
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ead 	.word	0x08006ead
 8006e88:	08006eb5 	.word	0x08006eb5
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e154      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e94:	2304      	movs	r3, #4
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9a:	e150      	b.n	800713e <UART_SetConfig+0x7ae>
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e14c      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e148      	b.n	800713e <UART_SetConfig+0x7ae>
 8006eac:	2320      	movs	r3, #32
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e144      	b.n	800713e <UART_SetConfig+0x7ae>
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e140      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec2:	e13c      	b.n	800713e <UART_SetConfig+0x7ae>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <UART_SetConfig+0x640>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f040 8082 	bne.w	8006fd4 <UART_SetConfig+0x644>
 8006ed0:	4b3c      	ldr	r3, [pc, #240]	; (8006fc4 <UART_SetConfig+0x634>)
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed8:	2b28      	cmp	r3, #40	; 0x28
 8006eda:	d86d      	bhi.n	8006fb8 <UART_SetConfig+0x628>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x554>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f89 	.word	0x08006f89
 8006ee8:	08006fb9 	.word	0x08006fb9
 8006eec:	08006fb9 	.word	0x08006fb9
 8006ef0:	08006fb9 	.word	0x08006fb9
 8006ef4:	08006fb9 	.word	0x08006fb9
 8006ef8:	08006fb9 	.word	0x08006fb9
 8006efc:	08006fb9 	.word	0x08006fb9
 8006f00:	08006fb9 	.word	0x08006fb9
 8006f04:	08006f91 	.word	0x08006f91
 8006f08:	08006fb9 	.word	0x08006fb9
 8006f0c:	08006fb9 	.word	0x08006fb9
 8006f10:	08006fb9 	.word	0x08006fb9
 8006f14:	08006fb9 	.word	0x08006fb9
 8006f18:	08006fb9 	.word	0x08006fb9
 8006f1c:	08006fb9 	.word	0x08006fb9
 8006f20:	08006fb9 	.word	0x08006fb9
 8006f24:	08006f99 	.word	0x08006f99
 8006f28:	08006fb9 	.word	0x08006fb9
 8006f2c:	08006fb9 	.word	0x08006fb9
 8006f30:	08006fb9 	.word	0x08006fb9
 8006f34:	08006fb9 	.word	0x08006fb9
 8006f38:	08006fb9 	.word	0x08006fb9
 8006f3c:	08006fb9 	.word	0x08006fb9
 8006f40:	08006fb9 	.word	0x08006fb9
 8006f44:	08006fa1 	.word	0x08006fa1
 8006f48:	08006fb9 	.word	0x08006fb9
 8006f4c:	08006fb9 	.word	0x08006fb9
 8006f50:	08006fb9 	.word	0x08006fb9
 8006f54:	08006fb9 	.word	0x08006fb9
 8006f58:	08006fb9 	.word	0x08006fb9
 8006f5c:	08006fb9 	.word	0x08006fb9
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fa9 	.word	0x08006fa9
 8006f68:	08006fb9 	.word	0x08006fb9
 8006f6c:	08006fb9 	.word	0x08006fb9
 8006f70:	08006fb9 	.word	0x08006fb9
 8006f74:	08006fb9 	.word	0x08006fb9
 8006f78:	08006fb9 	.word	0x08006fb9
 8006f7c:	08006fb9 	.word	0x08006fb9
 8006f80:	08006fb9 	.word	0x08006fb9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e0d6      	b.n	800713e <UART_SetConfig+0x7ae>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e0d2      	b.n	800713e <UART_SetConfig+0x7ae>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e0ce      	b.n	800713e <UART_SetConfig+0x7ae>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e0ca      	b.n	800713e <UART_SetConfig+0x7ae>
 8006fa8:	2320      	movs	r3, #32
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e0c6      	b.n	800713e <UART_SetConfig+0x7ae>
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e0c2      	b.n	800713e <UART_SetConfig+0x7ae>
 8006fb8:	2380      	movs	r3, #128	; 0x80
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e0be      	b.n	800713e <UART_SetConfig+0x7ae>
 8006fc0:	40011400 	.word	0x40011400
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	40007800 	.word	0x40007800
 8006fcc:	40007c00 	.word	0x40007c00
 8006fd0:	40011800 	.word	0x40011800
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4aad      	ldr	r2, [pc, #692]	; (8007290 <UART_SetConfig+0x900>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d176      	bne.n	80070cc <UART_SetConfig+0x73c>
 8006fde:	4bad      	ldr	r3, [pc, #692]	; (8007294 <UART_SetConfig+0x904>)
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fe6:	2b28      	cmp	r3, #40	; 0x28
 8006fe8:	d86c      	bhi.n	80070c4 <UART_SetConfig+0x734>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <UART_SetConfig+0x660>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007095 	.word	0x08007095
 8006ff4:	080070c5 	.word	0x080070c5
 8006ff8:	080070c5 	.word	0x080070c5
 8006ffc:	080070c5 	.word	0x080070c5
 8007000:	080070c5 	.word	0x080070c5
 8007004:	080070c5 	.word	0x080070c5
 8007008:	080070c5 	.word	0x080070c5
 800700c:	080070c5 	.word	0x080070c5
 8007010:	0800709d 	.word	0x0800709d
 8007014:	080070c5 	.word	0x080070c5
 8007018:	080070c5 	.word	0x080070c5
 800701c:	080070c5 	.word	0x080070c5
 8007020:	080070c5 	.word	0x080070c5
 8007024:	080070c5 	.word	0x080070c5
 8007028:	080070c5 	.word	0x080070c5
 800702c:	080070c5 	.word	0x080070c5
 8007030:	080070a5 	.word	0x080070a5
 8007034:	080070c5 	.word	0x080070c5
 8007038:	080070c5 	.word	0x080070c5
 800703c:	080070c5 	.word	0x080070c5
 8007040:	080070c5 	.word	0x080070c5
 8007044:	080070c5 	.word	0x080070c5
 8007048:	080070c5 	.word	0x080070c5
 800704c:	080070c5 	.word	0x080070c5
 8007050:	080070ad 	.word	0x080070ad
 8007054:	080070c5 	.word	0x080070c5
 8007058:	080070c5 	.word	0x080070c5
 800705c:	080070c5 	.word	0x080070c5
 8007060:	080070c5 	.word	0x080070c5
 8007064:	080070c5 	.word	0x080070c5
 8007068:	080070c5 	.word	0x080070c5
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070b5 	.word	0x080070b5
 8007074:	080070c5 	.word	0x080070c5
 8007078:	080070c5 	.word	0x080070c5
 800707c:	080070c5 	.word	0x080070c5
 8007080:	080070c5 	.word	0x080070c5
 8007084:	080070c5 	.word	0x080070c5
 8007088:	080070c5 	.word	0x080070c5
 800708c:	080070c5 	.word	0x080070c5
 8007090:	080070bd 	.word	0x080070bd
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709a:	e050      	b.n	800713e <UART_SetConfig+0x7ae>
 800709c:	2304      	movs	r3, #4
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a2:	e04c      	b.n	800713e <UART_SetConfig+0x7ae>
 80070a4:	2308      	movs	r3, #8
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e048      	b.n	800713e <UART_SetConfig+0x7ae>
 80070ac:	2310      	movs	r3, #16
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e044      	b.n	800713e <UART_SetConfig+0x7ae>
 80070b4:	2320      	movs	r3, #32
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e040      	b.n	800713e <UART_SetConfig+0x7ae>
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e03c      	b.n	800713e <UART_SetConfig+0x7ae>
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e038      	b.n	800713e <UART_SetConfig+0x7ae>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a71      	ldr	r2, [pc, #452]	; (8007298 <UART_SetConfig+0x908>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d130      	bne.n	8007138 <UART_SetConfig+0x7a8>
 80070d6:	4b6f      	ldr	r3, [pc, #444]	; (8007294 <UART_SetConfig+0x904>)
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	2b05      	cmp	r3, #5
 80070e0:	d826      	bhi.n	8007130 <UART_SetConfig+0x7a0>
 80070e2:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <UART_SetConfig+0x758>)
 80070e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e8:	08007101 	.word	0x08007101
 80070ec:	08007109 	.word	0x08007109
 80070f0:	08007111 	.word	0x08007111
 80070f4:	08007119 	.word	0x08007119
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007129 	.word	0x08007129
 8007100:	2302      	movs	r3, #2
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007106:	e01a      	b.n	800713e <UART_SetConfig+0x7ae>
 8007108:	2304      	movs	r3, #4
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e016      	b.n	800713e <UART_SetConfig+0x7ae>
 8007110:	2308      	movs	r3, #8
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e012      	b.n	800713e <UART_SetConfig+0x7ae>
 8007118:	2310      	movs	r3, #16
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e00e      	b.n	800713e <UART_SetConfig+0x7ae>
 8007120:	2320      	movs	r3, #32
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e00a      	b.n	800713e <UART_SetConfig+0x7ae>
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e006      	b.n	800713e <UART_SetConfig+0x7ae>
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e002      	b.n	800713e <UART_SetConfig+0x7ae>
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a55      	ldr	r2, [pc, #340]	; (8007298 <UART_SetConfig+0x908>)
 8007144:	4293      	cmp	r3, r2
 8007146:	f040 80f8 	bne.w	800733a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800714a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800714e:	2b20      	cmp	r3, #32
 8007150:	dc46      	bgt.n	80071e0 <UART_SetConfig+0x850>
 8007152:	2b02      	cmp	r3, #2
 8007154:	db75      	blt.n	8007242 <UART_SetConfig+0x8b2>
 8007156:	3b02      	subs	r3, #2
 8007158:	2b1e      	cmp	r3, #30
 800715a:	d872      	bhi.n	8007242 <UART_SetConfig+0x8b2>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x7d4>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	080071e7 	.word	0x080071e7
 8007168:	08007243 	.word	0x08007243
 800716c:	080071ef 	.word	0x080071ef
 8007170:	08007243 	.word	0x08007243
 8007174:	08007243 	.word	0x08007243
 8007178:	08007243 	.word	0x08007243
 800717c:	080071ff 	.word	0x080071ff
 8007180:	08007243 	.word	0x08007243
 8007184:	08007243 	.word	0x08007243
 8007188:	08007243 	.word	0x08007243
 800718c:	08007243 	.word	0x08007243
 8007190:	08007243 	.word	0x08007243
 8007194:	08007243 	.word	0x08007243
 8007198:	08007243 	.word	0x08007243
 800719c:	0800720f 	.word	0x0800720f
 80071a0:	08007243 	.word	0x08007243
 80071a4:	08007243 	.word	0x08007243
 80071a8:	08007243 	.word	0x08007243
 80071ac:	08007243 	.word	0x08007243
 80071b0:	08007243 	.word	0x08007243
 80071b4:	08007243 	.word	0x08007243
 80071b8:	08007243 	.word	0x08007243
 80071bc:	08007243 	.word	0x08007243
 80071c0:	08007243 	.word	0x08007243
 80071c4:	08007243 	.word	0x08007243
 80071c8:	08007243 	.word	0x08007243
 80071cc:	08007243 	.word	0x08007243
 80071d0:	08007243 	.word	0x08007243
 80071d4:	08007243 	.word	0x08007243
 80071d8:	08007243 	.word	0x08007243
 80071dc:	08007235 	.word	0x08007235
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d02a      	beq.n	800723a <UART_SetConfig+0x8aa>
 80071e4:	e02d      	b.n	8007242 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80071e6:	f7fd ffbb 	bl	8005160 <HAL_RCCEx_GetD3PCLK1Freq>
 80071ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80071ec:	e02f      	b.n	800724e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fd ffca 	bl	800518c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fc:	e027      	b.n	800724e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071fe:	f107 0318 	add.w	r3, r7, #24
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f916 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800720c:	e01f      	b.n	800724e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720e:	4b21      	ldr	r3, [pc, #132]	; (8007294 <UART_SetConfig+0x904>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800721a:	4b1e      	ldr	r3, [pc, #120]	; (8007294 <UART_SetConfig+0x904>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	08db      	lsrs	r3, r3, #3
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	4a1d      	ldr	r2, [pc, #116]	; (800729c <UART_SetConfig+0x90c>)
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800722c:	e00f      	b.n	800724e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800722e:	4b1b      	ldr	r3, [pc, #108]	; (800729c <UART_SetConfig+0x90c>)
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007232:	e00c      	b.n	800724e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <UART_SetConfig+0x910>)
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007238:	e009      	b.n	800724e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007240:	e005      	b.n	800724e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800724c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 81ee 	beq.w	8007632 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	4a12      	ldr	r2, [pc, #72]	; (80072a4 <UART_SetConfig+0x914>)
 800725c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007260:	461a      	mov	r2, r3
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	fbb3 f3f2 	udiv	r3, r3, r2
 8007268:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	4613      	mov	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	4413      	add	r3, r2
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	429a      	cmp	r2, r3
 8007278:	d305      	bcc.n	8007286 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	429a      	cmp	r2, r3
 8007284:	d910      	bls.n	80072a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800728c:	e1d1      	b.n	8007632 <UART_SetConfig+0xca2>
 800728e:	bf00      	nop
 8007290:	40011c00 	.word	0x40011c00
 8007294:	58024400 	.word	0x58024400
 8007298:	58000c00 	.word	0x58000c00
 800729c:	03d09000 	.word	0x03d09000
 80072a0:	003d0900 	.word	0x003d0900
 80072a4:	08007d6c 	.word	0x08007d6c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072aa:	2200      	movs	r2, #0
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	60fa      	str	r2, [r7, #12]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	4ac0      	ldr	r2, [pc, #768]	; (80075b8 <UART_SetConfig+0xc28>)
 80072b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2200      	movs	r2, #0
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	607a      	str	r2, [r7, #4]
 80072c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072ca:	f7f9 f817 	bl	80002fc <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	020b      	lsls	r3, r1, #8
 80072e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e4:	0202      	lsls	r2, r0, #8
 80072e6:	6979      	ldr	r1, [r7, #20]
 80072e8:	6849      	ldr	r1, [r1, #4]
 80072ea:	0849      	lsrs	r1, r1, #1
 80072ec:	2000      	movs	r0, #0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4605      	mov	r5, r0
 80072f2:	eb12 0804 	adds.w	r8, r2, r4
 80072f6:	eb43 0905 	adc.w	r9, r3, r5
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	469a      	mov	sl, r3
 8007302:	4693      	mov	fp, r2
 8007304:	4652      	mov	r2, sl
 8007306:	465b      	mov	r3, fp
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f8 fff6 	bl	80002fc <__aeabi_uldivmod>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4613      	mov	r3, r2
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731e:	d308      	bcc.n	8007332 <UART_SetConfig+0x9a2>
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007326:	d204      	bcs.n	8007332 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	e17f      	b.n	8007632 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007338:	e17b      	b.n	8007632 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007342:	f040 80bd 	bne.w	80074c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007346:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800734a:	2b20      	cmp	r3, #32
 800734c:	dc48      	bgt.n	80073e0 <UART_SetConfig+0xa50>
 800734e:	2b00      	cmp	r3, #0
 8007350:	db7b      	blt.n	800744a <UART_SetConfig+0xaba>
 8007352:	2b20      	cmp	r3, #32
 8007354:	d879      	bhi.n	800744a <UART_SetConfig+0xaba>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x9cc>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	080073e7 	.word	0x080073e7
 8007360:	080073ef 	.word	0x080073ef
 8007364:	0800744b 	.word	0x0800744b
 8007368:	0800744b 	.word	0x0800744b
 800736c:	080073f7 	.word	0x080073f7
 8007370:	0800744b 	.word	0x0800744b
 8007374:	0800744b 	.word	0x0800744b
 8007378:	0800744b 	.word	0x0800744b
 800737c:	08007407 	.word	0x08007407
 8007380:	0800744b 	.word	0x0800744b
 8007384:	0800744b 	.word	0x0800744b
 8007388:	0800744b 	.word	0x0800744b
 800738c:	0800744b 	.word	0x0800744b
 8007390:	0800744b 	.word	0x0800744b
 8007394:	0800744b 	.word	0x0800744b
 8007398:	0800744b 	.word	0x0800744b
 800739c:	08007417 	.word	0x08007417
 80073a0:	0800744b 	.word	0x0800744b
 80073a4:	0800744b 	.word	0x0800744b
 80073a8:	0800744b 	.word	0x0800744b
 80073ac:	0800744b 	.word	0x0800744b
 80073b0:	0800744b 	.word	0x0800744b
 80073b4:	0800744b 	.word	0x0800744b
 80073b8:	0800744b 	.word	0x0800744b
 80073bc:	0800744b 	.word	0x0800744b
 80073c0:	0800744b 	.word	0x0800744b
 80073c4:	0800744b 	.word	0x0800744b
 80073c8:	0800744b 	.word	0x0800744b
 80073cc:	0800744b 	.word	0x0800744b
 80073d0:	0800744b 	.word	0x0800744b
 80073d4:	0800744b 	.word	0x0800744b
 80073d8:	0800744b 	.word	0x0800744b
 80073dc:	0800743d 	.word	0x0800743d
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d02e      	beq.n	8007442 <UART_SetConfig+0xab2>
 80073e4:	e031      	b.n	800744a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e6:	f7fc fcd1 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80073ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ec:	e033      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ee:	f7fc fce3 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 80073f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073f4:	e02f      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd fec6 	bl	800518c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007404:	e027      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007406:	f107 0318 	add.w	r3, r7, #24
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe f812 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007414:	e01f      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007416:	4b69      	ldr	r3, [pc, #420]	; (80075bc <UART_SetConfig+0xc2c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007422:	4b66      	ldr	r3, [pc, #408]	; (80075bc <UART_SetConfig+0xc2c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	4a64      	ldr	r2, [pc, #400]	; (80075c0 <UART_SetConfig+0xc30>)
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007434:	e00f      	b.n	8007456 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007436:	4b62      	ldr	r3, [pc, #392]	; (80075c0 <UART_SetConfig+0xc30>)
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800743a:	e00c      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800743c:	4b61      	ldr	r3, [pc, #388]	; (80075c4 <UART_SetConfig+0xc34>)
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007440:	e009      	b.n	8007456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007448:	e005      	b.n	8007456 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80ea 	beq.w	8007632 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	4a55      	ldr	r2, [pc, #340]	; (80075b8 <UART_SetConfig+0xc28>)
 8007464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007468:	461a      	mov	r2, r3
 800746a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007470:	005a      	lsls	r2, r3, #1
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	441a      	add	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d916      	bls.n	80074b8 <UART_SetConfig+0xb28>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007490:	d212      	bcs.n	80074b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	b29b      	uxth	r3, r3
 8007496:	f023 030f 	bic.w	r3, r3, #15
 800749a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074aa:	4313      	orrs	r3, r2
 80074ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80074b4:	60da      	str	r2, [r3, #12]
 80074b6:	e0bc      	b.n	8007632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074be:	e0b8      	b.n	8007632 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	dc4b      	bgt.n	8007560 <UART_SetConfig+0xbd0>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f2c0 8087 	blt.w	80075dc <UART_SetConfig+0xc4c>
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	f200 8084 	bhi.w	80075dc <UART_SetConfig+0xc4c>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0xb4c>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007567 	.word	0x08007567
 80074e0:	0800756f 	.word	0x0800756f
 80074e4:	080075dd 	.word	0x080075dd
 80074e8:	080075dd 	.word	0x080075dd
 80074ec:	08007577 	.word	0x08007577
 80074f0:	080075dd 	.word	0x080075dd
 80074f4:	080075dd 	.word	0x080075dd
 80074f8:	080075dd 	.word	0x080075dd
 80074fc:	08007587 	.word	0x08007587
 8007500:	080075dd 	.word	0x080075dd
 8007504:	080075dd 	.word	0x080075dd
 8007508:	080075dd 	.word	0x080075dd
 800750c:	080075dd 	.word	0x080075dd
 8007510:	080075dd 	.word	0x080075dd
 8007514:	080075dd 	.word	0x080075dd
 8007518:	080075dd 	.word	0x080075dd
 800751c:	08007597 	.word	0x08007597
 8007520:	080075dd 	.word	0x080075dd
 8007524:	080075dd 	.word	0x080075dd
 8007528:	080075dd 	.word	0x080075dd
 800752c:	080075dd 	.word	0x080075dd
 8007530:	080075dd 	.word	0x080075dd
 8007534:	080075dd 	.word	0x080075dd
 8007538:	080075dd 	.word	0x080075dd
 800753c:	080075dd 	.word	0x080075dd
 8007540:	080075dd 	.word	0x080075dd
 8007544:	080075dd 	.word	0x080075dd
 8007548:	080075dd 	.word	0x080075dd
 800754c:	080075dd 	.word	0x080075dd
 8007550:	080075dd 	.word	0x080075dd
 8007554:	080075dd 	.word	0x080075dd
 8007558:	080075dd 	.word	0x080075dd
 800755c:	080075cf 	.word	0x080075cf
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d037      	beq.n	80075d4 <UART_SetConfig+0xc44>
 8007564:	e03a      	b.n	80075dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007566:	f7fc fc11 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 800756a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800756c:	e03c      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756e:	f7fc fc23 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8007572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007574:	e038      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800757a:	4618      	mov	r0, r3
 800757c:	f7fd fe06 	bl	800518c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007584:	e030      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	4618      	mov	r0, r3
 800758c:	f7fd ff52 	bl	8005434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007594:	e028      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <UART_SetConfig+0xc2c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d012      	beq.n	80075c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075a2:	4b06      	ldr	r3, [pc, #24]	; (80075bc <UART_SetConfig+0xc2c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	08db      	lsrs	r3, r3, #3
 80075a8:	f003 0303 	and.w	r3, r3, #3
 80075ac:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <UART_SetConfig+0xc30>)
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075b4:	e018      	b.n	80075e8 <UART_SetConfig+0xc58>
 80075b6:	bf00      	nop
 80075b8:	08007d6c 	.word	0x08007d6c
 80075bc:	58024400 	.word	0x58024400
 80075c0:	03d09000 	.word	0x03d09000
 80075c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80075c8:	4b24      	ldr	r3, [pc, #144]	; (800765c <UART_SetConfig+0xccc>)
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075cc:	e00c      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <UART_SetConfig+0xcd0>)
 80075d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075d2:	e009      	b.n	80075e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075da:	e005      	b.n	80075e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80075e6:	bf00      	nop
    }

    if (pclk != 0U)
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d021      	beq.n	8007632 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <UART_SetConfig+0xcd4>)
 80075f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	441a      	add	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	2b0f      	cmp	r3, #15
 8007616:	d909      	bls.n	800762c <UART_SetConfig+0xc9c>
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761e:	d205      	bcs.n	800762c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	b29a      	uxth	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	e002      	b.n	8007632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2201      	movs	r2, #1
 8007636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2201      	movs	r2, #1
 800763e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800764e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007652:	4618      	mov	r0, r3
 8007654:	3748      	adds	r7, #72	; 0x48
 8007656:	46bd      	mov	sp, r7
 8007658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800765c:	03d09000 	.word	0x03d09000
 8007660:	003d0900 	.word	0x003d0900
 8007664:	08007d6c 	.word	0x08007d6c

08007668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f003 0308 	and.w	r3, r3, #8
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00a      	beq.n	800771a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01a      	beq.n	800777e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007766:	d10a      	bne.n	800777e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	605a      	str	r2, [r3, #4]
  }
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b098      	sub	sp, #96	; 0x60
 80077b0:	af02      	add	r7, sp, #8
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077bc:	f7fa ffcc 	bl	8002758 <HAL_GetTick>
 80077c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0308 	and.w	r3, r3, #8
 80077cc:	2b08      	cmp	r3, #8
 80077ce:	d12f      	bne.n	8007830 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d8:	2200      	movs	r2, #0
 80077da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f88e 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d022      	beq.n	8007830 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
 800780a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800780e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e6      	bne.n	80077ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e063      	b.n	80078f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0304 	and.w	r3, r3, #4
 800783a:	2b04      	cmp	r3, #4
 800783c:	d149      	bne.n	80078d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800783e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007846:	2200      	movs	r2, #0
 8007848:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f857 	bl	8007900 <UART_WaitOnFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03c      	beq.n	80078d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	623b      	str	r3, [r7, #32]
   return(result);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
 8007878:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800787c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e6      	bne.n	8007858 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	60fb      	str	r3, [r7, #12]
   return(result);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 0301 	bic.w	r3, r3, #1
 80078a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078aa:	61fa      	str	r2, [r7, #28]
 80078ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	69b9      	ldr	r1, [r7, #24]
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	617b      	str	r3, [r7, #20]
   return(result);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e5      	bne.n	800788a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e012      	b.n	80078f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3758      	adds	r7, #88	; 0x58
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	4613      	mov	r3, r2
 800790e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007910:	e049      	b.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d045      	beq.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791a:	f7fa ff1d 	bl	8002758 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <UART_WaitOnFlagUntilTimeout+0x30>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e048      	b.n	80079c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d031      	beq.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d110      	bne.n	8007972 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2208      	movs	r2, #8
 8007956:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f839 	bl	80079d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2208      	movs	r2, #8
 8007962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e029      	b.n	80079c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007980:	d111      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800798a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f81f 	bl	80079d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e00f      	b.n	80079c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	bf0c      	ite	eq
 80079b6:	2301      	moveq	r3, #1
 80079b8:	2300      	movne	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d0a6      	beq.n	8007912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b095      	sub	sp, #84	; 0x54
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f6:	643b      	str	r3, [r7, #64]	; 0x40
 80079f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e6      	bne.n	80079d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <UART_EndRxTransfer+0xc8>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d118      	bne.n	8007a78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f023 0310 	bic.w	r3, r3, #16
 8007a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a68:	6979      	ldr	r1, [r7, #20]
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	e841 2300 	strex	r3, r2, [r1]
 8007a70:	613b      	str	r3, [r7, #16]
   return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1e6      	bne.n	8007a46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a8c:	bf00      	nop
 8007a8e:	3754      	adds	r7, #84	; 0x54
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	effffffe 	.word	0xeffffffe

08007a9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e027      	b.n	8007b02 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2224      	movs	r2, #36	; 0x24
 8007abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ae0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e02d      	b.n	8007b82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2224      	movs	r2, #36	; 0x24
 8007b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f850 	bl	8007c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e02d      	b.n	8007bfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2224      	movs	r2, #36	; 0x24
 8007bae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f812 	bl	8007c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d108      	bne.n	8007c2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c28:	e031      	b.n	8007c8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c2e:	2310      	movs	r3, #16
 8007c30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	0e5b      	lsrs	r3, r3, #25
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	0f5b      	lsrs	r3, r3, #29
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	7b3a      	ldrb	r2, [r7, #12]
 8007c56:	4911      	ldr	r1, [pc, #68]	; (8007c9c <UARTEx_SetNbDataToProcess+0x94>)
 8007c58:	5c8a      	ldrb	r2, [r1, r2]
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c5e:	7b3a      	ldrb	r2, [r7, #12]
 8007c60:	490f      	ldr	r1, [pc, #60]	; (8007ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8007c62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	7b7a      	ldrb	r2, [r7, #13]
 8007c74:	4909      	ldr	r1, [pc, #36]	; (8007c9c <UARTEx_SetNbDataToProcess+0x94>)
 8007c76:	5c8a      	ldrb	r2, [r1, r2]
 8007c78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c7c:	7b7a      	ldrb	r2, [r7, #13]
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8007c80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	08007d84 	.word	0x08007d84
 8007ca0:	08007d8c 	.word	0x08007d8c

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	; (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	; (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	; (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	; (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f000 f82e 	bl	8007d18 <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	08007d9c 	.word	0x08007d9c
 8007ce0:	08007d9c 	.word	0x08007d9c
 8007ce4:	08007d9c 	.word	0x08007d9c
 8007ce8:	08007da0 	.word	0x08007da0

08007cec <memcpy>:
 8007cec:	440a      	add	r2, r1
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf4:	d100      	bne.n	8007cf8 <memcpy+0xc>
 8007cf6:	4770      	bx	lr
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d02:	4291      	cmp	r1, r2
 8007d04:	d1f9      	bne.n	8007cfa <memcpy+0xe>
 8007d06:	bd10      	pop	{r4, pc}

08007d08 <memset>:
 8007d08:	4402      	add	r2, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <_init>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr

08007d24 <_fini>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr
