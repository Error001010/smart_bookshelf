
bs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013410  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b64  080136c0  080136c0  000236c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014224  08014224  00024224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801422c  0801422c  0002422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014230  08014230  00024230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  08014234  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ff4  240001e4  08014418  000301e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240011d8  08014418  000311d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024727  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004524  00000000  00000000  00054939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001970  00000000  00000000  00058e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001788  00000000  00000000  0005a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036447  00000000  00000000  0005bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025f9f  00000000  00000000  0009239f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156724  00000000  00000000  000b833e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020ea62  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c14  00000000  00000000  0020eab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e4 	.word	0x240001e4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080136a8 	.word	0x080136a8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	080136a8 	.word	0x080136a8

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9ac 	b.w	8000a88 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	4604      	mov	r4, r0
 80007c0:	468e      	mov	lr, r1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d14d      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c6:	428a      	cmp	r2, r1
 80007c8:	4694      	mov	ip, r2
 80007ca:	d969      	bls.n	80008a0 <__udivmoddi4+0xe8>
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	b152      	cbz	r2, 80007e8 <__udivmoddi4+0x30>
 80007d2:	fa01 f302 	lsl.w	r3, r1, r2
 80007d6:	f1c2 0120 	rsb	r1, r2, #32
 80007da:	fa20 f101 	lsr.w	r1, r0, r1
 80007de:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e2:	ea41 0e03 	orr.w	lr, r1, r3
 80007e6:	4094      	lsls	r4, r2
 80007e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007ec:	0c21      	lsrs	r1, r4, #16
 80007ee:	fbbe f6f8 	udiv	r6, lr, r8
 80007f2:	fa1f f78c 	uxth.w	r7, ip
 80007f6:	fb08 e316 	mls	r3, r8, r6, lr
 80007fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007fe:	fb06 f107 	mul.w	r1, r6, r7
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f106 30ff 	add.w	r0, r6, #4294967295
 800080e:	f080 811f 	bcs.w	8000a50 <__udivmoddi4+0x298>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 811c 	bls.w	8000a50 <__udivmoddi4+0x298>
 8000818:	3e02      	subs	r6, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b2a4      	uxth	r4, r4
 8000820:	fbb3 f0f8 	udiv	r0, r3, r8
 8000824:	fb08 3310 	mls	r3, r8, r0, r3
 8000828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800082c:	fb00 f707 	mul.w	r7, r0, r7
 8000830:	42a7      	cmp	r7, r4
 8000832:	d90a      	bls.n	800084a <__udivmoddi4+0x92>
 8000834:	eb1c 0404 	adds.w	r4, ip, r4
 8000838:	f100 33ff 	add.w	r3, r0, #4294967295
 800083c:	f080 810a 	bcs.w	8000a54 <__udivmoddi4+0x29c>
 8000840:	42a7      	cmp	r7, r4
 8000842:	f240 8107 	bls.w	8000a54 <__udivmoddi4+0x29c>
 8000846:	4464      	add	r4, ip
 8000848:	3802      	subs	r0, #2
 800084a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800084e:	1be4      	subs	r4, r4, r7
 8000850:	2600      	movs	r6, #0
 8000852:	b11d      	cbz	r5, 800085c <__udivmoddi4+0xa4>
 8000854:	40d4      	lsrs	r4, r2
 8000856:	2300      	movs	r3, #0
 8000858:	e9c5 4300 	strd	r4, r3, [r5]
 800085c:	4631      	mov	r1, r6
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d909      	bls.n	800087a <__udivmoddi4+0xc2>
 8000866:	2d00      	cmp	r5, #0
 8000868:	f000 80ef 	beq.w	8000a4a <__udivmoddi4+0x292>
 800086c:	2600      	movs	r6, #0
 800086e:	e9c5 0100 	strd	r0, r1, [r5]
 8000872:	4630      	mov	r0, r6
 8000874:	4631      	mov	r1, r6
 8000876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087a:	fab3 f683 	clz	r6, r3
 800087e:	2e00      	cmp	r6, #0
 8000880:	d14a      	bne.n	8000918 <__udivmoddi4+0x160>
 8000882:	428b      	cmp	r3, r1
 8000884:	d302      	bcc.n	800088c <__udivmoddi4+0xd4>
 8000886:	4282      	cmp	r2, r0
 8000888:	f200 80f9 	bhi.w	8000a7e <__udivmoddi4+0x2c6>
 800088c:	1a84      	subs	r4, r0, r2
 800088e:	eb61 0303 	sbc.w	r3, r1, r3
 8000892:	2001      	movs	r0, #1
 8000894:	469e      	mov	lr, r3
 8000896:	2d00      	cmp	r5, #0
 8000898:	d0e0      	beq.n	800085c <__udivmoddi4+0xa4>
 800089a:	e9c5 4e00 	strd	r4, lr, [r5]
 800089e:	e7dd      	b.n	800085c <__udivmoddi4+0xa4>
 80008a0:	b902      	cbnz	r2, 80008a4 <__udivmoddi4+0xec>
 80008a2:	deff      	udf	#255	; 0xff
 80008a4:	fab2 f282 	clz	r2, r2
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	f040 8092 	bne.w	80009d2 <__udivmoddi4+0x21a>
 80008ae:	eba1 010c 	sub.w	r1, r1, ip
 80008b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008b6:	fa1f fe8c 	uxth.w	lr, ip
 80008ba:	2601      	movs	r6, #1
 80008bc:	0c20      	lsrs	r0, r4, #16
 80008be:	fbb1 f3f7 	udiv	r3, r1, r7
 80008c2:	fb07 1113 	mls	r1, r7, r3, r1
 80008c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ca:	fb0e f003 	mul.w	r0, lr, r3
 80008ce:	4288      	cmp	r0, r1
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x12c>
 80008d2:	eb1c 0101 	adds.w	r1, ip, r1
 80008d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x12a>
 80008dc:	4288      	cmp	r0, r1
 80008de:	f200 80cb 	bhi.w	8000a78 <__udivmoddi4+0x2c0>
 80008e2:	4643      	mov	r3, r8
 80008e4:	1a09      	subs	r1, r1, r0
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ec:	fb07 1110 	mls	r1, r7, r0, r1
 80008f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008f4:	fb0e fe00 	mul.w	lr, lr, r0
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x156>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f100 31ff 	add.w	r1, r0, #4294967295
 8000904:	d202      	bcs.n	800090c <__udivmoddi4+0x154>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f200 80bb 	bhi.w	8000a82 <__udivmoddi4+0x2ca>
 800090c:	4608      	mov	r0, r1
 800090e:	eba4 040e 	sub.w	r4, r4, lr
 8000912:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000916:	e79c      	b.n	8000852 <__udivmoddi4+0x9a>
 8000918:	f1c6 0720 	rsb	r7, r6, #32
 800091c:	40b3      	lsls	r3, r6
 800091e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000922:	ea4c 0c03 	orr.w	ip, ip, r3
 8000926:	fa20 f407 	lsr.w	r4, r0, r7
 800092a:	fa01 f306 	lsl.w	r3, r1, r6
 800092e:	431c      	orrs	r4, r3
 8000930:	40f9      	lsrs	r1, r7
 8000932:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000936:	fa00 f306 	lsl.w	r3, r0, r6
 800093a:	fbb1 f8f9 	udiv	r8, r1, r9
 800093e:	0c20      	lsrs	r0, r4, #16
 8000940:	fa1f fe8c 	uxth.w	lr, ip
 8000944:	fb09 1118 	mls	r1, r9, r8, r1
 8000948:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800094c:	fb08 f00e 	mul.w	r0, r8, lr
 8000950:	4288      	cmp	r0, r1
 8000952:	fa02 f206 	lsl.w	r2, r2, r6
 8000956:	d90b      	bls.n	8000970 <__udivmoddi4+0x1b8>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000960:	f080 8088 	bcs.w	8000a74 <__udivmoddi4+0x2bc>
 8000964:	4288      	cmp	r0, r1
 8000966:	f240 8085 	bls.w	8000a74 <__udivmoddi4+0x2bc>
 800096a:	f1a8 0802 	sub.w	r8, r8, #2
 800096e:	4461      	add	r1, ip
 8000970:	1a09      	subs	r1, r1, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb1 f0f9 	udiv	r0, r1, r9
 8000978:	fb09 1110 	mls	r1, r9, r0, r1
 800097c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000980:	fb00 fe0e 	mul.w	lr, r0, lr
 8000984:	458e      	cmp	lr, r1
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x1e2>
 8000988:	eb1c 0101 	adds.w	r1, ip, r1
 800098c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000990:	d26c      	bcs.n	8000a6c <__udivmoddi4+0x2b4>
 8000992:	458e      	cmp	lr, r1
 8000994:	d96a      	bls.n	8000a6c <__udivmoddi4+0x2b4>
 8000996:	3802      	subs	r0, #2
 8000998:	4461      	add	r1, ip
 800099a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800099e:	fba0 9402 	umull	r9, r4, r0, r2
 80009a2:	eba1 010e 	sub.w	r1, r1, lr
 80009a6:	42a1      	cmp	r1, r4
 80009a8:	46c8      	mov	r8, r9
 80009aa:	46a6      	mov	lr, r4
 80009ac:	d356      	bcc.n	8000a5c <__udivmoddi4+0x2a4>
 80009ae:	d053      	beq.n	8000a58 <__udivmoddi4+0x2a0>
 80009b0:	b15d      	cbz	r5, 80009ca <__udivmoddi4+0x212>
 80009b2:	ebb3 0208 	subs.w	r2, r3, r8
 80009b6:	eb61 010e 	sbc.w	r1, r1, lr
 80009ba:	fa01 f707 	lsl.w	r7, r1, r7
 80009be:	fa22 f306 	lsr.w	r3, r2, r6
 80009c2:	40f1      	lsrs	r1, r6
 80009c4:	431f      	orrs	r7, r3
 80009c6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ca:	2600      	movs	r6, #0
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	f1c2 0320 	rsb	r3, r2, #32
 80009d6:	40d8      	lsrs	r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	fa21 f303 	lsr.w	r3, r1, r3
 80009e0:	4091      	lsls	r1, r2
 80009e2:	4301      	orrs	r1, r0
 80009e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e8:	fa1f fe8c 	uxth.w	lr, ip
 80009ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80009f0:	fb07 3610 	mls	r6, r7, r0, r3
 80009f4:	0c0b      	lsrs	r3, r1, #16
 80009f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009fa:	fb00 f60e 	mul.w	r6, r0, lr
 80009fe:	429e      	cmp	r6, r3
 8000a00:	fa04 f402 	lsl.w	r4, r4, r2
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x260>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a0e:	d22f      	bcs.n	8000a70 <__udivmoddi4+0x2b8>
 8000a10:	429e      	cmp	r6, r3
 8000a12:	d92d      	bls.n	8000a70 <__udivmoddi4+0x2b8>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1b9b      	subs	r3, r3, r6
 8000a1a:	b289      	uxth	r1, r1
 8000a1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a20:	fb07 3316 	mls	r3, r7, r6, r3
 8000a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a28:	fb06 f30e 	mul.w	r3, r6, lr
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x28a>
 8000a30:	eb1c 0101 	adds.w	r1, ip, r1
 8000a34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a38:	d216      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d914      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a3e:	3e02      	subs	r6, #2
 8000a40:	4461      	add	r1, ip
 8000a42:	1ac9      	subs	r1, r1, r3
 8000a44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a48:	e738      	b.n	80008bc <__udivmoddi4+0x104>
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e705      	b.n	800085c <__udivmoddi4+0xa4>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e3      	b.n	800081c <__udivmoddi4+0x64>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6f8      	b.n	800084a <__udivmoddi4+0x92>
 8000a58:	454b      	cmp	r3, r9
 8000a5a:	d2a9      	bcs.n	80009b0 <__udivmoddi4+0x1f8>
 8000a5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7a3      	b.n	80009b0 <__udivmoddi4+0x1f8>
 8000a68:	4646      	mov	r6, r8
 8000a6a:	e7ea      	b.n	8000a42 <__udivmoddi4+0x28a>
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	e794      	b.n	800099a <__udivmoddi4+0x1e2>
 8000a70:	4640      	mov	r0, r8
 8000a72:	e7d1      	b.n	8000a18 <__udivmoddi4+0x260>
 8000a74:	46d0      	mov	r8, sl
 8000a76:	e77b      	b.n	8000970 <__udivmoddi4+0x1b8>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	e732      	b.n	80008e4 <__udivmoddi4+0x12c>
 8000a7e:	4630      	mov	r0, r6
 8000a80:	e709      	b.n	8000896 <__udivmoddi4+0xde>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	e742      	b.n	800090e <__udivmoddi4+0x156>

08000a88 <__aeabi_idiv0>:
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <MX_ADC2_Init+0xc4>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000aac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ab0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ab4:	2208      	movs	r2, #8
 8000ab6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000abe:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000b04:	f002 fcda 	bl	80034bc <HAL_ADC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b0e:	f001 f805 	bl	8001b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b12:	2301      	movs	r3, #1
 8000b14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b16:	2306      	movs	r3, #6
 8000b18:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b24:	2304      	movs	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_ADC2_Init+0xc0>)
 8000b36:	f002 ffef 	bl	8003b18 <HAL_ADC_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000b40:	f000 ffec 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	24000200 	.word	0x24000200
 8000b50:	40022100 	.word	0x40022100

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0b4      	sub	sp, #208	; 0xd0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	22c0      	movs	r2, #192	; 0xc0
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00f f86f 	bl	800fc48 <memset>
  if(adcHandle->Instance==ADC2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <HAL_ADC_MspInit+0xb8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d146      	bne.n	8000c02 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000b84:	2310      	movs	r3, #16
 8000b86:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 fb8c 	bl	80092c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000bb6:	f000 ffb1 	bl	8001b1c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000bbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000bc2:	f043 0320 	orr.w	r3, r3, #32
 8000bc6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000bcc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_ADC_MspInit+0xbc>)
 8000bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000bf6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000bfa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bfe:	f002 fa15 	bl	800302c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	37d0      	adds	r7, #208	; 0xd0
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022100 	.word	0x40022100
 8000c10:	58024400 	.word	0x58024400

08000c14 <HAL_UARTEx_RxEventCallback>:
extern int t;
static int state = 0;
static int count = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
#ifndef MYDEBUG
	if (huart->Instance == USART3)
#else
	if (huart->Instance == USART6)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a5c      	ldr	r2, [pc, #368]	; (8000d98 <HAL_UARTEx_RxEventCallback+0x184>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80b1 	bne.w	8000d8e <HAL_UARTEx_RxEventCallback+0x17a>
#endif
	{
		if (receive_data[0] == 'a')
 8000c2c:	4b5b      	ldr	r3, [pc, #364]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x188>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b61      	cmp	r3, #97	; 0x61
 8000c32:	d105      	bne.n	8000c40 <HAL_UARTEx_RxEventCallback+0x2c>
		{
			DrawText(0);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 f90f 	bl	8001e58 <DrawText>
			state = 1;
 8000c3a:	4b59      	ldr	r3, [pc, #356]	; (8000da0 <HAL_UARTEx_RxEventCallback+0x18c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
		}
		if (Size > 1)
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d93b      	bls.n	8000cbe <HAL_UARTEx_RxEventCallback+0xaa>
		{
			int count = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
			double* array;
			if (receive_data[0] == 'a')
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x188>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b61      	cmp	r3, #97	; 0x61
 8000c50:	d108      	bne.n	8000c64 <HAL_UARTEx_RxEventCallback+0x50>
			{
				array = parseStringToArray((char*)receive_data + 1, &count);
 8000c52:	4a54      	ldr	r2, [pc, #336]	; (8000da4 <HAL_UARTEx_RxEventCallback+0x190>)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f002 f89e 	bl	8002d9c <parseStringToArray>
 8000c60:	6178      	str	r0, [r7, #20]
 8000c62:	e006      	b.n	8000c72 <HAL_UARTEx_RxEventCallback+0x5e>
			}
			else
			{
				 array = parseStringToArray((const char*)receive_data, &count);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	484c      	ldr	r0, [pc, #304]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x188>)
 8000c6c:	f002 f896 	bl	8002d9c <parseStringToArray>
 8000c70:	6178      	str	r0, [r7, #20]
//				char msg[10];
//				sprintf(msg, "%d\n", Size);

//				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, sizeof(msg));
//			HAL_UART_Transmit_DMA(&huart3, receive_data, Size);
			Led_All_Reset(&led);
 8000c72:	484d      	ldr	r0, [pc, #308]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x194>)
 8000c74:	f000 fd25 	bl	80016c2 <Led_All_Reset>
			if (array != NULL) {
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d01c      	beq.n	8000cb8 <HAL_UARTEx_RxEventCallback+0xa4>
				for (int i = 0; i < count; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	e012      	b.n	8000caa <HAL_UARTEx_RxEventCallback+0x96>
					Led_Range_Set(&led, (float)array[i], 0, 212, 70);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	ed93 7b00 	vldr	d7, [r3]
 8000c90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c94:	2346      	movs	r3, #70	; 0x46
 8000c96:	22d4      	movs	r2, #212	; 0xd4
 8000c98:	2100      	movs	r1, #0
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	4842      	ldr	r0, [pc, #264]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x194>)
 8000ca0:	f000 fd1d 	bl	80016de <Led_Range_Set>
				for (int i = 0; i < count; i++) {
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbe8      	blt.n	8000c84 <HAL_UARTEx_RxEventCallback+0x70>
				}
				Led_Start(&led);
 8000cb2:	483d      	ldr	r0, [pc, #244]	; (8000da8 <HAL_UARTEx_RxEventCallback+0x194>)
 8000cb4:	f000 fc37 	bl	8001526 <Led_Start>
			}
			free(array);
 8000cb8:	6978      	ldr	r0, [r7, #20]
 8000cba:	f00e ffaf 	bl	800fc1c <free>
		}
#ifndef MYDEBUG
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receive_data, BUFFER_SIZE);
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
#else
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, receive_data, BUFFER_SIZE);
 8000cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cc2:	4936      	ldr	r1, [pc, #216]	; (8000d9c <HAL_UARTEx_RxEventCallback+0x188>)
 8000cc4:	4839      	ldr	r0, [pc, #228]	; (8000dac <HAL_UARTEx_RxEventCallback+0x198>)
 8000cc6:	f00e fc9e 	bl	800f606 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d04a      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000cd4:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a37      	ldr	r2, [pc, #220]	; (8000db8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d045      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d040      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d03b      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d036      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a31      	ldr	r2, [pc, #196]	; (8000dc8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d031      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d02c      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2e      	ldr	r2, [pc, #184]	; (8000dd0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d027      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d022      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d01d      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <HAL_UARTEx_RxEventCallback+0x1c8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d018      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00e      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d009      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a24      	ldr	r2, [pc, #144]	; (8000dec <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d004      	beq.n	8000d6a <HAL_UARTEx_RxEventCallback+0x156>
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d109      	bne.n	8000d7e <HAL_UARTEx_RxEventCallback+0x16a>
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0208 	bic.w	r2, r2, #8
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	bf00      	nop
#endif
	}
}
 8000d7c:	e007      	b.n	8000d8e <HAL_UARTEx_RxEventCallback+0x17a>
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0204 	bic.w	r2, r2, #4
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40011400 	.word	0x40011400
 8000d9c:	24000ddc 	.word	0x24000ddc
 8000da0:	24000264 	.word	0x24000264
 8000da4:	24000ddd 	.word	0x24000ddd
 8000da8:	240002cc 	.word	0x240002cc
 8000dac:	24000af0 	.word	0x24000af0
 8000db0:	24000cec 	.word	0x24000cec
 8000db4:	40020010 	.word	0x40020010
 8000db8:	40020028 	.word	0x40020028
 8000dbc:	40020040 	.word	0x40020040
 8000dc0:	40020058 	.word	0x40020058
 8000dc4:	40020070 	.word	0x40020070
 8000dc8:	40020088 	.word	0x40020088
 8000dcc:	400200a0 	.word	0x400200a0
 8000dd0:	400200b8 	.word	0x400200b8
 8000dd4:	40020410 	.word	0x40020410
 8000dd8:	40020428 	.word	0x40020428
 8000ddc:	40020440 	.word	0x40020440
 8000de0:	40020458 	.word	0x40020458
 8000de4:	40020470 	.word	0x40020470
 8000de8:	40020488 	.word	0x40020488
 8000dec:	400204a0 	.word	0x400204a0
 8000df0:	400204b8 	.word	0x400204b8

08000df4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d102      	bne.n	8000e0c <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		Led_Send(&led);
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e08:	f000 fbc6 	bl	8001598 <Led_Send>
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	240002cc 	.word	0x240002cc

08000e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d115      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		Camera_Take(&camera, 10);
 8000e2a:	210a      	movs	r1, #10
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e2e:	f000 f851 	bl	8000ed4 <Camera_Take>
		count++;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e3a:	6013      	str	r3, [r2, #0]
		if (count == 3)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d11e      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			count = 0;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
			DrawBG();
 8000e4a:	f000 ffdd 	bl	8001e08 <DrawBG>
			state = 0;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
	}
	else if (htim->Instance == TIM6) {
	    DrawMouch(t);
	    t = (t+1) % 4;
	}
}
 8000e54:	e015      	b.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if (htim->Instance == TIM6) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d110      	bne.n	8000e82 <HAL_TIM_PeriodElapsedCallback+0x6a>
	    DrawMouch(t);
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ffdf 	bl	8001e28 <DrawMouch>
	    t = (t+1) % 4;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	425a      	negs	r2, r3
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	bf58      	it	pl
 8000e7c:	4253      	negpl	r3, r2
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	2400026c 	.word	0x2400026c
 8000e94:	24000268 	.word	0x24000268
 8000e98:	24000264 	.word	0x24000264
 8000e9c:	40001000 	.word	0x40001000
 8000ea0:	2400085c 	.word	0x2400085c

08000ea4 <Camera_Init>:
#include "camera.h"

Camera_HandleTypeDef camera;

void Camera_Init(Camera_HandleTypeDef *camera, UART_HandleTypeDef *uart)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	camera->uart = uart;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	601a      	str	r2, [r3, #0]
	camera->camera_EN = 0;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	721a      	strb	r2, [r3, #8]
	camera->count = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
	camera->work_count = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	725a      	strb	r2, [r3, #9]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <Camera_Take>:

void Camera_Take(Camera_HandleTypeDef *camera, uint16_t time)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
	if (camera->camera_EN == 1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7a1b      	ldrb	r3, [r3, #8]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d125      	bne.n	8000f34 <Camera_Take+0x60>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <Camera_Take+0x68>)
 8000eec:	f006 fd19 	bl	8007922 <HAL_GPIO_TogglePin>
		if (camera->count == 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10f      	bne.n	8000f18 <Camera_Take+0x44>
		{
			uint8_t msg[] = "k";
 8000ef8:	236b      	movs	r3, #107	; 0x6b
 8000efa:	81bb      	strh	r3, [r7, #12]
			HAL_UART_Transmit(camera->uart, msg, sizeof(msg), 10);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f107 010c 	add.w	r1, r7, #12
 8000f04:	230a      	movs	r3, #10
 8000f06:	2202      	movs	r2, #2
 8000f08:	f00c fb98 	bl	800d63c <HAL_UART_Transmit>
			camera->work_count += 1;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7a5b      	ldrb	r3, [r3, #9]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	725a      	strb	r2, [r3, #9]
		}
		if(camera->count > time)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d903      	bls.n	8000f2a <Camera_Take+0x56>
		{
			camera->count = -1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	605a      	str	r2, [r3, #4]
		}
		camera->count += 1;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	605a      	str	r2, [r3, #4]
	}
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58021000 	.word	0x58021000

08000f40 <Camera_Start>:

void Camera_Start(Camera_HandleTypeDef *camera)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	camera->count = 0;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
	camera->camera_EN = 1;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	721a      	strb	r2, [r3, #8]
	camera->work_count = 0;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	725a      	strb	r2, [r3, #9]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <Camera_Reset>:

void Camera_Reset(Camera_HandleTypeDef *camera)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
	camera->count = 0;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
	camera->camera_EN = 0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	721a      	strb	r2, [r3, #8]
	camera->work_count = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	725a      	strb	r2, [r3, #9]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <Camera_GetState>:

Camera_State Camera_GetState(Camera_HandleTypeDef *camera)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	return (camera->camera_EN == 1) ? Camera_Work : Camera_Idle;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a1b      	ldrb	r3, [r3, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	bf14      	ite	ne
 8000f9c:	2301      	movne	r3, #1
 8000f9e:	2300      	moveq	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <Camera_GetCount>:

uint8_t Camera_GetCount(Camera_HandleTypeDef *camera)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return camera->work_count;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <MX_DMA_Init+0x8c>)
 8000fd0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <MX_DMA_Init+0x8c>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_DMA_Init+0x8c>)
 8000fe0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	200b      	movs	r0, #11
 8000ff2:	f003 fbb8 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ff6:	200b      	movs	r0, #11
 8000ff8:	f003 fbcf 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	200c      	movs	r0, #12
 8001002:	f003 fbb0 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001006:	200c      	movs	r0, #12
 8001008:	f003 fbc7 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	200d      	movs	r0, #13
 8001012:	f003 fba8 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001016:	200d      	movs	r0, #13
 8001018:	f003 fbbf 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	200e      	movs	r0, #14
 8001022:	f003 fba0 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001026:	200e      	movs	r0, #14
 8001028:	f003 fbb7 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	200f      	movs	r0, #15
 8001032:	f003 fb98 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001036:	200f      	movs	r0, #15
 8001038:	f003 fbaf 	bl	800479a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2010      	movs	r0, #16
 8001042:	f003 fb90 	bl	8004766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001046:	2010      	movs	r0, #16
 8001048:	f003 fba7 	bl	800479a <HAL_NVIC_EnableIRQ>

}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58024400 	.word	0x58024400

08001058 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001070:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001074:	4a92      	ldr	r2, [pc, #584]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800107e:	4b90      	ldr	r3, [pc, #576]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001080:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <MX_GPIO_Init+0x268>)
 800108e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001092:	4a8b      	ldr	r2, [pc, #556]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800109c:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <MX_GPIO_Init+0x268>)
 800109e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b0:	4a83      	ldr	r2, [pc, #524]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ba:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ce:	4a7c      	ldr	r2, [pc, #496]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d8:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ec:	4a74      	ldr	r2, [pc, #464]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <MX_GPIO_Init+0x268>)
 80010f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110a:	4a6d      	ldr	r2, [pc, #436]	; (80012c0 <MX_GPIO_Init+0x268>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001114:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001128:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <MX_GPIO_Init+0x268>)
 800112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001132:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001140:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a5e      	ldr	r2, [pc, #376]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <MX_GPIO_Init+0x268>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001164:	4857      	ldr	r0, [pc, #348]	; (80012c4 <MX_GPIO_Init+0x26c>)
 8001166:	f006 fbc3 	bl	80078f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Camera_GPIO_Port, Camera_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2108      	movs	r1, #8
 800116e:	4856      	ldr	r0, [pc, #344]	; (80012c8 <MX_GPIO_Init+0x270>)
 8001170:	f006 fbbe 	bl	80078f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f244 0101 	movw	r1, #16385	; 0x4001
 800117a:	4854      	ldr	r0, [pc, #336]	; (80012cc <MX_GPIO_Init+0x274>)
 800117c:	f006 fbb8 	bl	80078f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Control_GPIO_Port, LED_Control_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	4852      	ldr	r0, [pc, #328]	; (80012d0 <MX_GPIO_Init+0x278>)
 8001188:	f006 fbb2 	bl	80078f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	4850      	ldr	r0, [pc, #320]	; (80012d4 <MX_GPIO_Init+0x27c>)
 8001192:	f006 fbad 	bl	80078f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4849      	ldr	r0, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x278>)
 80011ac:	f006 f9f0 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	483e      	ldr	r0, [pc, #248]	; (80012c4 <MX_GPIO_Init+0x26c>)
 80011ca:	f006 f9e1 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Camera_Pin;
 80011ce:	2308      	movs	r3, #8
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Camera_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4838      	ldr	r0, [pc, #224]	; (80012c8 <MX_GPIO_Init+0x270>)
 80011e6:	f006 f9d3 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80011ea:	f244 0301 	movw	r3, #16385	; 0x4001
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001200:	4619      	mov	r1, r3
 8001202:	4832      	ldr	r0, [pc, #200]	; (80012cc <MX_GPIO_Init+0x274>)
 8001204:	f006 f9c4 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	482e      	ldr	r0, [pc, #184]	; (80012d8 <MX_GPIO_Init+0x280>)
 800121e:	f006 f9b7 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <MX_GPIO_Init+0x270>)
 8001238:	f006 f9aa 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800123c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800124e:	230a      	movs	r3, #10
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	481b      	ldr	r0, [pc, #108]	; (80012c8 <MX_GPIO_Init+0x270>)
 800125a:	f006 f999 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800125e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x270>)
 8001278:	f006 f98a 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Control_Pin;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_Control_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <MX_GPIO_Init+0x278>)
 8001296:	f006 f97b 	bl	8007590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800129a:	2302      	movs	r3, #2
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <MX_GPIO_Init+0x27c>)
 80012b2:	f006 f96d 	bl	8007590 <HAL_GPIO_Init>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	; 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58021400 	.word	0x58021400
 80012c8:	58020000 	.word	0x58020000
 80012cc:	58020400 	.word	0x58020400
 80012d0:	58020800 	.word	0x58020800
 80012d4:	58021000 	.word	0x58021000
 80012d8:	58021800 	.word	0x58021800

080012dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <MX_I2C1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_I2C1_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_I2C1_Init+0x74>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <MX_I2C1_Init+0x74>)
 8001318:	f006 fb1e 	bl	8007958 <HAL_I2C_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001322:	f000 fbfb 	bl	8001b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <MX_I2C1_Init+0x74>)
 800132a:	f006 ff1d 	bl	8008168 <HAL_I2CEx_ConfigAnalogFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 fbf2 	bl	8001b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_I2C1_Init+0x74>)
 800133c:	f006 ff5f 	bl	80081fe <HAL_I2CEx_ConfigDigitalFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 fbe9 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	24000278 	.word	0x24000278
 8001354:	40005400 	.word	0x40005400
 8001358:	20b0ccff 	.word	0x20b0ccff

0800135c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ba      	sub	sp, #232	; 0xe8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	22c0      	movs	r2, #192	; 0xc0
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00e fc63 	bl	800fc48 <memset>
  if(i2cHandle->Instance==I2C1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <HAL_I2C_MspInit+0xc4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d145      	bne.n	8001418 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800138c:	f04f 0208 	mov.w	r2, #8
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 ff90 	bl	80092c8 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013ae:	f000 fbb5 	bl	8001b1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 80013b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d6:	2312      	movs	r3, #18
 80013d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013e8:	2304      	movs	r3, #4
 80013ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <HAL_I2C_MspInit+0xcc>)
 80013f6:	f006 f8cb 	bl	8007590 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 80013fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001400:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 8001402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001406:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_I2C_MspInit+0xc8>)
 800140c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	37e8      	adds	r7, #232	; 0xe8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40005400 	.word	0x40005400
 8001424:	58024400 	.word	0x58024400
 8001428:	58020400 	.word	0x58020400

0800142c <Led_Init>:
//#include "usart.h"
//#include <string.h>
Led_HandleTypeDef led;

void Led_Init(Led_HandleTypeDef *led, TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
	led->channel = Channel;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	led->htim = htim;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	led->led_En = 0;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	memset(led->led_Rst, 0, sizeof(uint32_t) * 240);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001456:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00e fbf3 	bl	800fc48 <memset>
	memset(led->led_SendBuf0, 0, sizeof(uint32_t) * 25);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	33f8      	adds	r3, #248	; 0xf8
 8001466:	2264      	movs	r2, #100	; 0x64
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00e fbec 	bl	800fc48 <memset>
	memset(led->led_SendBuf1, 0, sizeof(uint32_t) * 25);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00e fbe4 	bl	800fc48 <memset>
	memset(led->led_data, 0, sizeof(uint32_t) * LED_NUM);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	22f0      	movs	r2, #240	; 0xf0
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f00e fbde 	bl	800fc48 <memset>
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <led_uint32ToData>:

void led_uint32ToData(uint32_t Data, uint32_t *Ret)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    uint32_t zj = Data;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60bb      	str	r3, [r7, #8]
    uint8_t *p = (uint8_t *)&zj;
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	613b      	str	r3, [r7, #16]
    uint8_t R = 0, G = 0, B = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	2300      	movs	r3, #0
 80014ae:	73bb      	strb	r3, [r7, #14]
 80014b0:	2300      	movs	r3, #0
 80014b2:	737b      	strb	r3, [r7, #13]
    B = *(p);     // B
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	737b      	strb	r3, [r7, #13]
    G = *(p + 1); // G
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	73bb      	strb	r3, [r7, #14]
    R = *(p + 2); // R
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	73fb      	strb	r3, [r7, #15]
    zj = (G << 16) | (R << 8) | B;
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	431a      	orrs	r2, r3
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 24; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e017      	b.n	800150c <led_uint32ToData+0x78>
    {
        if (zj & (1 << 23))
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <led_uint32ToData+0x60>
            Ret[i] = LED_CODE_1;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	22cf      	movs	r2, #207	; 0xcf
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e005      	b.n	8001500 <led_uint32ToData+0x6c>
        else
            Ret[i] = LED_CODE_0;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	225a      	movs	r2, #90	; 0x5a
 80014fe:	601a      	str	r2, [r3, #0]
        zj <<= 1;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < 24; i++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b17      	cmp	r3, #23
 8001510:	dde4      	ble.n	80014dc <led_uint32ToData+0x48>
    }
    Ret[24] = 0;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	3360      	adds	r3, #96	; 0x60
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <Led_Start>:

void Led_Start(Led_HandleTypeDef *led)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(led->htim, led->channel, (uint32_t *)led->led_Rst, 240);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8001540:	23f0      	movs	r3, #240	; 0xf0
 8001542:	f00a fbfd 	bl	800bd40 <HAL_TIM_PWM_Start_DMA>
	led_uint32ToData(led->led_data[0], led->led_SendBuf0);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	33f8      	adds	r3, #248	; 0xf8
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f7ff ff9f 	bl	8001494 <led_uint32ToData>
	led->led_En = 1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <Led_Code_Reset>:

void Led_Code_Reset(Led_HandleTypeDef *led)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_DMA(led->htim, led->channel, (uint32_t *)led->led_Rst, 240);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 8001580:	23f0      	movs	r3, #240	; 0xf0
 8001582:	f00a fbdd 	bl	800bd40 <HAL_TIM_PWM_Start_DMA>
	led->led_En = 0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <Led_Send>:

void Led_Send(Led_HandleTypeDef *led)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    static uint32_t j = 0;
    static uint32_t ins = 0;
    if (led->led_En == 1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d154      	bne.n	8001654 <Led_Send+0xbc>
    {
        if (j == LED_NUM)
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <Led_Send+0xc4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b3c      	cmp	r3, #60	; 0x3c
 80015b0:	d111      	bne.n	80015d6 <Led_Send+0x3e>
        {
            j = 0;
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <Led_Send+0xc4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
            HAL_TIM_PWM_Stop_DMA(led->htim, led->channel);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f00a fde0 	bl	800c18c <HAL_TIM_PWM_Stop_DMA>
            led->led_En = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            return;
 80015d4:	e03e      	b.n	8001654 <Led_Send+0xbc>
        }
        j += 1;
 80015d6:	4b21      	ldr	r3, [pc, #132]	; (800165c <Led_Send+0xc4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <Led_Send+0xc4>)
 80015de:	6013      	str	r3, [r2, #0]
        if (ins == 0)
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <Led_Send+0xc8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <Led_Send+0x88>
        {
        	HAL_TIM_PWM_Start_DMA(led->htim, led->channel, led->led_SendBuf0, 25);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 80015fa:	2319      	movs	r3, #25
 80015fc:	f00a fba0 	bl	800bd40 <HAL_TIM_PWM_Start_DMA>
            led_uint32ToData(led->led_data[j], led->led_SendBuf1);
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <Led_Send+0xc4>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff ff3e 	bl	8001494 <led_uint32ToData>
            ins = 1;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <Led_Send+0xc8>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e019      	b.n	8001654 <Led_Send+0xbc>
        }
        else
        {
        	HAL_TIM_PWM_Start_DMA(led->htim, led->channel, led->led_SendBuf1, 25);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 8001632:	2319      	movs	r3, #25
 8001634:	f00a fb84 	bl	800bd40 <HAL_TIM_PWM_Start_DMA>
            led_uint32ToData(led->led_data[j], led->led_SendBuf0);
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <Led_Send+0xc4>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	33f8      	adds	r3, #248	; 0xf8
 8001646:	4619      	mov	r1, r3
 8001648:	4610      	mov	r0, r2
 800164a:	f7ff ff23 	bl	8001494 <led_uint32ToData>
            ins = 0;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <Led_Send+0xc8>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	24000850 	.word	0x24000850
 8001660:	24000854 	.word	0x24000854

08001664 <Led_Set>:

void Led_Set(Led_HandleTypeDef *led, int index, uint8_t r, uint8_t g, uint8_t b)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	460b      	mov	r3, r1
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	4613      	mov	r3, r2
 8001678:	71bb      	strb	r3, [r7, #6]
	if (index >= LED_NUM) return;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b3b      	cmp	r3, #59	; 0x3b
 800167e:	dc1a      	bgt.n	80016b6 <Led_Set+0x52>
	else {
		uint32_t result = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

		result |= r;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
		result <<= 8;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	617b      	str	r3, [r7, #20]

		result |= g;
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
		result <<= 8;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	617b      	str	r3, [r7, #20]

		result |= b;
 80016a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]
		led->led_data[index] = result;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	6979      	ldr	r1, [r7, #20]
 80016b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80016b4:	e000      	b.n	80016b8 <Led_Set+0x54>
	if (index >= LED_NUM) return;
 80016b6:	bf00      	nop
	}
}
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <Led_All_Reset>:
		led->led_data[index] = 0;
	}
}

void Led_All_Reset(Led_HandleTypeDef *led)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	memset(led->led_data, 0, sizeof(uint32_t) * LED_NUM);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	22f0      	movs	r2, #240	; 0xf0
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00e fab9 	bl	800fc48 <memset>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <Led_Range_Set>:

void Led_Range_Set(Led_HandleTypeDef *led, float coor, uint8_t r, uint8_t g, uint8_t b)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b08a      	sub	sp, #40	; 0x28
 80016e2:	af02      	add	r7, sp, #8
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ea:	4608      	mov	r0, r1
 80016ec:	4611      	mov	r1, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
 80016f8:	4613      	mov	r3, r2
 80016fa:	717b      	strb	r3, [r7, #5]
//	char msg[10];
//	sprintf(msg, "%f\n", coor);
//	HAL_UART_Transmit(&huart3, msg, sizeof(msg), 100);
	int middle = (int)((LED_TRUE_NUM - 1) * coor);
 80016fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001700:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170c:	ee17 3a90 	vmov	r3, s15
 8001710:	61bb      	str	r3, [r7, #24]
	int bottom = MAX(middle - 1, 0);
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	bfb8      	it	lt
 8001718:	2301      	movlt	r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
	int top = MIN(middle + 1, (LED_TRUE_NUM - 1));
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b15      	cmp	r3, #21
 8001722:	bfa8      	it	ge
 8001724:	2315      	movge	r3, #21
 8001726:	3301      	adds	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
	for (int i = bottom; i < top; i++) {
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	e00b      	b.n	8001748 <Led_Range_Set+0x6a>
		Led_Set(led, i, r, g, b);
 8001730:	79b9      	ldrb	r1, [r7, #6]
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	797b      	ldrb	r3, [r7, #5]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	460b      	mov	r3, r1
 800173a:	69f9      	ldr	r1, [r7, #28]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff ff91 	bl	8001664 <Led_Set>
	for (int i = bottom; i < top; i++) {
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbef      	blt.n	8001730 <Led_Range_Set+0x52>
	}
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 fbad 	bl	8002ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f963 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f7ff fc75 	bl	8001058 <MX_GPIO_Init>
  MX_DMA_Init();
 800176e:	f7ff fc2b 	bl	8000fc8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001772:	f001 f857 	bl	8002824 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001776:	f001 fb09 	bl	8002d8c <MX_USB_OTG_HS_USB_Init>
  MX_TIM2_Init();
 800177a:	f000 fe39 	bl	80023f0 <MX_TIM2_Init>
  MX_ADC2_Init();
 800177e:	f7ff f985 	bl	8000a8c <MX_ADC2_Init>
  MX_TIM3_Init();
 8001782:	f000 feab 	bl	80024dc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001786:	f7ff fda9 	bl	80012dc <MX_I2C1_Init>
  MX_TIM6_Init();
 800178a:	f000 fef7 	bl	800257c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800178e:	f000 fffd 	bl	800278c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001792:	f001 f893 	bl	80028bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	#ifndef MYDEBUG
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receive_data, BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
	#else
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, receive_data, BUFFER_SIZE);
 8001796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800179a:	4984      	ldr	r1, [pc, #528]	; (80019ac <main+0x250>)
 800179c:	4884      	ldr	r0, [pc, #528]	; (80019b0 <main+0x254>)
 800179e:	f00d ff32 	bl	800f606 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 80017a2:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <main+0x258>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <main+0x25c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d04a      	beq.n	8001842 <main+0xe6>
 80017ac:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <main+0x258>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a82      	ldr	r2, [pc, #520]	; (80019bc <main+0x260>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d045      	beq.n	8001842 <main+0xe6>
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <main+0x258>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a81      	ldr	r2, [pc, #516]	; (80019c0 <main+0x264>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d040      	beq.n	8001842 <main+0xe6>
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <main+0x258>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a7f      	ldr	r2, [pc, #508]	; (80019c4 <main+0x268>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d03b      	beq.n	8001842 <main+0xe6>
 80017ca:	4b7a      	ldr	r3, [pc, #488]	; (80019b4 <main+0x258>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7e      	ldr	r2, [pc, #504]	; (80019c8 <main+0x26c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d036      	beq.n	8001842 <main+0xe6>
 80017d4:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <main+0x258>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7c      	ldr	r2, [pc, #496]	; (80019cc <main+0x270>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d031      	beq.n	8001842 <main+0xe6>
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <main+0x258>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7b      	ldr	r2, [pc, #492]	; (80019d0 <main+0x274>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d02c      	beq.n	8001842 <main+0xe6>
 80017e8:	4b72      	ldr	r3, [pc, #456]	; (80019b4 <main+0x258>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a79      	ldr	r2, [pc, #484]	; (80019d4 <main+0x278>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d027      	beq.n	8001842 <main+0xe6>
 80017f2:	4b70      	ldr	r3, [pc, #448]	; (80019b4 <main+0x258>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a78      	ldr	r2, [pc, #480]	; (80019d8 <main+0x27c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d022      	beq.n	8001842 <main+0xe6>
 80017fc:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <main+0x258>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a76      	ldr	r2, [pc, #472]	; (80019dc <main+0x280>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01d      	beq.n	8001842 <main+0xe6>
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <main+0x258>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a75      	ldr	r2, [pc, #468]	; (80019e0 <main+0x284>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d018      	beq.n	8001842 <main+0xe6>
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <main+0x258>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a73      	ldr	r2, [pc, #460]	; (80019e4 <main+0x288>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <main+0xe6>
 800181a:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <main+0x258>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <main+0x28c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00e      	beq.n	8001842 <main+0xe6>
 8001824:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <main+0x258>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a70      	ldr	r2, [pc, #448]	; (80019ec <main+0x290>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d009      	beq.n	8001842 <main+0xe6>
 800182e:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <main+0x258>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6f      	ldr	r2, [pc, #444]	; (80019f0 <main+0x294>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d004      	beq.n	8001842 <main+0xe6>
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <main+0x258>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6d      	ldr	r2, [pc, #436]	; (80019f4 <main+0x298>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d108      	bne.n	8001854 <main+0xf8>
 8001842:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <main+0x258>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <main+0x258>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e007      	b.n	8001864 <main+0x108>
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <main+0x258>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <main+0x258>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
	#endif

	__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8001864:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <main+0x29c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 0201 	mvn.w	r2, #1
 800186c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 800186e:	4862      	ldr	r0, [pc, #392]	; (80019f8 <main+0x29c>)
 8001870:	f00a f98c 	bl	800bb8c <HAL_TIM_Base_Start_IT>

	Led_Init(&led, &htim2, TIM_CHANNEL_1);
 8001874:	2200      	movs	r2, #0
 8001876:	4961      	ldr	r1, [pc, #388]	; (80019fc <main+0x2a0>)
 8001878:	4861      	ldr	r0, [pc, #388]	; (8001a00 <main+0x2a4>)
 800187a:	f7ff fdd7 	bl	800142c <Led_Init>
	Led_Code_Reset(&led);
 800187e:	4860      	ldr	r0, [pc, #384]	; (8001a00 <main+0x2a4>)
 8001880:	f7ff fe71 	bl	8001566 <Led_Code_Reset>

	Camera_Init(&camera, &huart2);
 8001884:	495f      	ldr	r1, [pc, #380]	; (8001a04 <main+0x2a8>)
 8001886:	4860      	ldr	r0, [pc, #384]	; (8001a08 <main+0x2ac>)
 8001888:	f7ff fb0c 	bl	8000ea4 <Camera_Init>

	Pressure_Init(&pressure, &hadc2, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	495f      	ldr	r1, [pc, #380]	; (8001a0c <main+0x2b0>)
 8001890:	485f      	ldr	r0, [pc, #380]	; (8001a10 <main+0x2b4>)
 8001892:	f000 fb57 	bl	8001f44 <Pressure_Init>
	int32_t last_press = Pressure_Read(&pressure, Pressure_Pre, 100);
 8001896:	2264      	movs	r2, #100	; 0x64
 8001898:	2102      	movs	r1, #2
 800189a:	485d      	ldr	r0, [pc, #372]	; (8001a10 <main+0x2b4>)
 800189c:	f000 fb64 	bl	8001f68 <Pressure_Read>
 80018a0:	6078      	str	r0, [r7, #4]

	OLED_Init();
 80018a2:	f000 fa40 	bl	8001d26 <OLED_Init>
	OLED_Clear();
 80018a6:	f000 f9c7 	bl	8001c38 <OLED_Clear>
	OLED_Display_On();
 80018aa:	f000 f9b5 	bl	8001c18 <OLED_Display_On>
	DrawBG();
 80018ae:	f000 faab 	bl	8001e08 <DrawBG>
	HAL_TIM_Base_Start_IT(&htim6);
 80018b2:	4858      	ldr	r0, [pc, #352]	; (8001a14 <main+0x2b8>)
 80018b4:	f00a f96a 	bl	800bb8c <HAL_TIM_Base_Start_IT>

	HAL_Delay(2000);
 80018b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018bc:	f001 fb92 	bl	8002fe4 <HAL_Delay>

	HAL_Delay(12000);
 80018c0:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80018c4:	f001 fb8e 	bl	8002fe4 <HAL_Delay>

	Led_Range_Set(&led, 0.1, 0, 212, 70);
 80018c8:	2346      	movs	r3, #70	; 0x46
 80018ca:	22d4      	movs	r2, #212	; 0xd4
 80018cc:	2100      	movs	r1, #0
 80018ce:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001a18 <main+0x2bc>
 80018d2:	484b      	ldr	r0, [pc, #300]	; (8001a00 <main+0x2a4>)
 80018d4:	f7ff ff03 	bl	80016de <Led_Range_Set>
	Led_Range_Set(&led, 0.2, 0, 212, 70);
 80018d8:	2346      	movs	r3, #70	; 0x46
 80018da:	22d4      	movs	r2, #212	; 0xd4
 80018dc:	2100      	movs	r1, #0
 80018de:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001a1c <main+0x2c0>
 80018e2:	4847      	ldr	r0, [pc, #284]	; (8001a00 <main+0x2a4>)
 80018e4:	f7ff fefb 	bl	80016de <Led_Range_Set>
	Led_Range_Set(&led, 0.45, 0, 212, 70);
 80018e8:	2346      	movs	r3, #70	; 0x46
 80018ea:	22d4      	movs	r2, #212	; 0xd4
 80018ec:	2100      	movs	r1, #0
 80018ee:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001a20 <main+0x2c4>
 80018f2:	4843      	ldr	r0, [pc, #268]	; (8001a00 <main+0x2a4>)
 80018f4:	f7ff fef3 	bl	80016de <Led_Range_Set>
	Led_Start(&led);
 80018f8:	4841      	ldr	r0, [pc, #260]	; (8001a00 <main+0x2a4>)
 80018fa:	f7ff fe14 	bl	8001526 <Led_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int32_t press = Pressure_Read(&pressure, Pressure_Pre, 100);
 80018fe:	2264      	movs	r2, #100	; 0x64
 8001900:	2102      	movs	r1, #2
 8001902:	4843      	ldr	r0, [pc, #268]	; (8001a10 <main+0x2b4>)
 8001904:	f000 fb30 	bl	8001f68 <Pressure_Read>
 8001908:	6038      	str	r0, [r7, #0]

//		char msg[6];
//		sprintf(msg, "%d\n", press);
//		HAL_UART_Transmit(&huart3, (uint8_t *)msg, sizeof(msg), 100);

	  if (sys_state == Normal) {
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <main+0x2c8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d120      	bne.n	8001954 <main+0x1f8>
		  // 正常模式下检测压力传感器
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	2101      	movs	r1, #1
 8001916:	4844      	ldr	r0, [pc, #272]	; (8001a28 <main+0x2cc>)
 8001918:	f005 ffea 	bl	80078f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2102      	movs	r1, #2
 8001920:	4842      	ldr	r0, [pc, #264]	; (8001a2c <main+0x2d0>)
 8001922:	f005 ffe5 	bl	80078f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192c:	483e      	ldr	r0, [pc, #248]	; (8001a28 <main+0x2cc>)
 800192e:	f005 ffdf 	bl	80078f0 <HAL_GPIO_WritePin>
		  if (ABS(press - last_press) > 12) {
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	bfb8      	it	lt
 800193c:	425b      	neglt	r3, r3
 800193e:	2b0c      	cmp	r3, #12
 8001940:	dd05      	ble.n	800194e <main+0x1f2>
			  sys_state = Monitor;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <main+0x2c8>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
			  DrawText(2);
 8001948:	2002      	movs	r0, #2
 800194a:	f000 fa85 	bl	8001e58 <DrawText>
		  }
		  last_press = press;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	e7d4      	b.n	80018fe <main+0x1a2>
	  }
	  else if (sys_state == Monitor) {
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <main+0x2c8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1d0      	bne.n	80018fe <main+0x1a2>
		  // 2min 定时拍照
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4831      	ldr	r0, [pc, #196]	; (8001a28 <main+0x2cc>)
 8001962:	f005 ffc5 	bl	80078f0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800196c:	482e      	ldr	r0, [pc, #184]	; (8001a28 <main+0x2cc>)
 800196e:	f005 ffbf 	bl	80078f0 <HAL_GPIO_WritePin>
		  if (Camera_GetState(&camera) == Camera_Idle)
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <main+0x2ac>)
 8001974:	f7ff fb0a 	bl	8000f8c <Camera_GetState>
 8001978:	4603      	mov	r3, r0
 800197a:	2b01      	cmp	r3, #1
 800197c:	d103      	bne.n	8001986 <main+0x22a>
		  {
			  Camera_Start(&camera);
 800197e:	4822      	ldr	r0, [pc, #136]	; (8001a08 <main+0x2ac>)
 8001980:	f7ff fade 	bl	8000f40 <Camera_Start>
 8001984:	e7bb      	b.n	80018fe <main+0x1a2>
		  }
		  else if (Camera_GetCount(&camera) > 10)
 8001986:	4820      	ldr	r0, [pc, #128]	; (8001a08 <main+0x2ac>)
 8001988:	f7ff fb11 	bl	8000fae <Camera_GetCount>
 800198c:	4603      	mov	r3, r0
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d9b5      	bls.n	80018fe <main+0x1a2>
		  {
			  Camera_Reset(&camera);
 8001992:	481d      	ldr	r0, [pc, #116]	; (8001a08 <main+0x2ac>)
 8001994:	f7ff fae7 	bl	8000f66 <Camera_Reset>
			  Led_All_Reset(&led);
 8001998:	4819      	ldr	r0, [pc, #100]	; (8001a00 <main+0x2a4>)
 800199a:	f7ff fe92 	bl	80016c2 <Led_All_Reset>
			  Led_Start(&led);
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <main+0x2a4>)
 80019a0:	f7ff fdc1 	bl	8001526 <Led_Start>
			  sys_state = Normal;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <main+0x2c8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
  {
 80019aa:	e7a8      	b.n	80018fe <main+0x1a2>
 80019ac:	24000ddc 	.word	0x24000ddc
 80019b0:	24000af0 	.word	0x24000af0
 80019b4:	24000cec 	.word	0x24000cec
 80019b8:	40020010 	.word	0x40020010
 80019bc:	40020028 	.word	0x40020028
 80019c0:	40020040 	.word	0x40020040
 80019c4:	40020058 	.word	0x40020058
 80019c8:	40020070 	.word	0x40020070
 80019cc:	40020088 	.word	0x40020088
 80019d0:	400200a0 	.word	0x400200a0
 80019d4:	400200b8 	.word	0x400200b8
 80019d8:	40020410 	.word	0x40020410
 80019dc:	40020428 	.word	0x40020428
 80019e0:	40020440 	.word	0x40020440
 80019e4:	40020458 	.word	0x40020458
 80019e8:	40020470 	.word	0x40020470
 80019ec:	40020488 	.word	0x40020488
 80019f0:	400204a0 	.word	0x400204a0
 80019f4:	400204b8 	.word	0x400204b8
 80019f8:	240008b8 	.word	0x240008b8
 80019fc:	2400086c 	.word	0x2400086c
 8001a00:	240002cc 	.word	0x240002cc
 8001a04:	240009c8 	.word	0x240009c8
 8001a08:	2400026c 	.word	0x2400026c
 8001a0c:	24000200 	.word	0x24000200
 8001a10:	24000860 	.word	0x24000860
 8001a14:	24000904 	.word	0x24000904
 8001a18:	3dcccccd 	.word	0x3dcccccd
 8001a1c:	3e4ccccd 	.word	0x3e4ccccd
 8001a20:	3ee66666 	.word	0x3ee66666
 8001a24:	24000858 	.word	0x24000858
 8001a28:	58020400 	.word	0x58020400
 8001a2c:	58021000 	.word	0x58021000

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09c      	sub	sp, #112	; 0x70
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	224c      	movs	r2, #76	; 0x4c
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00e f902 	bl	800fc48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2220      	movs	r2, #32
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f00e f8fc 	bl	800fc48 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001a50:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <SystemClock_Config+0xe4>)
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f006 fc1c 	bl	8008298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <SystemClock_Config+0xe8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a2b      	ldr	r2, [pc, #172]	; (8001b18 <SystemClock_Config+0xe8>)
 8001a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <SystemClock_Config+0xe8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a7c:	bf00      	nop
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <SystemClock_Config+0xe8>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a8a:	d1f8      	bne.n	8001a7e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2321      	movs	r3, #33	; 0x21
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001aa6:	2346      	movs	r3, #70	; 0x46
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 fc40 	bl	800834c <HAL_RCC_OscConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ad2:	f000 f823 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad6:	233f      	movs	r3, #63	; 0x3f
 8001ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ada:	2303      	movs	r3, #3
 8001adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2107      	movs	r1, #7
 8001afc:	4618      	mov	r0, r3
 8001afe:	f007 f857 	bl	8008bb0 <HAL_RCC_ClockConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001b08:	f000 f808 	bl	8001b1c <Error_Handler>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3770      	adds	r7, #112	; 0x70
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58024800 	.word	0x58024800

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <Write_IIC_Command>:
	0x96, 0x8c, 0x83, 0x80, 0x80, 0x9f, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x9f, 0x80,
	0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80},
};

void Write_IIC_Command(unsigned char IIC_Command)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
    uint8_t *pData;
    pData= &IIC_Command;
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(&hi2c1,OLED_ADDRESS,0x00,I2C_MEMADD_SIZE_8BIT,pData,1,100);
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	9302      	str	r3, [sp, #8]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	2200      	movs	r2, #0
 8001b46:	2178      	movs	r1, #120	; 0x78
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <Write_IIC_Command+0x30>)
 8001b4a:	f005 ff95 	bl	8007a78 <HAL_I2C_Mem_Write>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	24000278 	.word	0x24000278

08001b5c <Write_IIC_Data>:

void Write_IIC_Data(unsigned char IIC_Data)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af04      	add	r7, sp, #16
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
    uint8_t *pData;
    pData= &IIC_Data;
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	60fb      	str	r3, [r7, #12]
    HAL_I2C_Mem_Write(&hi2c1,OLED_ADDRESS,0x40,I2C_MEMADD_SIZE_8BIT,pData,1,100);
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	2178      	movs	r1, #120	; 0x78
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <Write_IIC_Data+0x30>)
 8001b7e:	f005 ff7b 	bl	8007a78 <HAL_I2C_Mem_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	24000278 	.word	0x24000278

08001b90 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	460a      	mov	r2, r1
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	71bb      	strb	r3, [r7, #6]
	if(cmd) Write_IIC_Data(dat);
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <OLED_WR_Byte+0x20>
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ffd7 	bl	8001b5c <Write_IIC_Data>
	else Write_IIC_Command(dat);
}
 8001bae:	e003      	b.n	8001bb8 <OLED_WR_Byte+0x28>
	else Write_IIC_Command(dat);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ffb8 	bl	8001b28 <Write_IIC_Command>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <OLED_Set_Pos>:
}

//坐标设置

void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460a      	mov	r2, r1
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001bd0:	79bb      	ldrb	r3, [r7, #6]
 8001bd2:	3b50      	subs	r3, #80	; 0x50
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ffd9 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte((((x+2)&0xf0)>>4)|0x10,OLED_CMD);
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3302      	adds	r3, #2
 8001be2:	111b      	asrs	r3, r3, #4
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ffca 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(((x+2)&0x0f),OLED_CMD); 
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ffc0 	bl	8001b90 <OLED_WR_Byte>
}   	  
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <OLED_Display_On>:
//开启OLED显示    
void OLED_Display_On(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	208d      	movs	r0, #141	; 0x8d
 8001c20:	f7ff ffb6 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8001c24:	2100      	movs	r1, #0
 8001c26:	2014      	movs	r0, #20
 8001c28:	f7ff ffb2 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	20af      	movs	r0, #175	; 0xaf
 8001c30:	f7ff ffae 	bl	8001b90 <OLED_WR_Byte>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e01f      	b.n	8001c84 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	3b50      	subs	r3, #80	; 0x50
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff9f 	bl	8001b90 <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置—列低地址
 8001c52:	2100      	movs	r1, #0
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff ff9b 	bl	8001b90 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f7ff ff97 	bl	8001b90 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8001c62:	2300      	movs	r3, #0
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	e006      	b.n	8001c76 <OLED_Clear+0x3e>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff ff90 	bl	8001b90 <OLED_WR_Byte>
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	3301      	adds	r3, #1
 8001c74:	71bb      	strb	r3, [r7, #6]
 8001c76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	daf4      	bge.n	8001c68 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3301      	adds	r3, #1
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b07      	cmp	r3, #7
 8001c88:	d9dc      	bls.n	8001c44 <OLED_Clear+0xc>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <OLED_DrawBMP>:
	return result;
}				  

/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71bb      	strb	r3, [r7, #6]
 8001caa:	460b      	mov	r3, r1
 8001cac:	717b      	strb	r3, [r7, #5]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	713b      	strb	r3, [r7, #4]
    unsigned int j=0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
    unsigned char x,y;
    if(y1%8==0) y=y1/8;      
 8001cb6:	793b      	ldrb	r3, [r7, #4]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <OLED_DrawBMP+0x36>
 8001cc2:	793b      	ldrb	r3, [r7, #4]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	72bb      	strb	r3, [r7, #10]
 8001cc8:	e004      	b.n	8001cd4 <OLED_DrawBMP+0x40>
    else y=y1/8+1;
 8001cca:	793b      	ldrb	r3, [r7, #4]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	72bb      	strb	r3, [r7, #10]
 8001cd8:	e01c      	b.n	8001d14 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 8001cda:	7aba      	ldrb	r2, [r7, #10]
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff6d 	bl	8001bc0 <OLED_Set_Pos>
        for(x=x0;x<x1;x++)
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	72fb      	strb	r3, [r7, #11]
 8001cea:	e00c      	b.n	8001d06 <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60fa      	str	r2, [r7, #12]
 8001cf2:	6a3a      	ldr	r2, [r7, #32]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff48 	bl	8001b90 <OLED_WR_Byte>
        for(x=x0;x<x1;x++)
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	3301      	adds	r3, #1
 8001d04:	72fb      	strb	r3, [r7, #11]
 8001d06:	7afa      	ldrb	r2, [r7, #11]
 8001d08:	797b      	ldrb	r3, [r7, #5]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3ee      	bcc.n	8001cec <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 8001d0e:	7abb      	ldrb	r3, [r7, #10]
 8001d10:	3301      	adds	r3, #1
 8001d12:	72bb      	strb	r3, [r7, #10]
 8001d14:	7aba      	ldrb	r2, [r7, #10]
 8001d16:	793b      	ldrb	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d3de      	bcc.n	8001cda <OLED_DrawBMP+0x46>
	    }
	}
} 
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}

08001d26 <OLED_Init>:

void OLED_Init(void)
{ 		
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
    OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	20ae      	movs	r0, #174	; 0xae
 8001d2e:	f7ff ff2f 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8001d32:	2100      	movs	r1, #0
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7ff ff2b 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2010      	movs	r0, #16
 8001d3e:	f7ff ff27 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8001d42:	2100      	movs	r1, #0
 8001d44:	2040      	movs	r0, #64	; 0x40
 8001d46:	f7ff ff23 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	20b0      	movs	r0, #176	; 0xb0
 8001d4e:	f7ff ff1f 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8001d52:	2100      	movs	r1, #0
 8001d54:	2081      	movs	r0, #129	; 0x81
 8001d56:	f7ff ff1b 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	20ff      	movs	r0, #255	; 0xff
 8001d5e:	f7ff ff17 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 8001d62:	2100      	movs	r1, #0
 8001d64:	20a1      	movs	r0, #161	; 0xa1
 8001d66:	f7ff ff13 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	20a6      	movs	r0, #166	; 0xa6
 8001d6e:	f7ff ff0f 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001d72:	2100      	movs	r1, #0
 8001d74:	20a8      	movs	r0, #168	; 0xa8
 8001d76:	f7ff ff0b 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	203f      	movs	r0, #63	; 0x3f
 8001d7e:	f7ff ff07 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8001d82:	2100      	movs	r1, #0
 8001d84:	20c8      	movs	r0, #200	; 0xc8
 8001d86:	f7ff ff03 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	20d3      	movs	r0, #211	; 0xd3
 8001d8e:	f7ff feff 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 8001d92:	2100      	movs	r1, #0
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fefb 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	20d5      	movs	r0, #213	; 0xd5
 8001d9e:	f7ff fef7 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 8001da2:	2100      	movs	r1, #0
 8001da4:	2080      	movs	r0, #128	; 0x80
 8001da6:	f7ff fef3 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 8001daa:	2100      	movs	r1, #0
 8001dac:	20d8      	movs	r0, #216	; 0xd8
 8001dae:	f7ff feef 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 8001db2:	2100      	movs	r1, #0
 8001db4:	2005      	movs	r0, #5
 8001db6:	f7ff feeb 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 8001dba:	2100      	movs	r1, #0
 8001dbc:	20d9      	movs	r0, #217	; 0xd9
 8001dbe:	f7ff fee7 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	20f1      	movs	r0, #241	; 0xf1
 8001dc6:	f7ff fee3 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 8001dca:	2100      	movs	r1, #0
 8001dcc:	20da      	movs	r0, #218	; 0xda
 8001dce:	f7ff fedf 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2012      	movs	r0, #18
 8001dd6:	f7ff fedb 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 8001dda:	2100      	movs	r1, #0
 8001ddc:	20db      	movs	r0, #219	; 0xdb
 8001dde:	f7ff fed7 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8001de2:	2100      	movs	r1, #0
 8001de4:	2030      	movs	r0, #48	; 0x30
 8001de6:	f7ff fed3 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 8001dea:	2100      	movs	r1, #0
 8001dec:	208d      	movs	r0, #141	; 0x8d
 8001dee:	f7ff fecf 	bl	8001b90 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8001df2:	2100      	movs	r1, #0
 8001df4:	2014      	movs	r0, #20
 8001df6:	f7ff fecb 	bl	8001b90 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	20af      	movs	r0, #175	; 0xaf
 8001dfe:	f7ff fec7 	bl	8001b90 <OLED_WR_Byte>
}  
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <DrawBG>:

void DrawBG(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af02      	add	r7, sp, #8
	OLED_DrawBMP(0,0,128,8,gImage_1);
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <DrawBG+0x1c>)
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2308      	movs	r3, #8
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	2100      	movs	r1, #0
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff ff3b 	bl	8001c94 <OLED_DrawBMP>
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	080136c4 	.word	0x080136c4

08001e28 <DrawMouch>:
void DrawMouch(int id){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
	OLED_DrawBMP(54,3,74,5,mouch[id]);
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <DrawMouch+0x2c>)
 8001e3c:	4413      	add	r3, r2
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2305      	movs	r3, #5
 8001e42:	224a      	movs	r2, #74	; 0x4a
 8001e44:	2103      	movs	r1, #3
 8001e46:	2036      	movs	r0, #54	; 0x36
 8001e48:	f7ff ff24 	bl	8001c94 <OLED_DrawBMP>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08013ac4 	.word	0x08013ac4

08001e58 <DrawText>:
void DrawPosition(int x,int y){
	OLED_ShowNum(80,6,x,1,16);
	OLED_ShowNum(105,6,y,1,16);
}
void DrawText(int typ){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]
	OLED_DrawBMP(30,6,94,8,txt[typ]);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	01db      	lsls	r3, r3, #7
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <DrawText+0x28>)
 8001e66:	4413      	add	r3, r2
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	225e      	movs	r2, #94	; 0x5e
 8001e6e:	2106      	movs	r1, #6
 8001e70:	201e      	movs	r0, #30
 8001e72:	f7ff ff0f 	bl	8001c94 <OLED_DrawBMP>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	08013b64 	.word	0x08013b64

08001e84 <ADC_ReadData>:
#include "pressure.h"

Pressure_HandleTypeDef pressure;

uint32_t ADC_ReadData(Pressure_HandleTypeDef *pressure)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    uint32_t AD_Data;

    HAL_ADC_Start(pressure->hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fc6d 	bl	8003770 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(pressure->hadc, 100);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2164      	movs	r1, #100	; 0x64
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fd55 	bl	800394c <HAL_ADC_PollForConversion>
    AD_Data = (uint32_t)HAL_ADC_GetValue(pressure->hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fe28 	bl	8003afc <HAL_ADC_GetValue>
 8001eac:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(pressure->hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fd16 	bl	80038e4 <HAL_ADC_Stop>
    HAL_Delay(5);
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f001 f893 	bl	8002fe4 <HAL_Delay>
    return AD_Data;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <ADC_average>:

uint32_t ADC_average(Pressure_HandleTypeDef *pressure, uint32_t times)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < times; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	e009      	b.n	8001ef0 <ADC_average+0x28>
    {
    	sum += ADC_ReadData(pressure);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ffd1 	bl	8001e84 <ADC_ReadData>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < times; i++)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3301      	adds	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f1      	bhi.n	8001edc <ADC_average+0x14>
    }
    sum /= times;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	60fb      	str	r3, [r7, #12]
    return sum;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <map>:

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	1a8a      	subs	r2, r1, r2
 8001f26:	fb03 f202 	mul.w	r2, r3, r2
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1acb      	subs	r3, r1, r3
 8001f30:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4413      	add	r3, r2
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <Pressure_Init>:

void Pressure_Init(Pressure_HandleTypeDef *pressure, ADC_HandleTypeDef *hadc, int32_t bottom)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	pressure->hadc = hadc;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	601a      	str	r2, [r3, #0]
	pressure->bottom = bottom;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <Pressure_Read>:

int32_t Pressure_Read(Pressure_HandleTypeDef *pressure, Pressure_ReadMode mode, uint8_t times)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
 8001f74:	4613      	mov	r3, r2
 8001f76:	70bb      	strb	r3, [r7, #2]
	uint32_t ad_data = ADC_average(pressure, times);
 8001f78:	78bb      	ldrb	r3, [r7, #2]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffa3 	bl	8001ec8 <ADC_average>
 8001f82:	6138      	str	r0, [r7, #16]
	int32_t vol = map(ad_data, pressure->bottom, 4095, 0, 3300);
 8001f84:	6938      	ldr	r0, [r7, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001f96:	f7ff ffb9 	bl	8001f0c <map>
 8001f9a:	60f8      	str	r0, [r7, #12]
	int32_t press = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
	if(vol < VOLTAGE_MIN)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b63      	cmp	r3, #99	; 0x63
 8001fa4:	dc02      	bgt.n	8001fac <Pressure_Read+0x44>
	{
		press = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e013      	b.n	8001fd4 <Pressure_Read+0x6c>
	}
	else if(vol > VOLTAGE_MAX)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	dd03      	ble.n	8001fbe <Pressure_Read+0x56>
	{
		press = PRESS_MAX;
 8001fb6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e00a      	b.n	8001fd4 <Pressure_Read+0x6c>
	}
	else
	{
		press = map(vol, VOLTAGE_MIN, VOLTAGE_MAX, PRESS_MIN, PRESS_MAX);
 8001fbe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2396      	movs	r3, #150	; 0x96
 8001fc6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001fca:	2164      	movs	r1, #100	; 0x64
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff ff9d 	bl	8001f0c <map>
 8001fd2:	6178      	str	r0, [r7, #20]
	}
	if (mode == Pressure_AD) return ad_data;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <Pressure_Read+0x76>
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <Pressure_Read+0x8c>
	else if(mode == Pressure_Vol) return vol;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <Pressure_Read+0x80>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	e005      	b.n	8001ff4 <Pressure_Read+0x8c>
	else if(mode == Pressure_Pre) return press;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d101      	bne.n	8001ff2 <Pressure_Read+0x8a>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	e000      	b.n	8001ff4 <Pressure_Read+0x8c>
	else return press;
 8001ff2:	697b      	ldr	r3, [r7, #20]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_MspInit+0x30>)
 8002004:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002008:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x30>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x30>)
 8002014:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	58024400 	.word	0x58024400

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 ff92 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <DMA1_Stream0_IRQHandler+0x10>)
 800208a:	f003 feff 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	24000bfc 	.word	0x24000bfc

08002098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <DMA1_Stream1_IRQHandler+0x10>)
 800209e:	f003 fef5 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	24000c74 	.word	0x24000c74

080020ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Stream2_IRQHandler+0x10>)
 80020b2:	f003 feeb 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	24000950 	.word	0x24000950

080020c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA1_Stream3_IRQHandler+0x10>)
 80020c6:	f003 fee1 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24000b84 	.word	0x24000b84

080020d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <DMA1_Stream4_IRQHandler+0x10>)
 80020da:	f003 fed7 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	24000cec 	.word	0x24000cec

080020e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA1_Stream5_IRQHandler+0x10>)
 80020ee:	f003 fecd 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000d64 	.word	0x24000d64

080020fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM2_IRQHandler+0x10>)
 8002102:	f00a f93b 	bl	800c37c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2400086c 	.word	0x2400086c

08002110 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <TIM3_IRQHandler+0x10>)
 8002116:	f00a f931 	bl	800c37c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	240008b8 	.word	0x240008b8

08002124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <USART2_IRQHandler+0x10>)
 800212a:	f00b fb15 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	240009c8 	.word	0x240009c8

08002138 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <USART3_IRQHandler+0x10>)
 800213e:	f00b fb0b 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	24000a5c 	.word	0x24000a5c

0800214c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM6_DAC_IRQHandler+0x10>)
 8002152:	f00a f913 	bl	800c37c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	24000904 	.word	0x24000904

08002160 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <USART6_IRQHandler+0x10>)
 8002166:	f00b faf7 	bl	800d758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	24000af0 	.word	0x24000af0

08002174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return 1;
 8002178:	2301      	movs	r3, #1
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_kill>:

int _kill(int pid, int sig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800218e:	f00d fae1 	bl	800f754 <__errno>
 8002192:	4603      	mov	r3, r0
 8002194:	2216      	movs	r2, #22
 8002196:	601a      	str	r2, [r3, #0]
  return -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_exit>:

void _exit (int status)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ffe7 	bl	8002184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021b6:	e7fe      	b.n	80021b6 <_exit+0x12>

080021b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
  }

  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
  }
  return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
  return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_sbrk+0x5c>)
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <_sbrk+0x60>)
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <_sbrk+0x64>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <_sbrk+0x68>)
 80022b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <_sbrk+0x64>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d207      	bcs.n	80022d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c4:	f00d fa46 	bl	800f754 <__errno>
 80022c8:	4603      	mov	r3, r0
 80022ca:	220c      	movs	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	e009      	b.n	80022e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <_sbrk+0x64>)
 80022e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e6:	68fb      	ldr	r3, [r7, #12]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	24100000 	.word	0x24100000
 80022f4:	00000400 	.word	0x00000400
 80022f8:	24000868 	.word	0x24000868
 80022fc:	240011d8 	.word	0x240011d8

08002300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002304:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <SystemInit+0xd0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <SystemInit+0xd0>)
 800230c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <SystemInit+0xd4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	2b02      	cmp	r3, #2
 800231e:	d807      	bhi.n	8002330 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <SystemInit+0xd4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 030f 	bic.w	r3, r3, #15
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <SystemInit+0xd4>)
 800232a:	f043 0303 	orr.w	r3, r3, #3
 800232e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <SystemInit+0xd8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <SystemInit+0xd8>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <SystemInit+0xd8>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <SystemInit+0xd8>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4924      	ldr	r1, [pc, #144]	; (80023d8 <SystemInit+0xd8>)
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <SystemInit+0xdc>)
 800234a:	4013      	ands	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <SystemInit+0xd4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <SystemInit+0xd4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 030f 	bic.w	r3, r3, #15
 8002362:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <SystemInit+0xd4>)
 8002364:	f043 0303 	orr.w	r3, r3, #3
 8002368:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <SystemInit+0xd8>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <SystemInit+0xd8>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <SystemInit+0xd8>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <SystemInit+0xd8>)
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <SystemInit+0xe0>)
 8002380:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <SystemInit+0xd8>)
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <SystemInit+0xe4>)
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <SystemInit+0xd8>)
 800238a:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <SystemInit+0xe8>)
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <SystemInit+0xd8>)
 8002390:	2200      	movs	r2, #0
 8002392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <SystemInit+0xd8>)
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <SystemInit+0xe8>)
 8002398:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <SystemInit+0xd8>)
 800239c:	2200      	movs	r2, #0
 800239e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <SystemInit+0xd8>)
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <SystemInit+0xe8>)
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <SystemInit+0xd8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <SystemInit+0xd8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a09      	ldr	r2, [pc, #36]	; (80023d8 <SystemInit+0xd8>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <SystemInit+0xd8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <SystemInit+0xec>)
 80023c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	52002000 	.word	0x52002000
 80023d8:	58024400 	.word	0x58024400
 80023dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80023e0:	02020200 	.word	0x02020200
 80023e4:	01ff0000 	.word	0x01ff0000
 80023e8:	01010280 	.word	0x01010280
 80023ec:	52004000 	.word	0x52004000

080023f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	; 0x38
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002410:	463b      	mov	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <MX_TIM2_Init+0xe8>)
 800242c:	2200      	movs	r2, #0
 800242e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 350;
 8002436:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002438:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800243c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244a:	4823      	ldr	r0, [pc, #140]	; (80024d8 <MX_TIM2_Init+0xe8>)
 800244c:	f009 fb46 	bl	800badc <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002456:	f7ff fb61 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002464:	4619      	mov	r1, r3
 8002466:	481c      	ldr	r0, [pc, #112]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002468:	f00a f9bc 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002472:	f7ff fb53 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002476:	4818      	ldr	r0, [pc, #96]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002478:	f009 fc00 	bl	800bc7c <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002482:	f7ff fb4b 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4810      	ldr	r0, [pc, #64]	; (80024d8 <MX_TIM2_Init+0xe8>)
 8002496:	f00a ffd5 	bl	800d444 <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024a0:	f7ff fb3c 	bl	8001b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a4:	2360      	movs	r3, #96	; 0x60
 80024a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <MX_TIM2_Init+0xe8>)
 80024bc:	f00a f87e 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024c6:	f7ff fb29 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024ca:	4803      	ldr	r0, [pc, #12]	; (80024d8 <MX_TIM2_Init+0xe8>)
 80024cc:	f000 f926 	bl	800271c <HAL_TIM_MspPostInit>

}
 80024d0:	bf00      	nop
 80024d2:	3738      	adds	r7, #56	; 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2400086c 	.word	0x2400086c

080024dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <MX_TIM3_Init+0x98>)
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <MX_TIM3_Init+0x9c>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27999;
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <MX_TIM3_Init+0x98>)
 8002502:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8002506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_TIM3_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_TIM3_Init+0x98>)
 8002510:	f242 720f 	movw	r2, #9999	; 0x270f
 8002514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <MX_TIM3_Init+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MX_TIM3_Init+0x98>)
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002522:	4814      	ldr	r0, [pc, #80]	; (8002574 <MX_TIM3_Init+0x98>)
 8002524:	f009 fada 	bl	800badc <HAL_TIM_Base_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800252e:	f7ff faf5 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002536:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4619      	mov	r1, r3
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <MX_TIM3_Init+0x98>)
 8002540:	f00a f950 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800254a:	f7ff fae7 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <MX_TIM3_Init+0x98>)
 800255c:	f00a ff72 	bl	800d444 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002566:	f7ff fad9 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	240008b8 	.word	0x240008b8
 8002578:	40000400 	.word	0x40000400

0800257c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_TIM6_Init+0x68>)
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <MX_TIM6_Init+0x6c>)
 8002590:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27999;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <MX_TIM6_Init+0x68>)
 8002594:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8002598:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <MX_TIM6_Init+0x68>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1199;
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <MX_TIM6_Init+0x68>)
 80025a2:	f240 42af 	movw	r2, #1199	; 0x4af
 80025a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <MX_TIM6_Init+0x68>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_TIM6_Init+0x68>)
 80025b0:	f009 fa94 	bl	800badc <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025ba:	f7ff faaf 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_TIM6_Init+0x68>)
 80025cc:	f00a ff3a 	bl	800d444 <HAL_TIMEx_MasterConfigSynchronization>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80025d6:	f7ff faa1 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	24000904 	.word	0x24000904
 80025e8:	40001000 	.word	0x40001000

080025ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d146      	bne.n	800268c <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fe:	4b42      	ldr	r3, [pc, #264]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 8002600:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002604:	4a40      	ldr	r2, [pc, #256]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 8002610:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream2;
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 800261e:	4a3c      	ldr	r2, [pc, #240]	; (8002710 <HAL_TIM_Base_MspInit+0x124>)
 8002620:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002624:	2212      	movs	r2, #18
 8002626:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800263a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800263c:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 800263e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002642:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800264a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800265e:	482b      	ldr	r0, [pc, #172]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002660:	f002 f8b6 	bl	80047d0 <HAL_DMA_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800266a:	f7ff fa57 	bl	8001b1c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
 8002674:	4a25      	ldr	r2, [pc, #148]	; (800270c <HAL_TIM_Base_MspInit+0x120>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2106      	movs	r1, #6
 800267e:	201c      	movs	r0, #28
 8002680:	f002 f871 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002684:	201c      	movs	r0, #28
 8002686:	f002 f888 	bl	800479a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800268a:	e038      	b.n	80026fe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <HAL_TIM_Base_MspInit+0x128>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d117      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 8002698:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800269c:	4a1a      	ldr	r2, [pc, #104]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 800269e:	f043 0302 	orr.w	r3, r3, #2
 80026a2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 80026a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 7, 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2107      	movs	r1, #7
 80026b8:	201d      	movs	r0, #29
 80026ba:	f002 f854 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026be:	201d      	movs	r0, #29
 80026c0:	f002 f86b 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 80026c4:	e01b      	b.n	80026fe <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM6)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <HAL_TIM_Base_MspInit+0x12c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d116      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 80026d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_TIM_Base_MspInit+0x11c>)
 80026e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2102      	movs	r1, #2
 80026f2:	2036      	movs	r0, #54	; 0x36
 80026f4:	f002 f837 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026f8:	2036      	movs	r0, #54	; 0x36
 80026fa:	f002 f84e 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	58024400 	.word	0x58024400
 800270c:	24000950 	.word	0x24000950
 8002710:	40020040 	.word	0x40020040
 8002714:	40000400 	.word	0x40000400
 8002718:	40001000 	.word	0x40001000

0800271c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d11e      	bne.n	800277c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_TIM_MspPostInit+0x68>)
 8002740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_TIM_MspPostInit+0x68>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_TIM_MspPostInit+0x68>)
 8002750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800276c:	2301      	movs	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	4619      	mov	r1, r3
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <HAL_TIM_MspPostInit+0x6c>)
 8002778:	f004 ff0a 	bl	8007590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	58024400 	.word	0x58024400
 8002788:	58020000 	.word	0x58020000

0800278c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <MX_USART2_UART_Init+0x90>)
 8002792:	4a23      	ldr	r2, [pc, #140]	; (8002820 <MX_USART2_UART_Init+0x94>)
 8002794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <MX_USART2_UART_Init+0x90>)
 8002798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800279c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027b2:	220c      	movs	r2, #12
 80027b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027d4:	4811      	ldr	r0, [pc, #68]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027d6:	f00a fee1 	bl	800d59c <HAL_UART_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027e0:	f7ff f99c 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027e4:	2100      	movs	r1, #0
 80027e6:	480d      	ldr	r0, [pc, #52]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027e8:	f00c fe91 	bl	800f50e <HAL_UARTEx_SetTxFifoThreshold>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027f2:	f7ff f993 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027f6:	2100      	movs	r1, #0
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <MX_USART2_UART_Init+0x90>)
 80027fa:	f00c fec6 	bl	800f58a <HAL_UARTEx_SetRxFifoThreshold>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002804:	f7ff f98a 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_USART2_UART_Init+0x90>)
 800280a:	f00c fe47 	bl	800f49c <HAL_UARTEx_DisableFifoMode>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002814:	f7ff f982 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	240009c8 	.word	0x240009c8
 8002820:	40004400 	.word	0x40004400

08002824 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <MX_USART3_UART_Init+0x94>)
 800282c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002868:	2200      	movs	r2, #0
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800286c:	4811      	ldr	r0, [pc, #68]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 800286e:	f00a fe95 	bl	800d59c <HAL_UART_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002878:	f7ff f950 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287c:	2100      	movs	r1, #0
 800287e:	480d      	ldr	r0, [pc, #52]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002880:	f00c fe45 	bl	800f50e <HAL_UARTEx_SetTxFifoThreshold>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800288a:	f7ff f947 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800288e:	2100      	movs	r1, #0
 8002890:	4808      	ldr	r0, [pc, #32]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 8002892:	f00c fe7a 	bl	800f58a <HAL_UARTEx_SetRxFifoThreshold>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800289c:	f7ff f93e 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <MX_USART3_UART_Init+0x90>)
 80028a2:	f00c fdfb 	bl	800f49c <HAL_UARTEx_DisableFifoMode>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028ac:	f7ff f936 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	24000a5c 	.word	0x24000a5c
 80028b8:	40004800 	.word	0x40004800

080028bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <MX_USART6_UART_Init+0x94>)
 80028c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028e2:	220c      	movs	r2, #12
 80028e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_USART6_UART_Init+0x90>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <MX_USART6_UART_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002904:	4811      	ldr	r0, [pc, #68]	; (800294c <MX_USART6_UART_Init+0x90>)
 8002906:	f00a fe49 	bl	800d59c <HAL_UART_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002910:	f7ff f904 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002914:	2100      	movs	r1, #0
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_USART6_UART_Init+0x90>)
 8002918:	f00c fdf9 	bl	800f50e <HAL_UARTEx_SetTxFifoThreshold>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002922:	f7ff f8fb 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002926:	2100      	movs	r1, #0
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <MX_USART6_UART_Init+0x90>)
 800292a:	f00c fe2e 	bl	800f58a <HAL_UARTEx_SetRxFifoThreshold>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002934:	f7ff f8f2 	bl	8001b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <MX_USART6_UART_Init+0x90>)
 800293a:	f00c fdaf 	bl	800f49c <HAL_UARTEx_DisableFifoMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002944:	f7ff f8ea 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	24000af0 	.word	0x24000af0
 8002950:	40011400 	.word	0x40011400

08002954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0be      	sub	sp, #248	; 0xf8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	22c0      	movs	r2, #192	; 0xc0
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f00d f967 	bl	800fc48 <memset>
  if(uartHandle->Instance==USART2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a98      	ldr	r2, [pc, #608]	; (8002be0 <HAL_UART_MspInit+0x28c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d17c      	bne.n	8002a7e <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002984:	f04f 0202 	mov.w	r2, #2
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	4618      	mov	r0, r3
 800299c:	f006 fc94 	bl	80092c8 <HAL_RCCEx_PeriphCLKConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80029a6:	f7ff f8b9 	bl	8001b1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	4b8e      	ldr	r3, [pc, #568]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029b0:	4a8c      	ldr	r2, [pc, #560]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80029ba:	4b8a      	ldr	r3, [pc, #552]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029ce:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80029d8:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <HAL_UART_MspInit+0x290>)
 80029da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029e6:	2360      	movs	r3, #96	; 0x60
 80029e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029fe:	2307      	movs	r3, #7
 8002a00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a04:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4877      	ldr	r0, [pc, #476]	; (8002be8 <HAL_UART_MspInit+0x294>)
 8002a0c:	f004 fdc0 	bl	8007590 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8002a10:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a12:	4a77      	ldr	r2, [pc, #476]	; (8002bf0 <HAL_UART_MspInit+0x29c>)
 8002a14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002a16:	4b75      	ldr	r3, [pc, #468]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a18:	222b      	movs	r2, #43	; 0x2b
 8002a1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1c:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a22:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a28:	4b70      	ldr	r3, [pc, #448]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a30:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a4e:	4867      	ldr	r0, [pc, #412]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a50:	f001 febe 	bl	80047d0 <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002a5a:	f7ff f85f 	bl	8001b1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a66:	4a61      	ldr	r2, [pc, #388]	; (8002bec <HAL_UART_MspInit+0x298>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2026      	movs	r0, #38	; 0x26
 8002a72:	f001 fe78 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a76:	2026      	movs	r0, #38	; 0x26
 8002a78:	f001 fe8f 	bl	800479a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002a7c:	e173      	b.n	8002d66 <HAL_UART_MspInit+0x412>
  else if(uartHandle->Instance==USART3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5c      	ldr	r2, [pc, #368]	; (8002bf4 <HAL_UART_MspInit+0x2a0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 80bf 	bne.w	8002c08 <HAL_UART_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a8a:	f04f 0202 	mov.w	r2, #2
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f006 fc11 	bl	80092c8 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8002aac:	f7ff f836 	bl	8001b1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ab2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ab6:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ad4:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_UART_MspInit+0x290>)
 8002ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b06:	2307      	movs	r3, #7
 8002b08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4835      	ldr	r0, [pc, #212]	; (8002be8 <HAL_UART_MspInit+0x294>)
 8002b14:	f004 fd3c 	bl	8007590 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b1a:	4a38      	ldr	r2, [pc, #224]	; (8002bfc <HAL_UART_MspInit+0x2a8>)
 8002b1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b20:	222e      	movs	r2, #46	; 0x2e
 8002b22:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b36:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b38:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b50:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b56:	4828      	ldr	r0, [pc, #160]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b58:	f001 fe3a 	bl	80047d0 <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8002b62:	f7fe ffdb 	bl	8001b1c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b6a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_UART_MspInit+0x2a4>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b72:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b74:	4a23      	ldr	r2, [pc, #140]	; (8002c04 <HAL_UART_MspInit+0x2b0>)
 8002b76:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b7a:	222d      	movs	r2, #45	; 0x2d
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002bb0:	4813      	ldr	r0, [pc, #76]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002bb2:	f001 fe0d 	bl	80047d0 <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8002bbc:	f7fe ffae 	bl	8001b1c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_UART_MspInit+0x2ac>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2027      	movs	r0, #39	; 0x27
 8002bd4:	f001 fdc7 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bd8:	2027      	movs	r0, #39	; 0x27
 8002bda:	f001 fdde 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 8002bde:	e0c2      	b.n	8002d66 <HAL_UART_MspInit+0x412>
 8002be0:	40004400 	.word	0x40004400
 8002be4:	58024400 	.word	0x58024400
 8002be8:	58020c00 	.word	0x58020c00
 8002bec:	24000b84 	.word	0x24000b84
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	40004800 	.word	0x40004800
 8002bf8:	24000bfc 	.word	0x24000bfc
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	24000c74 	.word	0x24000c74
 8002c04:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_UART_MspInit+0x41c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 80a9 	bne.w	8002d66 <HAL_UART_MspInit+0x412>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c14:	f04f 0201 	mov.w	r2, #1
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c26:	f107 0320 	add.w	r3, r7, #32
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f006 fb4c 	bl	80092c8 <HAL_RCCEx_PeriphCLKConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8002c36:	f7fe ff71 	bl	8001b1c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c3a:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c40:	4a4c      	ldr	r2, [pc, #304]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c42:	f043 0320 	orr.w	r3, r3, #32
 8002c46:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002c5e:	4a45      	ldr	r2, [pc, #276]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002c68:	4b42      	ldr	r3, [pc, #264]	; (8002d74 <HAL_UART_MspInit+0x420>)
 8002c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c76:	23c0      	movs	r3, #192	; 0xc0
 8002c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4837      	ldr	r0, [pc, #220]	; (8002d78 <HAL_UART_MspInit+0x424>)
 8002c9c:	f004 fc78 	bl	8007590 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA1_Stream4;
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <HAL_UART_MspInit+0x42c>)
 8002ca4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002ca6:	4b35      	ldr	r3, [pc, #212]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002ca8:	2247      	movs	r2, #71	; 0x47
 8002caa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbe:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002cde:	4827      	ldr	r0, [pc, #156]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002ce0:	f001 fd76 	bl	80047d0 <HAL_DMA_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_MspInit+0x39a>
      Error_Handler();
 8002cea:	f7fe ff17 	bl	8001b1c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_UART_MspInit+0x428>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA1_Stream5;
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_UART_MspInit+0x434>)
 8002d00:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d04:	2248      	movs	r2, #72	; 0x48
 8002d06:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d1a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002d3a:	4812      	ldr	r0, [pc, #72]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d3c:	f001 fd48 	bl	80047d0 <HAL_DMA_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 8002d46:	f7fe fee9 	bl	8001b1c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d4e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_UART_MspInit+0x430>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2047      	movs	r0, #71	; 0x47
 8002d5c:	f001 fd03 	bl	8004766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d60:	2047      	movs	r0, #71	; 0x47
 8002d62:	f001 fd1a 	bl	800479a <HAL_NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	37f8      	adds	r7, #248	; 0xf8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40011400 	.word	0x40011400
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58020800 	.word	0x58020800
 8002d7c:	24000cec 	.word	0x24000cec
 8002d80:	40020070 	.word	0x40020070
 8002d84:	24000d64 	.word	0x24000d64
 8002d88:	40020088 	.word	0x40020088

08002d8c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <parseStringToArray>:

#include "utils.h"

uint8_t receive_data[BUFFER_SIZE];

double* parseStringToArray(const char* str, int* count) {
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	if (str[0] == '[') return NULL;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b5b      	cmp	r3, #91	; 0x5b
 8002dac:	d101      	bne.n	8002db2 <parseStringToArray+0x16>
 8002dae:	2300      	movs	r3, #0
 8002db0:	e055      	b.n	8002e5e <parseStringToArray+0xc2>

    const char* delimiter = ", ";
 8002db2:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <parseStringToArray+0xcc>)
 8002db4:	613b      	str	r3, [r7, #16]

    if (strlen(str) == 0) return NULL;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <parseStringToArray+0x26>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e04d      	b.n	8002e5e <parseStringToArray+0xc2>
    else {
    	*count =1;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < strlen(str); i++) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e00d      	b.n	8002dea <parseStringToArray+0x4e>
			if (str[i] == ',') {
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b2c      	cmp	r3, #44	; 0x2c
 8002dd8:	d104      	bne.n	8002de4 <parseStringToArray+0x48>
				(*count)++;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < strlen(str); i++) {
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd fa80 	bl	80002f0 <strlen>
 8002df0:	4602      	mov	r2, r0
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8ea      	bhi.n	8002dce <parseStringToArray+0x32>
			}
		}
    }

    double* array = (double*)malloc(*count * sizeof(double));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f00c ff04 	bl	800fc0c <malloc>
 8002e04:	4603      	mov	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]

    if (*count != 1)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d01d      	beq.n	8002e4c <parseStringToArray+0xb0>
	{
		char *token = strtok((char *)str, delimiter);
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f00e fbe2 	bl	80115dc <strtok>
 8002e18:	61b8      	str	r0, [r7, #24]
		int index = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]

		while (token != NULL)
 8002e1e:	e011      	b.n	8002e44 <parseStringToArray+0xa8>
		{
			array[index++] = (double)atof(token);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	617a      	str	r2, [r7, #20]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	18d4      	adds	r4, r2, r3
 8002e2c:	69b8      	ldr	r0, [r7, #24]
 8002e2e:	f00c fc8d 	bl	800f74c <atof>
 8002e32:	eeb0 7b40 	vmov.f64	d7, d0
 8002e36:	ed84 7b00 	vstr	d7, [r4]
			token = strtok(NULL, delimiter);
 8002e3a:	6939      	ldr	r1, [r7, #16]
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f00e fbcd 	bl	80115dc <strtok>
 8002e42:	61b8      	str	r0, [r7, #24]
		while (token != NULL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ea      	bne.n	8002e20 <parseStringToArray+0x84>
 8002e4a:	e007      	b.n	8002e5c <parseStringToArray+0xc0>
		}
	}
	else
	{
		array[0] = atof(str);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f00c fc7d 	bl	800f74c <atof>
 8002e52:	eeb0 7b40 	vmov.f64	d7, d0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	ed83 7b00 	vstr	d7, [r3]
	}

    return array;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	080136c0 	.word	0x080136c0

08002e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e70:	f7ff fa46 	bl	8002300 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e74:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e76:	490d      	ldr	r1, [pc, #52]	; (8002eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	; (8002eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f00c fe2b 	bl	800faf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9e:	f7fe fc5d 	bl	800175c <main>
  bx  lr
 8002ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ea4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002ea8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002eac:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002eb0:	08014234 	.word	0x08014234
  ldr r2, =_sbss
 8002eb4:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8002eb8:	240011d8 	.word	0x240011d8

08002ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC_IRQHandler>
	...

08002ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec6:	2003      	movs	r0, #3
 8002ec8:	f001 fc42 	bl	8004750 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ecc:	f006 f826 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_Init+0x68>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	4913      	ldr	r1, [pc, #76]	; (8002f2c <HAL_Init+0x6c>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_Init+0x68>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_Init+0x6c>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_Init+0x70>)
 8002f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_Init+0x74>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0a:	2005      	movs	r0, #5
 8002f0c:	f000 f814 	bl	8002f38 <HAL_InitTick>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e002      	b.n	8002f20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f1a:	f7ff f86f 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	08013ce4 	.word	0x08013ce4
 8002f30:	24000004 	.word	0x24000004
 8002f34:	24000000 	.word	0x24000000

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_InitTick+0x60>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e021      	b.n	8002f90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_InitTick+0x64>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_InitTick+0x60>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fc27 	bl	80047b6 <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f001 fbf1 	bl	8004766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_InitTick+0x68>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2400000c 	.word	0x2400000c
 8002f9c:	24000000 	.word	0x24000000
 8002fa0:	24000008 	.word	0x24000008

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2400000c 	.word	0x2400000c
 8002fc8:	240011c4 	.word	0x240011c4

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	240011c4 	.word	0x240011c4

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2400000c 	.word	0x2400000c

0800302c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	4904      	ldr	r1, [pc, #16]	; (8003054 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	58000400 	.word	0x58000400

08003058 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3360      	adds	r3, #96	; 0x60
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	611a      	str	r2, [r3, #16]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3360      	adds	r3, #96	; 0x60
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
  }
}
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3330      	adds	r3, #48	; 0x30
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	4413      	add	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	211f      	movs	r1, #31
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	f003 011f 	and.w	r1, r3, #31
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3314      	adds	r3, #20
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	0e5b      	lsrs	r3, r3, #25
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	4413      	add	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2107      	movs	r1, #7
 8003214:	fa01 f303 	lsl.w	r3, r1, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0d1b      	lsrs	r3, r3, #20
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	431a      	orrs	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0318 	and.w	r3, r3, #24
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003260:	40d9      	lsrs	r1, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	400b      	ands	r3, r1
 8003266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	000fffff 	.word	0x000fffff

08003284 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 031f 	and.w	r3, r3, #31
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6093      	str	r3, [r2, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	5fffffc0 	.word	0x5fffffc0

080032e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <LL_ADC_EnableInternalRegulator+0x24>)
 8003316:	4013      	ands	r3, r2
 8003318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	6fffffc0 	.word	0x6fffffc0

08003330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003344:	d101      	bne.n	800334a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <LL_ADC_Enable+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	7fffffc0 	.word	0x7fffffc0

08003380 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <LL_ADC_Disable+0x24>)
 800338e:	4013      	ands	r3, r2
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	7fffffc0 	.word	0x7fffffc0

080033a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <LL_ADC_IsEnabled+0x18>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <LL_ADC_IsEnabled+0x1a>
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d101      	bne.n	80033e6 <LL_ADC_IsDisableOngoing+0x18>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <LL_ADC_IsDisableOngoing+0x1a>
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <LL_ADC_REG_StartConversion+0x24>)
 8003402:	4013      	ands	r3, r2
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	7fffffc0 	.word	0x7fffffc0

0800341c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <LL_ADC_REG_StopConversion+0x24>)
 800342a:	4013      	ands	r3, r2
 800342c:	f043 0210 	orr.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	7fffffc0 	.word	0x7fffffc0

08003444 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d101      	bne.n	800345c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <LL_ADC_INJ_StopConversion+0x24>)
 800347a:	4013      	ands	r3, r2
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	7fffffc0 	.word	0x7fffffc0

08003494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d101      	bne.n	80034ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e138      	b.n	8003748 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fd fb35 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff feef 	bl	80032e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fed5 	bl	80032bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff0a 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d114      	bne.n	800354c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff feee 	bl	8003308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_ADC_Init+0x294>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	4a88      	ldr	r2, [pc, #544]	; (8003754 <HAL_ADC_Init+0x298>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	3301      	adds	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800353e:	e002      	b.n	8003546 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f9      	bne.n	8003540 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff feed 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff61 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003582:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f040 80d2 	bne.w	8003736 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 80ce 	bne.w	8003736 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fefa 	bl	80033a8 <LL_ADC_IsEnabled>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ba:	4867      	ldr	r0, [pc, #412]	; (8003758 <HAL_ADC_Init+0x29c>)
 80035bc:	f7ff fef4 	bl	80033a8 <LL_ADC_IsEnabled>
 80035c0:	4604      	mov	r4, r0
 80035c2:	4866      	ldr	r0, [pc, #408]	; (800375c <HAL_ADC_Init+0x2a0>)
 80035c4:	f7ff fef0 	bl	80033a8 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	4862      	ldr	r0, [pc, #392]	; (8003760 <HAL_ADC_Init+0x2a4>)
 80035d8:	f7ff fd3e 	bl	8003058 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7d5b      	ldrb	r3, [r3, #21]
 80035e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035e6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80035ec:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7f1b      	ldrb	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	3b01      	subs	r3, #1
 8003606:	045b      	lsls	r3, r3, #17
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_ADC_Init+0x2a8>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	69b9      	ldr	r1, [r7, #24]
 800363a:	430b      	orrs	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fefe 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003648:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff20 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 8003654:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d14a      	bne.n	80036f2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d147      	bne.n	80036f2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7d1b      	ldrb	r3, [r3, #20]
 8003666:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <HAL_ADC_Init+0x2ac>)
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	430b      	orrs	r3, r1
 8003682:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368a:	2b01      	cmp	r3, #1
 800368c:	d11b      	bne.n	80036c6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_ADC_Init+0x2b0>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0411      	lsls	r1, r2, #16
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036b6:	430a      	orrs	r2, r1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	e007      	b.n	80036d6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fe91 	bl	8004414 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10c      	bne.n	8003714 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f023 010f 	bic.w	r1, r3, #15
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
 8003712:	e007      	b.n	8003724 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020f 	bic.w	r2, r2, #15
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
 8003734:	e007      	b.n	8003746 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003746:	7ffb      	ldrb	r3, [r7, #31]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3724      	adds	r7, #36	; 0x24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	24000000 	.word	0x24000000
 8003754:	053e2d63 	.word	0x053e2d63
 8003758:	40022000 	.word	0x40022000
 800375c:	40022100 	.word	0x40022100
 8003760:	40022300 	.word	0x40022300
 8003764:	fff0c003 	.word	0xfff0c003
 8003768:	ffffbffc 	.word	0xffffbffc
 800376c:	fc00f81e 	.word	0xfc00f81e

08003770 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003778:	4856      	ldr	r0, [pc, #344]	; (80038d4 <HAL_ADC_Start+0x164>)
 800377a:	f7ff fd83 	bl	8003284 <LL_ADC_GetMultimode>
 800377e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fe5d 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 809a 	bne.w	80038c6 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_Start+0x30>
 800379c:	2302      	movs	r3, #2
 800379e:	e095      	b.n	80038cc <HAL_ADC_Start+0x15c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fd57 	bl	800425c <ADC_Enable>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 8081 	bne.w	80038bc <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_ADC_Start+0x168>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a43      	ldr	r2, [pc, #268]	; (80038dc <HAL_ADC_Start+0x16c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d002      	beq.n	80037da <HAL_ADC_Start+0x6a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	e000      	b.n	80037dc <HAL_ADC_Start+0x6c>
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_ADC_Start+0x170>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003802:	d106      	bne.n	8003812 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f023 0206 	bic.w	r2, r3, #6
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	e002      	b.n	8003818 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	221c      	movs	r2, #28
 800381e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <HAL_ADC_Start+0x16c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d002      	beq.n	8003838 <HAL_ADC_Start+0xc8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e000      	b.n	800383a <HAL_ADC_Start+0xca>
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_ADC_Start+0x170>)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	4293      	cmp	r3, r2
 8003840:	d008      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d002      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d114      	bne.n	800387e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800386a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fdbc 	bl	80033f4 <LL_ADC_REG_StartConversion>
 800387c:	e025      	b.n	80038ca <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <HAL_ADC_Start+0x16c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d002      	beq.n	800389a <HAL_ADC_Start+0x12a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e000      	b.n	800389c <HAL_ADC_Start+0x12c>
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_ADC_Start+0x170>)
 800389c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00f      	beq.n	80038ca <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ba:	e006      	b.n	80038ca <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038c4:	e001      	b.n	80038ca <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
 80038c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022300 	.word	0x40022300
 80038d8:	fffff0fe 	.word	0xfffff0fe
 80038dc:	40022100 	.word	0x40022100
 80038e0:	40022000 	.word	0x40022000

080038e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Stop+0x16>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e021      	b.n	800393e <HAL_ADC_Stop+0x5a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003902:	2103      	movs	r1, #3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fbed 	bl	80040e4 <ADC_ConversionStop>
 800390a:	4603      	mov	r3, r0
 800390c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fd1d 	bl	8004354 <ADC_Disable>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_ADC_Stop+0x64>)
 800392a:	4013      	ands	r3, r2
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	ffffeefe 	.word	0xffffeefe

0800394c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003956:	4866      	ldr	r0, [pc, #408]	; (8003af0 <HAL_ADC_PollForConversion+0x1a4>)
 8003958:	f7ff fc94 	bl	8003284 <LL_ADC_GetMultimode>
 800395c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d102      	bne.n	800396c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003966:	2308      	movs	r3, #8
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e02a      	b.n	80039c2 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d002      	beq.n	800397e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b09      	cmp	r3, #9
 800397c:	d111      	bne.n	80039a2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0a4      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800399c:	2304      	movs	r3, #4
 800399e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80039a0:	e00f      	b.n	80039c2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039a2:	4853      	ldr	r0, [pc, #332]	; (8003af0 <HAL_ADC_PollForConversion+0x1a4>)
 80039a4:	f7ff fc7c 	bl	80032a0 <LL_ADC_GetMultiDMATransfer>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e093      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80039be:	2304      	movs	r3, #4
 80039c0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039c2:	f7ff fb03 	bl	8002fcc <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039c8:	e021      	b.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d01d      	beq.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039d2:	f7ff fafb 	bl	8002fcc <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <HAL_ADC_PollForConversion+0x9c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d112      	bne.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e06b      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0d6      	beq.n	80039ca <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fb9b 	bl	8003168 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01c      	beq.n	8003a72 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7d5b      	ldrb	r3, [r3, #21]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d111      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d002      	beq.n	8003a82 <HAL_ADC_PollForConversion+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_PollForConversion+0x138>
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_ADC_PollForConversion+0x1ac>)
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d008      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d002      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b09      	cmp	r3, #9
 8003a9c:	d104      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e00c      	b.n	8003ac2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <HAL_ADC_PollForConversion+0x1a8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d002      	beq.n	8003ab8 <HAL_ADC_PollForConversion+0x16c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <HAL_ADC_PollForConversion+0x16e>
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_ADC_PollForConversion+0x1ac>)
 8003aba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d104      	bne.n	8003ad2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2208      	movs	r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e008      	b.n	8003ae4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022300 	.word	0x40022300
 8003af4:	40022100 	.word	0x40022100
 8003af8:	40022000 	.word	0x40022000

08003afc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b0a1      	sub	sp, #132	; 0x84
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a9a      	ldr	r2, [pc, #616]	; (8003d9c <HAL_ADC_ConfigChannel+0x284>)
 8003b32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x2a>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e2bc      	b.n	80040bc <HAL_ADC_ConfigChannel+0x5a4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fc78 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 82a1 	bne.w	800409e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d108      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x62>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2201      	movs	r2, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	e016      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x90>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003b92:	2320      	movs	r3, #32
 8003b94:	e003      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	69d1      	ldr	r1, [r2, #28]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7ff fae3 	bl	800318e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fc39 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003bd2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fc5b 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 8003bde:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 80a0 	bne.w	8003d28 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f040 809c 	bne.w	8003d28 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f7ff faf2 	bl	80031e6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x110>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695a      	ldr	r2, [r3, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	e00a      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x126>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d027      	beq.n	8003c98 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6919      	ldr	r1, [r3, #16]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c56:	f7ff fa33 	bl	80030c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6919      	ldr	r1, [r3, #16]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	7e5b      	ldrb	r3, [r3, #25]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d102      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x158>
 8003c6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c6e:	e000      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x15a>
 8003c70:	2300      	movs	r3, #0
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7ff fa5d 	bl	8003132 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6919      	ldr	r1, [r3, #16]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x176>
 8003c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x178>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	461a      	mov	r2, r3
 8003c92:	f7ff fa35 	bl	8003100 <LL_ADC_SetDataRightShift>
 8003c96:	e047      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	069b      	lsls	r3, r3, #26
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d107      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cba:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	069b      	lsls	r3, r3, #26
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d107      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cde:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	069b      	lsls	r3, r3, #26
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d107      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d02:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	069b      	lsls	r3, r3, #26
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d107      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d26:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb3b 	bl	80033a8 <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 81bb 	bne.w	80040b0 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7ff fa78 	bl	800323c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_ADC_ConfigChannel+0x284>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f040 8130 	bne.w	8003fb8 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x268>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2b09      	cmp	r3, #9
 8003d76:	bf94      	ite	ls
 8003d78:	2301      	movls	r3, #1
 8003d7a:	2300      	movhi	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e01b      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x2a0>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d88:	fa93 f3a3 	rbit	r3, r3
 8003d8c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d90:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003d98:	2320      	movs	r3, #32
 8003d9a:	e005      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x290>
 8003d9c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	bf94      	ite	ls
 8003db2:	2301      	movls	r3, #1
 8003db4:	2300      	movhi	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d079      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x2c0>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	3301      	adds	r3, #1
 8003dd0:	069b      	lsls	r3, r3, #26
 8003dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd6:	e015      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x2ec>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003df0:	2320      	movs	r3, #32
 8003df2:	e003      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	069b      	lsls	r3, r3, #26
 8003e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x30c>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	3301      	adds	r3, #1
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	e017      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x33c>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	ea42 0103 	orr.w	r1, r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x362>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x394>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f003 021f 	and.w	r2, r3, #31
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eac:	430b      	orrs	r3, r1
 8003eae:	e07e      	b.n	8003fae <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d107      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x3b4>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eca:	e015      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x3e0>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	e003      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	069b      	lsls	r3, r3, #26
 8003ef4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d109      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x400>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	2101      	movs	r1, #1
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	e017      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x430>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	61bb      	str	r3, [r7, #24]
  return result;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e003      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2101      	movs	r1, #1
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	ea42 0103 	orr.w	r1, r2, r3
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x45c>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0e9b      	lsrs	r3, r3, #26
 8003f5e:	3301      	adds	r3, #1
 8003f60:	f003 021f 	and.w	r2, r3, #31
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	3b1e      	subs	r3, #30
 8003f6c:	051b      	lsls	r3, r3, #20
 8003f6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f72:	e01b      	b.n	8003fac <HAL_ADC_ConfigChannel+0x494>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	60fb      	str	r3, [r7, #12]
  return result;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e003      	b.n	8003f98 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b1e      	subs	r3, #30
 8003fa6:	051b      	lsls	r3, r3, #20
 8003fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fac:	430b      	orrs	r3, r1
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	6892      	ldr	r2, [r2, #8]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7ff f917 	bl	80031e6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da77      	bge.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fc0:	4840      	ldr	r0, [pc, #256]	; (80040c4 <HAL_ADC_ConfigChannel+0x5ac>)
 8003fc2:	f7ff f86f 	bl	80030a4 <LL_ADC_GetCommonPathInternalCh>
 8003fc6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc8:	483f      	ldr	r0, [pc, #252]	; (80040c8 <HAL_ADC_ConfigChannel+0x5b0>)
 8003fca:	f7ff f9ed 	bl	80033a8 <LL_ADC_IsEnabled>
 8003fce:	4604      	mov	r4, r0
 8003fd0:	483e      	ldr	r0, [pc, #248]	; (80040cc <HAL_ADC_ConfigChannel+0x5b4>)
 8003fd2:	f7ff f9e9 	bl	80033a8 <LL_ADC_IsEnabled>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4323      	orrs	r3, r4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d155      	bne.n	800408a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3b      	ldr	r2, [pc, #236]	; (80040d0 <HAL_ADC_ConfigChannel+0x5b8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d122      	bne.n	800402e <HAL_ADC_ConfigChannel+0x516>
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a35      	ldr	r2, [pc, #212]	; (80040cc <HAL_ADC_ConfigChannel+0x5b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d159      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004002:	4619      	mov	r1, r3
 8004004:	482f      	ldr	r0, [pc, #188]	; (80040c4 <HAL_ADC_ConfigChannel+0x5ac>)
 8004006:	f7ff f83a 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800400a:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_ADC_ConfigChannel+0x5bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	4a31      	ldr	r2, [pc, #196]	; (80040d8 <HAL_ADC_ConfigChannel+0x5c0>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	3301      	adds	r3, #1
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800401e:	e002      	b.n	8004026 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3b01      	subs	r3, #1
 8004024:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f9      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800402c:	e040      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <HAL_ADC_ConfigChannel+0x5c4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d111      	bne.n	800405c <HAL_ADC_ConfigChannel+0x544>
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_ADC_ConfigChannel+0x5b4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d131      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	4619      	mov	r1, r3
 8004054:	481b      	ldr	r0, [pc, #108]	; (80040c4 <HAL_ADC_ConfigChannel+0x5ac>)
 8004056:	f7ff f812 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800405a:	e029      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_ADC_ConfigChannel+0x5c8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d124      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11f      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_ADC_ConfigChannel+0x5b4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d11a      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004080:	4619      	mov	r1, r3
 8004082:	4810      	ldr	r0, [pc, #64]	; (80040c4 <HAL_ADC_ConfigChannel+0x5ac>)
 8004084:	f7fe fffb 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
 8004088:	e012      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800409c:	e008      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3784      	adds	r7, #132	; 0x84
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd90      	pop	{r4, r7, pc}
 80040c4:	40022300 	.word	0x40022300
 80040c8:	40022000 	.word	0x40022000
 80040cc:	40022100 	.word	0x40022100
 80040d0:	cb840000 	.word	0xcb840000
 80040d4:	24000000 	.word	0x24000000
 80040d8:	053e2d63 	.word	0x053e2d63
 80040dc:	bac04000 	.word	0xbac04000
 80040e0:	cfb80000 	.word	0xcfb80000

080040e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f9a2 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8004100:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff f9c4 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 800410c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8098 	beq.w	800424c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02a      	beq.n	8004180 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7d5b      	ldrb	r3, [r3, #21]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d126      	bne.n	8004180 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7d1b      	ldrb	r3, [r3, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d122      	bne.n	8004180 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800413e:	e014      	b.n	800416a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4a45      	ldr	r2, [pc, #276]	; (8004258 <ADC_ConversionStop+0x174>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d90d      	bls.n	8004164 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f043 0210 	orr.w	r2, r3, #16
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f043 0201 	orr.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e074      	b.n	800424e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3301      	adds	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d1e3      	bne.n	8004140 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2240      	movs	r2, #64	; 0x40
 800417e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d014      	beq.n	80041b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff f95a 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f917 	bl	80033ce <LL_ADC_IsDisableOngoing>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f936 	bl	800341c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d014      	beq.n	80041e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f96a 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff f8ff 	bl	80033ce <LL_ADC_IsDisableOngoing>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d104      	bne.n	80041e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff f946 	bl	800346c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d005      	beq.n	80041f2 <ADC_ConversionStop+0x10e>
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d105      	bne.n	80041f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80041ec:	230c      	movs	r3, #12
 80041ee:	617b      	str	r3, [r7, #20]
        break;
 80041f0:	e005      	b.n	80041fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80041f2:	2308      	movs	r3, #8
 80041f4:	617b      	str	r3, [r7, #20]
        break;
 80041f6:	e002      	b.n	80041fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80041f8:	2304      	movs	r3, #4
 80041fa:	617b      	str	r3, [r7, #20]
        break;
 80041fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80041fe:	f7fe fee5 	bl	8002fcc <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004204:	e01b      	b.n	800423e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004206:	f7fe fee1 	bl	8002fcc <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b05      	cmp	r3, #5
 8004212:	d914      	bls.n	800423e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0210 	orr.w	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e007      	b.n	800424e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1dc      	bne.n	8004206 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000cdbff 	.word	0x000cdbff

0800425c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff f89d 	bl	80033a8 <LL_ADC_IsEnabled>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d161      	bne.n	8004338 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	4b32      	ldr	r3, [pc, #200]	; (8004344 <ADC_Enable+0xe8>)
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f043 0210 	orr.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e04d      	b.n	800433a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f858 	bl	8003358 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042a8:	f7fe fe90 	bl	8002fcc <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ae:	4826      	ldr	r0, [pc, #152]	; (8004348 <ADC_Enable+0xec>)
 80042b0:	f7fe ffe8 	bl	8003284 <LL_ADC_GetMultimode>
 80042b4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a24      	ldr	r2, [pc, #144]	; (800434c <ADC_Enable+0xf0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d002      	beq.n	80042c6 <ADC_Enable+0x6a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	e000      	b.n	80042c8 <ADC_Enable+0x6c>
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <ADC_Enable+0xf4>)
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d130      	bne.n	8004338 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d6:	e028      	b.n	800432a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff f863 	bl	80033a8 <LL_ADC_IsEnabled>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f833 	bl	8003358 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042f2:	f7fe fe6b 	bl	8002fcc <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d914      	bls.n	800432a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	d00d      	beq.n	800432a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0210 	orr.w	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e007      	b.n	800433a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b01      	cmp	r3, #1
 8004336:	d1cf      	bne.n	80042d8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	8000003f 	.word	0x8000003f
 8004348:	40022300 	.word	0x40022300
 800434c:	40022100 	.word	0x40022100
 8004350:	40022000 	.word	0x40022000

08004354 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff f834 	bl	80033ce <LL_ADC_IsDisableOngoing>
 8004366:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f81b 	bl	80033a8 <LL_ADC_IsEnabled>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d047      	beq.n	8004408 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d144      	bne.n	8004408 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030d 	and.w	r3, r3, #13
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10c      	bne.n	80043a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fff5 	bl	8003380 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2203      	movs	r2, #3
 800439c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800439e:	f7fe fe15 	bl	8002fcc <HAL_GetTick>
 80043a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043a4:	e029      	b.n	80043fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0210 	orr.w	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e023      	b.n	800440a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043c2:	f7fe fe03 	bl	8002fcc <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d914      	bls.n	80043fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 0210 	orr.w	r2, r3, #16
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e007      	b.n	800440a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1dc      	bne.n	80043c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800441c:	4b60      	ldr	r3, [pc, #384]	; (80045a0 <ADC_ConfigureBoostMode+0x18c>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01c      	beq.n	8004462 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004428:	f004 fef2 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 800442c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004436:	d010      	beq.n	800445a <ADC_ConfigureBoostMode+0x46>
 8004438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443c:	d873      	bhi.n	8004526 <ADC_ConfigureBoostMode+0x112>
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d002      	beq.n	800444a <ADC_ConfigureBoostMode+0x36>
 8004444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004448:	d16d      	bne.n	8004526 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	60fb      	str	r3, [r7, #12]
        break;
 8004458:	e068      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	60fb      	str	r3, [r7, #12]
        break;
 8004460:	e064      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004462:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	f006 f8eb 	bl	800a644 <HAL_RCCEx_GetPeriphCLKFreq>
 800446e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004478:	d051      	beq.n	800451e <ADC_ConfigureBoostMode+0x10a>
 800447a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800447e:	d854      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 8004480:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004484:	d047      	beq.n	8004516 <ADC_ConfigureBoostMode+0x102>
 8004486:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800448a:	d84e      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 800448c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004490:	d03d      	beq.n	800450e <ADC_ConfigureBoostMode+0xfa>
 8004492:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004496:	d848      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d033      	beq.n	8004506 <ADC_ConfigureBoostMode+0xf2>
 800449e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044a2:	d842      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044a8:	d029      	beq.n	80044fe <ADC_ConfigureBoostMode+0xea>
 80044aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ae:	d83c      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044b4:	d01a      	beq.n	80044ec <ADC_ConfigureBoostMode+0xd8>
 80044b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044ba:	d836      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044c0:	d014      	beq.n	80044ec <ADC_ConfigureBoostMode+0xd8>
 80044c2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044c6:	d830      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044cc:	d00e      	beq.n	80044ec <ADC_ConfigureBoostMode+0xd8>
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044d2:	d82a      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044d8:	d008      	beq.n	80044ec <ADC_ConfigureBoostMode+0xd8>
 80044da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044de:	d824      	bhi.n	800452a <ADC_ConfigureBoostMode+0x116>
 80044e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044e4:	d002      	beq.n	80044ec <ADC_ConfigureBoostMode+0xd8>
 80044e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044ea:	d11e      	bne.n	800452a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c9b      	lsrs	r3, r3, #18
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	60fb      	str	r3, [r7, #12]
        break;
 80044fc:	e016      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
        break;
 8004504:	e012      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	60fb      	str	r3, [r7, #12]
        break;
 800450c:	e00e      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	099b      	lsrs	r3, r3, #6
 8004512:	60fb      	str	r3, [r7, #12]
        break;
 8004514:	e00a      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	09db      	lsrs	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]
        break;
 800451c:	e006      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	0a1b      	lsrs	r3, r3, #8
 8004522:	60fb      	str	r3, [r7, #12]
        break;
 8004524:	e002      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
        break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800452a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <ADC_ConfigureBoostMode+0x190>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d808      	bhi.n	800454c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004548:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800454a:	e025      	b.n	8004598 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <ADC_ConfigureBoostMode+0x194>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d80a      	bhi.n	800456a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004566:	609a      	str	r2, [r3, #8]
}
 8004568:	e016      	b.n	8004598 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <ADC_ConfigureBoostMode+0x198>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d80a      	bhi.n	8004588 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	609a      	str	r2, [r3, #8]
}
 8004586:	e007      	b.n	8004598 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004596:	609a      	str	r2, [r3, #8]
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40022300 	.word	0x40022300
 80045a4:	005f5e10 	.word	0x005f5e10
 80045a8:	00bebc20 	.word	0x00bebc20
 80045ac:	017d7840 	.word	0x017d7840

080045b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <__NVIC_SetPriorityGrouping+0x40>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045cc:	4013      	ands	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <__NVIC_SetPriorityGrouping+0x44>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045de:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <__NVIC_SetPriorityGrouping+0x40>)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	60d3      	str	r3, [r2, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	e000ed00 	.word	0xe000ed00
 80045f4:	05fa0000 	.word	0x05fa0000

080045f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__NVIC_GetPriorityGrouping+0x18>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f003 0307 	and.w	r3, r3, #7
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	db0b      	blt.n	800463e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	f003 021f 	and.w	r2, r3, #31
 800462c:	4907      	ldr	r1, [pc, #28]	; (800464c <__NVIC_EnableIRQ+0x38>)
 800462e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2001      	movs	r0, #1
 8004636:	fa00 f202 	lsl.w	r2, r0, r2
 800463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000e100 	.word	0xe000e100

08004650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800465c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004660:	2b00      	cmp	r3, #0
 8004662:	db0a      	blt.n	800467a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	490c      	ldr	r1, [pc, #48]	; (800469c <__NVIC_SetPriority+0x4c>)
 800466a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	440b      	add	r3, r1
 8004674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004678:	e00a      	b.n	8004690 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4908      	ldr	r1, [pc, #32]	; (80046a0 <__NVIC_SetPriority+0x50>)
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	3b04      	subs	r3, #4
 8004688:	0112      	lsls	r2, r2, #4
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	440b      	add	r3, r1
 800468e:	761a      	strb	r2, [r3, #24]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000e100 	.word	0xe000e100
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f1c3 0307 	rsb	r3, r3, #7
 80046be:	2b04      	cmp	r3, #4
 80046c0:	bf28      	it	cs
 80046c2:	2304      	movcs	r3, #4
 80046c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d902      	bls.n	80046d4 <NVIC_EncodePriority+0x30>
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3b03      	subs	r3, #3
 80046d2:	e000      	b.n	80046d6 <NVIC_EncodePriority+0x32>
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	401a      	ands	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ec:	f04f 31ff 	mov.w	r1, #4294967295
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	43d9      	mvns	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046fc:	4313      	orrs	r3, r2
         );
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3b01      	subs	r3, #1
 8004718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800471c:	d301      	bcc.n	8004722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800471e:	2301      	movs	r3, #1
 8004720:	e00f      	b.n	8004742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <SysTick_Config+0x40>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800472a:	210f      	movs	r1, #15
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	f7ff ff8e 	bl	8004650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <SysTick_Config+0x40>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800473a:	4b04      	ldr	r3, [pc, #16]	; (800474c <SysTick_Config+0x40>)
 800473c:	2207      	movs	r2, #7
 800473e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	e000e010 	.word	0xe000e010

08004750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff29 	bl	80045b0 <__NVIC_SetPriorityGrouping>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	af00      	add	r7, sp, #0
 800476c:	4603      	mov	r3, r0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004774:	f7ff ff40 	bl	80045f8 <__NVIC_GetPriorityGrouping>
 8004778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	68b9      	ldr	r1, [r7, #8]
 800477e:	6978      	ldr	r0, [r7, #20]
 8004780:	f7ff ff90 	bl	80046a4 <NVIC_EncodePriority>
 8004784:	4602      	mov	r2, r0
 8004786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff ff5f 	bl	8004650 <__NVIC_SetPriority>
}
 8004792:	bf00      	nop
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	4603      	mov	r3, r0
 80047a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff ff33 	bl	8004614 <__NVIC_EnableIRQ>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ffa4 	bl	800470c <SysTick_Config>
 80047c4:	4603      	mov	r3, r0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047d8:	f7fe fbf8 	bl	8002fcc <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e37f      	b.n	8004ee8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a66      	ldr	r2, [pc, #408]	; (8004988 <HAL_DMA_Init+0x1b8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d04a      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a65      	ldr	r2, [pc, #404]	; (800498c <HAL_DMA_Init+0x1bc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d045      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a63      	ldr	r2, [pc, #396]	; (8004990 <HAL_DMA_Init+0x1c0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d040      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a62      	ldr	r2, [pc, #392]	; (8004994 <HAL_DMA_Init+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d03b      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a60      	ldr	r2, [pc, #384]	; (8004998 <HAL_DMA_Init+0x1c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d036      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5f      	ldr	r2, [pc, #380]	; (800499c <HAL_DMA_Init+0x1cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d031      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_DMA_Init+0x1d0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02c      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5c      	ldr	r2, [pc, #368]	; (80049a4 <HAL_DMA_Init+0x1d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d027      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5a      	ldr	r2, [pc, #360]	; (80049a8 <HAL_DMA_Init+0x1d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a59      	ldr	r2, [pc, #356]	; (80049ac <HAL_DMA_Init+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01d      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_DMA_Init+0x1e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d018      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <HAL_DMA_Init+0x1e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_DMA_Init+0x1e8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a53      	ldr	r2, [pc, #332]	; (80049bc <HAL_DMA_Init+0x1ec>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_DMA_Init+0x1f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_DMA_Init+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a50      	ldr	r2, [pc, #320]	; (80049c4 <HAL_DMA_Init+0x1f4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_DMA_Init+0xbc>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_DMA_Init+0xbe>
 800488c:	2300      	movs	r3, #0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 813c 	beq.w	8004b0c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a37      	ldr	r2, [pc, #220]	; (8004988 <HAL_DMA_Init+0x1b8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04a      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a36      	ldr	r2, [pc, #216]	; (800498c <HAL_DMA_Init+0x1bc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d045      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a34      	ldr	r2, [pc, #208]	; (8004990 <HAL_DMA_Init+0x1c0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a33      	ldr	r2, [pc, #204]	; (8004994 <HAL_DMA_Init+0x1c4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03b      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a31      	ldr	r2, [pc, #196]	; (8004998 <HAL_DMA_Init+0x1c8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d036      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a30      	ldr	r2, [pc, #192]	; (800499c <HAL_DMA_Init+0x1cc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d031      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <HAL_DMA_Init+0x1d0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02c      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_DMA_Init+0x1d4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d027      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a2b      	ldr	r2, [pc, #172]	; (80049a8 <HAL_DMA_Init+0x1d8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <HAL_DMA_Init+0x174>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <HAL_DMA_Init+0x1dc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <HAL_DMA_Init+0x174>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <HAL_DMA_Init+0x1e0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_DMA_Init+0x174>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <HAL_DMA_Init+0x1e4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <HAL_DMA_Init+0x174>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <HAL_DMA_Init+0x1e8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_DMA_Init+0x174>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a24      	ldr	r2, [pc, #144]	; (80049bc <HAL_DMA_Init+0x1ec>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_DMA_Init+0x174>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a22      	ldr	r2, [pc, #136]	; (80049c0 <HAL_DMA_Init+0x1f0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_DMA_Init+0x174>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <HAL_DMA_Init+0x1f4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <HAL_DMA_Init+0x186>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0201 	bic.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e007      	b.n	8004966 <HAL_DMA_Init+0x196>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004966:	e02f      	b.n	80049c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004968:	f7fe fb30 	bl	8002fcc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b05      	cmp	r3, #5
 8004974:	d928      	bls.n	80049c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2203      	movs	r2, #3
 8004980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e2af      	b.n	8004ee8 <HAL_DMA_Init+0x718>
 8004988:	40020010 	.word	0x40020010
 800498c:	40020028 	.word	0x40020028
 8004990:	40020040 	.word	0x40020040
 8004994:	40020058 	.word	0x40020058
 8004998:	40020070 	.word	0x40020070
 800499c:	40020088 	.word	0x40020088
 80049a0:	400200a0 	.word	0x400200a0
 80049a4:	400200b8 	.word	0x400200b8
 80049a8:	40020410 	.word	0x40020410
 80049ac:	40020428 	.word	0x40020428
 80049b0:	40020440 	.word	0x40020440
 80049b4:	40020458 	.word	0x40020458
 80049b8:	40020470 	.word	0x40020470
 80049bc:	40020488 	.word	0x40020488
 80049c0:	400204a0 	.word	0x400204a0
 80049c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1c8      	bne.n	8004968 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4b73      	ldr	r3, [pc, #460]	; (8004bb0 <HAL_DMA_Init+0x3e0>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d107      	bne.n	8004a2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	4313      	orrs	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b28      	cmp	r3, #40	; 0x28
 8004a32:	d903      	bls.n	8004a3c <HAL_DMA_Init+0x26c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b2e      	cmp	r3, #46	; 0x2e
 8004a3a:	d91f      	bls.n	8004a7c <HAL_DMA_Init+0x2ac>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b3e      	cmp	r3, #62	; 0x3e
 8004a42:	d903      	bls.n	8004a4c <HAL_DMA_Init+0x27c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b42      	cmp	r3, #66	; 0x42
 8004a4a:	d917      	bls.n	8004a7c <HAL_DMA_Init+0x2ac>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b46      	cmp	r3, #70	; 0x46
 8004a52:	d903      	bls.n	8004a5c <HAL_DMA_Init+0x28c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b48      	cmp	r3, #72	; 0x48
 8004a5a:	d90f      	bls.n	8004a7c <HAL_DMA_Init+0x2ac>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b4e      	cmp	r3, #78	; 0x4e
 8004a62:	d903      	bls.n	8004a6c <HAL_DMA_Init+0x29c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b52      	cmp	r3, #82	; 0x52
 8004a6a:	d907      	bls.n	8004a7c <HAL_DMA_Init+0x2ac>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b73      	cmp	r3, #115	; 0x73
 8004a72:	d905      	bls.n	8004a80 <HAL_DMA_Init+0x2b0>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b77      	cmp	r3, #119	; 0x77
 8004a7a:	d801      	bhi.n	8004a80 <HAL_DMA_Init+0x2b0>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_DMA_Init+0x2b2>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 0307 	bic.w	r3, r3, #7
 8004aa4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d117      	bne.n	8004ae8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f002 fbd6 	bl	800727c <DMA_CheckFifoParam>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2240      	movs	r2, #64	; 0x40
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e1ff      	b.n	8004ee8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f002 fb11 	bl	8007118 <DMA_CalcBaseAndBitshift>
 8004af6:	4603      	mov	r3, r0
 8004af8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	223f      	movs	r2, #63	; 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	e0fe      	b.n	8004d0a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <HAL_DMA_Init+0x3e4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <HAL_DMA_Init+0x3e8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d045      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a25      	ldr	r2, [pc, #148]	; (8004bbc <HAL_DMA_Init+0x3ec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d040      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <HAL_DMA_Init+0x3f0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d03b      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_DMA_Init+0x3f4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d036      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <HAL_DMA_Init+0x3f8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_DMA_Init+0x3fc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <HAL_DMA_Init+0x400>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_DMA_Init+0x404>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_DMA_Init+0x408>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_DMA_Init+0x40c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <HAL_DMA_Init+0x410>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_DMA_Init+0x414>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <HAL_DMA_Init+0x418>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_DMA_Init+0x41c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_Init+0x3dc>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_DMA_Init+0x420>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d123      	bne.n	8004bf4 <HAL_DMA_Init+0x424>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e022      	b.n	8004bf6 <HAL_DMA_Init+0x426>
 8004bb0:	fe10803f 	.word	0xfe10803f
 8004bb4:	48022c08 	.word	0x48022c08
 8004bb8:	48022c1c 	.word	0x48022c1c
 8004bbc:	48022c30 	.word	0x48022c30
 8004bc0:	48022c44 	.word	0x48022c44
 8004bc4:	48022c58 	.word	0x48022c58
 8004bc8:	48022c6c 	.word	0x48022c6c
 8004bcc:	48022c80 	.word	0x48022c80
 8004bd0:	48022c94 	.word	0x48022c94
 8004bd4:	58025408 	.word	0x58025408
 8004bd8:	5802541c 	.word	0x5802541c
 8004bdc:	58025430 	.word	0x58025430
 8004be0:	58025444 	.word	0x58025444
 8004be4:	58025458 	.word	0x58025458
 8004be8:	5802546c 	.word	0x5802546c
 8004bec:	58025480 	.word	0x58025480
 8004bf0:	58025494 	.word	0x58025494
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d07e      	beq.n	8004cf8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a80      	ldr	r2, [pc, #512]	; (8004e00 <HAL_DMA_Init+0x630>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d021      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7e      	ldr	r2, [pc, #504]	; (8004e04 <HAL_DMA_Init+0x634>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01c      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7d      	ldr	r2, [pc, #500]	; (8004e08 <HAL_DMA_Init+0x638>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d017      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7b      	ldr	r2, [pc, #492]	; (8004e0c <HAL_DMA_Init+0x63c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d012      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a7a      	ldr	r2, [pc, #488]	; (8004e10 <HAL_DMA_Init+0x640>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00d      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a78      	ldr	r2, [pc, #480]	; (8004e14 <HAL_DMA_Init+0x644>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d008      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a77      	ldr	r2, [pc, #476]	; (8004e18 <HAL_DMA_Init+0x648>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <HAL_DMA_Init+0x478>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a75      	ldr	r2, [pc, #468]	; (8004e1c <HAL_DMA_Init+0x64c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4b6e      	ldr	r3, [pc, #440]	; (8004e20 <HAL_DMA_Init+0x650>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d008      	beq.n	8004c84 <HAL_DMA_Init+0x4b4>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d102      	bne.n	8004c80 <HAL_DMA_Init+0x4b0>
 8004c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c7e:	e002      	b.n	8004c86 <HAL_DMA_Init+0x4b6>
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_Init+0x4b6>
 8004c84:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68d2      	ldr	r2, [r2, #12]
 8004c8a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cb4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <HAL_DMA_Init+0x654>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_DMA_Init+0x658>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	009a      	lsls	r2, r3, #2
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f002 fa1b 	bl	8007118 <DMA_CalcBaseAndBitshift>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2201      	movs	r2, #1
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e008      	b.n	8004d0a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2240      	movs	r2, #64	; 0x40
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2203      	movs	r2, #3
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0ee      	b.n	8004ee8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a47      	ldr	r2, [pc, #284]	; (8004e2c <HAL_DMA_Init+0x65c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d072      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a45      	ldr	r2, [pc, #276]	; (8004e30 <HAL_DMA_Init+0x660>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d06d      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a44      	ldr	r2, [pc, #272]	; (8004e34 <HAL_DMA_Init+0x664>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d068      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <HAL_DMA_Init+0x668>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d063      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a41      	ldr	r2, [pc, #260]	; (8004e3c <HAL_DMA_Init+0x66c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d05e      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <HAL_DMA_Init+0x670>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d059      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a3e      	ldr	r2, [pc, #248]	; (8004e44 <HAL_DMA_Init+0x674>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d054      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <HAL_DMA_Init+0x678>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d04f      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <HAL_DMA_Init+0x67c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04a      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <HAL_DMA_Init+0x680>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d045      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a38      	ldr	r2, [pc, #224]	; (8004e54 <HAL_DMA_Init+0x684>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d040      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a36      	ldr	r2, [pc, #216]	; (8004e58 <HAL_DMA_Init+0x688>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d03b      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <HAL_DMA_Init+0x68c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d036      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a33      	ldr	r2, [pc, #204]	; (8004e60 <HAL_DMA_Init+0x690>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <HAL_DMA_Init+0x694>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d02c      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a30      	ldr	r2, [pc, #192]	; (8004e68 <HAL_DMA_Init+0x698>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d027      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <HAL_DMA_Init+0x630>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <HAL_DMA_Init+0x634>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <HAL_DMA_Init+0x638>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <HAL_DMA_Init+0x63c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <HAL_DMA_Init+0x640>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <HAL_DMA_Init+0x644>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <HAL_DMA_Init+0x648>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_DMA_Init+0x62a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <HAL_DMA_Init+0x64c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d138      	bne.n	8004e6c <HAL_DMA_Init+0x69c>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e037      	b.n	8004e6e <HAL_DMA_Init+0x69e>
 8004dfe:	bf00      	nop
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494
 8004e20:	fffe000f 	.word	0xfffe000f
 8004e24:	a7fdabf8 	.word	0xa7fdabf8
 8004e28:	cccccccd 	.word	0xcccccccd
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d032      	beq.n	8004ed8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f002 fa7e 	bl	8007374 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d102      	bne.n	8004e86 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e9a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d010      	beq.n	8004ec6 <HAL_DMA_Init+0x6f6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d80c      	bhi.n	8004ec6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f002 fafb 	bl	80074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	e008      	b.n	8004ed8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e226      	b.n	800535a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Start_IT+0x2a>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e21f      	b.n	800535a <HAL_DMA_Start_IT+0x46a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	f040 820a 	bne.w	8005344 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <HAL_DMA_Start_IT+0x1f4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04a      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a66      	ldr	r2, [pc, #408]	; (80050e8 <HAL_DMA_Start_IT+0x1f8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d045      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a65      	ldr	r2, [pc, #404]	; (80050ec <HAL_DMA_Start_IT+0x1fc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d040      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <HAL_DMA_Start_IT+0x200>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d03b      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a62      	ldr	r2, [pc, #392]	; (80050f4 <HAL_DMA_Start_IT+0x204>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d036      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a60      	ldr	r2, [pc, #384]	; (80050f8 <HAL_DMA_Start_IT+0x208>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d031      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a5f      	ldr	r2, [pc, #380]	; (80050fc <HAL_DMA_Start_IT+0x20c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d02c      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a5d      	ldr	r2, [pc, #372]	; (8005100 <HAL_DMA_Start_IT+0x210>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a5c      	ldr	r2, [pc, #368]	; (8005104 <HAL_DMA_Start_IT+0x214>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a5a      	ldr	r2, [pc, #360]	; (8005108 <HAL_DMA_Start_IT+0x218>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a59      	ldr	r2, [pc, #356]	; (800510c <HAL_DMA_Start_IT+0x21c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a57      	ldr	r2, [pc, #348]	; (8005110 <HAL_DMA_Start_IT+0x220>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a56      	ldr	r2, [pc, #344]	; (8005114 <HAL_DMA_Start_IT+0x224>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a54      	ldr	r2, [pc, #336]	; (8005118 <HAL_DMA_Start_IT+0x228>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a53      	ldr	r2, [pc, #332]	; (800511c <HAL_DMA_Start_IT+0x22c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a51      	ldr	r2, [pc, #324]	; (8005120 <HAL_DMA_Start_IT+0x230>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA_Start_IT+0x100>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <HAL_DMA_Start_IT+0x110>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f001 fea2 	bl	8006d50 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a34      	ldr	r2, [pc, #208]	; (80050e4 <HAL_DMA_Start_IT+0x1f4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d04a      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a33      	ldr	r2, [pc, #204]	; (80050e8 <HAL_DMA_Start_IT+0x1f8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d045      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a31      	ldr	r2, [pc, #196]	; (80050ec <HAL_DMA_Start_IT+0x1fc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d040      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a30      	ldr	r2, [pc, #192]	; (80050f0 <HAL_DMA_Start_IT+0x200>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d03b      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <HAL_DMA_Start_IT+0x204>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d036      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <HAL_DMA_Start_IT+0x208>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d031      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2b      	ldr	r2, [pc, #172]	; (80050fc <HAL_DMA_Start_IT+0x20c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d02c      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <HAL_DMA_Start_IT+0x210>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d027      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a28      	ldr	r2, [pc, #160]	; (8005104 <HAL_DMA_Start_IT+0x214>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d022      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a27      	ldr	r2, [pc, #156]	; (8005108 <HAL_DMA_Start_IT+0x218>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d01d      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a25      	ldr	r2, [pc, #148]	; (800510c <HAL_DMA_Start_IT+0x21c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d018      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a24      	ldr	r2, [pc, #144]	; (8005110 <HAL_DMA_Start_IT+0x220>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_DMA_Start_IT+0x224>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00e      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <HAL_DMA_Start_IT+0x228>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d009      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_DMA_Start_IT+0x22c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_DMA_Start_IT+0x230>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_DMA_Start_IT+0x1c0>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_DMA_Start_IT+0x1c2>
 80050b0:	2300      	movs	r3, #0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 021e 	bic.w	r2, r3, #30
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0216 	orr.w	r2, r2, #22
 80050c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03e      	beq.n	8005150 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e035      	b.n	8005150 <HAL_DMA_Start_IT+0x260>
 80050e4:	40020010 	.word	0x40020010
 80050e8:	40020028 	.word	0x40020028
 80050ec:	40020040 	.word	0x40020040
 80050f0:	40020058 	.word	0x40020058
 80050f4:	40020070 	.word	0x40020070
 80050f8:	40020088 	.word	0x40020088
 80050fc:	400200a0 	.word	0x400200a0
 8005100:	400200b8 	.word	0x400200b8
 8005104:	40020410 	.word	0x40020410
 8005108:	40020428 	.word	0x40020428
 800510c:	40020440 	.word	0x40020440
 8005110:	40020458 	.word	0x40020458
 8005114:	40020470 	.word	0x40020470
 8005118:	40020488 	.word	0x40020488
 800511c:	400204a0 	.word	0x400204a0
 8005120:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 020e 	bic.w	r2, r3, #14
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 020a 	orr.w	r2, r2, #10
 8005136:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0204 	orr.w	r2, r2, #4
 800514e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a83      	ldr	r2, [pc, #524]	; (8005364 <HAL_DMA_Start_IT+0x474>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d072      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a82      	ldr	r2, [pc, #520]	; (8005368 <HAL_DMA_Start_IT+0x478>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d06d      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a80      	ldr	r2, [pc, #512]	; (800536c <HAL_DMA_Start_IT+0x47c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d068      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7f      	ldr	r2, [pc, #508]	; (8005370 <HAL_DMA_Start_IT+0x480>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d063      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a7d      	ldr	r2, [pc, #500]	; (8005374 <HAL_DMA_Start_IT+0x484>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d05e      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7c      	ldr	r2, [pc, #496]	; (8005378 <HAL_DMA_Start_IT+0x488>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d059      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7a      	ldr	r2, [pc, #488]	; (800537c <HAL_DMA_Start_IT+0x48c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d054      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a79      	ldr	r2, [pc, #484]	; (8005380 <HAL_DMA_Start_IT+0x490>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d04f      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a77      	ldr	r2, [pc, #476]	; (8005384 <HAL_DMA_Start_IT+0x494>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d04a      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a76      	ldr	r2, [pc, #472]	; (8005388 <HAL_DMA_Start_IT+0x498>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d045      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a74      	ldr	r2, [pc, #464]	; (800538c <HAL_DMA_Start_IT+0x49c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d040      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a73      	ldr	r2, [pc, #460]	; (8005390 <HAL_DMA_Start_IT+0x4a0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d03b      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a71      	ldr	r2, [pc, #452]	; (8005394 <HAL_DMA_Start_IT+0x4a4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d036      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a70      	ldr	r2, [pc, #448]	; (8005398 <HAL_DMA_Start_IT+0x4a8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d031      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a6e      	ldr	r2, [pc, #440]	; (800539c <HAL_DMA_Start_IT+0x4ac>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d02c      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6d      	ldr	r2, [pc, #436]	; (80053a0 <HAL_DMA_Start_IT+0x4b0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d027      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6b      	ldr	r2, [pc, #428]	; (80053a4 <HAL_DMA_Start_IT+0x4b4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6a      	ldr	r2, [pc, #424]	; (80053a8 <HAL_DMA_Start_IT+0x4b8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a68      	ldr	r2, [pc, #416]	; (80053ac <HAL_DMA_Start_IT+0x4bc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a67      	ldr	r2, [pc, #412]	; (80053b0 <HAL_DMA_Start_IT+0x4c0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <HAL_DMA_Start_IT+0x4c4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a64      	ldr	r2, [pc, #400]	; (80053b8 <HAL_DMA_Start_IT+0x4c8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a62      	ldr	r2, [pc, #392]	; (80053bc <HAL_DMA_Start_IT+0x4cc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a61      	ldr	r2, [pc, #388]	; (80053c0 <HAL_DMA_Start_IT+0x4d0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_DMA_Start_IT+0x354>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_DMA_Start_IT+0x356>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01a      	beq.n	8005280 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005266:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a37      	ldr	r2, [pc, #220]	; (8005364 <HAL_DMA_Start_IT+0x474>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d04a      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a36      	ldr	r2, [pc, #216]	; (8005368 <HAL_DMA_Start_IT+0x478>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d045      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a34      	ldr	r2, [pc, #208]	; (800536c <HAL_DMA_Start_IT+0x47c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d040      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a33      	ldr	r2, [pc, #204]	; (8005370 <HAL_DMA_Start_IT+0x480>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03b      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a31      	ldr	r2, [pc, #196]	; (8005374 <HAL_DMA_Start_IT+0x484>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d036      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a30      	ldr	r2, [pc, #192]	; (8005378 <HAL_DMA_Start_IT+0x488>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d031      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2e      	ldr	r2, [pc, #184]	; (800537c <HAL_DMA_Start_IT+0x48c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02c      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <HAL_DMA_Start_IT+0x490>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d027      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <HAL_DMA_Start_IT+0x494>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <HAL_DMA_Start_IT+0x498>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d01d      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a28      	ldr	r2, [pc, #160]	; (800538c <HAL_DMA_Start_IT+0x49c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a27      	ldr	r2, [pc, #156]	; (8005390 <HAL_DMA_Start_IT+0x4a0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_DMA_Start_IT+0x4a4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_DMA_Start_IT+0x4a8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_DMA_Start_IT+0x4ac>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_DMA_Start_IT+0x4b0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <HAL_DMA_Start_IT+0x442>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e012      	b.n	8005358 <HAL_DMA_Start_IT+0x468>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e009      	b.n	8005358 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005358:	7dfb      	ldrb	r3, [r7, #23]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40020010 	.word	0x40020010
 8005368:	40020028 	.word	0x40020028
 800536c:	40020040 	.word	0x40020040
 8005370:	40020058 	.word	0x40020058
 8005374:	40020070 	.word	0x40020070
 8005378:	40020088 	.word	0x40020088
 800537c:	400200a0 	.word	0x400200a0
 8005380:	400200b8 	.word	0x400200b8
 8005384:	40020410 	.word	0x40020410
 8005388:	40020428 	.word	0x40020428
 800538c:	40020440 	.word	0x40020440
 8005390:	40020458 	.word	0x40020458
 8005394:	40020470 	.word	0x40020470
 8005398:	40020488 	.word	0x40020488
 800539c:	400204a0 	.word	0x400204a0
 80053a0:	400204b8 	.word	0x400204b8
 80053a4:	58025408 	.word	0x58025408
 80053a8:	5802541c 	.word	0x5802541c
 80053ac:	58025430 	.word	0x58025430
 80053b0:	58025444 	.word	0x58025444
 80053b4:	58025458 	.word	0x58025458
 80053b8:	5802546c 	.word	0x5802546c
 80053bc:	58025480 	.word	0x58025480
 80053c0:	58025494 	.word	0x58025494

080053c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80053cc:	f7fd fdfe 	bl	8002fcc <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2dc      	b.n	8005996 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d008      	beq.n	80053fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e2cd      	b.n	8005996 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a76      	ldr	r2, [pc, #472]	; (80055d8 <HAL_DMA_Abort+0x214>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a74      	ldr	r2, [pc, #464]	; (80055dc <HAL_DMA_Abort+0x218>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a73      	ldr	r2, [pc, #460]	; (80055e0 <HAL_DMA_Abort+0x21c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a71      	ldr	r2, [pc, #452]	; (80055e4 <HAL_DMA_Abort+0x220>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a70      	ldr	r2, [pc, #448]	; (80055e8 <HAL_DMA_Abort+0x224>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6e      	ldr	r2, [pc, #440]	; (80055ec <HAL_DMA_Abort+0x228>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6d      	ldr	r2, [pc, #436]	; (80055f0 <HAL_DMA_Abort+0x22c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a6b      	ldr	r2, [pc, #428]	; (80055f4 <HAL_DMA_Abort+0x230>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6a      	ldr	r2, [pc, #424]	; (80055f8 <HAL_DMA_Abort+0x234>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	; (80055fc <HAL_DMA_Abort+0x238>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <HAL_DMA_Abort+0x23c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a65      	ldr	r2, [pc, #404]	; (8005604 <HAL_DMA_Abort+0x240>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a64      	ldr	r2, [pc, #400]	; (8005608 <HAL_DMA_Abort+0x244>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a62      	ldr	r2, [pc, #392]	; (800560c <HAL_DMA_Abort+0x248>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a61      	ldr	r2, [pc, #388]	; (8005610 <HAL_DMA_Abort+0x24c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_Abort+0xd6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5f      	ldr	r2, [pc, #380]	; (8005614 <HAL_DMA_Abort+0x250>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_DMA_Abort+0xda>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_DMA_Abort+0xdc>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 021e 	bic.w	r2, r2, #30
 80054b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e00a      	b.n	80054e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 020e 	bic.w	r2, r2, #14
 80054da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a3c      	ldr	r2, [pc, #240]	; (80055d8 <HAL_DMA_Abort+0x214>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d072      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a3a      	ldr	r2, [pc, #232]	; (80055dc <HAL_DMA_Abort+0x218>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d06d      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a39      	ldr	r2, [pc, #228]	; (80055e0 <HAL_DMA_Abort+0x21c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d068      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a37      	ldr	r2, [pc, #220]	; (80055e4 <HAL_DMA_Abort+0x220>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d063      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a36      	ldr	r2, [pc, #216]	; (80055e8 <HAL_DMA_Abort+0x224>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d05e      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <HAL_DMA_Abort+0x228>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d059      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <HAL_DMA_Abort+0x22c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d054      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a31      	ldr	r2, [pc, #196]	; (80055f4 <HAL_DMA_Abort+0x230>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d04f      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a30      	ldr	r2, [pc, #192]	; (80055f8 <HAL_DMA_Abort+0x234>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04a      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <HAL_DMA_Abort+0x238>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d045      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2d      	ldr	r2, [pc, #180]	; (8005600 <HAL_DMA_Abort+0x23c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d040      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <HAL_DMA_Abort+0x240>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03b      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <HAL_DMA_Abort+0x244>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d036      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <HAL_DMA_Abort+0x248>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d031      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a27      	ldr	r2, [pc, #156]	; (8005610 <HAL_DMA_Abort+0x24c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02c      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <HAL_DMA_Abort+0x250>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a24      	ldr	r2, [pc, #144]	; (8005618 <HAL_DMA_Abort+0x254>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a22      	ldr	r2, [pc, #136]	; (800561c <HAL_DMA_Abort+0x258>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a21      	ldr	r2, [pc, #132]	; (8005620 <HAL_DMA_Abort+0x25c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_DMA_Abort+0x260>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <HAL_DMA_Abort+0x264>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <HAL_DMA_Abort+0x268>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <HAL_DMA_Abort+0x26c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_Abort+0x20e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_DMA_Abort+0x270>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d132      	bne.n	8005638 <HAL_DMA_Abort+0x274>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e031      	b.n	800563a <HAL_DMA_Abort+0x276>
 80055d6:	bf00      	nop
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
 8005618:	58025408 	.word	0x58025408
 800561c:	5802541c 	.word	0x5802541c
 8005620:	58025430 	.word	0x58025430
 8005624:	58025444 	.word	0x58025444
 8005628:	58025458 	.word	0x58025458
 800562c:	5802546c 	.word	0x5802546c
 8005630:	58025480 	.word	0x58025480
 8005634:	58025494 	.word	0x58025494
 8005638:	2300      	movs	r3, #0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6d      	ldr	r2, [pc, #436]	; (8005808 <HAL_DMA_Abort+0x444>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d04a      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a6b      	ldr	r2, [pc, #428]	; (800580c <HAL_DMA_Abort+0x448>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d045      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a6a      	ldr	r2, [pc, #424]	; (8005810 <HAL_DMA_Abort+0x44c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d040      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a68      	ldr	r2, [pc, #416]	; (8005814 <HAL_DMA_Abort+0x450>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d03b      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a67      	ldr	r2, [pc, #412]	; (8005818 <HAL_DMA_Abort+0x454>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d036      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a65      	ldr	r2, [pc, #404]	; (800581c <HAL_DMA_Abort+0x458>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a64      	ldr	r2, [pc, #400]	; (8005820 <HAL_DMA_Abort+0x45c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d02c      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a62      	ldr	r2, [pc, #392]	; (8005824 <HAL_DMA_Abort+0x460>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d027      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a61      	ldr	r2, [pc, #388]	; (8005828 <HAL_DMA_Abort+0x464>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_DMA_Abort+0x468>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01d      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5e      	ldr	r2, [pc, #376]	; (8005830 <HAL_DMA_Abort+0x46c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5c      	ldr	r2, [pc, #368]	; (8005834 <HAL_DMA_Abort+0x470>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5b      	ldr	r2, [pc, #364]	; (8005838 <HAL_DMA_Abort+0x474>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a59      	ldr	r2, [pc, #356]	; (800583c <HAL_DMA_Abort+0x478>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a58      	ldr	r2, [pc, #352]	; (8005840 <HAL_DMA_Abort+0x47c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_DMA_Abort+0x32a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_DMA_Abort+0x480>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <HAL_DMA_Abort+0x33c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0201 	bic.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e007      	b.n	8005710 <HAL_DMA_Abort+0x34c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005710:	e013      	b.n	800573a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005712:	f7fd fc5b 	bl	8002fcc <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b05      	cmp	r3, #5
 800571e:	d90c      	bls.n	800573a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2203      	movs	r2, #3
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e12d      	b.n	8005996 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e5      	bne.n	8005712 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <HAL_DMA_Abort+0x444>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d04a      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2d      	ldr	r2, [pc, #180]	; (800580c <HAL_DMA_Abort+0x448>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d045      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_DMA_Abort+0x44c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d040      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <HAL_DMA_Abort+0x450>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d03b      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_DMA_Abort+0x454>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d036      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <HAL_DMA_Abort+0x458>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d031      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a26      	ldr	r2, [pc, #152]	; (8005820 <HAL_DMA_Abort+0x45c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d02c      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a24      	ldr	r2, [pc, #144]	; (8005824 <HAL_DMA_Abort+0x460>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d027      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a23      	ldr	r2, [pc, #140]	; (8005828 <HAL_DMA_Abort+0x464>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a21      	ldr	r2, [pc, #132]	; (800582c <HAL_DMA_Abort+0x468>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <HAL_DMA_Abort+0x46c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <HAL_DMA_Abort+0x470>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_DMA_Abort+0x474>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_DMA_Abort+0x478>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_DMA_Abort+0x47c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_DMA_Abort+0x422>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a18      	ldr	r2, [pc, #96]	; (8005844 <HAL_DMA_Abort+0x480>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <HAL_DMA_Abort+0x426>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <HAL_DMA_Abort+0x428>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02b      	beq.n	8005848 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	223f      	movs	r2, #63	; 0x3f
 8005800:	409a      	lsls	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	e02a      	b.n	800585e <HAL_DMA_Abort+0x49a>
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2201      	movs	r2, #1
 8005858:	409a      	lsls	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4f      	ldr	r2, [pc, #316]	; (80059a0 <HAL_DMA_Abort+0x5dc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d072      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4d      	ldr	r2, [pc, #308]	; (80059a4 <HAL_DMA_Abort+0x5e0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d06d      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4c      	ldr	r2, [pc, #304]	; (80059a8 <HAL_DMA_Abort+0x5e4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d068      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4a      	ldr	r2, [pc, #296]	; (80059ac <HAL_DMA_Abort+0x5e8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d063      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a49      	ldr	r2, [pc, #292]	; (80059b0 <HAL_DMA_Abort+0x5ec>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d05e      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a47      	ldr	r2, [pc, #284]	; (80059b4 <HAL_DMA_Abort+0x5f0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d059      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a46      	ldr	r2, [pc, #280]	; (80059b8 <HAL_DMA_Abort+0x5f4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d054      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a44      	ldr	r2, [pc, #272]	; (80059bc <HAL_DMA_Abort+0x5f8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d04f      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a43      	ldr	r2, [pc, #268]	; (80059c0 <HAL_DMA_Abort+0x5fc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d04a      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a41      	ldr	r2, [pc, #260]	; (80059c4 <HAL_DMA_Abort+0x600>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d045      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a40      	ldr	r2, [pc, #256]	; (80059c8 <HAL_DMA_Abort+0x604>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d040      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3e      	ldr	r2, [pc, #248]	; (80059cc <HAL_DMA_Abort+0x608>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d03b      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3d      	ldr	r2, [pc, #244]	; (80059d0 <HAL_DMA_Abort+0x60c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d036      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3b      	ldr	r2, [pc, #236]	; (80059d4 <HAL_DMA_Abort+0x610>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d031      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a3a      	ldr	r2, [pc, #232]	; (80059d8 <HAL_DMA_Abort+0x614>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d02c      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a38      	ldr	r2, [pc, #224]	; (80059dc <HAL_DMA_Abort+0x618>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d027      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a37      	ldr	r2, [pc, #220]	; (80059e0 <HAL_DMA_Abort+0x61c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a35      	ldr	r2, [pc, #212]	; (80059e4 <HAL_DMA_Abort+0x620>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01d      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a34      	ldr	r2, [pc, #208]	; (80059e8 <HAL_DMA_Abort+0x624>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d018      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a32      	ldr	r2, [pc, #200]	; (80059ec <HAL_DMA_Abort+0x628>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a31      	ldr	r2, [pc, #196]	; (80059f0 <HAL_DMA_Abort+0x62c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00e      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2f      	ldr	r2, [pc, #188]	; (80059f4 <HAL_DMA_Abort+0x630>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d009      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2e      	ldr	r2, [pc, #184]	; (80059f8 <HAL_DMA_Abort+0x634>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_DMA_Abort+0x58a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <HAL_DMA_Abort+0x638>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d101      	bne.n	8005952 <HAL_DMA_Abort+0x58e>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <HAL_DMA_Abort+0x590>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d015      	beq.n	8005984 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005960:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005978:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005982:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	40020010 	.word	0x40020010
 80059a4:	40020028 	.word	0x40020028
 80059a8:	40020040 	.word	0x40020040
 80059ac:	40020058 	.word	0x40020058
 80059b0:	40020070 	.word	0x40020070
 80059b4:	40020088 	.word	0x40020088
 80059b8:	400200a0 	.word	0x400200a0
 80059bc:	400200b8 	.word	0x400200b8
 80059c0:	40020410 	.word	0x40020410
 80059c4:	40020428 	.word	0x40020428
 80059c8:	40020440 	.word	0x40020440
 80059cc:	40020458 	.word	0x40020458
 80059d0:	40020470 	.word	0x40020470
 80059d4:	40020488 	.word	0x40020488
 80059d8:	400204a0 	.word	0x400204a0
 80059dc:	400204b8 	.word	0x400204b8
 80059e0:	58025408 	.word	0x58025408
 80059e4:	5802541c 	.word	0x5802541c
 80059e8:	58025430 	.word	0x58025430
 80059ec:	58025444 	.word	0x58025444
 80059f0:	58025458 	.word	0x58025458
 80059f4:	5802546c 	.word	0x5802546c
 80059f8:	58025480 	.word	0x58025480
 80059fc:	58025494 	.word	0x58025494

08005a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e237      	b.n	8005e82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d004      	beq.n	8005a28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e22c      	b.n	8005e82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5c      	ldr	r2, [pc, #368]	; (8005ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5b      	ldr	r2, [pc, #364]	; (8005ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a59      	ldr	r2, [pc, #356]	; (8005ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a58      	ldr	r2, [pc, #352]	; (8005bac <HAL_DMA_Abort_IT+0x1ac>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a56      	ldr	r2, [pc, #344]	; (8005bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a55      	ldr	r2, [pc, #340]	; (8005bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a53      	ldr	r2, [pc, #332]	; (8005bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_DMA_Abort_IT+0x1bc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a50      	ldr	r2, [pc, #320]	; (8005bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4f      	ldr	r2, [pc, #316]	; (8005bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a4d      	ldr	r2, [pc, #308]	; (8005bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4c      	ldr	r2, [pc, #304]	; (8005bcc <HAL_DMA_Abort_IT+0x1cc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	; (8005bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a49      	ldr	r2, [pc, #292]	; (8005bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a47      	ldr	r2, [pc, #284]	; (8005bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_Abort_IT+0xc8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a46      	ldr	r2, [pc, #280]	; (8005bdc <HAL_DMA_Abort_IT+0x1dc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <HAL_DMA_Abort_IT+0xcc>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_DMA_Abort_IT+0xce>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8086 	beq.w	8005be0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d04a      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d045      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d040      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_DMA_Abort_IT+0x1ac>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d03b      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d036      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d031      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a25      	ldr	r2, [pc, #148]	; (8005bbc <HAL_DMA_Abort_IT+0x1bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d027      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a23      	ldr	r2, [pc, #140]	; (8005bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d022      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d01d      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d018      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_DMA_Abort_IT+0x1cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d013      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00e      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d004      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x17c>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <HAL_DMA_Abort_IT+0x1dc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d108      	bne.n	8005b8e <HAL_DMA_Abort_IT+0x18e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e178      	b.n	8005e80 <HAL_DMA_Abort_IT+0x480>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0201 	bic.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e16f      	b.n	8005e80 <HAL_DMA_Abort_IT+0x480>
 8005ba0:	40020010 	.word	0x40020010
 8005ba4:	40020028 	.word	0x40020028
 8005ba8:	40020040 	.word	0x40020040
 8005bac:	40020058 	.word	0x40020058
 8005bb0:	40020070 	.word	0x40020070
 8005bb4:	40020088 	.word	0x40020088
 8005bb8:	400200a0 	.word	0x400200a0
 8005bbc:	400200b8 	.word	0x400200b8
 8005bc0:	40020410 	.word	0x40020410
 8005bc4:	40020428 	.word	0x40020428
 8005bc8:	40020440 	.word	0x40020440
 8005bcc:	40020458 	.word	0x40020458
 8005bd0:	40020470 	.word	0x40020470
 8005bd4:	40020488 	.word	0x40020488
 8005bd8:	400204a0 	.word	0x400204a0
 8005bdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 020e 	bic.w	r2, r2, #14
 8005bee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a6c      	ldr	r2, [pc, #432]	; (8005da8 <HAL_DMA_Abort_IT+0x3a8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d04a      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6b      	ldr	r2, [pc, #428]	; (8005dac <HAL_DMA_Abort_IT+0x3ac>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d045      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a69      	ldr	r2, [pc, #420]	; (8005db0 <HAL_DMA_Abort_IT+0x3b0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d040      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a68      	ldr	r2, [pc, #416]	; (8005db4 <HAL_DMA_Abort_IT+0x3b4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d03b      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a66      	ldr	r2, [pc, #408]	; (8005db8 <HAL_DMA_Abort_IT+0x3b8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d036      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a65      	ldr	r2, [pc, #404]	; (8005dbc <HAL_DMA_Abort_IT+0x3bc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d031      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a63      	ldr	r2, [pc, #396]	; (8005dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d02c      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a62      	ldr	r2, [pc, #392]	; (8005dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d027      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a60      	ldr	r2, [pc, #384]	; (8005dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d022      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <HAL_DMA_Abort_IT+0x3cc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d01d      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5c      	ldr	r2, [pc, #368]	; (8005dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5a      	ldr	r2, [pc, #360]	; (8005dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a59      	ldr	r2, [pc, #356]	; (8005ddc <HAL_DMA_Abort_IT+0x3dc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a57      	ldr	r2, [pc, #348]	; (8005de0 <HAL_DMA_Abort_IT+0x3e0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x290>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a56      	ldr	r2, [pc, #344]	; (8005de4 <HAL_DMA_Abort_IT+0x3e4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <HAL_DMA_Abort_IT+0x2a2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <HAL_DMA_Abort_IT+0x2b2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3c      	ldr	r2, [pc, #240]	; (8005da8 <HAL_DMA_Abort_IT+0x3a8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d072      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <HAL_DMA_Abort_IT+0x3ac>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d06d      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a39      	ldr	r2, [pc, #228]	; (8005db0 <HAL_DMA_Abort_IT+0x3b0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d068      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a37      	ldr	r2, [pc, #220]	; (8005db4 <HAL_DMA_Abort_IT+0x3b4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d063      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a36      	ldr	r2, [pc, #216]	; (8005db8 <HAL_DMA_Abort_IT+0x3b8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d05e      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a34      	ldr	r2, [pc, #208]	; (8005dbc <HAL_DMA_Abort_IT+0x3bc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d059      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a33      	ldr	r2, [pc, #204]	; (8005dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d054      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a31      	ldr	r2, [pc, #196]	; (8005dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04f      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d04a      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <HAL_DMA_Abort_IT+0x3cc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d045      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d040      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d03b      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d036      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_DMA_Abort_IT+0x3dc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d031      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <HAL_DMA_Abort_IT+0x3e0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d02c      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <HAL_DMA_Abort_IT+0x3e4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d027      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <HAL_DMA_Abort_IT+0x3e8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d022      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <HAL_DMA_Abort_IT+0x3ec>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d01d      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <HAL_DMA_Abort_IT+0x3f0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d018      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_DMA_Abort_IT+0x3f4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <HAL_DMA_Abort_IT+0x3f8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <HAL_DMA_Abort_IT+0x3fc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d009      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <HAL_DMA_Abort_IT+0x400>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_DMA_Abort_IT+0x3a2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_DMA_Abort_IT+0x404>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d132      	bne.n	8005e08 <HAL_DMA_Abort_IT+0x408>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e031      	b.n	8005e0a <HAL_DMA_Abort_IT+0x40a>
 8005da6:	bf00      	nop
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
 8005de8:	58025408 	.word	0x58025408
 8005dec:	5802541c 	.word	0x5802541c
 8005df0:	58025430 	.word	0x58025430
 8005df4:	58025444 	.word	0x58025444
 8005df8:	58025458 	.word	0x58025458
 8005dfc:	5802546c 	.word	0x5802546c
 8005e00:	58025480 	.word	0x58025480
 8005e04:	58025494 	.word	0x58025494
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d028      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e98:	4b67      	ldr	r3, [pc, #412]	; (8006038 <HAL_DMA_IRQHandler+0x1ac>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a67      	ldr	r2, [pc, #412]	; (800603c <HAL_DMA_IRQHandler+0x1b0>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0a9b      	lsrs	r3, r3, #10
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5f      	ldr	r2, [pc, #380]	; (8006040 <HAL_DMA_IRQHandler+0x1b4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d04a      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a5d      	ldr	r2, [pc, #372]	; (8006044 <HAL_DMA_IRQHandler+0x1b8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d045      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a5c      	ldr	r2, [pc, #368]	; (8006048 <HAL_DMA_IRQHandler+0x1bc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d040      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a5a      	ldr	r2, [pc, #360]	; (800604c <HAL_DMA_IRQHandler+0x1c0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d03b      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a59      	ldr	r2, [pc, #356]	; (8006050 <HAL_DMA_IRQHandler+0x1c4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d036      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a57      	ldr	r2, [pc, #348]	; (8006054 <HAL_DMA_IRQHandler+0x1c8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d031      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a56      	ldr	r2, [pc, #344]	; (8006058 <HAL_DMA_IRQHandler+0x1cc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d02c      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a54      	ldr	r2, [pc, #336]	; (800605c <HAL_DMA_IRQHandler+0x1d0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d027      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a53      	ldr	r2, [pc, #332]	; (8006060 <HAL_DMA_IRQHandler+0x1d4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d022      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a51      	ldr	r2, [pc, #324]	; (8006064 <HAL_DMA_IRQHandler+0x1d8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01d      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a50      	ldr	r2, [pc, #320]	; (8006068 <HAL_DMA_IRQHandler+0x1dc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a4e      	ldr	r2, [pc, #312]	; (800606c <HAL_DMA_IRQHandler+0x1e0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a4d      	ldr	r2, [pc, #308]	; (8006070 <HAL_DMA_IRQHandler+0x1e4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a4b      	ldr	r2, [pc, #300]	; (8006074 <HAL_DMA_IRQHandler+0x1e8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4a      	ldr	r2, [pc, #296]	; (8006078 <HAL_DMA_IRQHandler+0x1ec>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xd2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a48      	ldr	r2, [pc, #288]	; (800607c <HAL_DMA_IRQHandler+0x1f0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_DMA_IRQHandler+0xd6>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_DMA_IRQHandler+0xd8>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 842b 	beq.w	80067c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2208      	movs	r2, #8
 8005f74:	409a      	lsls	r2, r3
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80a2 	beq.w	80060c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2e      	ldr	r2, [pc, #184]	; (8006040 <HAL_DMA_IRQHandler+0x1b4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04a      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2d      	ldr	r2, [pc, #180]	; (8006044 <HAL_DMA_IRQHandler+0x1b8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d045      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <HAL_DMA_IRQHandler+0x1bc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d040      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <HAL_DMA_IRQHandler+0x1c0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d03b      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a28      	ldr	r2, [pc, #160]	; (8006050 <HAL_DMA_IRQHandler+0x1c4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d036      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a27      	ldr	r2, [pc, #156]	; (8006054 <HAL_DMA_IRQHandler+0x1c8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d031      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	; (8006058 <HAL_DMA_IRQHandler+0x1cc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d02c      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a24      	ldr	r2, [pc, #144]	; (800605c <HAL_DMA_IRQHandler+0x1d0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d027      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_DMA_IRQHandler+0x1d4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_DMA_IRQHandler+0x1d8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_DMA_IRQHandler+0x1dc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1e      	ldr	r2, [pc, #120]	; (800606c <HAL_DMA_IRQHandler+0x1e0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_DMA_IRQHandler+0x1e4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <HAL_DMA_IRQHandler+0x1e8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_DMA_IRQHandler+0x1ec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_DMA_IRQHandler+0x194>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a18      	ldr	r2, [pc, #96]	; (800607c <HAL_DMA_IRQHandler+0x1f0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d12f      	bne.n	8006080 <HAL_DMA_IRQHandler+0x1f4>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	bf14      	ite	ne
 800602e:	2301      	movne	r3, #1
 8006030:	2300      	moveq	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e02e      	b.n	8006094 <HAL_DMA_IRQHandler+0x208>
 8006036:	bf00      	nop
 8006038:	24000000 	.word	0x24000000
 800603c:	1b4e81b5 	.word	0x1b4e81b5
 8006040:	40020010 	.word	0x40020010
 8006044:	40020028 	.word	0x40020028
 8006048:	40020040 	.word	0x40020040
 800604c:	40020058 	.word	0x40020058
 8006050:	40020070 	.word	0x40020070
 8006054:	40020088 	.word	0x40020088
 8006058:	400200a0 	.word	0x400200a0
 800605c:	400200b8 	.word	0x400200b8
 8006060:	40020410 	.word	0x40020410
 8006064:	40020428 	.word	0x40020428
 8006068:	40020440 	.word	0x40020440
 800606c:	40020458 	.word	0x40020458
 8006070:	40020470 	.word	0x40020470
 8006074:	40020488 	.word	0x40020488
 8006078:	400204a0 	.word	0x400204a0
 800607c:	400204b8 	.word	0x400204b8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0204 	bic.w	r2, r2, #4
 80060a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2208      	movs	r2, #8
 80060b2:	409a      	lsls	r2, r3
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	f043 0201 	orr.w	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c8:	f003 031f 	and.w	r3, r3, #31
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	fa22 f303 	lsr.w	r3, r2, r3
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06e      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a69      	ldr	r2, [pc, #420]	; (8006284 <HAL_DMA_IRQHandler+0x3f8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04a      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a67      	ldr	r2, [pc, #412]	; (8006288 <HAL_DMA_IRQHandler+0x3fc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d045      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a66      	ldr	r2, [pc, #408]	; (800628c <HAL_DMA_IRQHandler+0x400>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d040      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a64      	ldr	r2, [pc, #400]	; (8006290 <HAL_DMA_IRQHandler+0x404>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a63      	ldr	r2, [pc, #396]	; (8006294 <HAL_DMA_IRQHandler+0x408>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d036      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a61      	ldr	r2, [pc, #388]	; (8006298 <HAL_DMA_IRQHandler+0x40c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d031      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a60      	ldr	r2, [pc, #384]	; (800629c <HAL_DMA_IRQHandler+0x410>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d02c      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a5e      	ldr	r2, [pc, #376]	; (80062a0 <HAL_DMA_IRQHandler+0x414>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d027      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a5d      	ldr	r2, [pc, #372]	; (80062a4 <HAL_DMA_IRQHandler+0x418>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5b      	ldr	r2, [pc, #364]	; (80062a8 <HAL_DMA_IRQHandler+0x41c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a5a      	ldr	r2, [pc, #360]	; (80062ac <HAL_DMA_IRQHandler+0x420>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a58      	ldr	r2, [pc, #352]	; (80062b0 <HAL_DMA_IRQHandler+0x424>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a57      	ldr	r2, [pc, #348]	; (80062b4 <HAL_DMA_IRQHandler+0x428>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a55      	ldr	r2, [pc, #340]	; (80062b8 <HAL_DMA_IRQHandler+0x42c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a54      	ldr	r2, [pc, #336]	; (80062bc <HAL_DMA_IRQHandler+0x430>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_DMA_IRQHandler+0x2ee>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a52      	ldr	r2, [pc, #328]	; (80062c0 <HAL_DMA_IRQHandler+0x434>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10a      	bne.n	8006190 <HAL_DMA_IRQHandler+0x304>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006184:	2b00      	cmp	r3, #0
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	e003      	b.n	8006198 <HAL_DMA_IRQHandler+0x30c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2201      	movs	r2, #1
 80061a6:	409a      	lsls	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b0:	f043 0202 	orr.w	r2, r3, #2
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2204      	movs	r2, #4
 80061c2:	409a      	lsls	r2, r3
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 808f 	beq.w	80062ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <HAL_DMA_IRQHandler+0x3f8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d04a      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2a      	ldr	r2, [pc, #168]	; (8006288 <HAL_DMA_IRQHandler+0x3fc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d045      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a29      	ldr	r2, [pc, #164]	; (800628c <HAL_DMA_IRQHandler+0x400>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d040      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a27      	ldr	r2, [pc, #156]	; (8006290 <HAL_DMA_IRQHandler+0x404>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d03b      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a26      	ldr	r2, [pc, #152]	; (8006294 <HAL_DMA_IRQHandler+0x408>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d036      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a24      	ldr	r2, [pc, #144]	; (8006298 <HAL_DMA_IRQHandler+0x40c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d031      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a23      	ldr	r2, [pc, #140]	; (800629c <HAL_DMA_IRQHandler+0x410>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d02c      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <HAL_DMA_IRQHandler+0x414>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d027      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a20      	ldr	r2, [pc, #128]	; (80062a4 <HAL_DMA_IRQHandler+0x418>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1e      	ldr	r2, [pc, #120]	; (80062a8 <HAL_DMA_IRQHandler+0x41c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01d      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_DMA_IRQHandler+0x420>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_DMA_IRQHandler+0x424>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_DMA_IRQHandler+0x428>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_DMA_IRQHandler+0x42c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <HAL_DMA_IRQHandler+0x430>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_DMA_IRQHandler+0x3e2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_DMA_IRQHandler+0x434>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d12a      	bne.n	80062c4 <HAL_DMA_IRQHandler+0x438>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e023      	b.n	80062cc <HAL_DMA_IRQHandler+0x440>
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2300      	movs	r3, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d4:	f003 031f 	and.w	r3, r3, #31
 80062d8:	2204      	movs	r2, #4
 80062da:	409a      	lsls	r2, r3
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	f043 0204 	orr.w	r2, r3, #4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f0:	f003 031f 	and.w	r3, r3, #31
 80062f4:	2210      	movs	r2, #16
 80062f6:	409a      	lsls	r2, r3
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80a6 	beq.w	800644e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a85      	ldr	r2, [pc, #532]	; (800651c <HAL_DMA_IRQHandler+0x690>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d04a      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a83      	ldr	r2, [pc, #524]	; (8006520 <HAL_DMA_IRQHandler+0x694>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d045      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a82      	ldr	r2, [pc, #520]	; (8006524 <HAL_DMA_IRQHandler+0x698>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d040      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a80      	ldr	r2, [pc, #512]	; (8006528 <HAL_DMA_IRQHandler+0x69c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d03b      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a7f      	ldr	r2, [pc, #508]	; (800652c <HAL_DMA_IRQHandler+0x6a0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d036      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a7d      	ldr	r2, [pc, #500]	; (8006530 <HAL_DMA_IRQHandler+0x6a4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d031      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a7c      	ldr	r2, [pc, #496]	; (8006534 <HAL_DMA_IRQHandler+0x6a8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7a      	ldr	r2, [pc, #488]	; (8006538 <HAL_DMA_IRQHandler+0x6ac>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a79      	ldr	r2, [pc, #484]	; (800653c <HAL_DMA_IRQHandler+0x6b0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a77      	ldr	r2, [pc, #476]	; (8006540 <HAL_DMA_IRQHandler+0x6b4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a76      	ldr	r2, [pc, #472]	; (8006544 <HAL_DMA_IRQHandler+0x6b8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a74      	ldr	r2, [pc, #464]	; (8006548 <HAL_DMA_IRQHandler+0x6bc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a73      	ldr	r2, [pc, #460]	; (800654c <HAL_DMA_IRQHandler+0x6c0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a71      	ldr	r2, [pc, #452]	; (8006550 <HAL_DMA_IRQHandler+0x6c4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a70      	ldr	r2, [pc, #448]	; (8006554 <HAL_DMA_IRQHandler+0x6c8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x516>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6e      	ldr	r2, [pc, #440]	; (8006558 <HAL_DMA_IRQHandler+0x6cc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10a      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x52c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bf14      	ite	ne
 80063b0:	2301      	movne	r3, #1
 80063b2:	2300      	moveq	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e009      	b.n	80063cc <HAL_DMA_IRQHandler+0x540>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bf14      	ite	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	2300      	moveq	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d03e      	beq.n	800644e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	2210      	movs	r2, #16
 80063da:	409a      	lsls	r2, r3
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d108      	bne.n	800640e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d024      	beq.n	800644e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	4798      	blx	r3
 800640c:	e01f      	b.n	800644e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01b      	beq.n	800644e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	e016      	b.n	800644e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0208 	bic.w	r2, r2, #8
 800643c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2220      	movs	r2, #32
 8006458:	409a      	lsls	r2, r3
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8110 	beq.w	8006684 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2c      	ldr	r2, [pc, #176]	; (800651c <HAL_DMA_IRQHandler+0x690>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2b      	ldr	r2, [pc, #172]	; (8006520 <HAL_DMA_IRQHandler+0x694>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a29      	ldr	r2, [pc, #164]	; (8006524 <HAL_DMA_IRQHandler+0x698>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a28      	ldr	r2, [pc, #160]	; (8006528 <HAL_DMA_IRQHandler+0x69c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a26      	ldr	r2, [pc, #152]	; (800652c <HAL_DMA_IRQHandler+0x6a0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a25      	ldr	r2, [pc, #148]	; (8006530 <HAL_DMA_IRQHandler+0x6a4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a23      	ldr	r2, [pc, #140]	; (8006534 <HAL_DMA_IRQHandler+0x6a8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_DMA_IRQHandler+0x6ac>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a20      	ldr	r2, [pc, #128]	; (800653c <HAL_DMA_IRQHandler+0x6b0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_DMA_IRQHandler+0x6b4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_DMA_IRQHandler+0x6b8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_DMA_IRQHandler+0x6bc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_DMA_IRQHandler+0x6c0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_DMA_IRQHandler+0x6c4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_DMA_IRQHandler+0x6c8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_DMA_IRQHandler+0x678>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_DMA_IRQHandler+0x6cc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d12b      	bne.n	800655c <HAL_DMA_IRQHandler+0x6d0>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e02a      	b.n	8006570 <HAL_DMA_IRQHandler+0x6e4>
 800651a:	bf00      	nop
 800651c:	40020010 	.word	0x40020010
 8006520:	40020028 	.word	0x40020028
 8006524:	40020040 	.word	0x40020040
 8006528:	40020058 	.word	0x40020058
 800652c:	40020070 	.word	0x40020070
 8006530:	40020088 	.word	0x40020088
 8006534:	400200a0 	.word	0x400200a0
 8006538:	400200b8 	.word	0x400200b8
 800653c:	40020410 	.word	0x40020410
 8006540:	40020428 	.word	0x40020428
 8006544:	40020440 	.word	0x40020440
 8006548:	40020458 	.word	0x40020458
 800654c:	40020470 	.word	0x40020470
 8006550:	40020488 	.word	0x40020488
 8006554:	400204a0 	.word	0x400204a0
 8006558:	400204b8 	.word	0x400204b8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 8087 	beq.w	8006684 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2220      	movs	r2, #32
 8006580:	409a      	lsls	r2, r3
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b04      	cmp	r3, #4
 8006590:	d139      	bne.n	8006606 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0216 	bic.w	r2, r2, #22
 80065a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <HAL_DMA_IRQHandler+0x736>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0208 	bic.w	r2, r2, #8
 80065d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	223f      	movs	r2, #63	; 0x3f
 80065dc:	409a      	lsls	r2, r3
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8382 	beq.w	8006d00 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
          }
          return;
 8006604:	e37c      	b.n	8006d00 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d018      	beq.n	8006646 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d108      	bne.n	8006634 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	2b00      	cmp	r3, #0
 8006628:	d02c      	beq.n	8006684 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	4798      	blx	r3
 8006632:	e027      	b.n	8006684 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d023      	beq.n	8006684 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	4798      	blx	r3
 8006644:	e01e      	b.n	8006684 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0210 	bic.w	r2, r2, #16
 8006662:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 833e 	beq.w	8006d0a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8088 	beq.w	80067ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2204      	movs	r2, #4
 80066a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a89      	ldr	r2, [pc, #548]	; (80068d0 <HAL_DMA_IRQHandler+0xa44>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d04a      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a88      	ldr	r2, [pc, #544]	; (80068d4 <HAL_DMA_IRQHandler+0xa48>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d045      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a86      	ldr	r2, [pc, #536]	; (80068d8 <HAL_DMA_IRQHandler+0xa4c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d040      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a85      	ldr	r2, [pc, #532]	; (80068dc <HAL_DMA_IRQHandler+0xa50>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d03b      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a83      	ldr	r2, [pc, #524]	; (80068e0 <HAL_DMA_IRQHandler+0xa54>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d036      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a82      	ldr	r2, [pc, #520]	; (80068e4 <HAL_DMA_IRQHandler+0xa58>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d031      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a80      	ldr	r2, [pc, #512]	; (80068e8 <HAL_DMA_IRQHandler+0xa5c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02c      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7f      	ldr	r2, [pc, #508]	; (80068ec <HAL_DMA_IRQHandler+0xa60>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d027      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a7d      	ldr	r2, [pc, #500]	; (80068f0 <HAL_DMA_IRQHandler+0xa64>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d022      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a7c      	ldr	r2, [pc, #496]	; (80068f4 <HAL_DMA_IRQHandler+0xa68>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d01d      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a7a      	ldr	r2, [pc, #488]	; (80068f8 <HAL_DMA_IRQHandler+0xa6c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d018      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a79      	ldr	r2, [pc, #484]	; (80068fc <HAL_DMA_IRQHandler+0xa70>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d013      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a77      	ldr	r2, [pc, #476]	; (8006900 <HAL_DMA_IRQHandler+0xa74>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00e      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a76      	ldr	r2, [pc, #472]	; (8006904 <HAL_DMA_IRQHandler+0xa78>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d009      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a74      	ldr	r2, [pc, #464]	; (8006908 <HAL_DMA_IRQHandler+0xa7c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d004      	beq.n	8006744 <HAL_DMA_IRQHandler+0x8b8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a73      	ldr	r2, [pc, #460]	; (800690c <HAL_DMA_IRQHandler+0xa80>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d108      	bne.n	8006756 <HAL_DMA_IRQHandler+0x8ca>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e007      	b.n	8006766 <HAL_DMA_IRQHandler+0x8da>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3301      	adds	r3, #1
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	429a      	cmp	r2, r3
 8006770:	d307      	bcc.n	8006782 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f2      	bne.n	8006766 <HAL_DMA_IRQHandler+0x8da>
 8006780:	e000      	b.n	8006784 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006782:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2203      	movs	r2, #3
 8006796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800679a:	e003      	b.n	80067a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 82aa 	beq.w	8006d0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
 80067be:	e2a4      	b.n	8006d0a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a52      	ldr	r2, [pc, #328]	; (8006910 <HAL_DMA_IRQHandler+0xa84>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04a      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a51      	ldr	r2, [pc, #324]	; (8006914 <HAL_DMA_IRQHandler+0xa88>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d045      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a4f      	ldr	r2, [pc, #316]	; (8006918 <HAL_DMA_IRQHandler+0xa8c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d040      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a4e      	ldr	r2, [pc, #312]	; (800691c <HAL_DMA_IRQHandler+0xa90>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d03b      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a4c      	ldr	r2, [pc, #304]	; (8006920 <HAL_DMA_IRQHandler+0xa94>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d036      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a4b      	ldr	r2, [pc, #300]	; (8006924 <HAL_DMA_IRQHandler+0xa98>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d031      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a49      	ldr	r2, [pc, #292]	; (8006928 <HAL_DMA_IRQHandler+0xa9c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02c      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a48      	ldr	r2, [pc, #288]	; (800692c <HAL_DMA_IRQHandler+0xaa0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d027      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a46      	ldr	r2, [pc, #280]	; (8006930 <HAL_DMA_IRQHandler+0xaa4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a45      	ldr	r2, [pc, #276]	; (8006934 <HAL_DMA_IRQHandler+0xaa8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d01d      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a43      	ldr	r2, [pc, #268]	; (8006938 <HAL_DMA_IRQHandler+0xaac>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a42      	ldr	r2, [pc, #264]	; (800693c <HAL_DMA_IRQHandler+0xab0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a40      	ldr	r2, [pc, #256]	; (8006940 <HAL_DMA_IRQHandler+0xab4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3f      	ldr	r2, [pc, #252]	; (8006944 <HAL_DMA_IRQHandler+0xab8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a3d      	ldr	r2, [pc, #244]	; (8006948 <HAL_DMA_IRQHandler+0xabc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_DMA_IRQHandler+0x9d4>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a3c      	ldr	r2, [pc, #240]	; (800694c <HAL_DMA_IRQHandler+0xac0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_DMA_IRQHandler+0x9d8>
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_DMA_IRQHandler+0x9da>
 8006864:	2300      	movs	r3, #0
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 824f 	beq.w	8006d0a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2204      	movs	r2, #4
 800687e:	409a      	lsls	r2, r3
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80dd 	beq.w	8006a44 <HAL_DMA_IRQHandler+0xbb8>
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80d7 	beq.w	8006a44 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	f003 031f 	and.w	r3, r3, #31
 800689e:	2204      	movs	r2, #4
 80068a0:	409a      	lsls	r2, r3
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d059      	beq.n	8006964 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d14a      	bne.n	8006950 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8220 	beq.w	8006d04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068cc:	e21a      	b.n	8006d04 <HAL_DMA_IRQHandler+0xe78>
 80068ce:	bf00      	nop
 80068d0:	40020010 	.word	0x40020010
 80068d4:	40020028 	.word	0x40020028
 80068d8:	40020040 	.word	0x40020040
 80068dc:	40020058 	.word	0x40020058
 80068e0:	40020070 	.word	0x40020070
 80068e4:	40020088 	.word	0x40020088
 80068e8:	400200a0 	.word	0x400200a0
 80068ec:	400200b8 	.word	0x400200b8
 80068f0:	40020410 	.word	0x40020410
 80068f4:	40020428 	.word	0x40020428
 80068f8:	40020440 	.word	0x40020440
 80068fc:	40020458 	.word	0x40020458
 8006900:	40020470 	.word	0x40020470
 8006904:	40020488 	.word	0x40020488
 8006908:	400204a0 	.word	0x400204a0
 800690c:	400204b8 	.word	0x400204b8
 8006910:	48022c08 	.word	0x48022c08
 8006914:	48022c1c 	.word	0x48022c1c
 8006918:	48022c30 	.word	0x48022c30
 800691c:	48022c44 	.word	0x48022c44
 8006920:	48022c58 	.word	0x48022c58
 8006924:	48022c6c 	.word	0x48022c6c
 8006928:	48022c80 	.word	0x48022c80
 800692c:	48022c94 	.word	0x48022c94
 8006930:	58025408 	.word	0x58025408
 8006934:	5802541c 	.word	0x5802541c
 8006938:	58025430 	.word	0x58025430
 800693c:	58025444 	.word	0x58025444
 8006940:	58025458 	.word	0x58025458
 8006944:	5802546c 	.word	0x5802546c
 8006948:	58025480 	.word	0x58025480
 800694c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 81d5 	beq.w	8006d04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006962:	e1cf      	b.n	8006d04 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d160      	bne.n	8006a30 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7f      	ldr	r2, [pc, #508]	; (8006b70 <HAL_DMA_IRQHandler+0xce4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d04a      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a7d      	ldr	r2, [pc, #500]	; (8006b74 <HAL_DMA_IRQHandler+0xce8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d045      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a7c      	ldr	r2, [pc, #496]	; (8006b78 <HAL_DMA_IRQHandler+0xcec>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d040      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a7a      	ldr	r2, [pc, #488]	; (8006b7c <HAL_DMA_IRQHandler+0xcf0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d03b      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a79      	ldr	r2, [pc, #484]	; (8006b80 <HAL_DMA_IRQHandler+0xcf4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d036      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a77      	ldr	r2, [pc, #476]	; (8006b84 <HAL_DMA_IRQHandler+0xcf8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d031      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a76      	ldr	r2, [pc, #472]	; (8006b88 <HAL_DMA_IRQHandler+0xcfc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d02c      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a74      	ldr	r2, [pc, #464]	; (8006b8c <HAL_DMA_IRQHandler+0xd00>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d027      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a73      	ldr	r2, [pc, #460]	; (8006b90 <HAL_DMA_IRQHandler+0xd04>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a71      	ldr	r2, [pc, #452]	; (8006b94 <HAL_DMA_IRQHandler+0xd08>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01d      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a70      	ldr	r2, [pc, #448]	; (8006b98 <HAL_DMA_IRQHandler+0xd0c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a6e      	ldr	r2, [pc, #440]	; (8006b9c <HAL_DMA_IRQHandler+0xd10>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a6d      	ldr	r2, [pc, #436]	; (8006ba0 <HAL_DMA_IRQHandler+0xd14>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6b      	ldr	r2, [pc, #428]	; (8006ba4 <HAL_DMA_IRQHandler+0xd18>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6a      	ldr	r2, [pc, #424]	; (8006ba8 <HAL_DMA_IRQHandler+0xd1c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xb82>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a68      	ldr	r2, [pc, #416]	; (8006bac <HAL_DMA_IRQHandler+0xd20>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d108      	bne.n	8006a20 <HAL_DMA_IRQHandler+0xb94>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0208 	bic.w	r2, r2, #8
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e007      	b.n	8006a30 <HAL_DMA_IRQHandler+0xba4>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0204 	bic.w	r2, r2, #4
 8006a2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8165 	beq.w	8006d04 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a42:	e15f      	b.n	8006d04 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 80c5 	beq.w	8006be4 <HAL_DMA_IRQHandler+0xd58>
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80bf 	beq.w	8006be4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2202      	movs	r2, #2
 8006a70:	409a      	lsls	r2, r3
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d018      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 813a 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a9c:	e134      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8130 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab0:	e12a      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 8089 	bne.w	8006bd0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <HAL_DMA_IRQHandler+0xce4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d04a      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a29      	ldr	r2, [pc, #164]	; (8006b74 <HAL_DMA_IRQHandler+0xce8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d045      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a28      	ldr	r2, [pc, #160]	; (8006b78 <HAL_DMA_IRQHandler+0xcec>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d040      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <HAL_DMA_IRQHandler+0xcf0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d03b      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <HAL_DMA_IRQHandler+0xcf4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d036      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <HAL_DMA_IRQHandler+0xcf8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d031      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a22      	ldr	r2, [pc, #136]	; (8006b88 <HAL_DMA_IRQHandler+0xcfc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d02c      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <HAL_DMA_IRQHandler+0xd00>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d027      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1f      	ldr	r2, [pc, #124]	; (8006b90 <HAL_DMA_IRQHandler+0xd04>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d022      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <HAL_DMA_IRQHandler+0xd08>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d01d      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <HAL_DMA_IRQHandler+0xd0c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d018      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_DMA_IRQHandler+0xd10>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <HAL_DMA_IRQHandler+0xd14>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00e      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <HAL_DMA_IRQHandler+0xd18>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a16      	ldr	r2, [pc, #88]	; (8006ba8 <HAL_DMA_IRQHandler+0xd1c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xcd2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a14      	ldr	r2, [pc, #80]	; (8006bac <HAL_DMA_IRQHandler+0xd20>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d128      	bne.n	8006bb0 <HAL_DMA_IRQHandler+0xd24>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0214 	bic.w	r2, r2, #20
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e027      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xd34>
 8006b70:	40020010 	.word	0x40020010
 8006b74:	40020028 	.word	0x40020028
 8006b78:	40020040 	.word	0x40020040
 8006b7c:	40020058 	.word	0x40020058
 8006b80:	40020070 	.word	0x40020070
 8006b84:	40020088 	.word	0x40020088
 8006b88:	400200a0 	.word	0x400200a0
 8006b8c:	400200b8 	.word	0x400200b8
 8006b90:	40020410 	.word	0x40020410
 8006b94:	40020428 	.word	0x40020428
 8006b98:	40020440 	.word	0x40020440
 8006b9c:	40020458 	.word	0x40020458
 8006ba0:	40020470 	.word	0x40020470
 8006ba4:	40020488 	.word	0x40020488
 8006ba8:	400204a0 	.word	0x400204a0
 8006bac:	400204b8 	.word	0x400204b8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 020a 	bic.w	r2, r2, #10
 8006bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8097 	beq.w	8006d08 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be2:	e091      	b.n	8006d08 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2208      	movs	r2, #8
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 8088 	beq.w	8006d0a <HAL_DMA_IRQHandler+0xe7e>
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8082 	beq.w	8006d0a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a41      	ldr	r2, [pc, #260]	; (8006d10 <HAL_DMA_IRQHandler+0xe84>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a3f      	ldr	r2, [pc, #252]	; (8006d14 <HAL_DMA_IRQHandler+0xe88>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a3e      	ldr	r2, [pc, #248]	; (8006d18 <HAL_DMA_IRQHandler+0xe8c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a3c      	ldr	r2, [pc, #240]	; (8006d1c <HAL_DMA_IRQHandler+0xe90>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a3b      	ldr	r2, [pc, #236]	; (8006d20 <HAL_DMA_IRQHandler+0xe94>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a39      	ldr	r2, [pc, #228]	; (8006d24 <HAL_DMA_IRQHandler+0xe98>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a38      	ldr	r2, [pc, #224]	; (8006d28 <HAL_DMA_IRQHandler+0xe9c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a36      	ldr	r2, [pc, #216]	; (8006d2c <HAL_DMA_IRQHandler+0xea0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a35      	ldr	r2, [pc, #212]	; (8006d30 <HAL_DMA_IRQHandler+0xea4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a33      	ldr	r2, [pc, #204]	; (8006d34 <HAL_DMA_IRQHandler+0xea8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a32      	ldr	r2, [pc, #200]	; (8006d38 <HAL_DMA_IRQHandler+0xeac>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <HAL_DMA_IRQHandler+0xeb0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2f      	ldr	r2, [pc, #188]	; (8006d40 <HAL_DMA_IRQHandler+0xeb4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2d      	ldr	r2, [pc, #180]	; (8006d44 <HAL_DMA_IRQHandler+0xeb8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_DMA_IRQHandler+0xebc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xe1a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2a      	ldr	r2, [pc, #168]	; (8006d4c <HAL_DMA_IRQHandler+0xec0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0xe2c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 021c 	bic.w	r2, r2, #28
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e007      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xe3c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 020e 	bic.w	r2, r2, #14
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ccc:	f003 031f 	and.w	r3, r3, #31
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
 8006cfe:	e004      	b.n	8006d0a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006d00:	bf00      	nop
 8006d02:	e002      	b.n	8006d0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d0a:	3728      	adds	r7, #40	; 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40020010 	.word	0x40020010
 8006d14:	40020028 	.word	0x40020028
 8006d18:	40020040 	.word	0x40020040
 8006d1c:	40020058 	.word	0x40020058
 8006d20:	40020070 	.word	0x40020070
 8006d24:	40020088 	.word	0x40020088
 8006d28:	400200a0 	.word	0x400200a0
 8006d2c:	400200b8 	.word	0x400200b8
 8006d30:	40020410 	.word	0x40020410
 8006d34:	40020428 	.word	0x40020428
 8006d38:	40020440 	.word	0x40020440
 8006d3c:	40020458 	.word	0x40020458
 8006d40:	40020470 	.word	0x40020470
 8006d44:	40020488 	.word	0x40020488
 8006d48:	400204a0 	.word	0x400204a0
 8006d4c:	400204b8 	.word	0x400204b8

08006d50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d62:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a7f      	ldr	r2, [pc, #508]	; (8006f6c <DMA_SetConfig+0x21c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d072      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a7d      	ldr	r2, [pc, #500]	; (8006f70 <DMA_SetConfig+0x220>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d06d      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a7c      	ldr	r2, [pc, #496]	; (8006f74 <DMA_SetConfig+0x224>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d068      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a7a      	ldr	r2, [pc, #488]	; (8006f78 <DMA_SetConfig+0x228>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d063      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a79      	ldr	r2, [pc, #484]	; (8006f7c <DMA_SetConfig+0x22c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d05e      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a77      	ldr	r2, [pc, #476]	; (8006f80 <DMA_SetConfig+0x230>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d059      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a76      	ldr	r2, [pc, #472]	; (8006f84 <DMA_SetConfig+0x234>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d054      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a74      	ldr	r2, [pc, #464]	; (8006f88 <DMA_SetConfig+0x238>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d04f      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a73      	ldr	r2, [pc, #460]	; (8006f8c <DMA_SetConfig+0x23c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d04a      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a71      	ldr	r2, [pc, #452]	; (8006f90 <DMA_SetConfig+0x240>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d045      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a70      	ldr	r2, [pc, #448]	; (8006f94 <DMA_SetConfig+0x244>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d040      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a6e      	ldr	r2, [pc, #440]	; (8006f98 <DMA_SetConfig+0x248>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d03b      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a6d      	ldr	r2, [pc, #436]	; (8006f9c <DMA_SetConfig+0x24c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d036      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a6b      	ldr	r2, [pc, #428]	; (8006fa0 <DMA_SetConfig+0x250>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d031      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6a      	ldr	r2, [pc, #424]	; (8006fa4 <DMA_SetConfig+0x254>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d02c      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a68      	ldr	r2, [pc, #416]	; (8006fa8 <DMA_SetConfig+0x258>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d027      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a67      	ldr	r2, [pc, #412]	; (8006fac <DMA_SetConfig+0x25c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d022      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a65      	ldr	r2, [pc, #404]	; (8006fb0 <DMA_SetConfig+0x260>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01d      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a64      	ldr	r2, [pc, #400]	; (8006fb4 <DMA_SetConfig+0x264>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d018      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a62      	ldr	r2, [pc, #392]	; (8006fb8 <DMA_SetConfig+0x268>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a61      	ldr	r2, [pc, #388]	; (8006fbc <DMA_SetConfig+0x26c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00e      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a5f      	ldr	r2, [pc, #380]	; (8006fc0 <DMA_SetConfig+0x270>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d009      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a5e      	ldr	r2, [pc, #376]	; (8006fc4 <DMA_SetConfig+0x274>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a5c      	ldr	r2, [pc, #368]	; (8006fc8 <DMA_SetConfig+0x278>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d101      	bne.n	8006e5e <DMA_SetConfig+0x10e>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <DMA_SetConfig+0x110>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00d      	beq.n	8006e80 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e6c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e7e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a39      	ldr	r2, [pc, #228]	; (8006f6c <DMA_SetConfig+0x21c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d04a      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a38      	ldr	r2, [pc, #224]	; (8006f70 <DMA_SetConfig+0x220>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d045      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a36      	ldr	r2, [pc, #216]	; (8006f74 <DMA_SetConfig+0x224>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d040      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a35      	ldr	r2, [pc, #212]	; (8006f78 <DMA_SetConfig+0x228>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d03b      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a33      	ldr	r2, [pc, #204]	; (8006f7c <DMA_SetConfig+0x22c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d036      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a32      	ldr	r2, [pc, #200]	; (8006f80 <DMA_SetConfig+0x230>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d031      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a30      	ldr	r2, [pc, #192]	; (8006f84 <DMA_SetConfig+0x234>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d02c      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2f      	ldr	r2, [pc, #188]	; (8006f88 <DMA_SetConfig+0x238>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d027      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <DMA_SetConfig+0x23c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d022      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a2c      	ldr	r2, [pc, #176]	; (8006f90 <DMA_SetConfig+0x240>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d01d      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a2a      	ldr	r2, [pc, #168]	; (8006f94 <DMA_SetConfig+0x244>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d018      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a29      	ldr	r2, [pc, #164]	; (8006f98 <DMA_SetConfig+0x248>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d013      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <DMA_SetConfig+0x24c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00e      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <DMA_SetConfig+0x250>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d009      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a24      	ldr	r2, [pc, #144]	; (8006fa4 <DMA_SetConfig+0x254>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d004      	beq.n	8006f20 <DMA_SetConfig+0x1d0>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <DMA_SetConfig+0x258>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d101      	bne.n	8006f24 <DMA_SetConfig+0x1d4>
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <DMA_SetConfig+0x1d6>
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d059      	beq.n	8006fde <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	223f      	movs	r2, #63	; 0x3f
 8006f34:	409a      	lsls	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f48:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d138      	bne.n	8006fcc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f6a:	e0ae      	b.n	80070ca <DMA_SetConfig+0x37a>
 8006f6c:	40020010 	.word	0x40020010
 8006f70:	40020028 	.word	0x40020028
 8006f74:	40020040 	.word	0x40020040
 8006f78:	40020058 	.word	0x40020058
 8006f7c:	40020070 	.word	0x40020070
 8006f80:	40020088 	.word	0x40020088
 8006f84:	400200a0 	.word	0x400200a0
 8006f88:	400200b8 	.word	0x400200b8
 8006f8c:	40020410 	.word	0x40020410
 8006f90:	40020428 	.word	0x40020428
 8006f94:	40020440 	.word	0x40020440
 8006f98:	40020458 	.word	0x40020458
 8006f9c:	40020470 	.word	0x40020470
 8006fa0:	40020488 	.word	0x40020488
 8006fa4:	400204a0 	.word	0x400204a0
 8006fa8:	400204b8 	.word	0x400204b8
 8006fac:	58025408 	.word	0x58025408
 8006fb0:	5802541c 	.word	0x5802541c
 8006fb4:	58025430 	.word	0x58025430
 8006fb8:	58025444 	.word	0x58025444
 8006fbc:	58025458 	.word	0x58025458
 8006fc0:	5802546c 	.word	0x5802546c
 8006fc4:	58025480 	.word	0x58025480
 8006fc8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	60da      	str	r2, [r3, #12]
}
 8006fdc:	e075      	b.n	80070ca <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a3d      	ldr	r2, [pc, #244]	; (80070d8 <DMA_SetConfig+0x388>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d04a      	beq.n	800707e <DMA_SetConfig+0x32e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a3b      	ldr	r2, [pc, #236]	; (80070dc <DMA_SetConfig+0x38c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d045      	beq.n	800707e <DMA_SetConfig+0x32e>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a3a      	ldr	r2, [pc, #232]	; (80070e0 <DMA_SetConfig+0x390>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d040      	beq.n	800707e <DMA_SetConfig+0x32e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a38      	ldr	r2, [pc, #224]	; (80070e4 <DMA_SetConfig+0x394>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d03b      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a37      	ldr	r2, [pc, #220]	; (80070e8 <DMA_SetConfig+0x398>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d036      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a35      	ldr	r2, [pc, #212]	; (80070ec <DMA_SetConfig+0x39c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d031      	beq.n	800707e <DMA_SetConfig+0x32e>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a34      	ldr	r2, [pc, #208]	; (80070f0 <DMA_SetConfig+0x3a0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d02c      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a32      	ldr	r2, [pc, #200]	; (80070f4 <DMA_SetConfig+0x3a4>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d027      	beq.n	800707e <DMA_SetConfig+0x32e>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a31      	ldr	r2, [pc, #196]	; (80070f8 <DMA_SetConfig+0x3a8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d022      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <DMA_SetConfig+0x3ac>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01d      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <DMA_SetConfig+0x3b0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <DMA_SetConfig+0x32e>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a2c      	ldr	r2, [pc, #176]	; (8007104 <DMA_SetConfig+0x3b4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2b      	ldr	r2, [pc, #172]	; (8007108 <DMA_SetConfig+0x3b8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a29      	ldr	r2, [pc, #164]	; (800710c <DMA_SetConfig+0x3bc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <DMA_SetConfig+0x32e>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a28      	ldr	r2, [pc, #160]	; (8007110 <DMA_SetConfig+0x3c0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <DMA_SetConfig+0x32e>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <DMA_SetConfig+0x3c4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <DMA_SetConfig+0x332>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <DMA_SetConfig+0x334>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d020      	beq.n	80070ca <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	2201      	movs	r2, #1
 8007092:	409a      	lsls	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d108      	bne.n	80070ba <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	60da      	str	r2, [r3, #12]
}
 80070b8:	e007      	b.n	80070ca <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	60da      	str	r2, [r3, #12]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	48022c08 	.word	0x48022c08
 80070dc:	48022c1c 	.word	0x48022c1c
 80070e0:	48022c30 	.word	0x48022c30
 80070e4:	48022c44 	.word	0x48022c44
 80070e8:	48022c58 	.word	0x48022c58
 80070ec:	48022c6c 	.word	0x48022c6c
 80070f0:	48022c80 	.word	0x48022c80
 80070f4:	48022c94 	.word	0x48022c94
 80070f8:	58025408 	.word	0x58025408
 80070fc:	5802541c 	.word	0x5802541c
 8007100:	58025430 	.word	0x58025430
 8007104:	58025444 	.word	0x58025444
 8007108:	58025458 	.word	0x58025458
 800710c:	5802546c 	.word	0x5802546c
 8007110:	58025480 	.word	0x58025480
 8007114:	58025494 	.word	0x58025494

08007118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a42      	ldr	r2, [pc, #264]	; (8007230 <DMA_CalcBaseAndBitshift+0x118>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d04a      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a41      	ldr	r2, [pc, #260]	; (8007234 <DMA_CalcBaseAndBitshift+0x11c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d045      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3f      	ldr	r2, [pc, #252]	; (8007238 <DMA_CalcBaseAndBitshift+0x120>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d040      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3e      	ldr	r2, [pc, #248]	; (800723c <DMA_CalcBaseAndBitshift+0x124>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d03b      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3c      	ldr	r2, [pc, #240]	; (8007240 <DMA_CalcBaseAndBitshift+0x128>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d036      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a3b      	ldr	r2, [pc, #236]	; (8007244 <DMA_CalcBaseAndBitshift+0x12c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d031      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a39      	ldr	r2, [pc, #228]	; (8007248 <DMA_CalcBaseAndBitshift+0x130>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d02c      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a38      	ldr	r2, [pc, #224]	; (800724c <DMA_CalcBaseAndBitshift+0x134>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d027      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a36      	ldr	r2, [pc, #216]	; (8007250 <DMA_CalcBaseAndBitshift+0x138>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a35      	ldr	r2, [pc, #212]	; (8007254 <DMA_CalcBaseAndBitshift+0x13c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a33      	ldr	r2, [pc, #204]	; (8007258 <DMA_CalcBaseAndBitshift+0x140>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a32      	ldr	r2, [pc, #200]	; (800725c <DMA_CalcBaseAndBitshift+0x144>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a30      	ldr	r2, [pc, #192]	; (8007260 <DMA_CalcBaseAndBitshift+0x148>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2f      	ldr	r2, [pc, #188]	; (8007264 <DMA_CalcBaseAndBitshift+0x14c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2d      	ldr	r2, [pc, #180]	; (8007268 <DMA_CalcBaseAndBitshift+0x150>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a2c      	ldr	r2, [pc, #176]	; (800726c <DMA_CalcBaseAndBitshift+0x154>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <DMA_CalcBaseAndBitshift+0xac>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <DMA_CalcBaseAndBitshift+0xae>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d024      	beq.n	8007214 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	3b10      	subs	r3, #16
 80071d2:	4a27      	ldr	r2, [pc, #156]	; (8007270 <DMA_CalcBaseAndBitshift+0x158>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	4a24      	ldr	r2, [pc, #144]	; (8007274 <DMA_CalcBaseAndBitshift+0x15c>)
 80071e4:	5cd3      	ldrb	r3, [r2, r3]
 80071e6:	461a      	mov	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d908      	bls.n	8007204 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	4b1f      	ldr	r3, [pc, #124]	; (8007278 <DMA_CalcBaseAndBitshift+0x160>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	659a      	str	r2, [r3, #88]	; 0x58
 8007202:	e00d      	b.n	8007220 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <DMA_CalcBaseAndBitshift+0x160>)
 800720c:	4013      	ands	r3, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6593      	str	r3, [r2, #88]	; 0x58
 8007212:	e005      	b.n	8007220 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40020010 	.word	0x40020010
 8007234:	40020028 	.word	0x40020028
 8007238:	40020040 	.word	0x40020040
 800723c:	40020058 	.word	0x40020058
 8007240:	40020070 	.word	0x40020070
 8007244:	40020088 	.word	0x40020088
 8007248:	400200a0 	.word	0x400200a0
 800724c:	400200b8 	.word	0x400200b8
 8007250:	40020410 	.word	0x40020410
 8007254:	40020428 	.word	0x40020428
 8007258:	40020440 	.word	0x40020440
 800725c:	40020458 	.word	0x40020458
 8007260:	40020470 	.word	0x40020470
 8007264:	40020488 	.word	0x40020488
 8007268:	400204a0 	.word	0x400204a0
 800726c:	400204b8 	.word	0x400204b8
 8007270:	aaaaaaab 	.word	0xaaaaaaab
 8007274:	08013cf4 	.word	0x08013cf4
 8007278:	fffffc00 	.word	0xfffffc00

0800727c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d120      	bne.n	80072d2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	2b03      	cmp	r3, #3
 8007296:	d858      	bhi.n	800734a <DMA_CheckFifoParam+0xce>
 8007298:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <DMA_CheckFifoParam+0x24>)
 800729a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729e:	bf00      	nop
 80072a0:	080072b1 	.word	0x080072b1
 80072a4:	080072c3 	.word	0x080072c3
 80072a8:	080072b1 	.word	0x080072b1
 80072ac:	0800734b 	.word	0x0800734b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d048      	beq.n	800734e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072c0:	e045      	b.n	800734e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072ca:	d142      	bne.n	8007352 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072d0:	e03f      	b.n	8007352 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	d123      	bne.n	8007324 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d838      	bhi.n	8007356 <DMA_CheckFifoParam+0xda>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <DMA_CheckFifoParam+0x70>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	08007303 	.word	0x08007303
 80072f4:	080072fd 	.word	0x080072fd
 80072f8:	08007315 	.word	0x08007315
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
        break;
 8007300:	e030      	b.n	8007364 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d025      	beq.n	800735a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007312:	e022      	b.n	800735a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800731c:	d11f      	bne.n	800735e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007322:	e01c      	b.n	800735e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	2b02      	cmp	r3, #2
 800732a:	d902      	bls.n	8007332 <DMA_CheckFifoParam+0xb6>
 800732c:	2b03      	cmp	r3, #3
 800732e:	d003      	beq.n	8007338 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007330:	e018      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
        break;
 8007336:	e015      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
    break;
 8007348:	e00b      	b.n	8007362 <DMA_CheckFifoParam+0xe6>
        break;
 800734a:	bf00      	nop
 800734c:	e00a      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        break;
 800734e:	bf00      	nop
 8007350:	e008      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        break;
 8007352:	bf00      	nop
 8007354:	e006      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        break;
 8007356:	bf00      	nop
 8007358:	e004      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        break;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
        break;
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <DMA_CheckFifoParam+0xe8>
    break;
 8007362:	bf00      	nop
    }
  }

  return status;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop

08007374 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a38      	ldr	r2, [pc, #224]	; (8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d022      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a36      	ldr	r2, [pc, #216]	; (800746c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d01d      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a35      	ldr	r2, [pc, #212]	; (8007470 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d018      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a33      	ldr	r2, [pc, #204]	; (8007474 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a32      	ldr	r2, [pc, #200]	; (8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a30      	ldr	r2, [pc, #192]	; (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d101      	bne.n	80073d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01a      	beq.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3b08      	subs	r3, #8
 80073e4:	4a28      	ldr	r2, [pc, #160]	; (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4b26      	ldr	r3, [pc, #152]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a24      	ldr	r2, [pc, #144]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007400:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2201      	movs	r2, #1
 800740a:	409a      	lsls	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007410:	e024      	b.n	800745c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	3b10      	subs	r3, #16
 800741a:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	091b      	lsrs	r3, r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d806      	bhi.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d902      	bls.n	800743a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3308      	adds	r3, #8
 8007438:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a16      	ldr	r2, [pc, #88]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800744c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2201      	movs	r2, #1
 8007456:	409a      	lsls	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	58025408 	.word	0x58025408
 800746c:	5802541c 	.word	0x5802541c
 8007470:	58025430 	.word	0x58025430
 8007474:	58025444 	.word	0x58025444
 8007478:	58025458 	.word	0x58025458
 800747c:	5802546c 	.word	0x5802546c
 8007480:	58025480 	.word	0x58025480
 8007484:	58025494 	.word	0x58025494
 8007488:	cccccccd 	.word	0xcccccccd
 800748c:	16009600 	.word	0x16009600
 8007490:	58025880 	.word	0x58025880
 8007494:	aaaaaaab 	.word	0xaaaaaaab
 8007498:	400204b8 	.word	0x400204b8
 800749c:	4002040f 	.word	0x4002040f
 80074a0:	10008200 	.word	0x10008200
 80074a4:	40020880 	.word	0x40020880

080074a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04a      	beq.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d847      	bhi.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a25      	ldr	r2, [pc, #148]	; (8007560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d022      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a24      	ldr	r2, [pc, #144]	; (8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01d      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a22      	ldr	r2, [pc, #136]	; (8007568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d018      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a21      	ldr	r2, [pc, #132]	; (800756c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00e      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1e      	ldr	r2, [pc, #120]	; (8007574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d009      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1b      	ldr	r2, [pc, #108]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d101      	bne.n	8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007518:	2300      	movs	r3, #0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4b17      	ldr	r3, [pc, #92]	; (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	461a      	mov	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a15      	ldr	r2, [pc, #84]	; (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007530:	671a      	str	r2, [r3, #112]	; 0x70
 8007532:	e009      	b.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a11      	ldr	r2, [pc, #68]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007546:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3b01      	subs	r3, #1
 800754c:	2201      	movs	r2, #1
 800754e:	409a      	lsls	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	58025408 	.word	0x58025408
 8007564:	5802541c 	.word	0x5802541c
 8007568:	58025430 	.word	0x58025430
 800756c:	58025444 	.word	0x58025444
 8007570:	58025458 	.word	0x58025458
 8007574:	5802546c 	.word	0x5802546c
 8007578:	58025480 	.word	0x58025480
 800757c:	58025494 	.word	0x58025494
 8007580:	1600963f 	.word	0x1600963f
 8007584:	58025940 	.word	0x58025940
 8007588:	1000823f 	.word	0x1000823f
 800758c:	40020940 	.word	0x40020940

08007590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007590:	b480      	push	{r7}
 8007592:	b089      	sub	sp, #36	; 0x24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800759a:	2300      	movs	r3, #0
 800759c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800759e:	4b89      	ldr	r3, [pc, #548]	; (80077c4 <HAL_GPIO_Init+0x234>)
 80075a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075a2:	e194      	b.n	80078ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	2101      	movs	r1, #1
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	fa01 f303 	lsl.w	r3, r1, r3
 80075b0:	4013      	ands	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 8186 	beq.w	80078c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0303 	and.w	r3, r3, #3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d005      	beq.n	80075d4 <HAL_GPIO_Init+0x44>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d130      	bne.n	8007636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	2203      	movs	r2, #3
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	4013      	ands	r3, r2
 80075ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800760a:	2201      	movs	r2, #1
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	fa02 f303 	lsl.w	r3, r2, r3
 8007612:	43db      	mvns	r3, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4013      	ands	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	f003 0201 	and.w	r2, r3, #1
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	4313      	orrs	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d017      	beq.n	8007672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	2203      	movs	r2, #3
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	fa02 f303 	lsl.w	r3, r2, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4313      	orrs	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d123      	bne.n	80076c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	08da      	lsrs	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3208      	adds	r2, #8
 8007686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	220f      	movs	r2, #15
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	43db      	mvns	r3, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4013      	ands	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	fa02 f303 	lsl.w	r3, r2, r3
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	08da      	lsrs	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3208      	adds	r2, #8
 80076c0:	69b9      	ldr	r1, [r7, #24]
 80076c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	2203      	movs	r2, #3
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	43db      	mvns	r3, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	4013      	ands	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f003 0203 	and.w	r2, r3, #3
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80e0 	beq.w	80078c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007708:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <HAL_GPIO_Init+0x238>)
 800770a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800770e:	4a2e      	ldr	r2, [pc, #184]	; (80077c8 <HAL_GPIO_Init+0x238>)
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <HAL_GPIO_Init+0x238>)
 800771a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007726:	4a29      	ldr	r2, [pc, #164]	; (80077cc <HAL_GPIO_Init+0x23c>)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	089b      	lsrs	r3, r3, #2
 800772c:	3302      	adds	r3, #2
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	220f      	movs	r2, #15
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4013      	ands	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <HAL_GPIO_Init+0x240>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d052      	beq.n	80077f8 <HAL_GPIO_Init+0x268>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <HAL_GPIO_Init+0x244>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d031      	beq.n	80077be <HAL_GPIO_Init+0x22e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <HAL_GPIO_Init+0x248>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02b      	beq.n	80077ba <HAL_GPIO_Init+0x22a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <HAL_GPIO_Init+0x24c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d025      	beq.n	80077b6 <HAL_GPIO_Init+0x226>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <HAL_GPIO_Init+0x250>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01f      	beq.n	80077b2 <HAL_GPIO_Init+0x222>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <HAL_GPIO_Init+0x254>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d019      	beq.n	80077ae <HAL_GPIO_Init+0x21e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1a      	ldr	r2, [pc, #104]	; (80077e8 <HAL_GPIO_Init+0x258>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d013      	beq.n	80077aa <HAL_GPIO_Init+0x21a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a19      	ldr	r2, [pc, #100]	; (80077ec <HAL_GPIO_Init+0x25c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00d      	beq.n	80077a6 <HAL_GPIO_Init+0x216>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_GPIO_Init+0x260>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <HAL_GPIO_Init+0x212>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a17      	ldr	r2, [pc, #92]	; (80077f4 <HAL_GPIO_Init+0x264>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d101      	bne.n	800779e <HAL_GPIO_Init+0x20e>
 800779a:	2309      	movs	r3, #9
 800779c:	e02d      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 800779e:	230a      	movs	r3, #10
 80077a0:	e02b      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077a2:	2308      	movs	r3, #8
 80077a4:	e029      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077a6:	2307      	movs	r3, #7
 80077a8:	e027      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077aa:	2306      	movs	r3, #6
 80077ac:	e025      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077ae:	2305      	movs	r3, #5
 80077b0:	e023      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077b2:	2304      	movs	r3, #4
 80077b4:	e021      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077b6:	2303      	movs	r3, #3
 80077b8:	e01f      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e01d      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077be:	2301      	movs	r3, #1
 80077c0:	e01b      	b.n	80077fa <HAL_GPIO_Init+0x26a>
 80077c2:	bf00      	nop
 80077c4:	58000080 	.word	0x58000080
 80077c8:	58024400 	.word	0x58024400
 80077cc:	58000400 	.word	0x58000400
 80077d0:	58020000 	.word	0x58020000
 80077d4:	58020400 	.word	0x58020400
 80077d8:	58020800 	.word	0x58020800
 80077dc:	58020c00 	.word	0x58020c00
 80077e0:	58021000 	.word	0x58021000
 80077e4:	58021400 	.word	0x58021400
 80077e8:	58021800 	.word	0x58021800
 80077ec:	58021c00 	.word	0x58021c00
 80077f0:	58022000 	.word	0x58022000
 80077f4:	58022400 	.word	0x58022400
 80077f8:	2300      	movs	r3, #0
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	f002 0203 	and.w	r2, r2, #3
 8007800:	0092      	lsls	r2, r2, #2
 8007802:	4093      	lsls	r3, r2
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4313      	orrs	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800780a:	4938      	ldr	r1, [pc, #224]	; (80078ec <HAL_GPIO_Init+0x35c>)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	089b      	lsrs	r3, r3, #2
 8007810:	3302      	adds	r3, #2
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	43db      	mvns	r3, r3
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	4013      	ands	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800783e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	43db      	mvns	r3, r3
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	4013      	ands	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4313      	orrs	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800786c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	43db      	mvns	r3, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4013      	ands	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	43db      	mvns	r3, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4013      	ands	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	fa22 f303 	lsr.w	r3, r2, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f47f ae63 	bne.w	80075a4 <HAL_GPIO_Init+0x14>
  }
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	3724      	adds	r7, #36	; 0x24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	58000400 	.word	0x58000400

080078f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	807b      	strh	r3, [r7, #2]
 80078fc:	4613      	mov	r3, r2
 80078fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007900:	787b      	ldrb	r3, [r7, #1]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d003      	beq.n	800790e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007906:	887a      	ldrh	r2, [r7, #2]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800790c:	e003      	b.n	8007916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800790e:	887b      	ldrh	r3, [r7, #2]
 8007910:	041a      	lsls	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	619a      	str	r2, [r3, #24]
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007934:	887a      	ldrh	r2, [r7, #2]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4013      	ands	r3, r2
 800793a:	041a      	lsls	r2, r3, #16
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	43d9      	mvns	r1, r3
 8007940:	887b      	ldrh	r3, [r7, #2]
 8007942:	400b      	ands	r3, r1
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	619a      	str	r2, [r3, #24]
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e07f      	b.n	8007a6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7f9 fcec 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	; 0x24
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0201 	bic.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d107      	bne.n	80079d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	e006      	b.n	80079e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80079de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d104      	bne.n	80079f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6859      	ldr	r1, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <HAL_I2C_Init+0x11c>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69d9      	ldr	r1, [r3, #28]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	02008000 	.word	0x02008000

08007a78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	813b      	strh	r3, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f040 80f9 	bne.w	8007c92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <HAL_I2C_Mem_Write+0x34>
 8007aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e0ed      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d101      	bne.n	8007ac6 <HAL_I2C_Mem_Write+0x4e>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e0e6      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ace:	f7fb fa7d 	bl	8002fcc <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2319      	movs	r3, #25
 8007ada:	2201      	movs	r2, #1
 8007adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f955 	bl	8007d90 <I2C_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0d1      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2221      	movs	r2, #33	; 0x21
 8007af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2240      	movs	r2, #64	; 0x40
 8007afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6a3a      	ldr	r2, [r7, #32]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b18:	88f8      	ldrh	r0, [r7, #6]
 8007b1a:	893a      	ldrh	r2, [r7, #8]
 8007b1c:	8979      	ldrh	r1, [r7, #10]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	9301      	str	r3, [sp, #4]
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4603      	mov	r3, r0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f8b9 	bl	8007ca0 <I2C_RequestMemoryWrite>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0a9      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2bff      	cmp	r3, #255	; 0xff
 8007b48:	d90e      	bls.n	8007b68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	22ff      	movs	r2, #255	; 0xff
 8007b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	8979      	ldrh	r1, [r7, #10]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 facf 	bl	8008104 <I2C_TransferConfig>
 8007b66:	e00f      	b.n	8007b88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	8979      	ldrh	r1, [r7, #10]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fabe 	bl	8008104 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 f94e 	bl	8007e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e07b      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d034      	beq.n	8007c40 <HAL_I2C_Mem_Write+0x1c8>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d130      	bne.n	8007c40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	2200      	movs	r2, #0
 8007be6:	2180      	movs	r1, #128	; 0x80
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f8d1 	bl	8007d90 <I2C_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e04d      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2bff      	cmp	r3, #255	; 0xff
 8007c00:	d90e      	bls.n	8007c20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	22ff      	movs	r2, #255	; 0xff
 8007c06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	8979      	ldrh	r1, [r7, #10]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fa73 	bl	8008104 <I2C_TransferConfig>
 8007c1e:	e00f      	b.n	8007c40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	8979      	ldrh	r1, [r7, #10]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 fa62 	bl	8008104 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d19e      	bne.n	8007b88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f934 	bl	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e01a      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2220      	movs	r2, #32
 8007c64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6859      	ldr	r1, [r3, #4]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <HAL_I2C_Mem_Write+0x224>)
 8007c72:	400b      	ands	r3, r1
 8007c74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e000      	b.n	8007c94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007c92:	2302      	movs	r3, #2
  }
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	fe00e800 	.word	0xfe00e800

08007ca0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	817b      	strh	r3, [r7, #10]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	813b      	strh	r3, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	8979      	ldrh	r1, [r7, #10]
 8007cc0:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <I2C_RequestMemoryWrite+0xa4>)
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fa1b 	bl	8008104 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	69b9      	ldr	r1, [r7, #24]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f8ab 	bl	8007e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e02c      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d105      	bne.n	8007cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce8:	893b      	ldrh	r3, [r7, #8]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8007cf2:	e015      	b.n	8007d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cf4:	893b      	ldrh	r3, [r7, #8]
 8007cf6:	0a1b      	lsrs	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f891 	bl	8007e2e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e012      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d16:	893b      	ldrh	r3, [r7, #8]
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2200      	movs	r2, #0
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f830 	bl	8007d90 <I2C_WaitOnFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	80002000 	.word	0x80002000

08007d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d103      	bne.n	8007d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d007      	beq.n	8007d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	619a      	str	r2, [r3, #24]
  }
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	603b      	str	r3, [r7, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007da0:	e031      	b.n	8007e06 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d02d      	beq.n	8007e06 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007daa:	f7fb f90f 	bl	8002fcc <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d302      	bcc.n	8007dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d122      	bne.n	8007e06 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d113      	bne.n	8007e06 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f043 0220 	orr.w	r2, r3, #32
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e00f      	b.n	8007e26 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699a      	ldr	r2, [r3, #24]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d0be      	beq.n	8007da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e3a:	e033      	b.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f87f 	bl	8007f44 <I2C_IsErrorOccurred>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e031      	b.n	8007eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d025      	beq.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e58:	f7fb f8b8 	bl	8002fcc <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11a      	bne.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d013      	beq.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e007      	b.n	8007eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d1c4      	bne.n	8007e3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ec8:	e02f      	b.n	8007f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	68b9      	ldr	r1, [r7, #8]
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f838 	bl	8007f44 <I2C_IsErrorOccurred>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e02d      	b.n	8007f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ede:	f7fb f875 	bl	8002fcc <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11a      	bne.n	8007f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d013      	beq.n	8007f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f06:	f043 0220 	orr.w	r2, r3, #32
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e007      	b.n	8007f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d1c8      	bne.n	8007eca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	; 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f003 0310 	and.w	r3, r3, #16
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d068      	beq.n	8008042 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2210      	movs	r2, #16
 8007f76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f78:	e049      	b.n	800800e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d045      	beq.n	800800e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fb f823 	bl	8002fcc <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_IsErrorOccurred+0x54>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d13a      	bne.n	800800e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007faa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fba:	d121      	bne.n	8008000 <I2C_IsErrorOccurred+0xbc>
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc2:	d01d      	beq.n	8008000 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007fc4:	7cfb      	ldrb	r3, [r7, #19]
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d01a      	beq.n	8008000 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fda:	f7fa fff7 	bl	8002fcc <HAL_GetTick>
 8007fde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe0:	e00e      	b.n	8008000 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fe2:	f7fa fff3 	bl	8002fcc <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b19      	cmp	r3, #25
 8007fee:	d907      	bls.n	8008000 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ff0:	6a3b      	ldr	r3, [r7, #32]
 8007ff2:	f043 0320 	orr.w	r3, r3, #32
 8007ff6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007ffe:	e006      	b.n	800800e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b20      	cmp	r3, #32
 800800c:	d1e9      	bne.n	8007fe2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b20      	cmp	r3, #32
 800801a:	d003      	beq.n	8008024 <I2C_IsErrorOccurred+0xe0>
 800801c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0aa      	beq.n	8007f7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008028:	2b00      	cmp	r3, #0
 800802a:	d103      	bne.n	8008034 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2220      	movs	r2, #32
 8008032:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f043 0304 	orr.w	r3, r3, #4
 800803a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	f043 0308 	orr.w	r3, r3, #8
 800807c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	f043 0302 	orr.w	r3, r3, #2
 800809e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80080b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01c      	beq.n	80080f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fe45 	bl	8007d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	4b0d      	ldr	r3, [pc, #52]	; (8008100 <I2C_IsErrorOccurred+0x1bc>)
 80080ca:	400b      	ands	r3, r1
 80080cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	fe00e800 	.word	0xfe00e800

08008104 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	817b      	strh	r3, [r7, #10]
 8008112:	4613      	mov	r3, r2
 8008114:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008116:	897b      	ldrh	r3, [r7, #10]
 8008118:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800811c:	7a7b      	ldrb	r3, [r7, #9]
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008124:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	4313      	orrs	r3, r2
 800812e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008132:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	0d5b      	lsrs	r3, r3, #21
 800813e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008142:	4b08      	ldr	r3, [pc, #32]	; (8008164 <I2C_TransferConfig+0x60>)
 8008144:	430b      	orrs	r3, r1
 8008146:	43db      	mvns	r3, r3
 8008148:	ea02 0103 	and.w	r1, r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	03ff63ff 	.word	0x03ff63ff

08008168 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b20      	cmp	r3, #32
 800817c:	d138      	bne.n	80081f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008188:	2302      	movs	r3, #2
 800818a:	e032      	b.n	80081f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2224      	movs	r2, #36	; 0x24
 8008198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6819      	ldr	r1, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0201 	orr.w	r2, r2, #1
 80081da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	e000      	b.n	80081f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081f0:	2302      	movs	r3, #2
  }
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b20      	cmp	r3, #32
 8008212:	d139      	bne.n	8008288 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800821e:	2302      	movs	r3, #2
 8008220:	e033      	b.n	800828a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2224      	movs	r2, #36	; 0x24
 800822e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008250:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f042 0201 	orr.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80082a0:	4b29      	ldr	r3, [pc, #164]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d00a      	beq.n	80082c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082ac:	4b26      	ldr	r3, [pc, #152]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d001      	beq.n	80082be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e040      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e03e      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082c2:	4b21      	ldr	r3, [pc, #132]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80082ca:	491f      	ldr	r1, [pc, #124]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082d2:	f7fa fe7b 	bl	8002fcc <HAL_GetTick>
 80082d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082d8:	e009      	b.n	80082ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082da:	f7fa fe77 	bl	8002fcc <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082e8:	d901      	bls.n	80082ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e028      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082ee:	4b16      	ldr	r3, [pc, #88]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082fa:	d1ee      	bne.n	80082da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b1e      	cmp	r3, #30
 8008300:	d008      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b2e      	cmp	r3, #46	; 0x2e
 8008306:	d005      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b1d      	cmp	r3, #29
 800830c:	d002      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b2d      	cmp	r3, #45	; 0x2d
 8008312:	d114      	bne.n	800833e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008314:	f7fa fe5a 	bl	8002fcc <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800831a:	e009      	b.n	8008330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800831c:	f7fa fe56 	bl	8002fcc <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800832a:	d901      	bls.n	8008330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e007      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833c:	d1ee      	bne.n	800831c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	58024800 	.word	0x58024800

0800834c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08c      	sub	sp, #48	; 0x30
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f000 bc1f 	b.w	8008b9e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80b3 	beq.w	80084d4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800836e:	4b95      	ldr	r3, [pc, #596]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008378:	4b92      	ldr	r3, [pc, #584]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	2b10      	cmp	r3, #16
 8008382:	d007      	beq.n	8008394 <HAL_RCC_OscConfig+0x48>
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	2b18      	cmp	r3, #24
 8008388:	d112      	bne.n	80083b0 <HAL_RCC_OscConfig+0x64>
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d10d      	bne.n	80083b0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008394:	4b8b      	ldr	r3, [pc, #556]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 8098 	beq.w	80084d2 <HAL_RCC_OscConfig+0x186>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 8093 	bne.w	80084d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e3f6      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d106      	bne.n	80083c8 <HAL_RCC_OscConfig+0x7c>
 80083ba:	4b82      	ldr	r3, [pc, #520]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a81      	ldr	r2, [pc, #516]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e058      	b.n	800847a <HAL_RCC_OscConfig+0x12e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d112      	bne.n	80083f6 <HAL_RCC_OscConfig+0xaa>
 80083d0:	4b7c      	ldr	r3, [pc, #496]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a7b      	ldr	r2, [pc, #492]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	4b79      	ldr	r3, [pc, #484]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a78      	ldr	r2, [pc, #480]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a75      	ldr	r2, [pc, #468]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80083ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	e041      	b.n	800847a <HAL_RCC_OscConfig+0x12e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083fe:	d112      	bne.n	8008426 <HAL_RCC_OscConfig+0xda>
 8008400:	4b70      	ldr	r3, [pc, #448]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a6f      	ldr	r2, [pc, #444]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	4b6d      	ldr	r3, [pc, #436]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a6c      	ldr	r2, [pc, #432]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008412:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b6a      	ldr	r3, [pc, #424]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a69      	ldr	r2, [pc, #420]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800841e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	e029      	b.n	800847a <HAL_RCC_OscConfig+0x12e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800842e:	d112      	bne.n	8008456 <HAL_RCC_OscConfig+0x10a>
 8008430:	4b64      	ldr	r3, [pc, #400]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a63      	ldr	r2, [pc, #396]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4b61      	ldr	r3, [pc, #388]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a60      	ldr	r2, [pc, #384]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	4b5e      	ldr	r3, [pc, #376]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a5d      	ldr	r2, [pc, #372]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800844e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	e011      	b.n	800847a <HAL_RCC_OscConfig+0x12e>
 8008456:	4b5b      	ldr	r3, [pc, #364]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a5a      	ldr	r2, [pc, #360]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800845c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	4b58      	ldr	r3, [pc, #352]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a57      	ldr	r2, [pc, #348]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	4b55      	ldr	r3, [pc, #340]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a54      	ldr	r2, [pc, #336]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008474:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d013      	beq.n	80084aa <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008482:	f7fa fda3 	bl	8002fcc <HAL_GetTick>
 8008486:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008488:	e008      	b.n	800849c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800848a:	f7fa fd9f 	bl	8002fcc <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b64      	cmp	r3, #100	; 0x64
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e380      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800849c:	4b49      	ldr	r3, [pc, #292]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <HAL_RCC_OscConfig+0x13e>
 80084a8:	e014      	b.n	80084d4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084aa:	f7fa fd8f 	bl	8002fcc <HAL_GetTick>
 80084ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084b2:	f7fa fd8b 	bl	8002fcc <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b64      	cmp	r3, #100	; 0x64
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e36c      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084c4:	4b3f      	ldr	r3, [pc, #252]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1f0      	bne.n	80084b2 <HAL_RCC_OscConfig+0x166>
 80084d0:	e000      	b.n	80084d4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 808c 	beq.w	80085fa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084e2:	4b38      	ldr	r3, [pc, #224]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084ec:	4b35      	ldr	r3, [pc, #212]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <HAL_RCC_OscConfig+0x1bc>
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	2b18      	cmp	r3, #24
 80084fc:	d137      	bne.n	800856e <HAL_RCC_OscConfig+0x222>
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d132      	bne.n	800856e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008508:	4b2e      	ldr	r3, [pc, #184]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_RCC_OscConfig+0x1d4>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e33e      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008520:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f023 0219 	bic.w	r2, r3, #25
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4925      	ldr	r1, [pc, #148]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800852e:	4313      	orrs	r3, r2
 8008530:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008532:	f7fa fd4b 	bl	8002fcc <HAL_GetTick>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008538:	e008      	b.n	800854c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800853a:	f7fa fd47 	bl	8002fcc <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e328      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0f0      	beq.n	800853a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	061b      	lsls	r3, r3, #24
 8008566:	4917      	ldr	r1, [pc, #92]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008568:	4313      	orrs	r3, r2
 800856a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800856c:	e045      	b.n	80085fa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d028      	beq.n	80085c8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f023 0219 	bic.w	r2, r3, #25
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	4910      	ldr	r1, [pc, #64]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 8008584:	4313      	orrs	r3, r2
 8008586:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008588:	f7fa fd20 	bl	8002fcc <HAL_GetTick>
 800858c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008590:	f7fa fd1c 	bl	8002fcc <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e2fd      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0304 	and.w	r3, r3, #4
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f0      	beq.n	8008590 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	061b      	lsls	r3, r3, #24
 80085bc:	4901      	ldr	r1, [pc, #4]	; (80085c4 <HAL_RCC_OscConfig+0x278>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	604b      	str	r3, [r1, #4]
 80085c2:	e01a      	b.n	80085fa <HAL_RCC_OscConfig+0x2ae>
 80085c4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085c8:	4b97      	ldr	r3, [pc, #604]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a96      	ldr	r2, [pc, #600]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d4:	f7fa fcfa 	bl	8002fcc <HAL_GetTick>
 80085d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085dc:	f7fa fcf6 	bl	8002fcc <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e2d7      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085ee:	4b8e      	ldr	r3, [pc, #568]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f0      	bne.n	80085dc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	d06a      	beq.n	80086dc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008606:	4b88      	ldr	r3, [pc, #544]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800860e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008610:	4b85      	ldr	r3, [pc, #532]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b08      	cmp	r3, #8
 800861a:	d007      	beq.n	800862c <HAL_RCC_OscConfig+0x2e0>
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2b18      	cmp	r3, #24
 8008620:	d11b      	bne.n	800865a <HAL_RCC_OscConfig+0x30e>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f003 0303 	and.w	r3, r3, #3
 8008628:	2b01      	cmp	r3, #1
 800862a:	d116      	bne.n	800865a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800862c:	4b7e      	ldr	r3, [pc, #504]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <HAL_RCC_OscConfig+0x2f8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d001      	beq.n	8008644 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e2ac      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008644:	4b78      	ldr	r3, [pc, #480]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	061b      	lsls	r3, r3, #24
 8008652:	4975      	ldr	r1, [pc, #468]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008654:	4313      	orrs	r3, r2
 8008656:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008658:	e040      	b.n	80086dc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d023      	beq.n	80086aa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008662:	4b71      	ldr	r3, [pc, #452]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a70      	ldr	r2, [pc, #448]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866e:	f7fa fcad 	bl	8002fcc <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008676:	f7fa fca9 	bl	8002fcc <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e28a      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008688:	4b67      	ldr	r3, [pc, #412]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008694:	4b64      	ldr	r3, [pc, #400]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	061b      	lsls	r3, r3, #24
 80086a2:	4961      	ldr	r1, [pc, #388]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60cb      	str	r3, [r1, #12]
 80086a8:	e018      	b.n	80086dc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086aa:	4b5f      	ldr	r3, [pc, #380]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a5e      	ldr	r2, [pc, #376]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b6:	f7fa fc89 	bl	8002fcc <HAL_GetTick>
 80086ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086be:	f7fa fc85 	bl	8002fcc <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e266      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086d0:	4b55      	ldr	r3, [pc, #340]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f0      	bne.n	80086be <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d036      	beq.n	8008756 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d019      	beq.n	8008724 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086f0:	4b4d      	ldr	r3, [pc, #308]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086f4:	4a4c      	ldr	r2, [pc, #304]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80086f6:	f043 0301 	orr.w	r3, r3, #1
 80086fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fc:	f7fa fc66 	bl	8002fcc <HAL_GetTick>
 8008700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008704:	f7fa fc62 	bl	8002fcc <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e243      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008716:	4b44      	ldr	r3, [pc, #272]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f0      	beq.n	8008704 <HAL_RCC_OscConfig+0x3b8>
 8008722:	e018      	b.n	8008756 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008724:	4b40      	ldr	r3, [pc, #256]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008728:	4a3f      	ldr	r2, [pc, #252]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800872a:	f023 0301 	bic.w	r3, r3, #1
 800872e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008730:	f7fa fc4c 	bl	8002fcc <HAL_GetTick>
 8008734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008738:	f7fa fc48 	bl	8002fcc <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b02      	cmp	r3, #2
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e229      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800874a:	4b37      	ldr	r3, [pc, #220]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800874c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1f0      	bne.n	8008738 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d036      	beq.n	80087d0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d019      	beq.n	800879e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800876a:	4b2f      	ldr	r3, [pc, #188]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a2e      	ldr	r2, [pc, #184]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008776:	f7fa fc29 	bl	8002fcc <HAL_GetTick>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800877e:	f7fa fc25 	bl	8002fcc <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e206      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <HAL_RCC_OscConfig+0x432>
 800879c:	e018      	b.n	80087d0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800879e:	4b22      	ldr	r3, [pc, #136]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a21      	ldr	r2, [pc, #132]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80087a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087aa:	f7fa fc0f 	bl	8002fcc <HAL_GetTick>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087b0:	e008      	b.n	80087c4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087b2:	f7fa fc0b 	bl	8002fcc <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d901      	bls.n	80087c4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e1ec      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087c4:	4b18      	ldr	r3, [pc, #96]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f0      	bne.n	80087b2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80af 	beq.w	800893c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087de:	4b13      	ldr	r3, [pc, #76]	; (800882c <HAL_RCC_OscConfig+0x4e0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a12      	ldr	r2, [pc, #72]	; (800882c <HAL_RCC_OscConfig+0x4e0>)
 80087e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087ea:	f7fa fbef 	bl	8002fcc <HAL_GetTick>
 80087ee:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087f0:	e008      	b.n	8008804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f2:	f7fa fbeb 	bl	8002fcc <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b64      	cmp	r3, #100	; 0x64
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e1cc      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_RCC_OscConfig+0x4e0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0f0      	beq.n	80087f2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d10b      	bne.n	8008830 <HAL_RCC_OscConfig+0x4e4>
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	4a02      	ldr	r2, [pc, #8]	; (8008828 <HAL_RCC_OscConfig+0x4dc>)
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	6713      	str	r3, [r2, #112]	; 0x70
 8008824:	e05b      	b.n	80088de <HAL_RCC_OscConfig+0x592>
 8008826:	bf00      	nop
 8008828:	58024400 	.word	0x58024400
 800882c:	58024800 	.word	0x58024800
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d112      	bne.n	800885e <HAL_RCC_OscConfig+0x512>
 8008838:	4b9d      	ldr	r3, [pc, #628]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	4a9c      	ldr	r2, [pc, #624]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	6713      	str	r3, [r2, #112]	; 0x70
 8008844:	4b9a      	ldr	r3, [pc, #616]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008848:	4a99      	ldr	r2, [pc, #612]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 800884a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884e:	6713      	str	r3, [r2, #112]	; 0x70
 8008850:	4b97      	ldr	r3, [pc, #604]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	4a96      	ldr	r2, [pc, #600]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008856:	f023 0304 	bic.w	r3, r3, #4
 800885a:	6713      	str	r3, [r2, #112]	; 0x70
 800885c:	e03f      	b.n	80088de <HAL_RCC_OscConfig+0x592>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b05      	cmp	r3, #5
 8008864:	d112      	bne.n	800888c <HAL_RCC_OscConfig+0x540>
 8008866:	4b92      	ldr	r3, [pc, #584]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	4a91      	ldr	r2, [pc, #580]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 800886c:	f043 0304 	orr.w	r3, r3, #4
 8008870:	6713      	str	r3, [r2, #112]	; 0x70
 8008872:	4b8f      	ldr	r3, [pc, #572]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	4a8e      	ldr	r2, [pc, #568]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887c:	6713      	str	r3, [r2, #112]	; 0x70
 800887e:	4b8c      	ldr	r3, [pc, #560]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008882:	4a8b      	ldr	r2, [pc, #556]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	6713      	str	r3, [r2, #112]	; 0x70
 800888a:	e028      	b.n	80088de <HAL_RCC_OscConfig+0x592>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b85      	cmp	r3, #133	; 0x85
 8008892:	d112      	bne.n	80088ba <HAL_RCC_OscConfig+0x56e>
 8008894:	4b86      	ldr	r3, [pc, #536]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	4a85      	ldr	r2, [pc, #532]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 800889a:	f043 0304 	orr.w	r3, r3, #4
 800889e:	6713      	str	r3, [r2, #112]	; 0x70
 80088a0:	4b83      	ldr	r3, [pc, #524]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a4:	4a82      	ldr	r2, [pc, #520]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088aa:	6713      	str	r3, [r2, #112]	; 0x70
 80088ac:	4b80      	ldr	r3, [pc, #512]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b0:	4a7f      	ldr	r2, [pc, #508]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	6713      	str	r3, [r2, #112]	; 0x70
 80088b8:	e011      	b.n	80088de <HAL_RCC_OscConfig+0x592>
 80088ba:	4b7d      	ldr	r3, [pc, #500]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	4a7c      	ldr	r2, [pc, #496]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	6713      	str	r3, [r2, #112]	; 0x70
 80088c6:	4b7a      	ldr	r3, [pc, #488]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ca:	4a79      	ldr	r2, [pc, #484]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088cc:	f023 0304 	bic.w	r3, r3, #4
 80088d0:	6713      	str	r3, [r2, #112]	; 0x70
 80088d2:	4b77      	ldr	r3, [pc, #476]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	4a76      	ldr	r2, [pc, #472]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80088d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d015      	beq.n	8008912 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e6:	f7fa fb71 	bl	8002fcc <HAL_GetTick>
 80088ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ec:	e00a      	b.n	8008904 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ee:	f7fa fb6d 	bl	8002fcc <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d901      	bls.n	8008904 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e14c      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008904:	4b6a      	ldr	r3, [pc, #424]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d0ee      	beq.n	80088ee <HAL_RCC_OscConfig+0x5a2>
 8008910:	e014      	b.n	800893c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008912:	f7fa fb5b 	bl	8002fcc <HAL_GetTick>
 8008916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008918:	e00a      	b.n	8008930 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891a:	f7fa fb57 	bl	8002fcc <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e136      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008930:	4b5f      	ldr	r3, [pc, #380]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1ee      	bne.n	800891a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 812b 	beq.w	8008b9c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008946:	4b5a      	ldr	r3, [pc, #360]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800894e:	2b18      	cmp	r3, #24
 8008950:	f000 80bb 	beq.w	8008aca <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b02      	cmp	r3, #2
 800895a:	f040 8095 	bne.w	8008a88 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800895e:	4b54      	ldr	r3, [pc, #336]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a53      	ldr	r2, [pc, #332]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896a:	f7fa fb2f 	bl	8002fcc <HAL_GetTick>
 800896e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008970:	e008      	b.n	8008984 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008972:	f7fa fb2b 	bl	8002fcc <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e10c      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008984:	4b4a      	ldr	r3, [pc, #296]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f0      	bne.n	8008972 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008990:	4b47      	ldr	r3, [pc, #284]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008994:	4b47      	ldr	r3, [pc, #284]	; (8008ab4 <HAL_RCC_OscConfig+0x768>)
 8008996:	4013      	ands	r3, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089a0:	0112      	lsls	r2, r2, #4
 80089a2:	430a      	orrs	r2, r1
 80089a4:	4942      	ldr	r1, [pc, #264]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	628b      	str	r3, [r1, #40]	; 0x28
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	3b01      	subs	r3, #1
 80089b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b8:	3b01      	subs	r3, #1
 80089ba:	025b      	lsls	r3, r3, #9
 80089bc:	b29b      	uxth	r3, r3
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	3b01      	subs	r3, #1
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	3b01      	subs	r3, #1
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089da:	4935      	ldr	r1, [pc, #212]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80089e0:	4b33      	ldr	r3, [pc, #204]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a32      	ldr	r2, [pc, #200]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089e6:	f023 0301 	bic.w	r3, r3, #1
 80089ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089ec:	4b30      	ldr	r3, [pc, #192]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f0:	4b31      	ldr	r3, [pc, #196]	; (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089f8:	00d2      	lsls	r2, r2, #3
 80089fa:	492d      	ldr	r1, [pc, #180]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a00:	4b2b      	ldr	r3, [pc, #172]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	f023 020c 	bic.w	r2, r3, #12
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	4928      	ldr	r1, [pc, #160]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a12:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	f023 0202 	bic.w	r2, r3, #2
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	4924      	ldr	r1, [pc, #144]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a24:	4b22      	ldr	r3, [pc, #136]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	4a21      	ldr	r2, [pc, #132]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a30:	4b1f      	ldr	r3, [pc, #124]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a3c:	4b1c      	ldr	r3, [pc, #112]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a48:	4b19      	ldr	r3, [pc, #100]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a18      	ldr	r2, [pc, #96]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a4e:	f043 0301 	orr.w	r3, r3, #1
 8008a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a54:	4b16      	ldr	r3, [pc, #88]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a15      	ldr	r2, [pc, #84]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fa fab4 	bl	8002fcc <HAL_GetTick>
 8008a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fa fab0 	bl	8002fcc <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e091      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0x71c>
 8008a86:	e089      	b.n	8008b9c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <HAL_RCC_OscConfig+0x764>)
 8008a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a94:	f7fa fa9a 	bl	8002fcc <HAL_GetTick>
 8008a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a9a:	e00f      	b.n	8008abc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9c:	f7fa fa96 	bl	8002fcc <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d908      	bls.n	8008abc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e077      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	fffffc0c 	.word	0xfffffc0c
 8008ab8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008abc:	4b3a      	ldr	r3, [pc, #232]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e9      	bne.n	8008a9c <HAL_RCC_OscConfig+0x750>
 8008ac8:	e068      	b.n	8008b9c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008aca:	4b37      	ldr	r3, [pc, #220]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ad0:	4b35      	ldr	r3, [pc, #212]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d031      	beq.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f003 0203 	and.w	r2, r3, #3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d12a      	bne.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	091b      	lsrs	r3, r3, #4
 8008af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d122      	bne.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d11a      	bne.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	0a5b      	lsrs	r3, r3, #9
 8008b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d111      	bne.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d108      	bne.n	8008b42 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0e1b      	lsrs	r3, r3, #24
 8008b34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d001      	beq.n	8008b46 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e02b      	b.n	8008b9e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b46:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4a:	08db      	lsrs	r3, r3, #3
 8008b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b50:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d01f      	beq.n	8008b9c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b5c:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b62:	f023 0301 	bic.w	r3, r3, #1
 8008b66:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b68:	f7fa fa30 	bl	8002fcc <HAL_GetTick>
 8008b6c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b6e:	bf00      	nop
 8008b70:	f7fa fa2c 	bl	8002fcc <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d0f9      	beq.n	8008b70 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <HAL_RCC_OscConfig+0x860>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b88:	00d2      	lsls	r2, r2, #3
 8008b8a:	4907      	ldr	r1, [pc, #28]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	4a04      	ldr	r2, [pc, #16]	; (8008ba8 <HAL_RCC_OscConfig+0x85c>)
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3730      	adds	r7, #48	; 0x30
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	58024400 	.word	0x58024400
 8008bac:	ffff0007 	.word	0xffff0007

08008bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e19c      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bc4:	4b8a      	ldr	r3, [pc, #552]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d910      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd2:	4b87      	ldr	r3, [pc, #540]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f023 020f 	bic.w	r2, r3, #15
 8008bda:	4985      	ldr	r1, [pc, #532]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008be2:	4b83      	ldr	r3, [pc, #524]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d001      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e184      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d010      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	4b7b      	ldr	r3, [pc, #492]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d908      	bls.n	8008c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c10:	4b78      	ldr	r3, [pc, #480]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	4975      	ldr	r1, [pc, #468]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695a      	ldr	r2, [r3, #20]
 8008c32:	4b70      	ldr	r3, [pc, #448]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d908      	bls.n	8008c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c3e:	4b6d      	ldr	r3, [pc, #436]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	496a      	ldr	r1, [pc, #424]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d010      	beq.n	8008c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	4b64      	ldr	r3, [pc, #400]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d908      	bls.n	8008c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c6c:	4b61      	ldr	r3, [pc, #388]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	495e      	ldr	r1, [pc, #376]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d010      	beq.n	8008cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	69da      	ldr	r2, [r3, #28]
 8008c8e:	4b59      	ldr	r3, [pc, #356]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d908      	bls.n	8008cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c9a:	4b56      	ldr	r3, [pc, #344]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	4953      	ldr	r1, [pc, #332]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d010      	beq.n	8008cda <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	4b4d      	ldr	r3, [pc, #308]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d908      	bls.n	8008cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc8:	4b4a      	ldr	r3, [pc, #296]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f023 020f 	bic.w	r2, r3, #15
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	4947      	ldr	r1, [pc, #284]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d055      	beq.n	8008d92 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ce6:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4940      	ldr	r1, [pc, #256]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d00:	4b3c      	ldr	r3, [pc, #240]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d121      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e0f6      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d107      	bne.n	8008d28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d18:	4b36      	ldr	r3, [pc, #216]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d115      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e0ea      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d30:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d109      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0de      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d40:	4b2c      	ldr	r3, [pc, #176]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0d6      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d50:	4b28      	ldr	r3, [pc, #160]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f023 0207 	bic.w	r2, r3, #7
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4925      	ldr	r1, [pc, #148]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7fa f933 	bl	8002fcc <HAL_GetTick>
 8008d66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d68:	e00a      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6a:	f7fa f92f 	bl	8002fcc <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e0be      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d80:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d1eb      	bne.n	8008d6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d010      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d208      	bcs.n	8008dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f023 020f 	bic.w	r2, r3, #15
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	490e      	ldr	r1, [pc, #56]	; (8008df4 <HAL_RCC_ClockConfig+0x244>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d214      	bcs.n	8008df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f023 020f 	bic.w	r2, r3, #15
 8008dd6:	4906      	ldr	r1, [pc, #24]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dde:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <HAL_RCC_ClockConfig+0x240>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 030f 	and.w	r3, r3, #15
 8008de6:	683a      	ldr	r2, [r7, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e086      	b.n	8008efe <HAL_RCC_ClockConfig+0x34e>
 8008df0:	52002000 	.word	0x52002000
 8008df4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d010      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691a      	ldr	r2, [r3, #16]
 8008e08:	4b3f      	ldr	r3, [pc, #252]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d208      	bcs.n	8008e26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e14:	4b3c      	ldr	r3, [pc, #240]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4939      	ldr	r1, [pc, #228]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d010      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695a      	ldr	r2, [r3, #20]
 8008e36:	4b34      	ldr	r3, [pc, #208]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d208      	bcs.n	8008e54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e42:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	492e      	ldr	r1, [pc, #184]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d010      	beq.n	8008e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	4b28      	ldr	r3, [pc, #160]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d208      	bcs.n	8008e82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e70:	4b25      	ldr	r3, [pc, #148]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	4922      	ldr	r1, [pc, #136]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d010      	beq.n	8008eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69da      	ldr	r2, [r3, #28]
 8008e92:	4b1d      	ldr	r3, [pc, #116]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d208      	bcs.n	8008eb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e9e:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	4917      	ldr	r1, [pc, #92]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008eb0:	f000 f834 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	4912      	ldr	r1, [pc, #72]	; (8008f0c <HAL_RCC_ClockConfig+0x35c>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ecc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008ece:	4b0e      	ldr	r3, [pc, #56]	; (8008f08 <HAL_RCC_ClockConfig+0x358>)
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <HAL_RCC_ClockConfig+0x35c>)
 8008ed8:	5cd3      	ldrb	r3, [r2, r3]
 8008eda:	f003 031f 	and.w	r3, r3, #31
 8008ede:	693a      	ldr	r2, [r7, #16]
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <HAL_RCC_ClockConfig+0x360>)
 8008ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ee8:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <HAL_RCC_ClockConfig+0x364>)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <HAL_RCC_ClockConfig+0x368>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fa f820 	bl	8002f38 <HAL_InitTick>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	58024400 	.word	0x58024400
 8008f0c:	08013ce4 	.word	0x08013ce4
 8008f10:	24000004 	.word	0x24000004
 8008f14:	24000000 	.word	0x24000000
 8008f18:	24000008 	.word	0x24000008

08008f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b089      	sub	sp, #36	; 0x24
 8008f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f22:	4bb3      	ldr	r3, [pc, #716]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f2a:	2b18      	cmp	r3, #24
 8008f2c:	f200 8155 	bhi.w	80091da <HAL_RCC_GetSysClockFreq+0x2be>
 8008f30:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f9d 	.word	0x08008f9d
 8008f3c:	080091db 	.word	0x080091db
 8008f40:	080091db 	.word	0x080091db
 8008f44:	080091db 	.word	0x080091db
 8008f48:	080091db 	.word	0x080091db
 8008f4c:	080091db 	.word	0x080091db
 8008f50:	080091db 	.word	0x080091db
 8008f54:	080091db 	.word	0x080091db
 8008f58:	08008fc3 	.word	0x08008fc3
 8008f5c:	080091db 	.word	0x080091db
 8008f60:	080091db 	.word	0x080091db
 8008f64:	080091db 	.word	0x080091db
 8008f68:	080091db 	.word	0x080091db
 8008f6c:	080091db 	.word	0x080091db
 8008f70:	080091db 	.word	0x080091db
 8008f74:	080091db 	.word	0x080091db
 8008f78:	08008fc9 	.word	0x08008fc9
 8008f7c:	080091db 	.word	0x080091db
 8008f80:	080091db 	.word	0x080091db
 8008f84:	080091db 	.word	0x080091db
 8008f88:	080091db 	.word	0x080091db
 8008f8c:	080091db 	.word	0x080091db
 8008f90:	080091db 	.word	0x080091db
 8008f94:	080091db 	.word	0x080091db
 8008f98:	08008fcf 	.word	0x08008fcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f9c:	4b94      	ldr	r3, [pc, #592]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0320 	and.w	r3, r3, #32
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fa8:	4b91      	ldr	r3, [pc, #580]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a90      	ldr	r2, [pc, #576]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008fba:	e111      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fbc:	4b8d      	ldr	r3, [pc, #564]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fbe:	61bb      	str	r3, [r7, #24]
      break;
 8008fc0:	e10e      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008fc2:	4b8d      	ldr	r3, [pc, #564]	; (80091f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fc4:	61bb      	str	r3, [r7, #24]
      break;
 8008fc6:	e10b      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008fc8:	4b8c      	ldr	r3, [pc, #560]	; (80091fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008fca:	61bb      	str	r3, [r7, #24]
      break;
 8008fcc:	e108      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fce:	4b88      	ldr	r3, [pc, #544]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	f003 0303 	and.w	r3, r3, #3
 8008fd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008fd8:	4b85      	ldr	r3, [pc, #532]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008fe4:	4b82      	ldr	r3, [pc, #520]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008fee:	4b80      	ldr	r3, [pc, #512]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80e1 	beq.w	80091d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f000 8083 	beq.w	8009120 <HAL_RCC_GetSysClockFreq+0x204>
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b02      	cmp	r3, #2
 800901e:	f200 80a1 	bhi.w	8009164 <HAL_RCC_GetSysClockFreq+0x248>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_RCC_GetSysClockFreq+0x114>
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d056      	beq.n	80090dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800902e:	e099      	b.n	8009164 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009030:	4b6f      	ldr	r3, [pc, #444]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02d      	beq.n	8009098 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903c:	4b6c      	ldr	r3, [pc, #432]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a6b      	ldr	r2, [pc, #428]	; (80091f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b62      	ldr	r3, [pc, #392]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a02 	vldr	s12, [r7, #8]
 800907a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009096:	e087      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009204 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b51      	ldr	r3, [pc, #324]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80090be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090da:	e065      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009208 <HAL_RCC_GetSysClockFreq+0x2ec>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b40      	ldr	r3, [pc, #256]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800911e:	e043      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800920c <HAL_RCC_GetSysClockFreq+0x2f0>
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a02 	vldr	s12, [r7, #8]
 8009146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009162:	e021      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a02 	vldr	s12, [r7, #8]
 800918a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091a8:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b2:	3301      	adds	r3, #1
 80091b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091cc:	ee17 3a90 	vmov	r3, s15
 80091d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80091d2:	e005      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
      break;
 80091d8:	e002      	b.n	80091e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091dc:	61bb      	str	r3, [r7, #24]
      break;
 80091de:	bf00      	nop
  }

  return sysclockfreq;
 80091e0:	69bb      	ldr	r3, [r7, #24]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3724      	adds	r7, #36	; 0x24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900
 80091fc:	007a1200 	.word	0x007a1200
 8009200:	46000000 	.word	0x46000000
 8009204:	4c742400 	.word	0x4c742400
 8009208:	4a742400 	.word	0x4a742400
 800920c:	4af42400 	.word	0x4af42400

08009210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009216:	f7ff fe81 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800921a:	4602      	mov	r2, r0
 800921c:	4b10      	ldr	r3, [pc, #64]	; (8009260 <HAL_RCC_GetHCLKFreq+0x50>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	0a1b      	lsrs	r3, r3, #8
 8009222:	f003 030f 	and.w	r3, r3, #15
 8009226:	490f      	ldr	r1, [pc, #60]	; (8009264 <HAL_RCC_GetHCLKFreq+0x54>)
 8009228:	5ccb      	ldrb	r3, [r1, r3]
 800922a:	f003 031f 	and.w	r3, r3, #31
 800922e:	fa22 f303 	lsr.w	r3, r2, r3
 8009232:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009234:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <HAL_RCC_GetHCLKFreq+0x50>)
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	4a09      	ldr	r2, [pc, #36]	; (8009264 <HAL_RCC_GetHCLKFreq+0x54>)
 800923e:	5cd3      	ldrb	r3, [r2, r3]
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	fa22 f303 	lsr.w	r3, r2, r3
 800924a:	4a07      	ldr	r2, [pc, #28]	; (8009268 <HAL_RCC_GetHCLKFreq+0x58>)
 800924c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800924e:	4a07      	ldr	r2, [pc, #28]	; (800926c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <HAL_RCC_GetHCLKFreq+0x58>)
 8009256:	681b      	ldr	r3, [r3, #0]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	58024400 	.word	0x58024400
 8009264:	08013ce4 	.word	0x08013ce4
 8009268:	24000004 	.word	0x24000004
 800926c:	24000000 	.word	0x24000000

08009270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009274:	f7ff ffcc 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 8009278:	4602      	mov	r2, r0
 800927a:	4b06      	ldr	r3, [pc, #24]	; (8009294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	091b      	lsrs	r3, r3, #4
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	4904      	ldr	r1, [pc, #16]	; (8009298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009286:	5ccb      	ldrb	r3, [r1, r3]
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	58024400 	.word	0x58024400
 8009298:	08013ce4 	.word	0x08013ce4

0800929c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80092a0:	f7ff ffb6 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	4904      	ldr	r1, [pc, #16]	; (80092c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092b2:	5ccb      	ldrb	r3, [r1, r3]
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80092bc:	4618      	mov	r0, r3
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	58024400 	.word	0x58024400
 80092c4:	08013ce4 	.word	0x08013ce4

080092c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092cc:	b0c8      	sub	sp, #288	; 0x120
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092d4:	2300      	movs	r3, #0
 80092d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092da:	2300      	movs	r3, #0
 80092dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80092ec:	2500      	movs	r5, #0
 80092ee:	ea54 0305 	orrs.w	r3, r4, r5
 80092f2:	d049      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80092fe:	d02f      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009304:	d828      	bhi.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930a:	d01a      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800930c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009310:	d822      	bhi.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800931a:	d007      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800931c:	e01c      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931e:	4ba7      	ldr	r3, [pc, #668]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	4aa6      	ldr	r2, [pc, #664]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009328:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800932a:	e01a      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800932c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009330:	3308      	adds	r3, #8
 8009332:	2102      	movs	r1, #2
 8009334:	4618      	mov	r0, r3
 8009336:	f002 fa6d 	bl	800b814 <RCCEx_PLL2_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009340:	e00f      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009346:	3328      	adds	r3, #40	; 0x28
 8009348:	2102      	movs	r1, #2
 800934a:	4618      	mov	r0, r3
 800934c:	f002 fb14 	bl	800b978 <RCCEx_PLL3_Config>
 8009350:	4603      	mov	r3, r0
 8009352:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800935e:	e000      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009362:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800936a:	4b94      	ldr	r3, [pc, #592]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800936c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009378:	4a90      	ldr	r2, [pc, #576]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800937a:	430b      	orrs	r3, r1
 800937c:	6513      	str	r3, [r2, #80]	; 0x50
 800937e:	e003      	b.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009394:	f04f 0900 	mov.w	r9, #0
 8009398:	ea58 0309 	orrs.w	r3, r8, r9
 800939c:	d047      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800939e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d82a      	bhi.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c5 	.word	0x080093c5
 80093b4:	080093d3 	.word	0x080093d3
 80093b8:	080093e9 	.word	0x080093e9
 80093bc:	08009407 	.word	0x08009407
 80093c0:	08009407 	.word	0x08009407
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b7d      	ldr	r3, [pc, #500]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a7c      	ldr	r2, [pc, #496]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093d0:	e01a      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093d6:	3308      	adds	r3, #8
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 fa1a 	bl	800b814 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093e6:	e00f      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093ec:	3328      	adds	r3, #40	; 0x28
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 fac1 	bl	800b978 <RCCEx_PLL3_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093fc:	e004      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009404:	e000      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009410:	4b6a      	ldr	r3, [pc, #424]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009414:	f023 0107 	bic.w	r1, r3, #7
 8009418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800941c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800941e:	4a67      	ldr	r2, [pc, #412]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009420:	430b      	orrs	r3, r1
 8009422:	6513      	str	r3, [r2, #80]	; 0x50
 8009424:	e003      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800942a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800942e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800943a:	f04f 0b00 	mov.w	fp, #0
 800943e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009442:	d054      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8009444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800944a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800944e:	d036      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009450:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009454:	d82f      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945a:	d032      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800945c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009460:	d829      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009462:	2bc0      	cmp	r3, #192	; 0xc0
 8009464:	d02f      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009466:	2bc0      	cmp	r3, #192	; 0xc0
 8009468:	d825      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d018      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800946e:	2b80      	cmp	r3, #128	; 0x80
 8009470:	d821      	bhi.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009476:	2b40      	cmp	r3, #64	; 0x40
 8009478:	d007      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800947a:	e01c      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800947c:	4b4f      	ldr	r3, [pc, #316]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	4a4e      	ldr	r2, [pc, #312]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009488:	e01e      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800948a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800948e:	3308      	adds	r3, #8
 8009490:	2100      	movs	r1, #0
 8009492:	4618      	mov	r0, r3
 8009494:	f002 f9be 	bl	800b814 <RCCEx_PLL2_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800949e:	e013      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094a4:	3328      	adds	r3, #40	; 0x28
 80094a6:	2100      	movs	r1, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f002 fa65 	bl	800b978 <RCCEx_PLL3_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80094b4:	e008      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80094bc:	e004      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80094be:	bf00      	nop
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80094c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80094d0:	4b3a      	ldr	r3, [pc, #232]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80094d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094de:	4a37      	ldr	r2, [pc, #220]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6513      	str	r3, [r2, #80]	; 0x50
 80094e4:	e003      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80094ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80094ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80094fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094fe:	2300      	movs	r3, #0
 8009500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009504:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009508:	460b      	mov	r3, r1
 800950a:	4313      	orrs	r3, r2
 800950c:	d05c      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800950e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009514:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009518:	d03b      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800951a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800951e:	d834      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009524:	d037      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8009526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800952a:	d82e      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800952c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009530:	d033      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009532:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009536:	d828      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800953c:	d01a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800953e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009542:	d822      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954c:	d007      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800954e:	e01c      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009550:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	4a19      	ldr	r2, [pc, #100]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800955a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800955c:	e01e      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009562:	3308      	adds	r3, #8
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f002 f954 	bl	800b814 <RCCEx_PLL2_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009572:	e013      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009578:	3328      	adds	r3, #40	; 0x28
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f002 f9fb 	bl	800b978 <RCCEx_PLL3_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009588:	e008      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009590:	e004      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009592:	bf00      	nop
 8009594:	e002      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800959a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800959c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80095ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b2:	4a02      	ldr	r2, [pc, #8]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6513      	str	r3, [r2, #80]	; 0x50
 80095b8:	e006      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80095ba:	bf00      	nop
 80095bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80095c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80095d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095d8:	2300      	movs	r3, #0
 80095da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80095e2:	460b      	mov	r3, r1
 80095e4:	4313      	orrs	r3, r2
 80095e6:	d03a      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80095e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ee:	2b30      	cmp	r3, #48	; 0x30
 80095f0:	d01f      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80095f2:	2b30      	cmp	r3, #48	; 0x30
 80095f4:	d819      	bhi.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d00c      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d815      	bhi.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x362>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d019      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009602:	2b10      	cmp	r3, #16
 8009604:	d111      	bne.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009606:	4bae      	ldr	r3, [pc, #696]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	4aad      	ldr	r2, [pc, #692]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800960c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009612:	e011      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009618:	3308      	adds	r3, #8
 800961a:	2102      	movs	r1, #2
 800961c:	4618      	mov	r0, r3
 800961e:	f002 f8f9 	bl	800b814 <RCCEx_PLL2_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009628:	e006      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009630:	e002      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009632:	bf00      	nop
 8009634:	e000      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8009636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009638:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009640:	4b9f      	ldr	r3, [pc, #636]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009644:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800964c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800964e:	4a9c      	ldr	r2, [pc, #624]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009650:	430b      	orrs	r3, r1
 8009652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009654:	e003      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009656:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800965a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800965e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800966a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800966e:	2300      	movs	r3, #0
 8009670:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009674:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009678:	460b      	mov	r3, r1
 800967a:	4313      	orrs	r3, r2
 800967c:	d051      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800967e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009688:	d035      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800968a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968e:	d82e      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009694:	d031      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800969a:	d828      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800969c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a0:	d01a      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80096a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a6:	d822      	bhi.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80096ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b0:	d007      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80096b2:	e01c      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b4:	4b82      	ldr	r3, [pc, #520]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	4a81      	ldr	r2, [pc, #516]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096c0:	e01c      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096c6:	3308      	adds	r3, #8
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f002 f8a2 	bl	800b814 <RCCEx_PLL2_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096d6:	e011      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096dc:	3328      	adds	r3, #40	; 0x28
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 f949 	bl	800b978 <RCCEx_PLL3_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096ec:	e006      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80096fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009704:	4b6e      	ldr	r3, [pc, #440]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800970c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009712:	4a6b      	ldr	r2, [pc, #428]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009714:	430b      	orrs	r3, r1
 8009716:	6513      	str	r3, [r2, #80]	; 0x50
 8009718:	e003      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800971e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800972e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009732:	2300      	movs	r3, #0
 8009734:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009738:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800973c:	460b      	mov	r3, r1
 800973e:	4313      	orrs	r3, r2
 8009740:	d053      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800974c:	d033      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800974e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009752:	d82c      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009758:	d02f      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800975a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800975e:	d826      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009764:	d02b      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800976a:	d820      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800976c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009770:	d012      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009776:	d81a      	bhi.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d022      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800977c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009780:	d115      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009786:	3308      	adds	r3, #8
 8009788:	2101      	movs	r1, #1
 800978a:	4618      	mov	r0, r3
 800978c:	f002 f842 	bl	800b814 <RCCEx_PLL2_Config>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009796:	e015      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800979c:	3328      	adds	r3, #40	; 0x28
 800979e:	2101      	movs	r1, #1
 80097a0:	4618      	mov	r0, r3
 80097a2:	f002 f8e9 	bl	800b978 <RCCEx_PLL3_Config>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097ac:	e00a      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80097b4:	e006      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80097b6:	bf00      	nop
 80097b8:	e004      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80097ba:	bf00      	nop
 80097bc:	e002      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80097c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097cc:	4b3c      	ldr	r3, [pc, #240]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80097d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097da:	4a39      	ldr	r2, [pc, #228]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097dc:	430b      	orrs	r3, r1
 80097de:	6513      	str	r3, [r2, #80]	; 0x50
 80097e0:	e003      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80097e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80097f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097fa:	2300      	movs	r3, #0
 80097fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009800:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009804:	460b      	mov	r3, r1
 8009806:	4313      	orrs	r3, r2
 8009808:	d060      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800980a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800980e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009812:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009816:	d039      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8009818:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800981c:	d832      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800981e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009822:	d035      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009828:	d82c      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800982a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800982e:	d031      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009834:	d826      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800983a:	d02d      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800983c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009840:	d820      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009846:	d012      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800984c:	d81a      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d024      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009856:	d115      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800985c:	3308      	adds	r3, #8
 800985e:	2101      	movs	r1, #1
 8009860:	4618      	mov	r0, r3
 8009862:	f001 ffd7 	bl	800b814 <RCCEx_PLL2_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800986c:	e017      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800986e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009872:	3328      	adds	r3, #40	; 0x28
 8009874:	2101      	movs	r1, #1
 8009876:	4618      	mov	r0, r3
 8009878:	f002 f87e 	bl	800b978 <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009882:	e00c      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800988a:	e008      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800988c:	bf00      	nop
 800988e:	e006      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009890:	bf00      	nop
 8009892:	e004      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009894:	bf00      	nop
 8009896:	e002      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009898:	bf00      	nop
 800989a:	e000      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800989c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10e      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80098ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098b6:	4a02      	ldr	r2, [pc, #8]	; (80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6593      	str	r3, [r2, #88]	; 0x58
 80098bc:	e006      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80098be:	bf00      	nop
 80098c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80098c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80098d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098dc:	2300      	movs	r3, #0
 80098de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80098e6:	460b      	mov	r3, r1
 80098e8:	4313      	orrs	r3, r2
 80098ea:	d037      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80098ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f6:	d00e      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80098f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098fc:	d816      	bhi.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d018      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009906:	d111      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009908:	4bc4      	ldr	r3, [pc, #784]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	4ac3      	ldr	r2, [pc, #780]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009914:	e00f      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800991a:	3308      	adds	r3, #8
 800991c:	2101      	movs	r1, #1
 800991e:	4618      	mov	r0, r3
 8009920:	f001 ff78 	bl	800b814 <RCCEx_PLL2_Config>
 8009924:	4603      	mov	r3, r0
 8009926:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800992a:	e004      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009932:	e000      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009936:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800993e:	4bb7      	ldr	r3, [pc, #732]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009942:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800994a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800994c:	4ab3      	ldr	r2, [pc, #716]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800994e:	430b      	orrs	r3, r1
 8009950:	6513      	str	r3, [r2, #80]	; 0x50
 8009952:	e003      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009958:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800995c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800996c:	2300      	movs	r3, #0
 800996e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009972:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009976:	460b      	mov	r3, r1
 8009978:	4313      	orrs	r3, r2
 800997a:	d039      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800997c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009982:	2b03      	cmp	r3, #3
 8009984:	d81c      	bhi.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009986:	a201      	add	r2, pc, #4	; (adr r2, 800998c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099c9 	.word	0x080099c9
 8009990:	0800999d 	.word	0x0800999d
 8009994:	080099ab 	.word	0x080099ab
 8009998:	080099c9 	.word	0x080099c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999c:	4b9f      	ldr	r3, [pc, #636]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a0:	4a9e      	ldr	r2, [pc, #632]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099a8:	e00f      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099ae:	3308      	adds	r3, #8
 80099b0:	2102      	movs	r1, #2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 ff2e 	bl	800b814 <RCCEx_PLL2_Config>
 80099b8:	4603      	mov	r3, r0
 80099ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099be:	e004      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80099c6:	e000      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80099c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099d2:	4b92      	ldr	r3, [pc, #584]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d6:	f023 0103 	bic.w	r1, r3, #3
 80099da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e0:	4a8e      	ldr	r2, [pc, #568]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099e2:	430b      	orrs	r3, r1
 80099e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099e6:	e003      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80099ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80099fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a00:	2300      	movs	r3, #0
 8009a02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	f000 8099 	beq.w	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a12:	4b83      	ldr	r3, [pc, #524]	; (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a82      	ldr	r2, [pc, #520]	; (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a1e:	f7f9 fad5 	bl	8002fcc <HAL_GetTick>
 8009a22:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a26:	e00b      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a28:	f7f9 fad0 	bl	8002fcc <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	2b64      	cmp	r3, #100	; 0x64
 8009a36:	d903      	bls.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009a3e:	e005      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a40:	4b77      	ldr	r3, [pc, #476]	; (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0ed      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d173      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a54:	4b71      	ldr	r3, [pc, #452]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a60:	4053      	eors	r3, r2
 8009a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d015      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a6a:	4b6c      	ldr	r3, [pc, #432]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a76:	4b69      	ldr	r3, [pc, #420]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	4a68      	ldr	r2, [pc, #416]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a82:	4b66      	ldr	r3, [pc, #408]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	4a65      	ldr	r2, [pc, #404]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a8e:	4a63      	ldr	r2, [pc, #396]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa2:	d118      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa4:	f7f9 fa92 	bl	8002fcc <HAL_GetTick>
 8009aa8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aac:	e00d      	b.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aae:	f7f9 fa8d 	bl	8002fcc <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ab8:	1ad2      	subs	r2, r2, r3
 8009aba:	f241 3388 	movw	r3, #5000	; 0x1388
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d903      	bls.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8009ac8:	e005      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aca:	4b54      	ldr	r3, [pc, #336]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0eb      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d129      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009aee:	d10e      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009af0:	4b4a      	ldr	r3, [pc, #296]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b00:	091a      	lsrs	r2, r3, #4
 8009b02:	4b48      	ldr	r3, [pc, #288]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	4a45      	ldr	r2, [pc, #276]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6113      	str	r3, [r2, #16]
 8009b0c:	e005      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009b0e:	4b43      	ldr	r3, [pc, #268]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	4a42      	ldr	r2, [pc, #264]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b18:	6113      	str	r3, [r2, #16]
 8009b1a:	4b40      	ldr	r3, [pc, #256]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b2a:	4a3c      	ldr	r2, [pc, #240]	; (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b2c:	430b      	orrs	r3, r1
 8009b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b30:	e008      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009b36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8009b3a:	e003      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009b40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f002 0301 	and.w	r3, r2, #1
 8009b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b54:	2300      	movs	r3, #0
 8009b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4313      	orrs	r3, r2
 8009b62:	f000 8090 	beq.w	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b6e:	2b28      	cmp	r3, #40	; 0x28
 8009b70:	d870      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009b72:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b78:	08009c5d 	.word	0x08009c5d
 8009b7c:	08009c55 	.word	0x08009c55
 8009b80:	08009c55 	.word	0x08009c55
 8009b84:	08009c55 	.word	0x08009c55
 8009b88:	08009c55 	.word	0x08009c55
 8009b8c:	08009c55 	.word	0x08009c55
 8009b90:	08009c55 	.word	0x08009c55
 8009b94:	08009c55 	.word	0x08009c55
 8009b98:	08009c29 	.word	0x08009c29
 8009b9c:	08009c55 	.word	0x08009c55
 8009ba0:	08009c55 	.word	0x08009c55
 8009ba4:	08009c55 	.word	0x08009c55
 8009ba8:	08009c55 	.word	0x08009c55
 8009bac:	08009c55 	.word	0x08009c55
 8009bb0:	08009c55 	.word	0x08009c55
 8009bb4:	08009c55 	.word	0x08009c55
 8009bb8:	08009c3f 	.word	0x08009c3f
 8009bbc:	08009c55 	.word	0x08009c55
 8009bc0:	08009c55 	.word	0x08009c55
 8009bc4:	08009c55 	.word	0x08009c55
 8009bc8:	08009c55 	.word	0x08009c55
 8009bcc:	08009c55 	.word	0x08009c55
 8009bd0:	08009c55 	.word	0x08009c55
 8009bd4:	08009c55 	.word	0x08009c55
 8009bd8:	08009c5d 	.word	0x08009c5d
 8009bdc:	08009c55 	.word	0x08009c55
 8009be0:	08009c55 	.word	0x08009c55
 8009be4:	08009c55 	.word	0x08009c55
 8009be8:	08009c55 	.word	0x08009c55
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009c55 	.word	0x08009c55
 8009bf4:	08009c55 	.word	0x08009c55
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009c55 	.word	0x08009c55
 8009c08:	08009c55 	.word	0x08009c55
 8009c0c:	08009c55 	.word	0x08009c55
 8009c10:	08009c55 	.word	0x08009c55
 8009c14:	08009c55 	.word	0x08009c55
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	58024800 	.word	0x58024800
 8009c24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 fdef 	bl	800b814 <RCCEx_PLL2_Config>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c3c:	e00f      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c42:	3328      	adds	r3, #40	; 0x28
 8009c44:	2101      	movs	r1, #1
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 fe96 	bl	800b978 <RCCEx_PLL3_Config>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c52:	e004      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009c5a:	e000      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c66:	4bc0      	ldr	r3, [pc, #768]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c76:	4abc      	ldr	r2, [pc, #752]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	6553      	str	r3, [r2, #84]	; 0x54
 8009c7c:	e003      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009c82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f002 0302 	and.w	r3, r2, #2
 8009c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c96:	2300      	movs	r3, #0
 8009c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c9c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	d043      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d824      	bhi.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009cb2:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009d05 	.word	0x08009d05
 8009cbc:	08009cd1 	.word	0x08009cd1
 8009cc0:	08009ce7 	.word	0x08009ce7
 8009cc4:	08009d05 	.word	0x08009d05
 8009cc8:	08009d05 	.word	0x08009d05
 8009ccc:	08009d05 	.word	0x08009d05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fd9b 	bl	800b814 <RCCEx_PLL2_Config>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ce4:	e00f      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cea:	3328      	adds	r3, #40	; 0x28
 8009cec:	2101      	movs	r1, #1
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 fe42 	bl	800b978 <RCCEx_PLL3_Config>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cfa:	e004      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009d02:	e000      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d0e:	4b96      	ldr	r3, [pc, #600]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d12:	f023 0107 	bic.w	r1, r3, #7
 8009d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d1e:	4a92      	ldr	r2, [pc, #584]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6553      	str	r3, [r2, #84]	; 0x54
 8009d24:	e003      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009d2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f002 0304 	and.w	r3, r2, #4
 8009d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d44:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d043      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d824      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009d5a:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d60:	08009dad 	.word	0x08009dad
 8009d64:	08009d79 	.word	0x08009d79
 8009d68:	08009d8f 	.word	0x08009d8f
 8009d6c:	08009dad 	.word	0x08009dad
 8009d70:	08009dad 	.word	0x08009dad
 8009d74:	08009dad 	.word	0x08009dad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 fd47 	bl	800b814 <RCCEx_PLL2_Config>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d8c:	e00f      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d92:	3328      	adds	r3, #40	; 0x28
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fdee 	bl	800b978 <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009da2:	e004      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009daa:	e000      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009db6:	4b6c      	ldr	r3, [pc, #432]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	f023 0107 	bic.w	r1, r3, #7
 8009dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009dc6:	4a68      	ldr	r2, [pc, #416]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	6593      	str	r3, [r2, #88]	; 0x58
 8009dcc:	e003      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009dd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f002 0320 	and.w	r3, r2, #32
 8009de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009de6:	2300      	movs	r3, #0
 8009de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009df0:	460b      	mov	r3, r1
 8009df2:	4313      	orrs	r3, r2
 8009df4:	d055      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e02:	d033      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e08:	d82c      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e0e:	d02f      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e14:	d826      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e1a:	d02b      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009e1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e20:	d820      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e26:	d012      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e2c:	d81a      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d022      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e36:	d115      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fce7 	bl	800b814 <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e4c:	e015      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e52:	3328      	adds	r3, #40	; 0x28
 8009e54:	2102      	movs	r1, #2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 fd8e 	bl	800b978 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e62:	e00a      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009e6a:	e006      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009e6c:	bf00      	nop
 8009e6e:	e004      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10b      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e82:	4b39      	ldr	r3, [pc, #228]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e92:	4a35      	ldr	r2, [pc, #212]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6553      	str	r3, [r2, #84]	; 0x54
 8009e98:	e003      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009e9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d058      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ec6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009eca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ece:	d033      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ed0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ed4:	d82c      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eda:	d02f      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee0:	d826      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ee6:	d02b      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009eec:	d820      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef2:	d012      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef8:	d81a      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d022      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8009efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f02:	d115      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f08:	3308      	adds	r3, #8
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 fc81 	bl	800b814 <RCCEx_PLL2_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f18:	e015      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f1e:	3328      	adds	r3, #40	; 0x28
 8009f20:	2102      	movs	r1, #2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 fd28 	bl	800b978 <RCCEx_PLL3_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f2e:	e00a      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8009f36:	e006      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009f38:	bf00      	nop
 8009f3a:	e004      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009f3c:	bf00      	nop
 8009f3e:	e002      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009f40:	bf00      	nop
 8009f42:	e000      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10e      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f4e:	4b06      	ldr	r3, [pc, #24]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f5e:	4a02      	ldr	r2, [pc, #8]	; (8009f68 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6593      	str	r3, [r2, #88]	; 0x58
 8009f64:	e006      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8009f70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f84:	2300      	movs	r3, #0
 8009f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4313      	orrs	r3, r2
 8009f92:	d055      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fa0:	d033      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009fa2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009fa6:	d82c      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fac:	d02f      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb2:	d826      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009fb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fb8:	d02b      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009fba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fbe:	d820      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fc4:	d012      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fca:	d81a      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d022      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fd4:	d115      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fda:	3308      	adds	r3, #8
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fc18 	bl	800b814 <RCCEx_PLL2_Config>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fea:	e015      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ff0:	3328      	adds	r3, #40	; 0x28
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fcbf 	bl	800b978 <RCCEx_PLL3_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a000:	e00a      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a008:	e006      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a00a:	bf00      	nop
 800a00c:	e004      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a00e:	bf00      	nop
 800a010:	e002      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a012:	bf00      	nop
 800a014:	e000      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a016:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a020:	4ba1      	ldr	r3, [pc, #644]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a024:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a02c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a030:	4a9d      	ldr	r2, [pc, #628]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a032:	430b      	orrs	r3, r1
 800a034:	6593      	str	r3, [r2, #88]	; 0x58
 800a036:	e003      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a03c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f002 0308 	and.w	r3, r2, #8
 800a04c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a050:	2300      	movs	r3, #0
 800a052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a056:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a05a:	460b      	mov	r3, r1
 800a05c:	4313      	orrs	r3, r2
 800a05e:	d01e      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06c:	d10c      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a072:	3328      	adds	r3, #40	; 0x28
 800a074:	2102      	movs	r1, #2
 800a076:	4618      	mov	r0, r3
 800a078:	f001 fc7e 	bl	800b978 <RCCEx_PLL3_Config>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a088:	4b87      	ldr	r3, [pc, #540]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	4a83      	ldr	r2, [pc, #524]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a09a:	430b      	orrs	r3, r1
 800a09c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f002 0310 	and.w	r3, r2, #16
 800a0aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a0b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d01e      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ca:	d10c      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0d0:	3328      	adds	r3, #40	; 0x28
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f001 fc4f 	bl	800b978 <RCCEx_PLL3_Config>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0e6:	4b70      	ldr	r3, [pc, #448]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0f6:	4a6c      	ldr	r2, [pc, #432]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a108:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a10c:	2300      	movs	r3, #0
 800a10e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a112:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a116:	460b      	mov	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	d03e      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a11c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a120:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a128:	d022      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a12a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a12e:	d81b      	bhi.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d00b      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a13a:	e015      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a140:	3308      	adds	r3, #8
 800a142:	2100      	movs	r1, #0
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fb65 	bl	800b814 <RCCEx_PLL2_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a150:	e00f      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a156:	3328      	adds	r3, #40	; 0x28
 800a158:	2102      	movs	r1, #2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f001 fc0c 	bl	800b978 <RCCEx_PLL3_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a166:	e004      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a16e:	e000      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10b      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a17a:	4b4b      	ldr	r3, [pc, #300]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a17e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a186:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a18a:	4a47      	ldr	r2, [pc, #284]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a18c:	430b      	orrs	r3, r1
 800a18e:	6593      	str	r3, [r2, #88]	; 0x58
 800a190:	e003      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a192:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a196:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a1a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	d03b      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1c2:	d01f      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a1c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1c8:	d818      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a1ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ce:	d003      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a1d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1d4:	d007      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a1d6:	e011      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d8:	4b33      	ldr	r3, [pc, #204]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1dc:	4a32      	ldr	r2, [pc, #200]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1e4:	e00f      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a1ea:	3328      	adds	r3, #40	; 0x28
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fbc2 	bl	800b978 <RCCEx_PLL3_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1fa:	e004      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a202:	e000      	b.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a204:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a20e:	4b26      	ldr	r3, [pc, #152]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a212:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21e:	4a22      	ldr	r2, [pc, #136]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a220:	430b      	orrs	r3, r1
 800a222:	6553      	str	r3, [r2, #84]	; 0x54
 800a224:	e003      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a22a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a23a:	673b      	str	r3, [r7, #112]	; 0x70
 800a23c:	2300      	movs	r3, #0
 800a23e:	677b      	str	r3, [r7, #116]	; 0x74
 800a240:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a244:	460b      	mov	r3, r1
 800a246:	4313      	orrs	r3, r2
 800a248:	d034      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d007      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a25a:	e011      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a25c:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	4a11      	ldr	r2, [pc, #68]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a268:	e00e      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a26a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a26e:	3308      	adds	r3, #8
 800a270:	2102      	movs	r1, #2
 800a272:	4618      	mov	r0, r3
 800a274:	f001 face 	bl	800b814 <RCCEx_PLL2_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a27e:	e003      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a286:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a288:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10d      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29e:	4a02      	ldr	r2, [pc, #8]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2a4:	e006      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a2a6:	bf00      	nop
 800a2a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a2b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a2c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	d00c      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2d4:	3328      	adds	r3, #40	; 0x28
 800a2d6:	2102      	movs	r1, #2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fb4d 	bl	800b978 <RCCEx_PLL3_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a2f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a2fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d038      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a312:	d018      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a318:	d811      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a31a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a31e:	d014      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a324:	d80b      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d011      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a32e:	d106      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a330:	4bc3      	ldr	r3, [pc, #780]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	4ac2      	ldr	r2, [pc, #776]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a33a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a33c:	e008      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800a344:	e004      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a346:	bf00      	nop
 800a348:	e002      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a34a:	bf00      	nop
 800a34c:	e000      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a34e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a350:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10b      	bne.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a358:	4bb9      	ldr	r3, [pc, #740]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a368:	4ab5      	ldr	r2, [pc, #724]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a36a:	430b      	orrs	r3, r1
 800a36c:	6553      	str	r3, [r2, #84]	; 0x54
 800a36e:	e003      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a384:	65bb      	str	r3, [r7, #88]	; 0x58
 800a386:	2300      	movs	r3, #0
 800a388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a38a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a38e:	460b      	mov	r3, r1
 800a390:	4313      	orrs	r3, r2
 800a392:	d009      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a394:	4baa      	ldr	r3, [pc, #680]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3a2:	4aa7      	ldr	r2, [pc, #668]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3a4:	430b      	orrs	r3, r1
 800a3a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a3b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a3ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d009      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3c4:	4b9e      	ldr	r3, [pc, #632]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	4a9b      	ldr	r2, [pc, #620]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a3e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	d009      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a3f4:	4b92      	ldr	r3, [pc, #584]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800a3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a402:	4a8f      	ldr	r2, [pc, #572]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a404:	430b      	orrs	r3, r1
 800a406:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a414:	643b      	str	r3, [r7, #64]	; 0x40
 800a416:	2300      	movs	r3, #0
 800a418:	647b      	str	r3, [r7, #68]	; 0x44
 800a41a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a41e:	460b      	mov	r3, r1
 800a420:	4313      	orrs	r3, r2
 800a422:	d00e      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a424:	4b86      	ldr	r3, [pc, #536]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4a85      	ldr	r2, [pc, #532]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a42a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a42e:	6113      	str	r3, [r2, #16]
 800a430:	4b83      	ldr	r3, [pc, #524]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a432:	6919      	ldr	r1, [r3, #16]
 800a434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a438:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a43c:	4a80      	ldr	r2, [pc, #512]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a43e:	430b      	orrs	r3, r1
 800a440:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a44e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a454:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a458:	460b      	mov	r3, r1
 800a45a:	4313      	orrs	r3, r2
 800a45c:	d009      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a45e:	4b78      	ldr	r3, [pc, #480]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a462:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	4a74      	ldr	r2, [pc, #464]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a46e:	430b      	orrs	r3, r1
 800a470:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a47e:	633b      	str	r3, [r7, #48]	; 0x30
 800a480:	2300      	movs	r3, #0
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
 800a484:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a488:	460b      	mov	r3, r1
 800a48a:	4313      	orrs	r3, r2
 800a48c:	d00a      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a48e:	4b6c      	ldr	r3, [pc, #432]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a492:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a49a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a49e:	4a68      	ldr	r2, [pc, #416]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	62b9      	str	r1, [r7, #40]	; 0x28
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	d011      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 f9a3 	bl	800b814 <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a4d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a4e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a4e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6239      	str	r1, [r7, #32]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d011      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a504:	3308      	adds	r3, #8
 800a506:	2101      	movs	r1, #1
 800a508:	4618      	mov	r0, r3
 800a50a:	f001 f983 	bl	800b814 <RCCEx_PLL2_Config>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a514:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a520:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	2100      	movs	r1, #0
 800a52e:	61b9      	str	r1, [r7, #24]
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	61fb      	str	r3, [r7, #28]
 800a536:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a53a:	460b      	mov	r3, r1
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d011      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a544:	3308      	adds	r3, #8
 800a546:	2102      	movs	r1, #2
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 f963 	bl	800b814 <RCCEx_PLL2_Config>
 800a54e:	4603      	mov	r3, r0
 800a550:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a554:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	2100      	movs	r1, #0
 800a56e:	6139      	str	r1, [r7, #16]
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a57a:	460b      	mov	r3, r1
 800a57c:	4313      	orrs	r3, r2
 800a57e:	d011      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a584:	3328      	adds	r3, #40	; 0x28
 800a586:	2100      	movs	r1, #0
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 f9f5 	bl	800b978 <RCCEx_PLL3_Config>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800a594:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a5a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	60b9      	str	r1, [r7, #8]
 800a5b0:	f003 0310 	and.w	r3, r3, #16
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	d011      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5c4:	3328      	adds	r3, #40	; 0x28
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f001 f9d5 	bl	800b978 <RCCEx_PLL3_Config>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a5d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a5e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	6039      	str	r1, [r7, #0]
 800a5f0:	f003 0320 	and.w	r3, r3, #32
 800a5f4:	607b      	str	r3, [r7, #4]
 800a5f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	d011      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a604:	3328      	adds	r3, #40	; 0x28
 800a606:	2102      	movs	r1, #2
 800a608:	4618      	mov	r0, r3
 800a60a:	f001 f9b5 	bl	800b978 <RCCEx_PLL3_Config>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800a614:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800a620:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800a624:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e000      	b.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
}
 800a632:	4618      	mov	r0, r3
 800a634:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a638:	46bd      	mov	sp, r7
 800a63a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a63e:	bf00      	nop
 800a640:	58024400 	.word	0x58024400

0800a644 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b090      	sub	sp, #64	; 0x40
 800a648:	af00      	add	r7, sp, #0
 800a64a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a64e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a652:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a656:	430b      	orrs	r3, r1
 800a658:	f040 8094 	bne.w	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a65c:	4b97      	ldr	r3, [pc, #604]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b04      	cmp	r3, #4
 800a66a:	f200 8087 	bhi.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a6b1 	.word	0x0800a6b1
 800a67c:	0800a6d9 	.word	0x0800a6d9
 800a680:	0800a775 	.word	0x0800a775
 800a684:	0800a701 	.word	0x0800a701
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a688:	4b8c      	ldr	r3, [pc, #560]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a694:	d108      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 ff68 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a4:	f000 bc97 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ac:	f000 bc93 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b0:	4b82      	ldr	r3, [pc, #520]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6bc:	d108      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6be:	f107 0318 	add.w	r3, r7, #24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 fcac 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6cc:	f000 bc83 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d4:	f000 bc7f 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6d8:	4b78      	ldr	r3, [pc, #480]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e4:	d108      	bne.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e6:	f107 030c 	add.w	r3, r7, #12
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fdec 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f4:	f000 bc6f 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6fc:	f000 bc6b 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a700:	4b6e      	ldr	r3, [pc, #440]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a708:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a70a:	4b6c      	ldr	r3, [pc, #432]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b04      	cmp	r3, #4
 800a714:	d10c      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d109      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a71c:	4b67      	ldr	r3, [pc, #412]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	08db      	lsrs	r3, r3, #3
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	4a66      	ldr	r2, [pc, #408]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a728:	fa22 f303 	lsr.w	r3, r2, r3
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a72e:	e01f      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a730:	4b62      	ldr	r3, [pc, #392]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a73c:	d106      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a744:	d102      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a746:	4b5f      	ldr	r3, [pc, #380]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74a:	e011      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a74c:	4b5b      	ldr	r3, [pc, #364]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a758:	d106      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a760:	d102      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a762:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a766:	e003      	b.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a76c:	f000 bc33 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a770:	f000 bc31 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a774:	4b55      	ldr	r3, [pc, #340]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a778:	f000 bc2d 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a780:	f000 bc29 	b.w	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800a784:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a788:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a78c:	430b      	orrs	r3, r1
 800a78e:	f040 809f 	bne.w	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800a792:	4b4a      	ldr	r3, [pc, #296]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a796:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a79a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a2:	d04d      	beq.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7aa:	f200 8084 	bhi.w	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b2:	d07d      	beq.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b8:	d87d      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	2b80      	cmp	r3, #128	; 0x80
 800a7be:	d02d      	beq.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c2:	2b80      	cmp	r3, #128	; 0x80
 800a7c4:	d877      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ce:	2b40      	cmp	r3, #64	; 0x40
 800a7d0:	d012      	beq.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800a7d2:	e070      	b.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7d4:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e0:	d107      	bne.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fec2 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f0:	e3f1      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7f6:	e3ee      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7f8:	4b30      	ldr	r3, [pc, #192]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a804:	d107      	bne.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a806:	f107 0318 	add.w	r3, r7, #24
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fc08 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a814:	e3df      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81a:	e3dc      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a81c:	4b27      	ldr	r3, [pc, #156]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a828:	d107      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a82a:	f107 030c 	add.w	r3, r7, #12
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fd4a 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a838:	e3cd      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a83e:	e3ca      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a840:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a848:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a84a:	4b1c      	ldr	r3, [pc, #112]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b04      	cmp	r3, #4
 800a854:	d10c      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800a856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d109      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a85c:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	08db      	lsrs	r3, r3, #3
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	4a16      	ldr	r2, [pc, #88]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
 800a86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86e:	e01e      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a870:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a87c:	d106      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a884:	d102      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88a:	e010      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a88c:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a898:	d106      	bne.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a0:	d102      	bne.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8a2:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a6:	e002      	b.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8ac:	e393      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a8ae:	e392      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8b0:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b4:	e38f      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ba:	e38c      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800a8bc:	58024400 	.word	0x58024400
 800a8c0:	03d09000 	.word	0x03d09000
 800a8c4:	003d0900 	.word	0x003d0900
 800a8c8:	007a1200 	.word	0x007a1200
 800a8cc:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	f040 809c 	bne.w	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800a8de:	4b9e      	ldr	r3, [pc, #632]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800a8e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ee:	d054      	beq.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8f6:	f200 808b 	bhi.w	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a900:	f000 8083 	beq.w	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a90a:	f200 8081 	bhi.w	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a914:	d02f      	beq.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a91c:	d878      	bhi.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	2b00      	cmp	r3, #0
 800a922:	d004      	beq.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92a:	d012      	beq.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800a92c:	e070      	b.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a92e:	4b8a      	ldr	r3, [pc, #552]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a93a:	d107      	bne.n	800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a93c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a940:	4618      	mov	r0, r3
 800a942:	f000 fe15 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94a:	e344      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a950:	e341      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a952:	4b81      	ldr	r3, [pc, #516]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a95a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a95e:	d107      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a960:	f107 0318 	add.w	r3, r7, #24
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fb5b 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96e:	e332      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a974:	e32f      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a976:	4b78      	ldr	r3, [pc, #480]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a97e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a982:	d107      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a984:	f107 030c 	add.w	r3, r7, #12
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fc9d 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a992:	e320      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a998:	e31d      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a99a:	4b6f      	ldr	r3, [pc, #444]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9a4:	4b6c      	ldr	r3, [pc, #432]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d10c      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d109      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9b6:	4b68      	ldr	r3, [pc, #416]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	08db      	lsrs	r3, r3, #3
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	4a66      	ldr	r2, [pc, #408]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800a9c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c8:	e01e      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9ca:	4b63      	ldr	r3, [pc, #396]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d6:	d106      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9de:	d102      	bne.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9e0:	4b5f      	ldr	r3, [pc, #380]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e4:	e010      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9e6:	4b5c      	ldr	r3, [pc, #368]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9f2:	d106      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9fa:	d102      	bne.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9fc:	4b59      	ldr	r3, [pc, #356]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa00:	e002      	b.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800aa06:	e2e6      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800aa08:	e2e5      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa0a:	4b57      	ldr	r3, [pc, #348]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa0e:	e2e2      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa14:	e2df      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aa1e:	430b      	orrs	r3, r1
 800aa20:	f040 80a7 	bne.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aa24:	4b4c      	ldr	r3, [pc, #304]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa28:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa34:	d055      	beq.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa3c:	f200 8096 	bhi.w	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa46:	f000 8084 	beq.w	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa50:	f200 808c 	bhi.w	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5a:	d030      	beq.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa62:	f200 8083 	bhi.w	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa72:	d012      	beq.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800aa74:	e07a      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa76:	4b38      	ldr	r3, [pc, #224]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa82:	d107      	bne.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fd71 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa92:	e2a0      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa98:	e29d      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa9a:	4b2f      	ldr	r3, [pc, #188]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aaa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaa6:	d107      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fab7 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab6:	e28e      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aabc:	e28b      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aabe:	4b26      	ldr	r3, [pc, #152]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaca:	d107      	bne.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aacc:	f107 030c 	add.w	r3, r7, #12
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fbf9 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aada:	e27c      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae0:	e279      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aae2:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaec:	4b1a      	ldr	r3, [pc, #104]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d10c      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d109      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aafe:	4b16      	ldr	r3, [pc, #88]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	08db      	lsrs	r3, r3, #3
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	4a14      	ldr	r2, [pc, #80]	; (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800ab0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab10:	e01e      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab12:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab1e:	d106      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ab20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab26:	d102      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab28:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab2c:	e010      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab2e:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab3a:	d106      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab42:	d102      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab44:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab48:	e002      	b.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ab4e:	e242      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ab50:	e241      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab52:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab56:	e23e      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	03d09000 	.word	0x03d09000
 800ab60:	003d0900 	.word	0x003d0900
 800ab64:	007a1200 	.word	0x007a1200
 800ab68:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab70:	e231      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab76:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ab7a:	430b      	orrs	r3, r1
 800ab7c:	f040 8085 	bne.w	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab80:	4b9c      	ldr	r3, [pc, #624]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab84:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ab88:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab90:	d06b      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab98:	d874      	bhi.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aba0:	d056      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aba8:	d86c      	bhi.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abb0:	d03b      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800abb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abb8:	d864      	bhi.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc0:	d021      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc8:	d85c      	bhi.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd6:	d004      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800abd8:	e054      	b.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800abda:	f7fe fb49 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800abde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800abe0:	e1f9      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abe2:	4b84      	ldr	r3, [pc, #528]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abee:	d107      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abf0:	f107 0318 	add.w	r3, r7, #24
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fa13 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abfe:	e1ea      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac04:	e1e7      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac06:	4b7b      	ldr	r3, [pc, #492]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac14:	f107 030c 	add.w	r3, r7, #12
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fb55 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac22:	e1d8      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac28:	e1d5      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac2a:	4b72      	ldr	r3, [pc, #456]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d109      	bne.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac36:	4b6f      	ldr	r3, [pc, #444]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	08db      	lsrs	r3, r3, #3
 800ac3c:	f003 0303 	and.w	r3, r3, #3
 800ac40:	4a6d      	ldr	r2, [pc, #436]	; (800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac42:	fa22 f303 	lsr.w	r3, r2, r3
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac48:	e1c5      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4e:	e1c2      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac50:	4b68      	ldr	r3, [pc, #416]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5c:	d102      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800ac5e:	4b67      	ldr	r3, [pc, #412]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac62:	e1b8      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac68:	e1b5      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac6a:	4b62      	ldr	r3, [pc, #392]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac76:	d102      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800ac78:	4b61      	ldr	r3, [pc, #388]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac7c:	e1ab      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac82:	e1a8      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac88:	e1a5      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac8e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ac92:	430b      	orrs	r3, r1
 800ac94:	d173      	bne.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac96:	4b57      	ldr	r3, [pc, #348]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac9e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aca6:	d02f      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acae:	d863      	bhi.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d004      	beq.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbc:	d012      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800acbe:	e05b      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc0:	4b4c      	ldr	r3, [pc, #304]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800accc:	d107      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acce:	f107 0318 	add.w	r3, r7, #24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 f9a4 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acdc:	e17b      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace2:	e178      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ace4:	4b43      	ldr	r3, [pc, #268]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fae6 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad00:	e169      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad06:	e166      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad08:	4b3a      	ldr	r3, [pc, #232]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad12:	4b38      	ldr	r3, [pc, #224]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d10c      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad24:	4b33      	ldr	r3, [pc, #204]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	08db      	lsrs	r3, r3, #3
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	4a32      	ldr	r2, [pc, #200]	; (800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad36:	e01e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad38:	4b2e      	ldr	r3, [pc, #184]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad44:	d106      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad4c:	d102      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad4e:	4b2b      	ldr	r3, [pc, #172]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad52:	e010      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad54:	4b27      	ldr	r3, [pc, #156]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad60:	d106      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800ad62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad68:	d102      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad6a:	4b25      	ldr	r3, [pc, #148]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad6e:	e002      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad74:	e12f      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ad76:	e12e      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7c:	e12b      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad82:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ad86:	430b      	orrs	r3, r1
 800ad88:	d13c      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad92:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ad94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d004      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ada0:	d012      	beq.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ada2:	e023      	b.n	800adec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb0:	d107      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fbda 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc0:	e109      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc6:	e106      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc8:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800add4:	d107      	bne.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add6:	f107 0318 	add.w	r3, r7, #24
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f920 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade4:	e0f7      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adea:	e0f4      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800adec:	2300      	movs	r3, #0
 800adee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf0:	e0f1      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800adf2:	bf00      	nop
 800adf4:	58024400 	.word	0x58024400
 800adf8:	03d09000 	.word	0x03d09000
 800adfc:	003d0900 	.word	0x003d0900
 800ae00:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ae04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae08:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	f040 8091 	bne.w	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ae12:	4b73      	ldr	r3, [pc, #460]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ae1a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ae22:	f000 8081 	beq.w	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ae2c:	d87f      	bhi.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae34:	d06b      	beq.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae3c:	d877      	bhi.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae44:	d056      	beq.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae4c:	d86f      	bhi.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae54:	d03b      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae5c:	d867      	bhi.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae64:	d021      	beq.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6c:	d85f      	bhi.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae7a:	d004      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800ae7c:	e057      	b.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae7e:	f000 f8b9 	bl	800aff4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae84:	e0a7      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae86:	4b56      	ldr	r3, [pc, #344]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae92:	d107      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae94:	f107 0318 	add.w	r3, r7, #24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 f8c1 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea2:	e098      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea8:	e095      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeaa:	4b4d      	ldr	r3, [pc, #308]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeb6:	d107      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeb8:	f107 030c 	add.w	r3, r7, #12
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fa03 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec6:	e086      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aecc:	e083      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aece:	4b44      	ldr	r3, [pc, #272]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d109      	bne.n	800aeee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeda:	4b41      	ldr	r3, [pc, #260]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	08db      	lsrs	r3, r3, #3
 800aee0:	f003 0303 	and.w	r3, r3, #3
 800aee4:	4a3f      	ldr	r2, [pc, #252]	; (800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aee6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeec:	e073      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aef2:	e070      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aef4:	4b3a      	ldr	r3, [pc, #232]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af00:	d102      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800af02:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af06:	e066      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af0c:	e063      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af0e:	4b34      	ldr	r3, [pc, #208]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af1a:	d102      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800af1c:	4b33      	ldr	r3, [pc, #204]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af20:	e059      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af26:	e056      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af28:	4b31      	ldr	r3, [pc, #196]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af2c:	e053      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af32:	e050      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800af34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af38:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800af3c:	430b      	orrs	r3, r1
 800af3e:	d148      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800af40:	4b27      	ldr	r3, [pc, #156]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af50:	d02a      	beq.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800af52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af58:	d838      	bhi.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d004      	beq.n	800af6a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800af60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af66:	d00d      	beq.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800af68:	e030      	b.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af6a:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af76:	d102      	bne.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800af78:	4b1c      	ldr	r3, [pc, #112]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7c:	e02b      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af82:	e028      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af84:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af90:	d107      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af96:	4618      	mov	r0, r3
 800af98:	f000 faea 	bl	800b570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa0:	e019      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa6:	e016      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afa8:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afb4:	d107      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb6:	f107 0318 	add.w	r3, r7, #24
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f830 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc4:	e007      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afca:	e004      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd0:	e001      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800afd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3740      	adds	r7, #64	; 0x40
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	58024400 	.word	0x58024400
 800afe4:	03d09000 	.word	0x03d09000
 800afe8:	003d0900 	.word	0x003d0900
 800afec:	007a1200 	.word	0x007a1200
 800aff0:	00bb8000 	.word	0x00bb8000

0800aff4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800aff8:	f7fe f90a 	bl	8009210 <HAL_RCC_GetHCLKFreq>
 800affc:	4602      	mov	r2, r0
 800affe:	4b06      	ldr	r3, [pc, #24]	; (800b018 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	091b      	lsrs	r3, r3, #4
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	4904      	ldr	r1, [pc, #16]	; (800b01c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b00a:	5ccb      	ldrb	r3, [r1, r3]
 800b00c:	f003 031f 	and.w	r3, r3, #31
 800b010:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b014:	4618      	mov	r0, r3
 800b016:	bd80      	pop	{r7, pc}
 800b018:	58024400 	.word	0x58024400
 800b01c:	08013ce4 	.word	0x08013ce4

0800b020 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b020:	b480      	push	{r7}
 800b022:	b089      	sub	sp, #36	; 0x24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b028:	4ba1      	ldr	r3, [pc, #644]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02c:	f003 0303 	and.w	r3, r3, #3
 800b030:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b032:	4b9f      	ldr	r3, [pc, #636]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	0b1b      	lsrs	r3, r3, #12
 800b038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b03c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b03e:	4b9c      	ldr	r3, [pc, #624]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	091b      	lsrs	r3, r3, #4
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b04a:	4b99      	ldr	r3, [pc, #612]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04e:	08db      	lsrs	r3, r3, #3
 800b050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	fb02 f303 	mul.w	r3, r2, r3
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f000 8111 	beq.w	800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	2b02      	cmp	r3, #2
 800b072:	f000 8083 	beq.w	800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b02      	cmp	r3, #2
 800b07a:	f200 80a1 	bhi.w	800b1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d056      	beq.n	800b138 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b08a:	e099      	b.n	800b1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b08c:	4b88      	ldr	r3, [pc, #544]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0320 	and.w	r3, r3, #32
 800b094:	2b00      	cmp	r3, #0
 800b096:	d02d      	beq.n	800b0f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b098:	4b85      	ldr	r3, [pc, #532]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	08db      	lsrs	r3, r3, #3
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	4a84      	ldr	r2, [pc, #528]	; (800b2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b0a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c2:	4b7b      	ldr	r3, [pc, #492]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0f2:	e087      	b.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b2bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b106:	4b6a      	ldr	r3, [pc, #424]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b116:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b136:	e065      	b.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	ee07 3a90 	vmov	s15, r3
 800b13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14a:	4b59      	ldr	r3, [pc, #356]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b17a:	e043      	b.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b48      	ldr	r3, [pc, #288]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1be:	e021      	b.n	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b37      	ldr	r3, [pc, #220]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b202:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b204:	4b2a      	ldr	r3, [pc, #168]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b208:	0a5b      	lsrs	r3, r3, #9
 800b20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b21a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b21e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22a:	ee17 2a90 	vmov	r2, s15
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b232:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	0c1b      	lsrs	r3, r3, #16
 800b238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 2a90 	vmov	r2, s15
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b260:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	0e1b      	lsrs	r3, r3, #24
 800b266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b286:	ee17 2a90 	vmov	r2, s15
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b28e:	e008      	b.n	800b2a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	609a      	str	r2, [r3, #8]
}
 800b2a2:	bf00      	nop
 800b2a4:	3724      	adds	r7, #36	; 0x24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	58024400 	.word	0x58024400
 800b2b4:	03d09000 	.word	0x03d09000
 800b2b8:	46000000 	.word	0x46000000
 800b2bc:	4c742400 	.word	0x4c742400
 800b2c0:	4a742400 	.word	0x4a742400
 800b2c4:	4af42400 	.word	0x4af42400

0800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b089      	sub	sp, #36	; 0x24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2d0:	4ba1      	ldr	r3, [pc, #644]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b2da:	4b9f      	ldr	r3, [pc, #636]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2de:	0d1b      	lsrs	r3, r3, #20
 800b2e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2e6:	4b9c      	ldr	r3, [pc, #624]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	0a1b      	lsrs	r3, r3, #8
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2f2:	4b99      	ldr	r3, [pc, #612]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	fb02 f303 	mul.w	r3, r2, r3
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 8111 	beq.w	800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	f000 8083 	beq.w	800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b02      	cmp	r3, #2
 800b322:	f200 80a1 	bhi.w	800b468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d003      	beq.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d056      	beq.n	800b3e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b332:	e099      	b.n	800b468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b334:	4b88      	ldr	r3, [pc, #544]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d02d      	beq.n	800b39c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b340:	4b85      	ldr	r3, [pc, #532]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	08db      	lsrs	r3, r3, #3
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	4a84      	ldr	r2, [pc, #528]	; (800b55c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
 800b350:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b36a:	4b7b      	ldr	r3, [pc, #492]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b37a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b37e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b396:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b39a:	e087      	b.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b564 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ae:	4b6a      	ldr	r3, [pc, #424]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3de:	e065      	b.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3f2:	4b59      	ldr	r3, [pc, #356]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b402:	ed97 6a03 	vldr	s12, [r7, #12]
 800b406:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b422:	e043      	b.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b436:	4b48      	ldr	r3, [pc, #288]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b446:	ed97 6a03 	vldr	s12, [r7, #12]
 800b44a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b466:	e021      	b.n	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b47a:	4b37      	ldr	r3, [pc, #220]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b48a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b4ac:	4b2a      	ldr	r3, [pc, #168]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b0:	0a5b      	lsrs	r3, r3, #9
 800b4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d2:	ee17 2a90 	vmov	r2, s15
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b4da:	4b1f      	ldr	r3, [pc, #124]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	0c1b      	lsrs	r3, r3, #16
 800b4e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b500:	ee17 2a90 	vmov	r2, s15
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b508:	4b13      	ldr	r3, [pc, #76]	; (800b558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50c:	0e1b      	lsrs	r3, r3, #24
 800b50e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b51e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b522:	edd7 6a07 	vldr	s13, [r7, #28]
 800b526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b52a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b52e:	ee17 2a90 	vmov	r2, s15
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b536:	e008      	b.n	800b54a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	609a      	str	r2, [r3, #8]
}
 800b54a:	bf00      	nop
 800b54c:	3724      	adds	r7, #36	; 0x24
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	58024400 	.word	0x58024400
 800b55c:	03d09000 	.word	0x03d09000
 800b560:	46000000 	.word	0x46000000
 800b564:	4c742400 	.word	0x4c742400
 800b568:	4a742400 	.word	0x4a742400
 800b56c:	4af42400 	.word	0x4af42400

0800b570 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b570:	b480      	push	{r7}
 800b572:	b089      	sub	sp, #36	; 0x24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b578:	4ba0      	ldr	r3, [pc, #640]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b582:	4b9e      	ldr	r3, [pc, #632]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b586:	091b      	lsrs	r3, r3, #4
 800b588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b58c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b58e:	4b9b      	ldr	r3, [pc, #620]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b598:	4b98      	ldr	r3, [pc, #608]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b59c:	08db      	lsrs	r3, r3, #3
 800b59e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	fb02 f303 	mul.w	r3, r2, r3
 800b5a8:	ee07 3a90 	vmov	s15, r3
 800b5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8111 	beq.w	800b7de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	f000 8083 	beq.w	800b6ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	f200 80a1 	bhi.w	800b70e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d003      	beq.n	800b5da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d056      	beq.n	800b686 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b5d8:	e099      	b.n	800b70e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5da:	4b88      	ldr	r3, [pc, #544]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0320 	and.w	r3, r3, #32
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d02d      	beq.n	800b642 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5e6:	4b85      	ldr	r3, [pc, #532]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	08db      	lsrs	r3, r3, #3
 800b5ec:	f003 0303 	and.w	r3, r3, #3
 800b5f0:	4a83      	ldr	r2, [pc, #524]	; (800b800 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	ee07 3a90 	vmov	s15, r3
 800b608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b60c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b610:	4b7a      	ldr	r3, [pc, #488]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b618:	ee07 3a90 	vmov	s15, r3
 800b61c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b620:	ed97 6a03 	vldr	s12, [r7, #12]
 800b624:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b62c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b63c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b640:	e087      	b.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	ee07 3a90 	vmov	s15, r3
 800b648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b654:	4b69      	ldr	r3, [pc, #420]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b65c:	ee07 3a90 	vmov	s15, r3
 800b660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b664:	ed97 6a03 	vldr	s12, [r7, #12]
 800b668:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b66c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b67c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b684:	e065      	b.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	ee07 3a90 	vmov	s15, r3
 800b68c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b690:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b80c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b698:	4b58      	ldr	r3, [pc, #352]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6c8:	e043      	b.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	ee07 3a90 	vmov	s15, r3
 800b6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b810 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b6d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6dc:	4b47      	ldr	r3, [pc, #284]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b704:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b70c:	e021      	b.n	800b752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b718:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b71c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b720:	4b36      	ldr	r3, [pc, #216]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b728:	ee07 3a90 	vmov	s15, r3
 800b72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b730:	ed97 6a03 	vldr	s12, [r7, #12]
 800b734:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b750:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b752:	4b2a      	ldr	r3, [pc, #168]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	0a5b      	lsrs	r3, r3, #9
 800b758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b75c:	ee07 3a90 	vmov	s15, r3
 800b760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b76c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b778:	ee17 2a90 	vmov	r2, s15
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b780:	4b1e      	ldr	r3, [pc, #120]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b784:	0c1b      	lsrs	r3, r3, #16
 800b786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7a6:	ee17 2a90 	vmov	r2, s15
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b7ae:	4b13      	ldr	r3, [pc, #76]	; (800b7fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	0e1b      	lsrs	r3, r3, #24
 800b7b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7b8:	ee07 3a90 	vmov	s15, r3
 800b7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7d4:	ee17 2a90 	vmov	r2, s15
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b7dc:	e008      	b.n	800b7f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	609a      	str	r2, [r3, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	3724      	adds	r7, #36	; 0x24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	58024400 	.word	0x58024400
 800b800:	03d09000 	.word	0x03d09000
 800b804:	46000000 	.word	0x46000000
 800b808:	4c742400 	.word	0x4c742400
 800b80c:	4a742400 	.word	0x4a742400
 800b810:	4af42400 	.word	0x4af42400

0800b814 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b822:	4b53      	ldr	r3, [pc, #332]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d101      	bne.n	800b832 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e099      	b.n	800b966 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b832:	4b4f      	ldr	r3, [pc, #316]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a4e      	ldr	r2, [pc, #312]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b83e:	f7f7 fbc5 	bl	8002fcc <HAL_GetTick>
 800b842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b844:	e008      	b.n	800b858 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b846:	f7f7 fbc1 	bl	8002fcc <HAL_GetTick>
 800b84a:	4602      	mov	r2, r0
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	2b02      	cmp	r3, #2
 800b852:	d901      	bls.n	800b858 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e086      	b.n	800b966 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b858:	4b45      	ldr	r3, [pc, #276]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f0      	bne.n	800b846 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b864:	4b42      	ldr	r3, [pc, #264]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	031b      	lsls	r3, r3, #12
 800b872:	493f      	ldr	r1, [pc, #252]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b874:	4313      	orrs	r3, r2
 800b876:	628b      	str	r3, [r1, #40]	; 0x28
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	025b      	lsls	r3, r3, #9
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	3b01      	subs	r3, #1
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b89a:	431a      	orrs	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	061b      	lsls	r3, r3, #24
 800b8a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8a8:	4931      	ldr	r1, [pc, #196]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b8ae:	4b30      	ldr	r3, [pc, #192]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	492d      	ldr	r1, [pc, #180]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b8c0:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	f023 0220 	bic.w	r2, r3, #32
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	4928      	ldr	r1, [pc, #160]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b8d2:	4b27      	ldr	r3, [pc, #156]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	4a26      	ldr	r2, [pc, #152]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8d8:	f023 0310 	bic.w	r3, r3, #16
 800b8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8e2:	4b24      	ldr	r3, [pc, #144]	; (800b974 <RCCEx_PLL2_Config+0x160>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	69d2      	ldr	r2, [r2, #28]
 800b8ea:	00d2      	lsls	r2, r2, #3
 800b8ec:	4920      	ldr	r1, [pc, #128]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b8f2:	4b1f      	ldr	r3, [pc, #124]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b8f8:	f043 0310 	orr.w	r3, r3, #16
 800b8fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b904:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	4a19      	ldr	r2, [pc, #100]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b90a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b90e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b910:	e00f      	b.n	800b932 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d106      	bne.n	800b926 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b918:	4b15      	ldr	r3, [pc, #84]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4a14      	ldr	r2, [pc, #80]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b91e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b922:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b924:	e005      	b.n	800b932 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b926:	4b12      	ldr	r3, [pc, #72]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	4a11      	ldr	r2, [pc, #68]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b92c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b932:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a0e      	ldr	r2, [pc, #56]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b93e:	f7f7 fb45 	bl	8002fcc <HAL_GetTick>
 800b942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b944:	e008      	b.n	800b958 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b946:	f7f7 fb41 	bl	8002fcc <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e006      	b.n	800b966 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <RCCEx_PLL2_Config+0x15c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0f0      	beq.n	800b946 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b964:	7bfb      	ldrb	r3, [r7, #15]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	58024400 	.word	0x58024400
 800b974:	ffff0007 	.word	0xffff0007

0800b978 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b986:	4b53      	ldr	r3, [pc, #332]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d101      	bne.n	800b996 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e099      	b.n	800baca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b996:	4b4f      	ldr	r3, [pc, #316]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a4e      	ldr	r2, [pc, #312]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b99c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9a2:	f7f7 fb13 	bl	8002fcc <HAL_GetTick>
 800b9a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9a8:	e008      	b.n	800b9bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9aa:	f7f7 fb0f 	bl	8002fcc <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d901      	bls.n	800b9bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e086      	b.n	800baca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9bc:	4b45      	ldr	r3, [pc, #276]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1f0      	bne.n	800b9aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b9c8:	4b42      	ldr	r3, [pc, #264]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	051b      	lsls	r3, r3, #20
 800b9d6:	493f      	ldr	r1, [pc, #252]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	628b      	str	r3, [r1, #40]	; 0x28
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	025b      	lsls	r3, r3, #9
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	431a      	orrs	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	041b      	lsls	r3, r3, #16
 800b9fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	061b      	lsls	r3, r3, #24
 800ba08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba0c:	4931      	ldr	r1, [pc, #196]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba12:	4b30      	ldr	r3, [pc, #192]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	492d      	ldr	r1, [pc, #180]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba24:	4b2b      	ldr	r3, [pc, #172]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	4928      	ldr	r1, [pc, #160]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba32:	4313      	orrs	r3, r2
 800ba34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba36:	4b27      	ldr	r3, [pc, #156]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	4a26      	ldr	r2, [pc, #152]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba42:	4b24      	ldr	r3, [pc, #144]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba46:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <RCCEx_PLL3_Config+0x160>)
 800ba48:	4013      	ands	r3, r2
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	69d2      	ldr	r2, [r2, #28]
 800ba4e:	00d2      	lsls	r2, r2, #3
 800ba50:	4920      	ldr	r1, [pc, #128]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba56:	4b1f      	ldr	r3, [pc, #124]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	4a1e      	ldr	r2, [pc, #120]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba68:	4b1a      	ldr	r3, [pc, #104]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	4a19      	ldr	r2, [pc, #100]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ba72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba74:	e00f      	b.n	800ba96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d106      	bne.n	800ba8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba7c:	4b15      	ldr	r3, [pc, #84]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba80:	4a14      	ldr	r2, [pc, #80]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba88:	e005      	b.n	800ba96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba8a:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	4a11      	ldr	r2, [pc, #68]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba96:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a0e      	ldr	r2, [pc, #56]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800ba9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baa2:	f7f7 fa93 	bl	8002fcc <HAL_GetTick>
 800baa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800baa8:	e008      	b.n	800babc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800baaa:	f7f7 fa8f 	bl	8002fcc <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d901      	bls.n	800babc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e006      	b.n	800baca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800babc:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <RCCEx_PLL3_Config+0x15c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d0f0      	beq.n	800baaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	58024400 	.word	0x58024400
 800bad8:	ffff0007 	.word	0xffff0007

0800badc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e049      	b.n	800bb82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d106      	bne.n	800bb08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7f6 fd72 	bl	80025ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2202      	movs	r2, #2
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f001 f85e 	bl	800cbdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d001      	beq.n	800bba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e054      	b.n	800bc4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f042 0201 	orr.w	r2, r2, #1
 800bbba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a26      	ldr	r2, [pc, #152]	; (800bc5c <HAL_TIM_Base_Start_IT+0xd0>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d022      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbce:	d01d      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a22      	ldr	r2, [pc, #136]	; (800bc60 <HAL_TIM_Base_Start_IT+0xd4>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d018      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a21      	ldr	r2, [pc, #132]	; (800bc64 <HAL_TIM_Base_Start_IT+0xd8>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d013      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a1f      	ldr	r2, [pc, #124]	; (800bc68 <HAL_TIM_Base_Start_IT+0xdc>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00e      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a1e      	ldr	r2, [pc, #120]	; (800bc6c <HAL_TIM_Base_Start_IT+0xe0>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d009      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a1c      	ldr	r2, [pc, #112]	; (800bc70 <HAL_TIM_Base_Start_IT+0xe4>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d004      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x80>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1b      	ldr	r2, [pc, #108]	; (800bc74 <HAL_TIM_Base_Start_IT+0xe8>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d115      	bne.n	800bc38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689a      	ldr	r2, [r3, #8]
 800bc12:	4b19      	ldr	r3, [pc, #100]	; (800bc78 <HAL_TIM_Base_Start_IT+0xec>)
 800bc14:	4013      	ands	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2b06      	cmp	r3, #6
 800bc1c:	d015      	beq.n	800bc4a <HAL_TIM_Base_Start_IT+0xbe>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc24:	d011      	beq.n	800bc4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f042 0201 	orr.w	r2, r2, #1
 800bc34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc36:	e008      	b.n	800bc4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f042 0201 	orr.w	r2, r2, #1
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	e000      	b.n	800bc4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	40010000 	.word	0x40010000
 800bc60:	40000400 	.word	0x40000400
 800bc64:	40000800 	.word	0x40000800
 800bc68:	40000c00 	.word	0x40000c00
 800bc6c:	40010400 	.word	0x40010400
 800bc70:	40001800 	.word	0x40001800
 800bc74:	40014000 	.word	0x40014000
 800bc78:	00010007 	.word	0x00010007

0800bc7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e049      	b.n	800bd22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d106      	bne.n	800bca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f841 	bl	800bd2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f000 ff8e 	bl	800cbdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
	...

0800bd40 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <HAL_TIM_PWM_Start_DMA+0x2c>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	bf0c      	ite	eq
 800bd64:	2301      	moveq	r3, #1
 800bd66:	2300      	movne	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	e03c      	b.n	800bde6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d109      	bne.n	800bd86 <HAL_TIM_PWM_Start_DMA+0x46>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	bf0c      	ite	eq
 800bd7e:	2301      	moveq	r3, #1
 800bd80:	2300      	movne	r3, #0
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	e02f      	b.n	800bde6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d109      	bne.n	800bda0 <HAL_TIM_PWM_Start_DMA+0x60>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	bf0c      	ite	eq
 800bd98:	2301      	moveq	r3, #1
 800bd9a:	2300      	movne	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	e022      	b.n	800bde6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2b0c      	cmp	r3, #12
 800bda4:	d109      	bne.n	800bdba <HAL_TIM_PWM_Start_DMA+0x7a>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	bf0c      	ite	eq
 800bdb2:	2301      	moveq	r3, #1
 800bdb4:	2300      	movne	r3, #0
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	e015      	b.n	800bde6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b10      	cmp	r3, #16
 800bdbe:	d109      	bne.n	800bdd4 <HAL_TIM_PWM_Start_DMA+0x94>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	bf0c      	ite	eq
 800bdcc:	2301      	moveq	r3, #1
 800bdce:	2300      	movne	r3, #0
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	e008      	b.n	800bde6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	bf0c      	ite	eq
 800bde0:	2301      	moveq	r3, #1
 800bde2:	2300      	movne	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800bdea:	2302      	movs	r3, #2
 800bdec:	e1b0      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d109      	bne.n	800be08 <HAL_TIM_PWM_Start_DMA+0xc8>
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	bf0c      	ite	eq
 800be00:	2301      	moveq	r3, #1
 800be02:	2300      	movne	r3, #0
 800be04:	b2db      	uxtb	r3, r3
 800be06:	e03c      	b.n	800be82 <HAL_TIM_PWM_Start_DMA+0x142>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d109      	bne.n	800be22 <HAL_TIM_PWM_Start_DMA+0xe2>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be14:	b2db      	uxtb	r3, r3
 800be16:	2b01      	cmp	r3, #1
 800be18:	bf0c      	ite	eq
 800be1a:	2301      	moveq	r3, #1
 800be1c:	2300      	movne	r3, #0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	e02f      	b.n	800be82 <HAL_TIM_PWM_Start_DMA+0x142>
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b08      	cmp	r3, #8
 800be26:	d109      	bne.n	800be3c <HAL_TIM_PWM_Start_DMA+0xfc>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b01      	cmp	r3, #1
 800be32:	bf0c      	ite	eq
 800be34:	2301      	moveq	r3, #1
 800be36:	2300      	movne	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	e022      	b.n	800be82 <HAL_TIM_PWM_Start_DMA+0x142>
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b0c      	cmp	r3, #12
 800be40:	d109      	bne.n	800be56 <HAL_TIM_PWM_Start_DMA+0x116>
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	bf0c      	ite	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	2300      	movne	r3, #0
 800be52:	b2db      	uxtb	r3, r3
 800be54:	e015      	b.n	800be82 <HAL_TIM_PWM_Start_DMA+0x142>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b10      	cmp	r3, #16
 800be5a:	d109      	bne.n	800be70 <HAL_TIM_PWM_Start_DMA+0x130>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b01      	cmp	r3, #1
 800be66:	bf0c      	ite	eq
 800be68:	2301      	moveq	r3, #1
 800be6a:	2300      	movne	r3, #0
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	e008      	b.n	800be82 <HAL_TIM_PWM_Start_DMA+0x142>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b01      	cmp	r3, #1
 800be7a:	bf0c      	ite	eq
 800be7c:	2301      	moveq	r3, #1
 800be7e:	2300      	movne	r3, #0
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d034      	beq.n	800bef0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <HAL_TIM_PWM_Start_DMA+0x152>
 800be8c:	887b      	ldrh	r3, [r7, #2]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e15c      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d104      	bne.n	800bea6 <HAL_TIM_PWM_Start_DMA+0x166>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea4:	e026      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d104      	bne.n	800beb6 <HAL_TIM_PWM_Start_DMA+0x176>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2202      	movs	r2, #2
 800beb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beb4:	e01e      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b08      	cmp	r3, #8
 800beba:	d104      	bne.n	800bec6 <HAL_TIM_PWM_Start_DMA+0x186>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2202      	movs	r2, #2
 800bec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bec4:	e016      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2b0c      	cmp	r3, #12
 800beca:	d104      	bne.n	800bed6 <HAL_TIM_PWM_Start_DMA+0x196>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bed4:	e00e      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	2b10      	cmp	r3, #16
 800beda:	d104      	bne.n	800bee6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2202      	movs	r2, #2
 800bee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bee4:	e006      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2202      	movs	r2, #2
 800beea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800beee:	e001      	b.n	800bef4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e12d      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b0c      	cmp	r3, #12
 800bef8:	f200 80ae 	bhi.w	800c058 <HAL_TIM_PWM_Start_DMA+0x318>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf39 	.word	0x0800bf39
 800bf08:	0800c059 	.word	0x0800c059
 800bf0c:	0800c059 	.word	0x0800c059
 800bf10:	0800c059 	.word	0x0800c059
 800bf14:	0800bf81 	.word	0x0800bf81
 800bf18:	0800c059 	.word	0x0800c059
 800bf1c:	0800c059 	.word	0x0800c059
 800bf20:	0800c059 	.word	0x0800c059
 800bf24:	0800bfc9 	.word	0x0800bfc9
 800bf28:	0800c059 	.word	0x0800c059
 800bf2c:	0800c059 	.word	0x0800c059
 800bf30:	0800c059 	.word	0x0800c059
 800bf34:	0800c011 	.word	0x0800c011
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3c:	4a86      	ldr	r2, [pc, #536]	; (800c158 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bf3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf44:	4a85      	ldr	r2, [pc, #532]	; (800c15c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bf46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	4a84      	ldr	r2, [pc, #528]	; (800c160 <HAL_TIM_PWM_Start_DMA+0x420>)
 800bf4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3334      	adds	r3, #52	; 0x34
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	887b      	ldrh	r3, [r7, #2]
 800bf60:	f7f8 ffc6 	bl	8004ef0 <HAL_DMA_Start_IT>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e0f0      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68da      	ldr	r2, [r3, #12]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf7c:	60da      	str	r2, [r3, #12]
      break;
 800bf7e:	e06e      	b.n	800c05e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf84:	4a74      	ldr	r2, [pc, #464]	; (800c158 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bf86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8c:	4a73      	ldr	r2, [pc, #460]	; (800c15c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bf8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf94:	4a72      	ldr	r2, [pc, #456]	; (800c160 <HAL_TIM_PWM_Start_DMA+0x420>)
 800bf96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bf9c:	6879      	ldr	r1, [r7, #4]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3338      	adds	r3, #56	; 0x38
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	887b      	ldrh	r3, [r7, #2]
 800bfa8:	f7f8 ffa2 	bl	8004ef0 <HAL_DMA_Start_IT>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e0cc      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bfc4:	60da      	str	r2, [r3, #12]
      break;
 800bfc6:	e04a      	b.n	800c05e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4a62      	ldr	r2, [pc, #392]	; (800c158 <HAL_TIM_PWM_Start_DMA+0x418>)
 800bfce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	4a61      	ldr	r2, [pc, #388]	; (800c15c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800bfd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfdc:	4a60      	ldr	r2, [pc, #384]	; (800c160 <HAL_TIM_PWM_Start_DMA+0x420>)
 800bfde:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	333c      	adds	r3, #60	; 0x3c
 800bfec:	461a      	mov	r2, r3
 800bfee:	887b      	ldrh	r3, [r7, #2]
 800bff0:	f7f8 ff7e 	bl	8004ef0 <HAL_DMA_Start_IT>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e0a8      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68da      	ldr	r2, [r3, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c00c:	60da      	str	r2, [r3, #12]
      break;
 800c00e:	e026      	b.n	800c05e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c014:	4a50      	ldr	r2, [pc, #320]	; (800c158 <HAL_TIM_PWM_Start_DMA+0x418>)
 800c016:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01c:	4a4f      	ldr	r2, [pc, #316]	; (800c15c <HAL_TIM_PWM_Start_DMA+0x41c>)
 800c01e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c024:	4a4e      	ldr	r2, [pc, #312]	; (800c160 <HAL_TIM_PWM_Start_DMA+0x420>)
 800c026:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3340      	adds	r3, #64	; 0x40
 800c034:	461a      	mov	r2, r3
 800c036:	887b      	ldrh	r3, [r7, #2]
 800c038:	f7f8 ff5a 	bl	8004ef0 <HAL_DMA_Start_IT>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d001      	beq.n	800c046 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e084      	b.n	800c150 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c054:	60da      	str	r2, [r3, #12]
      break;
 800c056:	e002      	b.n	800c05e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	75fb      	strb	r3, [r7, #23]
      break;
 800c05c:	bf00      	nop
  }

  if (status == HAL_OK)
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d174      	bne.n	800c14e <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2201      	movs	r2, #1
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f001 f9c3 	bl	800d3f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a3b      	ldr	r2, [pc, #236]	; (800c164 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d013      	beq.n	800c0a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a39      	ldr	r2, [pc, #228]	; (800c168 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d00e      	beq.n	800c0a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a38      	ldr	r2, [pc, #224]	; (800c16c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d009      	beq.n	800c0a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a36      	ldr	r2, [pc, #216]	; (800c170 <HAL_TIM_PWM_Start_DMA+0x430>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d004      	beq.n	800c0a4 <HAL_TIM_PWM_Start_DMA+0x364>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a35      	ldr	r2, [pc, #212]	; (800c174 <HAL_TIM_PWM_Start_DMA+0x434>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d101      	bne.n	800c0a8 <HAL_TIM_PWM_Start_DMA+0x368>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e000      	b.n	800c0aa <HAL_TIM_PWM_Start_DMA+0x36a>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d007      	beq.n	800c0be <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a28      	ldr	r2, [pc, #160]	; (800c164 <HAL_TIM_PWM_Start_DMA+0x424>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d022      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0d0:	d01d      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a28      	ldr	r2, [pc, #160]	; (800c178 <HAL_TIM_PWM_Start_DMA+0x438>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d018      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a26      	ldr	r2, [pc, #152]	; (800c17c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d013      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a25      	ldr	r2, [pc, #148]	; (800c180 <HAL_TIM_PWM_Start_DMA+0x440>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d00e      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a1c      	ldr	r2, [pc, #112]	; (800c168 <HAL_TIM_PWM_Start_DMA+0x428>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d009      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a21      	ldr	r2, [pc, #132]	; (800c184 <HAL_TIM_PWM_Start_DMA+0x444>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d004      	beq.n	800c10e <HAL_TIM_PWM_Start_DMA+0x3ce>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a18      	ldr	r2, [pc, #96]	; (800c16c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d115      	bne.n	800c13a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	4b1c      	ldr	r3, [pc, #112]	; (800c188 <HAL_TIM_PWM_Start_DMA+0x448>)
 800c116:	4013      	ands	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b06      	cmp	r3, #6
 800c11e:	d015      	beq.n	800c14c <HAL_TIM_PWM_Start_DMA+0x40c>
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c126:	d011      	beq.n	800c14c <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f042 0201 	orr.w	r2, r2, #1
 800c136:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c138:	e008      	b.n	800c14c <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0201 	orr.w	r2, r2, #1
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e000      	b.n	800c14e <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c14c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	0800cacb 	.word	0x0800cacb
 800c15c:	0800cb73 	.word	0x0800cb73
 800c160:	0800ca39 	.word	0x0800ca39
 800c164:	40010000 	.word	0x40010000
 800c168:	40010400 	.word	0x40010400
 800c16c:	40014000 	.word	0x40014000
 800c170:	40014400 	.word	0x40014400
 800c174:	40014800 	.word	0x40014800
 800c178:	40000400 	.word	0x40000400
 800c17c:	40000800 	.word	0x40000800
 800c180:	40000c00 	.word	0x40000c00
 800c184:	40001800 	.word	0x40001800
 800c188:	00010007 	.word	0x00010007

0800c18c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	2b0c      	cmp	r3, #12
 800c19e:	d855      	bhi.n	800c24c <HAL_TIM_PWM_Stop_DMA+0xc0>
 800c1a0:	a201      	add	r2, pc, #4	; (adr r2, 800c1a8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800c1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a6:	bf00      	nop
 800c1a8:	0800c1dd 	.word	0x0800c1dd
 800c1ac:	0800c24d 	.word	0x0800c24d
 800c1b0:	0800c24d 	.word	0x0800c24d
 800c1b4:	0800c24d 	.word	0x0800c24d
 800c1b8:	0800c1f9 	.word	0x0800c1f9
 800c1bc:	0800c24d 	.word	0x0800c24d
 800c1c0:	0800c24d 	.word	0x0800c24d
 800c1c4:	0800c24d 	.word	0x0800c24d
 800c1c8:	0800c215 	.word	0x0800c215
 800c1cc:	0800c24d 	.word	0x0800c24d
 800c1d0:	0800c24d 	.word	0x0800c24d
 800c1d4:	0800c24d 	.word	0x0800c24d
 800c1d8:	0800c231 	.word	0x0800c231
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c1ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7f9 fc05 	bl	8005a00 <HAL_DMA_Abort_IT>
      break;
 800c1f6:	e02c      	b.n	800c252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c206:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7f9 fbf7 	bl	8005a00 <HAL_DMA_Abort_IT>
      break;
 800c212:	e01e      	b.n	800c252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68da      	ldr	r2, [r3, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c222:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f9 fbe9 	bl	8005a00 <HAL_DMA_Abort_IT>
      break;
 800c22e:	e010      	b.n	800c252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c23e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c244:	4618      	mov	r0, r3
 800c246:	f7f9 fbdb 	bl	8005a00 <HAL_DMA_Abort_IT>
      break;
 800c24a:	e002      	b.n	800c252 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	73fb      	strb	r3, [r7, #15]
      break;
 800c250:	bf00      	nop
  }

  if (status == HAL_OK)
 800c252:	7bfb      	ldrb	r3, [r7, #15]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f040 8081 	bne.w	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2200      	movs	r2, #0
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f001 f8c8 	bl	800d3f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a3e      	ldr	r2, [pc, #248]	; (800c368 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d013      	beq.n	800c29a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a3d      	ldr	r2, [pc, #244]	; (800c36c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00e      	beq.n	800c29a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a3b      	ldr	r2, [pc, #236]	; (800c370 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d009      	beq.n	800c29a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a3a      	ldr	r2, [pc, #232]	; (800c374 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d004      	beq.n	800c29a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a38      	ldr	r2, [pc, #224]	; (800c378 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d101      	bne.n	800c29e <HAL_TIM_PWM_Stop_DMA+0x112>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e000      	b.n	800c2a0 <HAL_TIM_PWM_Stop_DMA+0x114>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d017      	beq.n	800c2d4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6a1a      	ldr	r2, [r3, #32]
 800c2aa:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10f      	bne.n	800c2d4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6a1a      	ldr	r2, [r3, #32]
 800c2ba:	f240 4344 	movw	r3, #1092	; 0x444
 800c2be:	4013      	ands	r3, r2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d107      	bne.n	800c2d4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6a1a      	ldr	r2, [r3, #32]
 800c2da:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10f      	bne.n	800c304 <HAL_TIM_PWM_Stop_DMA+0x178>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	6a1a      	ldr	r2, [r3, #32]
 800c2ea:	f240 4344 	movw	r3, #1092	; 0x444
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d107      	bne.n	800c304 <HAL_TIM_PWM_Stop_DMA+0x178>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0201 	bic.w	r2, r2, #1
 800c302:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d104      	bne.n	800c314 <HAL_TIM_PWM_Stop_DMA+0x188>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c312:	e023      	b.n	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b04      	cmp	r3, #4
 800c318:	d104      	bne.n	800c324 <HAL_TIM_PWM_Stop_DMA+0x198>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c322:	e01b      	b.n	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b08      	cmp	r3, #8
 800c328:	d104      	bne.n	800c334 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2201      	movs	r2, #1
 800c32e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c332:	e013      	b.n	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b0c      	cmp	r3, #12
 800c338:	d104      	bne.n	800c344 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c342:	e00b      	b.n	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b10      	cmp	r3, #16
 800c348:	d104      	bne.n	800c354 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c352:	e003      	b.n	800c35c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	40010000 	.word	0x40010000
 800c36c:	40010400 	.word	0x40010400
 800c370:	40014000 	.word	0x40014000
 800c374:	40014400 	.word	0x40014400
 800c378:	40014800 	.word	0x40014800

0800c37c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	f003 0302 	and.w	r3, r3, #2
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d122      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d11b      	bne.n	800c3d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f06f 0202 	mvn.w	r2, #2
 800c3a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	f003 0303 	and.w	r3, r3, #3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d003      	beq.n	800c3c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fb12 	bl	800c9e8 <HAL_TIM_IC_CaptureCallback>
 800c3c4:	e005      	b.n	800c3d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fb04 	bl	800c9d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7f4 fd11 	bl	8000df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	f003 0304 	and.w	r3, r3, #4
 800c3e2:	2b04      	cmp	r3, #4
 800c3e4:	d122      	bne.n	800c42c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	f003 0304 	and.w	r3, r3, #4
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	d11b      	bne.n	800c42c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f06f 0204 	mvn.w	r2, #4
 800c3fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2202      	movs	r2, #2
 800c402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fae8 	bl	800c9e8 <HAL_TIM_IC_CaptureCallback>
 800c418:	e005      	b.n	800c426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fada 	bl	800c9d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7f4 fce7 	bl	8000df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	f003 0308 	and.w	r3, r3, #8
 800c436:	2b08      	cmp	r3, #8
 800c438:	d122      	bne.n	800c480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	f003 0308 	and.w	r3, r3, #8
 800c444:	2b08      	cmp	r3, #8
 800c446:	d11b      	bne.n	800c480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f06f 0208 	mvn.w	r2, #8
 800c450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2204      	movs	r2, #4
 800c456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d003      	beq.n	800c46e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fabe 	bl	800c9e8 <HAL_TIM_IC_CaptureCallback>
 800c46c:	e005      	b.n	800c47a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fab0 	bl	800c9d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7f4 fcbd 	bl	8000df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	f003 0310 	and.w	r3, r3, #16
 800c48a:	2b10      	cmp	r3, #16
 800c48c:	d122      	bne.n	800c4d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	f003 0310 	and.w	r3, r3, #16
 800c498:	2b10      	cmp	r3, #16
 800c49a:	d11b      	bne.n	800c4d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f06f 0210 	mvn.w	r2, #16
 800c4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2208      	movs	r2, #8
 800c4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d003      	beq.n	800c4c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fa94 	bl	800c9e8 <HAL_TIM_IC_CaptureCallback>
 800c4c0:	e005      	b.n	800c4ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fa86 	bl	800c9d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7f4 fc93 	bl	8000df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d10e      	bne.n	800c500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d107      	bne.n	800c500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f06f 0201 	mvn.w	r2, #1
 800c4f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7f4 fc8c 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c50a:	2b80      	cmp	r3, #128	; 0x80
 800c50c:	d10e      	bne.n	800c52c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c518:	2b80      	cmp	r3, #128	; 0x80
 800c51a:	d107      	bne.n	800c52c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f001 f824 	bl	800d574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	691b      	ldr	r3, [r3, #16]
 800c532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53a:	d10e      	bne.n	800c55a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c546:	2b80      	cmp	r3, #128	; 0x80
 800c548:	d107      	bne.n	800c55a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f001 f817 	bl	800d588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c564:	2b40      	cmp	r3, #64	; 0x40
 800c566:	d10e      	bne.n	800c586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c572:	2b40      	cmp	r3, #64	; 0x40
 800c574:	d107      	bne.n	800c586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa45 	bl	800ca10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b20      	cmp	r3, #32
 800c592:	d10e      	bne.n	800c5b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f003 0320 	and.w	r3, r3, #32
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d107      	bne.n	800c5b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f06f 0220 	mvn.w	r2, #32
 800c5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 ffd7 	bl	800d560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5b2:	bf00      	nop
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e0ff      	b.n	800c7da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b14      	cmp	r3, #20
 800c5e6:	f200 80f0 	bhi.w	800c7ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c5ea:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c645 	.word	0x0800c645
 800c5f4:	0800c7cb 	.word	0x0800c7cb
 800c5f8:	0800c7cb 	.word	0x0800c7cb
 800c5fc:	0800c7cb 	.word	0x0800c7cb
 800c600:	0800c685 	.word	0x0800c685
 800c604:	0800c7cb 	.word	0x0800c7cb
 800c608:	0800c7cb 	.word	0x0800c7cb
 800c60c:	0800c7cb 	.word	0x0800c7cb
 800c610:	0800c6c7 	.word	0x0800c6c7
 800c614:	0800c7cb 	.word	0x0800c7cb
 800c618:	0800c7cb 	.word	0x0800c7cb
 800c61c:	0800c7cb 	.word	0x0800c7cb
 800c620:	0800c707 	.word	0x0800c707
 800c624:	0800c7cb 	.word	0x0800c7cb
 800c628:	0800c7cb 	.word	0x0800c7cb
 800c62c:	0800c7cb 	.word	0x0800c7cb
 800c630:	0800c749 	.word	0x0800c749
 800c634:	0800c7cb 	.word	0x0800c7cb
 800c638:	0800c7cb 	.word	0x0800c7cb
 800c63c:	0800c7cb 	.word	0x0800c7cb
 800c640:	0800c789 	.word	0x0800c789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fb60 	bl	800cd10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0208 	orr.w	r2, r2, #8
 800c65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	699a      	ldr	r2, [r3, #24]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0204 	bic.w	r2, r2, #4
 800c66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6999      	ldr	r1, [r3, #24]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	691a      	ldr	r2, [r3, #16]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	619a      	str	r2, [r3, #24]
      break;
 800c682:	e0a5      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fbd0 	bl	800ce30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c69e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	699a      	ldr	r2, [r3, #24]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6999      	ldr	r1, [r3, #24]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	021a      	lsls	r2, r3, #8
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	619a      	str	r2, [r3, #24]
      break;
 800c6c4:	e084      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fc39 	bl	800cf44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f042 0208 	orr.w	r2, r2, #8
 800c6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69da      	ldr	r2, [r3, #28]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0204 	bic.w	r2, r2, #4
 800c6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69d9      	ldr	r1, [r3, #28]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	61da      	str	r2, [r3, #28]
      break;
 800c704:	e064      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fca1 	bl	800d054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69da      	ldr	r2, [r3, #28]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69d9      	ldr	r1, [r3, #28]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	021a      	lsls	r2, r3, #8
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	61da      	str	r2, [r3, #28]
      break;
 800c746:	e043      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fcea 	bl	800d128 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0208 	orr.w	r2, r2, #8
 800c762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0204 	bic.w	r2, r2, #4
 800c772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	691a      	ldr	r2, [r3, #16]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c786:	e023      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68b9      	ldr	r1, [r7, #8]
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fd2e 	bl	800d1f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	021a      	lsls	r2, r3, #8
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c7c8:	e002      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop

0800c7e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <HAL_TIM_ConfigClockSource+0x1c>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e0dc      	b.n	800c9ba <HAL_TIM_ConfigClockSource+0x1d6>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	4b6a      	ldr	r3, [pc, #424]	; (800c9c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c81c:	4013      	ands	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a64      	ldr	r2, [pc, #400]	; (800c9c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c836:	4293      	cmp	r3, r2
 800c838:	f000 80a9 	beq.w	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c83c:	4a62      	ldr	r2, [pc, #392]	; (800c9c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	f200 80ae 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c844:	4a61      	ldr	r2, [pc, #388]	; (800c9cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c846:	4293      	cmp	r3, r2
 800c848:	f000 80a1 	beq.w	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c84c:	4a5f      	ldr	r2, [pc, #380]	; (800c9cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	f200 80a6 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c854:	4a5e      	ldr	r2, [pc, #376]	; (800c9d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c856:	4293      	cmp	r3, r2
 800c858:	f000 8099 	beq.w	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c85c:	4a5c      	ldr	r2, [pc, #368]	; (800c9d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	f200 809e 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c864:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c868:	f000 8091 	beq.w	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c86c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c870:	f200 8096 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c878:	f000 8089 	beq.w	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c87c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c880:	f200 808e 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c888:	d03e      	beq.n	800c908 <HAL_TIM_ConfigClockSource+0x124>
 800c88a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c88e:	f200 8087 	bhi.w	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c896:	f000 8086 	beq.w	800c9a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800c89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c89e:	d87f      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8a0:	2b70      	cmp	r3, #112	; 0x70
 800c8a2:	d01a      	beq.n	800c8da <HAL_TIM_ConfigClockSource+0xf6>
 800c8a4:	2b70      	cmp	r3, #112	; 0x70
 800c8a6:	d87b      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8a8:	2b60      	cmp	r3, #96	; 0x60
 800c8aa:	d050      	beq.n	800c94e <HAL_TIM_ConfigClockSource+0x16a>
 800c8ac:	2b60      	cmp	r3, #96	; 0x60
 800c8ae:	d877      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8b0:	2b50      	cmp	r3, #80	; 0x50
 800c8b2:	d03c      	beq.n	800c92e <HAL_TIM_ConfigClockSource+0x14a>
 800c8b4:	2b50      	cmp	r3, #80	; 0x50
 800c8b6:	d873      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8b8:	2b40      	cmp	r3, #64	; 0x40
 800c8ba:	d058      	beq.n	800c96e <HAL_TIM_ConfigClockSource+0x18a>
 800c8bc:	2b40      	cmp	r3, #64	; 0x40
 800c8be:	d86f      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8c0:	2b30      	cmp	r3, #48	; 0x30
 800c8c2:	d064      	beq.n	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c8c4:	2b30      	cmp	r3, #48	; 0x30
 800c8c6:	d86b      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	d060      	beq.n	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	d867      	bhi.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d05c      	beq.n	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c8d4:	2b10      	cmp	r3, #16
 800c8d6:	d05a      	beq.n	800c98e <HAL_TIM_ConfigClockSource+0x1aa>
 800c8d8:	e062      	b.n	800c9a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6818      	ldr	r0, [r3, #0]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	6899      	ldr	r1, [r3, #8]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f000 fd65 	bl	800d3b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	609a      	str	r2, [r3, #8]
      break;
 800c906:	e04f      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	6899      	ldr	r1, [r3, #8]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f000 fd4e 	bl	800d3b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	689a      	ldr	r2, [r3, #8]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c92a:	609a      	str	r2, [r3, #8]
      break;
 800c92c:	e03c      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	6859      	ldr	r1, [r3, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	461a      	mov	r2, r3
 800c93c:	f000 fcbe 	bl	800d2bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	2150      	movs	r1, #80	; 0x50
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fd18 	bl	800d37c <TIM_ITRx_SetConfig>
      break;
 800c94c:	e02c      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6818      	ldr	r0, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	6859      	ldr	r1, [r3, #4]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	461a      	mov	r2, r3
 800c95c:	f000 fcdd 	bl	800d31a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2160      	movs	r1, #96	; 0x60
 800c966:	4618      	mov	r0, r3
 800c968:	f000 fd08 	bl	800d37c <TIM_ITRx_SetConfig>
      break;
 800c96c:	e01c      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	6859      	ldr	r1, [r3, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	461a      	mov	r2, r3
 800c97c:	f000 fc9e 	bl	800d2bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2140      	movs	r1, #64	; 0x40
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fcf8 	bl	800d37c <TIM_ITRx_SetConfig>
      break;
 800c98c:	e00c      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4619      	mov	r1, r3
 800c998:	4610      	mov	r0, r2
 800c99a:	f000 fcef 	bl	800d37c <TIM_ITRx_SetConfig>
      break;
 800c99e:	e003      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a4:	e000      	b.n	800c9a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c9a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	ffceff88 	.word	0xffceff88
 800c9c8:	00100040 	.word	0x00100040
 800c9cc:	00100030 	.word	0x00100030
 800c9d0:	00100020 	.word	0x00100020

0800c9d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d107      	bne.n	800ca60 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca5e:	e02a      	b.n	800cab6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d107      	bne.n	800ca7a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca78:	e01d      	b.n	800cab6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d107      	bne.n	800ca94 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2204      	movs	r2, #4
 800ca88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca92:	e010      	b.n	800cab6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d107      	bne.n	800caae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2208      	movs	r2, #8
 800caa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800caac:	e003      	b.n	800cab6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800cab6:	68f8      	ldr	r0, [r7, #12]
 800cab8:	f7ff ffb4 	bl	800ca24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2200      	movs	r2, #0
 800cac0:	771a      	strb	r2, [r3, #28]
}
 800cac2:	bf00      	nop
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b084      	sub	sp, #16
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d10b      	bne.n	800cafa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2201      	movs	r2, #1
 800cae6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d136      	bne.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caf8:	e031      	b.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d10b      	bne.n	800cb1c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2202      	movs	r2, #2
 800cb08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d125      	bne.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb1a:	e020      	b.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d10b      	bne.n	800cb3e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2204      	movs	r2, #4
 800cb2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d114      	bne.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb3c:	e00f      	b.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d10a      	bne.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2208      	movs	r2, #8
 800cb4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d103      	bne.n	800cb5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7f4 f948 	bl	8000df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	771a      	strb	r2, [r3, #28]
}
 800cb6a:	bf00      	nop
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b084      	sub	sp, #16
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d103      	bne.n	800cb92 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	771a      	strb	r2, [r3, #28]
 800cb90:	e019      	b.n	800cbc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d103      	bne.n	800cba4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2202      	movs	r2, #2
 800cba0:	771a      	strb	r2, [r3, #28]
 800cba2:	e010      	b.n	800cbc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d103      	bne.n	800cbb6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2204      	movs	r2, #4
 800cbb2:	771a      	strb	r2, [r3, #28]
 800cbb4:	e007      	b.n	800cbc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d102      	bne.n	800cbc6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2208      	movs	r2, #8
 800cbc4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f7ff ff18 	bl	800c9fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	771a      	strb	r2, [r3, #28]
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a40      	ldr	r2, [pc, #256]	; (800ccf0 <TIM_Base_SetConfig+0x114>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d013      	beq.n	800cc1c <TIM_Base_SetConfig+0x40>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbfa:	d00f      	beq.n	800cc1c <TIM_Base_SetConfig+0x40>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a3d      	ldr	r2, [pc, #244]	; (800ccf4 <TIM_Base_SetConfig+0x118>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d00b      	beq.n	800cc1c <TIM_Base_SetConfig+0x40>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a3c      	ldr	r2, [pc, #240]	; (800ccf8 <TIM_Base_SetConfig+0x11c>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d007      	beq.n	800cc1c <TIM_Base_SetConfig+0x40>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a3b      	ldr	r2, [pc, #236]	; (800ccfc <TIM_Base_SetConfig+0x120>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d003      	beq.n	800cc1c <TIM_Base_SetConfig+0x40>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a3a      	ldr	r2, [pc, #232]	; (800cd00 <TIM_Base_SetConfig+0x124>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d108      	bne.n	800cc2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a2f      	ldr	r2, [pc, #188]	; (800ccf0 <TIM_Base_SetConfig+0x114>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d01f      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc3c:	d01b      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a2c      	ldr	r2, [pc, #176]	; (800ccf4 <TIM_Base_SetConfig+0x118>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d017      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a2b      	ldr	r2, [pc, #172]	; (800ccf8 <TIM_Base_SetConfig+0x11c>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d013      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <TIM_Base_SetConfig+0x120>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d00f      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a29      	ldr	r2, [pc, #164]	; (800cd00 <TIM_Base_SetConfig+0x124>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d00b      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a28      	ldr	r2, [pc, #160]	; (800cd04 <TIM_Base_SetConfig+0x128>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d007      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a27      	ldr	r2, [pc, #156]	; (800cd08 <TIM_Base_SetConfig+0x12c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d003      	beq.n	800cc76 <TIM_Base_SetConfig+0x9a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a26      	ldr	r2, [pc, #152]	; (800cd0c <TIM_Base_SetConfig+0x130>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d108      	bne.n	800cc88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a10      	ldr	r2, [pc, #64]	; (800ccf0 <TIM_Base_SetConfig+0x114>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d00f      	beq.n	800ccd4 <TIM_Base_SetConfig+0xf8>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a12      	ldr	r2, [pc, #72]	; (800cd00 <TIM_Base_SetConfig+0x124>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d00b      	beq.n	800ccd4 <TIM_Base_SetConfig+0xf8>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4a11      	ldr	r2, [pc, #68]	; (800cd04 <TIM_Base_SetConfig+0x128>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d007      	beq.n	800ccd4 <TIM_Base_SetConfig+0xf8>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a10      	ldr	r2, [pc, #64]	; (800cd08 <TIM_Base_SetConfig+0x12c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d003      	beq.n	800ccd4 <TIM_Base_SetConfig+0xf8>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a0f      	ldr	r2, [pc, #60]	; (800cd0c <TIM_Base_SetConfig+0x130>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d103      	bne.n	800ccdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	691a      	ldr	r2, [r3, #16]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	615a      	str	r2, [r3, #20]
}
 800cce2:	bf00      	nop
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40000400 	.word	0x40000400
 800ccf8:	40000800 	.word	0x40000800
 800ccfc:	40000c00 	.word	0x40000c00
 800cd00:	40010400 	.word	0x40010400
 800cd04:	40014000 	.word	0x40014000
 800cd08:	40014400 	.word	0x40014400
 800cd0c:	40014800 	.word	0x40014800

0800cd10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a1b      	ldr	r3, [r3, #32]
 800cd1e:	f023 0201 	bic.w	r2, r3, #1
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a1b      	ldr	r3, [r3, #32]
 800cd2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	4b37      	ldr	r3, [pc, #220]	; (800ce18 <TIM_OC1_SetConfig+0x108>)
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f023 0303 	bic.w	r3, r3, #3
 800cd46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f023 0302 	bic.w	r3, r3, #2
 800cd58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a2d      	ldr	r2, [pc, #180]	; (800ce1c <TIM_OC1_SetConfig+0x10c>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d00f      	beq.n	800cd8c <TIM_OC1_SetConfig+0x7c>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a2c      	ldr	r2, [pc, #176]	; (800ce20 <TIM_OC1_SetConfig+0x110>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00b      	beq.n	800cd8c <TIM_OC1_SetConfig+0x7c>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a2b      	ldr	r2, [pc, #172]	; (800ce24 <TIM_OC1_SetConfig+0x114>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d007      	beq.n	800cd8c <TIM_OC1_SetConfig+0x7c>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a2a      	ldr	r2, [pc, #168]	; (800ce28 <TIM_OC1_SetConfig+0x118>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d003      	beq.n	800cd8c <TIM_OC1_SetConfig+0x7c>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a29      	ldr	r2, [pc, #164]	; (800ce2c <TIM_OC1_SetConfig+0x11c>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d10c      	bne.n	800cda6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	f023 0308 	bic.w	r3, r3, #8
 800cd92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f023 0304 	bic.w	r3, r3, #4
 800cda4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4a1c      	ldr	r2, [pc, #112]	; (800ce1c <TIM_OC1_SetConfig+0x10c>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d00f      	beq.n	800cdce <TIM_OC1_SetConfig+0xbe>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a1b      	ldr	r2, [pc, #108]	; (800ce20 <TIM_OC1_SetConfig+0x110>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d00b      	beq.n	800cdce <TIM_OC1_SetConfig+0xbe>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a1a      	ldr	r2, [pc, #104]	; (800ce24 <TIM_OC1_SetConfig+0x114>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d007      	beq.n	800cdce <TIM_OC1_SetConfig+0xbe>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <TIM_OC1_SetConfig+0x118>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d003      	beq.n	800cdce <TIM_OC1_SetConfig+0xbe>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a18      	ldr	r2, [pc, #96]	; (800ce2c <TIM_OC1_SetConfig+0x11c>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d111      	bne.n	800cdf2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	699b      	ldr	r3, [r3, #24]
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	621a      	str	r2, [r3, #32]
}
 800ce0c:	bf00      	nop
 800ce0e:	371c      	adds	r7, #28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	fffeff8f 	.word	0xfffeff8f
 800ce1c:	40010000 	.word	0x40010000
 800ce20:	40010400 	.word	0x40010400
 800ce24:	40014000 	.word	0x40014000
 800ce28:	40014400 	.word	0x40014400
 800ce2c:	40014800 	.word	0x40014800

0800ce30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	f023 0210 	bic.w	r2, r3, #16
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4b34      	ldr	r3, [pc, #208]	; (800cf2c <TIM_OC2_SetConfig+0xfc>)
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	021b      	lsls	r3, r3, #8
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f023 0320 	bic.w	r3, r3, #32
 800ce7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	689b      	ldr	r3, [r3, #8]
 800ce80:	011b      	lsls	r3, r3, #4
 800ce82:	697a      	ldr	r2, [r7, #20]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a29      	ldr	r2, [pc, #164]	; (800cf30 <TIM_OC2_SetConfig+0x100>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d003      	beq.n	800ce98 <TIM_OC2_SetConfig+0x68>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a28      	ldr	r2, [pc, #160]	; (800cf34 <TIM_OC2_SetConfig+0x104>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d10d      	bne.n	800ceb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	011b      	lsls	r3, r3, #4
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a1e      	ldr	r2, [pc, #120]	; (800cf30 <TIM_OC2_SetConfig+0x100>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d00f      	beq.n	800cedc <TIM_OC2_SetConfig+0xac>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a1d      	ldr	r2, [pc, #116]	; (800cf34 <TIM_OC2_SetConfig+0x104>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d00b      	beq.n	800cedc <TIM_OC2_SetConfig+0xac>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a1c      	ldr	r2, [pc, #112]	; (800cf38 <TIM_OC2_SetConfig+0x108>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d007      	beq.n	800cedc <TIM_OC2_SetConfig+0xac>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a1b      	ldr	r2, [pc, #108]	; (800cf3c <TIM_OC2_SetConfig+0x10c>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d003      	beq.n	800cedc <TIM_OC2_SetConfig+0xac>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a1a      	ldr	r2, [pc, #104]	; (800cf40 <TIM_OC2_SetConfig+0x110>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d113      	bne.n	800cf04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ceea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	693a      	ldr	r2, [r7, #16]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	699b      	ldr	r3, [r3, #24]
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	693a      	ldr	r2, [r7, #16]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	621a      	str	r2, [r3, #32]
}
 800cf1e:	bf00      	nop
 800cf20:	371c      	adds	r7, #28
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	feff8fff 	.word	0xfeff8fff
 800cf30:	40010000 	.word	0x40010000
 800cf34:	40010400 	.word	0x40010400
 800cf38:	40014000 	.word	0x40014000
 800cf3c:	40014400 	.word	0x40014400
 800cf40:	40014800 	.word	0x40014800

0800cf44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	4b33      	ldr	r3, [pc, #204]	; (800d03c <TIM_OC3_SetConfig+0xf8>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	021b      	lsls	r3, r3, #8
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a28      	ldr	r2, [pc, #160]	; (800d040 <TIM_OC3_SetConfig+0xfc>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d003      	beq.n	800cfaa <TIM_OC3_SetConfig+0x66>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a27      	ldr	r2, [pc, #156]	; (800d044 <TIM_OC3_SetConfig+0x100>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d10d      	bne.n	800cfc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	021b      	lsls	r3, r3, #8
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4a1d      	ldr	r2, [pc, #116]	; (800d040 <TIM_OC3_SetConfig+0xfc>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d00f      	beq.n	800cfee <TIM_OC3_SetConfig+0xaa>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a1c      	ldr	r2, [pc, #112]	; (800d044 <TIM_OC3_SetConfig+0x100>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d00b      	beq.n	800cfee <TIM_OC3_SetConfig+0xaa>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a1b      	ldr	r2, [pc, #108]	; (800d048 <TIM_OC3_SetConfig+0x104>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d007      	beq.n	800cfee <TIM_OC3_SetConfig+0xaa>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a1a      	ldr	r2, [pc, #104]	; (800d04c <TIM_OC3_SetConfig+0x108>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d003      	beq.n	800cfee <TIM_OC3_SetConfig+0xaa>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a19      	ldr	r2, [pc, #100]	; (800d050 <TIM_OC3_SetConfig+0x10c>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d113      	bne.n	800d016 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	011b      	lsls	r3, r3, #4
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	4313      	orrs	r3, r2
 800d008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	011b      	lsls	r3, r3, #4
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	4313      	orrs	r3, r2
 800d014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	621a      	str	r2, [r3, #32]
}
 800d030:	bf00      	nop
 800d032:	371c      	adds	r7, #28
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	fffeff8f 	.word	0xfffeff8f
 800d040:	40010000 	.word	0x40010000
 800d044:	40010400 	.word	0x40010400
 800d048:	40014000 	.word	0x40014000
 800d04c:	40014400 	.word	0x40014400
 800d050:	40014800 	.word	0x40014800

0800d054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d054:	b480      	push	{r7}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	69db      	ldr	r3, [r3, #28]
 800d07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4b24      	ldr	r3, [pc, #144]	; (800d110 <TIM_OC4_SetConfig+0xbc>)
 800d080:	4013      	ands	r3, r2
 800d082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	021b      	lsls	r3, r3, #8
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	4313      	orrs	r3, r2
 800d096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	031b      	lsls	r3, r3, #12
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a19      	ldr	r2, [pc, #100]	; (800d114 <TIM_OC4_SetConfig+0xc0>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d00f      	beq.n	800d0d4 <TIM_OC4_SetConfig+0x80>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a18      	ldr	r2, [pc, #96]	; (800d118 <TIM_OC4_SetConfig+0xc4>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d00b      	beq.n	800d0d4 <TIM_OC4_SetConfig+0x80>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a17      	ldr	r2, [pc, #92]	; (800d11c <TIM_OC4_SetConfig+0xc8>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d007      	beq.n	800d0d4 <TIM_OC4_SetConfig+0x80>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a16      	ldr	r2, [pc, #88]	; (800d120 <TIM_OC4_SetConfig+0xcc>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d003      	beq.n	800d0d4 <TIM_OC4_SetConfig+0x80>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a15      	ldr	r2, [pc, #84]	; (800d124 <TIM_OC4_SetConfig+0xd0>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d109      	bne.n	800d0e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	695b      	ldr	r3, [r3, #20]
 800d0e0:	019b      	lsls	r3, r3, #6
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	693a      	ldr	r2, [r7, #16]
 800d100:	621a      	str	r2, [r3, #32]
}
 800d102:	bf00      	nop
 800d104:	371c      	adds	r7, #28
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	feff8fff 	.word	0xfeff8fff
 800d114:	40010000 	.word	0x40010000
 800d118:	40010400 	.word	0x40010400
 800d11c:	40014000 	.word	0x40014000
 800d120:	40014400 	.word	0x40014400
 800d124:	40014800 	.word	0x40014800

0800d128 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d128:	b480      	push	{r7}
 800d12a:	b087      	sub	sp, #28
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4b21      	ldr	r3, [pc, #132]	; (800d1d8 <TIM_OC5_SetConfig+0xb0>)
 800d154:	4013      	ands	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	041b      	lsls	r3, r3, #16
 800d170:	693a      	ldr	r2, [r7, #16]
 800d172:	4313      	orrs	r3, r2
 800d174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a18      	ldr	r2, [pc, #96]	; (800d1dc <TIM_OC5_SetConfig+0xb4>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d00f      	beq.n	800d19e <TIM_OC5_SetConfig+0x76>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4a17      	ldr	r2, [pc, #92]	; (800d1e0 <TIM_OC5_SetConfig+0xb8>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d00b      	beq.n	800d19e <TIM_OC5_SetConfig+0x76>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4a16      	ldr	r2, [pc, #88]	; (800d1e4 <TIM_OC5_SetConfig+0xbc>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d007      	beq.n	800d19e <TIM_OC5_SetConfig+0x76>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	4a15      	ldr	r2, [pc, #84]	; (800d1e8 <TIM_OC5_SetConfig+0xc0>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d003      	beq.n	800d19e <TIM_OC5_SetConfig+0x76>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a14      	ldr	r2, [pc, #80]	; (800d1ec <TIM_OC5_SetConfig+0xc4>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d109      	bne.n	800d1b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	021b      	lsls	r3, r3, #8
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	697a      	ldr	r2, [r7, #20]
 800d1b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	685a      	ldr	r2, [r3, #4]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	621a      	str	r2, [r3, #32]
}
 800d1cc:	bf00      	nop
 800d1ce:	371c      	adds	r7, #28
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	fffeff8f 	.word	0xfffeff8f
 800d1dc:	40010000 	.word	0x40010000
 800d1e0:	40010400 	.word	0x40010400
 800d1e4:	40014000 	.word	0x40014000
 800d1e8:	40014400 	.word	0x40014400
 800d1ec:	40014800 	.word	0x40014800

0800d1f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	4b22      	ldr	r3, [pc, #136]	; (800d2a4 <TIM_OC6_SetConfig+0xb4>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	021b      	lsls	r3, r3, #8
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	4313      	orrs	r3, r2
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	051b      	lsls	r3, r3, #20
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a19      	ldr	r2, [pc, #100]	; (800d2a8 <TIM_OC6_SetConfig+0xb8>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d00f      	beq.n	800d268 <TIM_OC6_SetConfig+0x78>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a18      	ldr	r2, [pc, #96]	; (800d2ac <TIM_OC6_SetConfig+0xbc>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d00b      	beq.n	800d268 <TIM_OC6_SetConfig+0x78>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a17      	ldr	r2, [pc, #92]	; (800d2b0 <TIM_OC6_SetConfig+0xc0>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d007      	beq.n	800d268 <TIM_OC6_SetConfig+0x78>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a16      	ldr	r2, [pc, #88]	; (800d2b4 <TIM_OC6_SetConfig+0xc4>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d003      	beq.n	800d268 <TIM_OC6_SetConfig+0x78>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a15      	ldr	r2, [pc, #84]	; (800d2b8 <TIM_OC6_SetConfig+0xc8>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d109      	bne.n	800d27c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d26e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	029b      	lsls	r3, r3, #10
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	4313      	orrs	r3, r2
 800d27a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	621a      	str	r2, [r3, #32]
}
 800d296:	bf00      	nop
 800d298:	371c      	adds	r7, #28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	feff8fff 	.word	0xfeff8fff
 800d2a8:	40010000 	.word	0x40010000
 800d2ac:	40010400 	.word	0x40010400
 800d2b0:	40014000 	.word	0x40014000
 800d2b4:	40014400 	.word	0x40014400
 800d2b8:	40014800 	.word	0x40014800

0800d2bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6a1b      	ldr	r3, [r3, #32]
 800d2cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	f023 0201 	bic.w	r2, r3, #1
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	011b      	lsls	r3, r3, #4
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f023 030a 	bic.w	r3, r3, #10
 800d2f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	621a      	str	r2, [r3, #32]
}
 800d30e:	bf00      	nop
 800d310:	371c      	adds	r7, #28
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b087      	sub	sp, #28
 800d31e:	af00      	add	r7, sp, #0
 800d320:	60f8      	str	r0, [r7, #12]
 800d322:	60b9      	str	r1, [r7, #8]
 800d324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	f023 0210 	bic.w	r2, r3, #16
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	031b      	lsls	r3, r3, #12
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	693a      	ldr	r2, [r7, #16]
 800d35e:	4313      	orrs	r3, r2
 800d360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	621a      	str	r2, [r3, #32]
}
 800d36e:	bf00      	nop
 800d370:	371c      	adds	r7, #28
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
	...

0800d37c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <TIM_ITRx_SetConfig+0x38>)
 800d390:	4013      	ands	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4313      	orrs	r3, r2
 800d39a:	f043 0307 	orr.w	r3, r3, #7
 800d39e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	609a      	str	r2, [r3, #8]
}
 800d3a6:	bf00      	nop
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	ffcfff8f 	.word	0xffcfff8f

0800d3b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	021a      	lsls	r2, r3, #8
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	431a      	orrs	r2, r3
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	609a      	str	r2, [r3, #8]
}
 800d3ec:	bf00      	nop
 800d3ee:	371c      	adds	r7, #28
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	f003 031f 	and.w	r3, r3, #31
 800d40a:	2201      	movs	r2, #1
 800d40c:	fa02 f303 	lsl.w	r3, r2, r3
 800d410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6a1a      	ldr	r2, [r3, #32]
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	43db      	mvns	r3, r3
 800d41a:	401a      	ands	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6a1a      	ldr	r2, [r3, #32]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	f003 031f 	and.w	r3, r3, #31
 800d42a:	6879      	ldr	r1, [r7, #4]
 800d42c:	fa01 f303 	lsl.w	r3, r1, r3
 800d430:	431a      	orrs	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	621a      	str	r2, [r3, #32]
}
 800d436:	bf00      	nop
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
	...

0800d444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d454:	2b01      	cmp	r3, #1
 800d456:	d101      	bne.n	800d45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d458:	2302      	movs	r3, #2
 800d45a:	e06d      	b.n	800d538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2202      	movs	r2, #2
 800d468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a30      	ldr	r2, [pc, #192]	; (800d544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d004      	beq.n	800d490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a2f      	ldr	r2, [pc, #188]	; (800d548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d108      	bne.n	800d4a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a20      	ldr	r2, [pc, #128]	; (800d544 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d022      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ce:	d01d      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a1d      	ldr	r2, [pc, #116]	; (800d54c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d018      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a1c      	ldr	r2, [pc, #112]	; (800d550 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d013      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a1a      	ldr	r2, [pc, #104]	; (800d554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d00e      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a15      	ldr	r2, [pc, #84]	; (800d548 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d009      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a16      	ldr	r2, [pc, #88]	; (800d558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d004      	beq.n	800d50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a15      	ldr	r2, [pc, #84]	; (800d55c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d10c      	bne.n	800d526 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	40010000 	.word	0x40010000
 800d548:	40010400 	.word	0x40010400
 800d54c:	40000400 	.word	0x40000400
 800d550:	40000800 	.word	0x40000800
 800d554:	40000c00 	.word	0x40000c00
 800d558:	40001800 	.word	0x40001800
 800d55c:	40014000 	.word	0x40014000

0800d560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e042      	b.n	800d634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7f5 f9c7 	bl	8002954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2224      	movs	r2, #36	; 0x24
 800d5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f022 0201 	bic.w	r2, r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fc9c 	bl	800df1c <UART_SetConfig>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d101      	bne.n	800d5ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e022      	b.n	800d634 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 fafc 	bl	800ebf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685a      	ldr	r2, [r3, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d60a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	689a      	ldr	r2, [r3, #8]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d61a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f042 0201 	orr.w	r2, r2, #1
 800d62a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 fb83 	bl	800ed38 <UART_CheckIdleState>
 800d632:	4603      	mov	r3, r0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08a      	sub	sp, #40	; 0x28
 800d640:	af02      	add	r7, sp, #8
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	4613      	mov	r3, r2
 800d64a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d652:	2b20      	cmp	r3, #32
 800d654:	d17b      	bne.n	800d74e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <HAL_UART_Transmit+0x26>
 800d65c:	88fb      	ldrh	r3, [r7, #6]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e074      	b.n	800d750 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2221      	movs	r2, #33	; 0x21
 800d672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d676:	f7f5 fca9 	bl	8002fcc <HAL_GetTick>
 800d67a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	88fa      	ldrh	r2, [r7, #6]
 800d680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	88fa      	ldrh	r2, [r7, #6]
 800d688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d694:	d108      	bne.n	800d6a8 <HAL_UART_Transmit+0x6c>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d104      	bne.n	800d6a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	61bb      	str	r3, [r7, #24]
 800d6a6:	e003      	b.n	800d6b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d6b0:	e030      	b.n	800d714 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2180      	movs	r1, #128	; 0x80
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f001 fbe5 	bl	800ee8c <UART_WaitOnFlagUntilTimeout>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d005      	beq.n	800d6d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e03d      	b.n	800d750 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10b      	bne.n	800d6f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	3302      	adds	r3, #2
 800d6ee:	61bb      	str	r3, [r7, #24]
 800d6f0:	e007      	b.n	800d702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	781a      	ldrb	r2, [r3, #0]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	3301      	adds	r3, #1
 800d700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d708:	b29b      	uxth	r3, r3
 800d70a:	3b01      	subs	r3, #1
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1c8      	bne.n	800d6b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	2200      	movs	r2, #0
 800d728:	2140      	movs	r1, #64	; 0x40
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f001 fbae 	bl	800ee8c <UART_WaitOnFlagUntilTimeout>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d005      	beq.n	800d742 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2220      	movs	r2, #32
 800d73a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e006      	b.n	800d750 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2220      	movs	r2, #32
 800d746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	e000      	b.n	800d750 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d74e:	2302      	movs	r3, #2
  }
}
 800d750:	4618      	mov	r0, r3
 800d752:	3720      	adds	r7, #32
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b0ba      	sub	sp, #232	; 0xe8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	69db      	ldr	r3, [r3, #28]
 800d766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d77e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d782:	f640 030f 	movw	r3, #2063	; 0x80f
 800d786:	4013      	ands	r3, r2
 800d788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d78c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11b      	bne.n	800d7cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d798:	f003 0320 	and.w	r3, r3, #32
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d015      	beq.n	800d7cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7a4:	f003 0320 	and.w	r3, r3, #32
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d009      	beq.n	800d7cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 8377 	beq.w	800deb0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	4798      	blx	r3
      }
      return;
 800d7ca:	e371      	b.n	800deb0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 8123 	beq.w	800da1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d7d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d7da:	4b8d      	ldr	r3, [pc, #564]	; (800da10 <HAL_UART_IRQHandler+0x2b8>)
 800d7dc:	4013      	ands	r3, r2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d106      	bne.n	800d7f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d7e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d7e6:	4b8b      	ldr	r3, [pc, #556]	; (800da14 <HAL_UART_IRQHandler+0x2bc>)
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 8116 	beq.w	800da1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d7f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d011      	beq.n	800d820 <HAL_UART_IRQHandler+0xc8>
 800d7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00b      	beq.n	800d820 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2201      	movs	r2, #1
 800d80e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d816:	f043 0201 	orr.w	r2, r3, #1
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d011      	beq.n	800d850 <HAL_UART_IRQHandler+0xf8>
 800d82c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00b      	beq.n	800d850 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2202      	movs	r2, #2
 800d83e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d846:	f043 0204 	orr.w	r2, r3, #4
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d854:	f003 0304 	and.w	r3, r3, #4
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d011      	beq.n	800d880 <HAL_UART_IRQHandler+0x128>
 800d85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2204      	movs	r2, #4
 800d86e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d876:	f043 0202 	orr.w	r2, r3, #2
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d884:	f003 0308 	and.w	r3, r3, #8
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d017      	beq.n	800d8bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d890:	f003 0320 	and.w	r3, r3, #32
 800d894:	2b00      	cmp	r3, #0
 800d896:	d105      	bne.n	800d8a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d898:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d89c:	4b5c      	ldr	r3, [pc, #368]	; (800da10 <HAL_UART_IRQHandler+0x2b8>)
 800d89e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00b      	beq.n	800d8bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2208      	movs	r2, #8
 800d8aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b2:	f043 0208 	orr.w	r2, r3, #8
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d012      	beq.n	800d8ee <HAL_UART_IRQHandler+0x196>
 800d8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00c      	beq.n	800d8ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8e4:	f043 0220 	orr.w	r2, r3, #32
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 82dd 	beq.w	800deb4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d8fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	2b00      	cmp	r3, #0
 800d904:	d013      	beq.n	800d92e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d90a:	f003 0320 	and.w	r3, r3, #32
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d105      	bne.n	800d91e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d942:	2b40      	cmp	r3, #64	; 0x40
 800d944:	d005      	beq.n	800d952 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d94a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d054      	beq.n	800d9fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f001 fbea 	bl	800f12c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d962:	2b40      	cmp	r3, #64	; 0x40
 800d964:	d146      	bne.n	800d9f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	3308      	adds	r3, #8
 800d96c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d974:	e853 3f00 	ldrex	r3, [r3]
 800d978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d97c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	3308      	adds	r3, #8
 800d98e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d99e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d9a2:	e841 2300 	strex	r3, r2, [r1]
 800d9a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d9aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1d9      	bne.n	800d966 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d017      	beq.n	800d9ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9c2:	4a15      	ldr	r2, [pc, #84]	; (800da18 <HAL_UART_IRQHandler+0x2c0>)
 800d9c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7f8 f817 	bl	8005a00 <HAL_DMA_Abort_IT>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d019      	beq.n	800da0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9ea:	e00f      	b.n	800da0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fa8b 	bl	800df08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9f2:	e00b      	b.n	800da0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fa87 	bl	800df08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9fa:	e007      	b.n	800da0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 fa83 	bl	800df08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800da0a:	e253      	b.n	800deb4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da0c:	bf00      	nop
    return;
 800da0e:	e251      	b.n	800deb4 <HAL_UART_IRQHandler+0x75c>
 800da10:	10000001 	.word	0x10000001
 800da14:	04000120 	.word	0x04000120
 800da18:	0800f3df 	.word	0x0800f3df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da20:	2b01      	cmp	r3, #1
 800da22:	f040 81e7 	bne.w	800ddf4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800da26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2a:	f003 0310 	and.w	r3, r3, #16
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f000 81e0 	beq.w	800ddf4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800da34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da38:	f003 0310 	and.w	r3, r3, #16
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 81d9 	beq.w	800ddf4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2210      	movs	r2, #16
 800da48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b40      	cmp	r3, #64	; 0x40
 800da56:	f040 8151 	bne.w	800dcfc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a96      	ldr	r2, [pc, #600]	; (800dcbc <HAL_UART_IRQHandler+0x564>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d068      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a93      	ldr	r2, [pc, #588]	; (800dcc0 <HAL_UART_IRQHandler+0x568>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d061      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a91      	ldr	r2, [pc, #580]	; (800dcc4 <HAL_UART_IRQHandler+0x56c>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d05a      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a8e      	ldr	r2, [pc, #568]	; (800dcc8 <HAL_UART_IRQHandler+0x570>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d053      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a8c      	ldr	r2, [pc, #560]	; (800dccc <HAL_UART_IRQHandler+0x574>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d04c      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a89      	ldr	r2, [pc, #548]	; (800dcd0 <HAL_UART_IRQHandler+0x578>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d045      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a87      	ldr	r2, [pc, #540]	; (800dcd4 <HAL_UART_IRQHandler+0x57c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d03e      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a84      	ldr	r2, [pc, #528]	; (800dcd8 <HAL_UART_IRQHandler+0x580>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d037      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a82      	ldr	r2, [pc, #520]	; (800dcdc <HAL_UART_IRQHandler+0x584>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d030      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a7f      	ldr	r2, [pc, #508]	; (800dce0 <HAL_UART_IRQHandler+0x588>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d029      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a7d      	ldr	r2, [pc, #500]	; (800dce4 <HAL_UART_IRQHandler+0x58c>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d022      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a7a      	ldr	r2, [pc, #488]	; (800dce8 <HAL_UART_IRQHandler+0x590>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d01b      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a78      	ldr	r2, [pc, #480]	; (800dcec <HAL_UART_IRQHandler+0x594>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d014      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a75      	ldr	r2, [pc, #468]	; (800dcf0 <HAL_UART_IRQHandler+0x598>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d00d      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a73      	ldr	r2, [pc, #460]	; (800dcf4 <HAL_UART_IRQHandler+0x59c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d006      	beq.n	800db3a <HAL_UART_IRQHandler+0x3e2>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a70      	ldr	r2, [pc, #448]	; (800dcf8 <HAL_UART_IRQHandler+0x5a0>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d106      	bne.n	800db48 <HAL_UART_IRQHandler+0x3f0>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	b29b      	uxth	r3, r3
 800db46:	e005      	b.n	800db54 <HAL_UART_IRQHandler+0x3fc>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	b29b      	uxth	r3, r3
 800db54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800db58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f000 81ab 	beq.w	800deb8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db6c:	429a      	cmp	r2, r3
 800db6e:	f080 81a3 	bcs.w	800deb8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800db78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db88:	f000 8087 	beq.w	800dc9a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db98:	e853 3f00 	ldrex	r3, [r3]
 800db9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dbb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dbc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dbce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1da      	bne.n	800db8c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbe0:	e853 3f00 	ldrex	r3, [r3]
 800dbe4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dbe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dbe8:	f023 0301 	bic.w	r3, r3, #1
 800dbec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dbfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dbfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dc0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e1      	bne.n	800dbd6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	3308      	adds	r3, #8
 800dc18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc1c:	e853 3f00 	ldrex	r3, [r3]
 800dc20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dc22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3308      	adds	r3, #8
 800dc32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dc36:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dc38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dc3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dc44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e3      	bne.n	800dc12 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc60:	e853 3f00 	ldrex	r3, [r3]
 800dc64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc68:	f023 0310 	bic.w	r3, r3, #16
 800dc6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	461a      	mov	r2, r3
 800dc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc82:	e841 2300 	strex	r3, r2, [r1]
 800dc86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1e4      	bne.n	800dc58 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7f7 fb95 	bl	80053c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7f2 ffad 	bl	8000c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dcba:	e0fd      	b.n	800deb8 <HAL_UART_IRQHandler+0x760>
 800dcbc:	40020010 	.word	0x40020010
 800dcc0:	40020028 	.word	0x40020028
 800dcc4:	40020040 	.word	0x40020040
 800dcc8:	40020058 	.word	0x40020058
 800dccc:	40020070 	.word	0x40020070
 800dcd0:	40020088 	.word	0x40020088
 800dcd4:	400200a0 	.word	0x400200a0
 800dcd8:	400200b8 	.word	0x400200b8
 800dcdc:	40020410 	.word	0x40020410
 800dce0:	40020428 	.word	0x40020428
 800dce4:	40020440 	.word	0x40020440
 800dce8:	40020458 	.word	0x40020458
 800dcec:	40020470 	.word	0x40020470
 800dcf0:	40020488 	.word	0x40020488
 800dcf4:	400204a0 	.word	0x400204a0
 800dcf8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 80cf 	beq.w	800debc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dd1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f000 80ca 	beq.w	800debc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	e853 3f00 	ldrex	r3, [r3]
 800dd34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	461a      	mov	r2, r3
 800dd46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd4a:	647b      	str	r3, [r7, #68]	; 0x44
 800dd4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dd50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd52:	e841 2300 	strex	r3, r2, [r1]
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1e4      	bne.n	800dd28 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	3308      	adds	r3, #8
 800dd64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	e853 3f00 	ldrex	r3, [r3]
 800dd6c:	623b      	str	r3, [r7, #32]
   return(result);
 800dd6e:	6a3a      	ldr	r2, [r7, #32]
 800dd70:	4b55      	ldr	r3, [pc, #340]	; (800dec8 <HAL_UART_IRQHandler+0x770>)
 800dd72:	4013      	ands	r3, r2
 800dd74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3308      	adds	r3, #8
 800dd7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dd82:	633a      	str	r2, [r7, #48]	; 0x30
 800dd84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e3      	bne.n	800dd5e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2220      	movs	r2, #32
 800dd9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	e853 3f00 	ldrex	r3, [r3]
 800ddb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 0310 	bic.w	r3, r3, #16
 800ddbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ddcc:	61fb      	str	r3, [r7, #28]
 800ddce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd0:	69b9      	ldr	r1, [r7, #24]
 800ddd2:	69fa      	ldr	r2, [r7, #28]
 800ddd4:	e841 2300 	strex	r3, r2, [r1]
 800ddd8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1e4      	bne.n	800ddaa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2202      	movs	r2, #2
 800dde4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dde6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7f2 ff11 	bl	8000c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ddf2:	e063      	b.n	800debc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ddf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00e      	beq.n	800de1e <HAL_UART_IRQHandler+0x6c6>
 800de00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d008      	beq.n	800de1e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800de14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f001 fb22 	bl	800f460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de1c:	e051      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800de1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de26:	2b00      	cmp	r3, #0
 800de28:	d014      	beq.n	800de54 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800de2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de32:	2b00      	cmp	r3, #0
 800de34:	d105      	bne.n	800de42 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800de36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d008      	beq.n	800de54 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de46:	2b00      	cmp	r3, #0
 800de48:	d03a      	beq.n	800dec0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	4798      	blx	r3
    }
    return;
 800de52:	e035      	b.n	800dec0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800de54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d009      	beq.n	800de74 <HAL_UART_IRQHandler+0x71c>
 800de60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d003      	beq.n	800de74 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f001 facc 	bl	800f40a <UART_EndTransmit_IT>
    return;
 800de72:	e026      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800de74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d009      	beq.n	800de94 <HAL_UART_IRQHandler+0x73c>
 800de80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d003      	beq.n	800de94 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f001 fafb 	bl	800f488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800de92:	e016      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800de94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d010      	beq.n	800dec2 <HAL_UART_IRQHandler+0x76a>
 800dea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	da0c      	bge.n	800dec2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 fae3 	bl	800f474 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800deae:	e008      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800deb0:	bf00      	nop
 800deb2:	e006      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
    return;
 800deb4:	bf00      	nop
 800deb6:	e004      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800deb8:	bf00      	nop
 800deba:	e002      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
      return;
 800debc:	bf00      	nop
 800debe:	e000      	b.n	800dec2 <HAL_UART_IRQHandler+0x76a>
    return;
 800dec0:	bf00      	nop
  }
}
 800dec2:	37e8      	adds	r7, #232	; 0xe8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	effffffe 	.word	0xeffffffe

0800decc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800dee8:	bf00      	nop
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df10:	bf00      	nop
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df20:	b092      	sub	sp, #72	; 0x48
 800df22:	af00      	add	r7, sp, #0
 800df24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	689a      	ldr	r2, [r3, #8]
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	691b      	ldr	r3, [r3, #16]
 800df34:	431a      	orrs	r2, r3
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	695b      	ldr	r3, [r3, #20]
 800df3a:	431a      	orrs	r2, r3
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	69db      	ldr	r3, [r3, #28]
 800df40:	4313      	orrs	r3, r2
 800df42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	4bbe      	ldr	r3, [pc, #760]	; (800e244 <UART_SetConfig+0x328>)
 800df4c:	4013      	ands	r3, r2
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	6812      	ldr	r2, [r2, #0]
 800df52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df54:	430b      	orrs	r3, r1
 800df56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	430a      	orrs	r2, r1
 800df6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4ab3      	ldr	r2, [pc, #716]	; (800e248 <UART_SetConfig+0x32c>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d004      	beq.n	800df88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df84:	4313      	orrs	r3, r2
 800df86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689a      	ldr	r2, [r3, #8]
 800df8e:	4baf      	ldr	r3, [pc, #700]	; (800e24c <UART_SetConfig+0x330>)
 800df90:	4013      	ands	r3, r2
 800df92:	697a      	ldr	r2, [r7, #20]
 800df94:	6812      	ldr	r2, [r2, #0]
 800df96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df98:	430b      	orrs	r3, r1
 800df9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa2:	f023 010f 	bic.w	r1, r3, #15
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	430a      	orrs	r2, r1
 800dfb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4aa6      	ldr	r2, [pc, #664]	; (800e250 <UART_SetConfig+0x334>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d177      	bne.n	800e0ac <UART_SetConfig+0x190>
 800dfbc:	4ba5      	ldr	r3, [pc, #660]	; (800e254 <UART_SetConfig+0x338>)
 800dfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfc4:	2b28      	cmp	r3, #40	; 0x28
 800dfc6:	d86d      	bhi.n	800e0a4 <UART_SetConfig+0x188>
 800dfc8:	a201      	add	r2, pc, #4	; (adr r2, 800dfd0 <UART_SetConfig+0xb4>)
 800dfca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfce:	bf00      	nop
 800dfd0:	0800e075 	.word	0x0800e075
 800dfd4:	0800e0a5 	.word	0x0800e0a5
 800dfd8:	0800e0a5 	.word	0x0800e0a5
 800dfdc:	0800e0a5 	.word	0x0800e0a5
 800dfe0:	0800e0a5 	.word	0x0800e0a5
 800dfe4:	0800e0a5 	.word	0x0800e0a5
 800dfe8:	0800e0a5 	.word	0x0800e0a5
 800dfec:	0800e0a5 	.word	0x0800e0a5
 800dff0:	0800e07d 	.word	0x0800e07d
 800dff4:	0800e0a5 	.word	0x0800e0a5
 800dff8:	0800e0a5 	.word	0x0800e0a5
 800dffc:	0800e0a5 	.word	0x0800e0a5
 800e000:	0800e0a5 	.word	0x0800e0a5
 800e004:	0800e0a5 	.word	0x0800e0a5
 800e008:	0800e0a5 	.word	0x0800e0a5
 800e00c:	0800e0a5 	.word	0x0800e0a5
 800e010:	0800e085 	.word	0x0800e085
 800e014:	0800e0a5 	.word	0x0800e0a5
 800e018:	0800e0a5 	.word	0x0800e0a5
 800e01c:	0800e0a5 	.word	0x0800e0a5
 800e020:	0800e0a5 	.word	0x0800e0a5
 800e024:	0800e0a5 	.word	0x0800e0a5
 800e028:	0800e0a5 	.word	0x0800e0a5
 800e02c:	0800e0a5 	.word	0x0800e0a5
 800e030:	0800e08d 	.word	0x0800e08d
 800e034:	0800e0a5 	.word	0x0800e0a5
 800e038:	0800e0a5 	.word	0x0800e0a5
 800e03c:	0800e0a5 	.word	0x0800e0a5
 800e040:	0800e0a5 	.word	0x0800e0a5
 800e044:	0800e0a5 	.word	0x0800e0a5
 800e048:	0800e0a5 	.word	0x0800e0a5
 800e04c:	0800e0a5 	.word	0x0800e0a5
 800e050:	0800e095 	.word	0x0800e095
 800e054:	0800e0a5 	.word	0x0800e0a5
 800e058:	0800e0a5 	.word	0x0800e0a5
 800e05c:	0800e0a5 	.word	0x0800e0a5
 800e060:	0800e0a5 	.word	0x0800e0a5
 800e064:	0800e0a5 	.word	0x0800e0a5
 800e068:	0800e0a5 	.word	0x0800e0a5
 800e06c:	0800e0a5 	.word	0x0800e0a5
 800e070:	0800e09d 	.word	0x0800e09d
 800e074:	2301      	movs	r3, #1
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07a:	e326      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e07c:	2304      	movs	r3, #4
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e322      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e084:	2308      	movs	r3, #8
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e31e      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e08c:	2310      	movs	r3, #16
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e31a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e094:	2320      	movs	r3, #32
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e316      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e09c:	2340      	movs	r3, #64	; 0x40
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a2:	e312      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e0a4:	2380      	movs	r3, #128	; 0x80
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0aa:	e30e      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a69      	ldr	r2, [pc, #420]	; (800e258 <UART_SetConfig+0x33c>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d130      	bne.n	800e118 <UART_SetConfig+0x1fc>
 800e0b6:	4b67      	ldr	r3, [pc, #412]	; (800e254 <UART_SetConfig+0x338>)
 800e0b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	2b05      	cmp	r3, #5
 800e0c0:	d826      	bhi.n	800e110 <UART_SetConfig+0x1f4>
 800e0c2:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <UART_SetConfig+0x1ac>)
 800e0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c8:	0800e0e1 	.word	0x0800e0e1
 800e0cc:	0800e0e9 	.word	0x0800e0e9
 800e0d0:	0800e0f1 	.word	0x0800e0f1
 800e0d4:	0800e0f9 	.word	0x0800e0f9
 800e0d8:	0800e101 	.word	0x0800e101
 800e0dc:	0800e109 	.word	0x0800e109
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e6:	e2f0      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e0e8:	2304      	movs	r3, #4
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e2ec      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e0f0:	2308      	movs	r3, #8
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e2e8      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e2e4      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e100:	2320      	movs	r3, #32
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e2e0      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e108:	2340      	movs	r3, #64	; 0x40
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e2dc      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e110:	2380      	movs	r3, #128	; 0x80
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e2d8      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a4f      	ldr	r2, [pc, #316]	; (800e25c <UART_SetConfig+0x340>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d130      	bne.n	800e184 <UART_SetConfig+0x268>
 800e122:	4b4c      	ldr	r3, [pc, #304]	; (800e254 <UART_SetConfig+0x338>)
 800e124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e126:	f003 0307 	and.w	r3, r3, #7
 800e12a:	2b05      	cmp	r3, #5
 800e12c:	d826      	bhi.n	800e17c <UART_SetConfig+0x260>
 800e12e:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <UART_SetConfig+0x218>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e14d 	.word	0x0800e14d
 800e138:	0800e155 	.word	0x0800e155
 800e13c:	0800e15d 	.word	0x0800e15d
 800e140:	0800e165 	.word	0x0800e165
 800e144:	0800e16d 	.word	0x0800e16d
 800e148:	0800e175 	.word	0x0800e175
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e152:	e2ba      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e154:	2304      	movs	r3, #4
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e2b6      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e15c:	2308      	movs	r3, #8
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e2b2      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e164:	2310      	movs	r3, #16
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e2ae      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e16c:	2320      	movs	r3, #32
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e2aa      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e174:	2340      	movs	r3, #64	; 0x40
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e2a6      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e17c:	2380      	movs	r3, #128	; 0x80
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e2a2      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a35      	ldr	r2, [pc, #212]	; (800e260 <UART_SetConfig+0x344>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d130      	bne.n	800e1f0 <UART_SetConfig+0x2d4>
 800e18e:	4b31      	ldr	r3, [pc, #196]	; (800e254 <UART_SetConfig+0x338>)
 800e190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e192:	f003 0307 	and.w	r3, r3, #7
 800e196:	2b05      	cmp	r3, #5
 800e198:	d826      	bhi.n	800e1e8 <UART_SetConfig+0x2cc>
 800e19a:	a201      	add	r2, pc, #4	; (adr r2, 800e1a0 <UART_SetConfig+0x284>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e1b9 	.word	0x0800e1b9
 800e1a4:	0800e1c1 	.word	0x0800e1c1
 800e1a8:	0800e1c9 	.word	0x0800e1c9
 800e1ac:	0800e1d1 	.word	0x0800e1d1
 800e1b0:	0800e1d9 	.word	0x0800e1d9
 800e1b4:	0800e1e1 	.word	0x0800e1e1
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1be:	e284      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c6:	e280      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1c8:	2308      	movs	r3, #8
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e27c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1d0:	2310      	movs	r3, #16
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e278      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1d8:	2320      	movs	r3, #32
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e274      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1e0:	2340      	movs	r3, #64	; 0x40
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e270      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1e8:	2380      	movs	r3, #128	; 0x80
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e26c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a1b      	ldr	r2, [pc, #108]	; (800e264 <UART_SetConfig+0x348>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d142      	bne.n	800e280 <UART_SetConfig+0x364>
 800e1fa:	4b16      	ldr	r3, [pc, #88]	; (800e254 <UART_SetConfig+0x338>)
 800e1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1fe:	f003 0307 	and.w	r3, r3, #7
 800e202:	2b05      	cmp	r3, #5
 800e204:	d838      	bhi.n	800e278 <UART_SetConfig+0x35c>
 800e206:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <UART_SetConfig+0x2f0>)
 800e208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20c:	0800e225 	.word	0x0800e225
 800e210:	0800e22d 	.word	0x0800e22d
 800e214:	0800e235 	.word	0x0800e235
 800e218:	0800e23d 	.word	0x0800e23d
 800e21c:	0800e269 	.word	0x0800e269
 800e220:	0800e271 	.word	0x0800e271
 800e224:	2300      	movs	r3, #0
 800e226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22a:	e24e      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e22c:	2304      	movs	r3, #4
 800e22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e232:	e24a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e234:	2308      	movs	r3, #8
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e246      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e23c:	2310      	movs	r3, #16
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e242      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e244:	cfff69f3 	.word	0xcfff69f3
 800e248:	58000c00 	.word	0x58000c00
 800e24c:	11fff4ff 	.word	0x11fff4ff
 800e250:	40011000 	.word	0x40011000
 800e254:	58024400 	.word	0x58024400
 800e258:	40004400 	.word	0x40004400
 800e25c:	40004800 	.word	0x40004800
 800e260:	40004c00 	.word	0x40004c00
 800e264:	40005000 	.word	0x40005000
 800e268:	2320      	movs	r3, #32
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e22c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e270:	2340      	movs	r3, #64	; 0x40
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e228      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e278:	2380      	movs	r3, #128	; 0x80
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e224      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4ab1      	ldr	r2, [pc, #708]	; (800e54c <UART_SetConfig+0x630>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d176      	bne.n	800e378 <UART_SetConfig+0x45c>
 800e28a:	4bb1      	ldr	r3, [pc, #708]	; (800e550 <UART_SetConfig+0x634>)
 800e28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e28e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e292:	2b28      	cmp	r3, #40	; 0x28
 800e294:	d86c      	bhi.n	800e370 <UART_SetConfig+0x454>
 800e296:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <UART_SetConfig+0x380>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e341 	.word	0x0800e341
 800e2a0:	0800e371 	.word	0x0800e371
 800e2a4:	0800e371 	.word	0x0800e371
 800e2a8:	0800e371 	.word	0x0800e371
 800e2ac:	0800e371 	.word	0x0800e371
 800e2b0:	0800e371 	.word	0x0800e371
 800e2b4:	0800e371 	.word	0x0800e371
 800e2b8:	0800e371 	.word	0x0800e371
 800e2bc:	0800e349 	.word	0x0800e349
 800e2c0:	0800e371 	.word	0x0800e371
 800e2c4:	0800e371 	.word	0x0800e371
 800e2c8:	0800e371 	.word	0x0800e371
 800e2cc:	0800e371 	.word	0x0800e371
 800e2d0:	0800e371 	.word	0x0800e371
 800e2d4:	0800e371 	.word	0x0800e371
 800e2d8:	0800e371 	.word	0x0800e371
 800e2dc:	0800e351 	.word	0x0800e351
 800e2e0:	0800e371 	.word	0x0800e371
 800e2e4:	0800e371 	.word	0x0800e371
 800e2e8:	0800e371 	.word	0x0800e371
 800e2ec:	0800e371 	.word	0x0800e371
 800e2f0:	0800e371 	.word	0x0800e371
 800e2f4:	0800e371 	.word	0x0800e371
 800e2f8:	0800e371 	.word	0x0800e371
 800e2fc:	0800e359 	.word	0x0800e359
 800e300:	0800e371 	.word	0x0800e371
 800e304:	0800e371 	.word	0x0800e371
 800e308:	0800e371 	.word	0x0800e371
 800e30c:	0800e371 	.word	0x0800e371
 800e310:	0800e371 	.word	0x0800e371
 800e314:	0800e371 	.word	0x0800e371
 800e318:	0800e371 	.word	0x0800e371
 800e31c:	0800e361 	.word	0x0800e361
 800e320:	0800e371 	.word	0x0800e371
 800e324:	0800e371 	.word	0x0800e371
 800e328:	0800e371 	.word	0x0800e371
 800e32c:	0800e371 	.word	0x0800e371
 800e330:	0800e371 	.word	0x0800e371
 800e334:	0800e371 	.word	0x0800e371
 800e338:	0800e371 	.word	0x0800e371
 800e33c:	0800e369 	.word	0x0800e369
 800e340:	2301      	movs	r3, #1
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e346:	e1c0      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e348:	2304      	movs	r3, #4
 800e34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34e:	e1bc      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e350:	2308      	movs	r3, #8
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e356:	e1b8      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e358:	2310      	movs	r3, #16
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35e:	e1b4      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e360:	2320      	movs	r3, #32
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e366:	e1b0      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36e:	e1ac      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e370:	2380      	movs	r3, #128	; 0x80
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e1a8      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a75      	ldr	r2, [pc, #468]	; (800e554 <UART_SetConfig+0x638>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d130      	bne.n	800e3e4 <UART_SetConfig+0x4c8>
 800e382:	4b73      	ldr	r3, [pc, #460]	; (800e550 <UART_SetConfig+0x634>)
 800e384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d826      	bhi.n	800e3dc <UART_SetConfig+0x4c0>
 800e38e:	a201      	add	r2, pc, #4	; (adr r2, 800e394 <UART_SetConfig+0x478>)
 800e390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e394:	0800e3ad 	.word	0x0800e3ad
 800e398:	0800e3b5 	.word	0x0800e3b5
 800e39c:	0800e3bd 	.word	0x0800e3bd
 800e3a0:	0800e3c5 	.word	0x0800e3c5
 800e3a4:	0800e3cd 	.word	0x0800e3cd
 800e3a8:	0800e3d5 	.word	0x0800e3d5
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e18a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3b4:	2304      	movs	r3, #4
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e186      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3bc:	2308      	movs	r3, #8
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e182      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e17e      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3cc:	2320      	movs	r3, #32
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e17a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3d4:	2340      	movs	r3, #64	; 0x40
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e176      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3dc:	2380      	movs	r3, #128	; 0x80
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e172      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a5b      	ldr	r2, [pc, #364]	; (800e558 <UART_SetConfig+0x63c>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d130      	bne.n	800e450 <UART_SetConfig+0x534>
 800e3ee:	4b58      	ldr	r3, [pc, #352]	; (800e550 <UART_SetConfig+0x634>)
 800e3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3f2:	f003 0307 	and.w	r3, r3, #7
 800e3f6:	2b05      	cmp	r3, #5
 800e3f8:	d826      	bhi.n	800e448 <UART_SetConfig+0x52c>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <UART_SetConfig+0x4e4>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e419 	.word	0x0800e419
 800e404:	0800e421 	.word	0x0800e421
 800e408:	0800e429 	.word	0x0800e429
 800e40c:	0800e431 	.word	0x0800e431
 800e410:	0800e439 	.word	0x0800e439
 800e414:	0800e441 	.word	0x0800e441
 800e418:	2300      	movs	r3, #0
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e154      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e420:	2304      	movs	r3, #4
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e150      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e428:	2308      	movs	r3, #8
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e14c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e430:	2310      	movs	r3, #16
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e148      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e438:	2320      	movs	r3, #32
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e144      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e440:	2340      	movs	r3, #64	; 0x40
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e140      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e448:	2380      	movs	r3, #128	; 0x80
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e13c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a41      	ldr	r2, [pc, #260]	; (800e55c <UART_SetConfig+0x640>)
 800e456:	4293      	cmp	r3, r2
 800e458:	f040 8082 	bne.w	800e560 <UART_SetConfig+0x644>
 800e45c:	4b3c      	ldr	r3, [pc, #240]	; (800e550 <UART_SetConfig+0x634>)
 800e45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e464:	2b28      	cmp	r3, #40	; 0x28
 800e466:	d86d      	bhi.n	800e544 <UART_SetConfig+0x628>
 800e468:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <UART_SetConfig+0x554>)
 800e46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46e:	bf00      	nop
 800e470:	0800e515 	.word	0x0800e515
 800e474:	0800e545 	.word	0x0800e545
 800e478:	0800e545 	.word	0x0800e545
 800e47c:	0800e545 	.word	0x0800e545
 800e480:	0800e545 	.word	0x0800e545
 800e484:	0800e545 	.word	0x0800e545
 800e488:	0800e545 	.word	0x0800e545
 800e48c:	0800e545 	.word	0x0800e545
 800e490:	0800e51d 	.word	0x0800e51d
 800e494:	0800e545 	.word	0x0800e545
 800e498:	0800e545 	.word	0x0800e545
 800e49c:	0800e545 	.word	0x0800e545
 800e4a0:	0800e545 	.word	0x0800e545
 800e4a4:	0800e545 	.word	0x0800e545
 800e4a8:	0800e545 	.word	0x0800e545
 800e4ac:	0800e545 	.word	0x0800e545
 800e4b0:	0800e525 	.word	0x0800e525
 800e4b4:	0800e545 	.word	0x0800e545
 800e4b8:	0800e545 	.word	0x0800e545
 800e4bc:	0800e545 	.word	0x0800e545
 800e4c0:	0800e545 	.word	0x0800e545
 800e4c4:	0800e545 	.word	0x0800e545
 800e4c8:	0800e545 	.word	0x0800e545
 800e4cc:	0800e545 	.word	0x0800e545
 800e4d0:	0800e52d 	.word	0x0800e52d
 800e4d4:	0800e545 	.word	0x0800e545
 800e4d8:	0800e545 	.word	0x0800e545
 800e4dc:	0800e545 	.word	0x0800e545
 800e4e0:	0800e545 	.word	0x0800e545
 800e4e4:	0800e545 	.word	0x0800e545
 800e4e8:	0800e545 	.word	0x0800e545
 800e4ec:	0800e545 	.word	0x0800e545
 800e4f0:	0800e535 	.word	0x0800e535
 800e4f4:	0800e545 	.word	0x0800e545
 800e4f8:	0800e545 	.word	0x0800e545
 800e4fc:	0800e545 	.word	0x0800e545
 800e500:	0800e545 	.word	0x0800e545
 800e504:	0800e545 	.word	0x0800e545
 800e508:	0800e545 	.word	0x0800e545
 800e50c:	0800e545 	.word	0x0800e545
 800e510:	0800e53d 	.word	0x0800e53d
 800e514:	2301      	movs	r3, #1
 800e516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51a:	e0d6      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e51c:	2304      	movs	r3, #4
 800e51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e522:	e0d2      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e524:	2308      	movs	r3, #8
 800e526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52a:	e0ce      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e52c:	2310      	movs	r3, #16
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e0ca      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e534:	2320      	movs	r3, #32
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e0c6      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e53c:	2340      	movs	r3, #64	; 0x40
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e0c2      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e544:	2380      	movs	r3, #128	; 0x80
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e0be      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e54c:	40011400 	.word	0x40011400
 800e550:	58024400 	.word	0x58024400
 800e554:	40007800 	.word	0x40007800
 800e558:	40007c00 	.word	0x40007c00
 800e55c:	40011800 	.word	0x40011800
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4aad      	ldr	r2, [pc, #692]	; (800e81c <UART_SetConfig+0x900>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d176      	bne.n	800e658 <UART_SetConfig+0x73c>
 800e56a:	4bad      	ldr	r3, [pc, #692]	; (800e820 <UART_SetConfig+0x904>)
 800e56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e56e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e572:	2b28      	cmp	r3, #40	; 0x28
 800e574:	d86c      	bhi.n	800e650 <UART_SetConfig+0x734>
 800e576:	a201      	add	r2, pc, #4	; (adr r2, 800e57c <UART_SetConfig+0x660>)
 800e578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57c:	0800e621 	.word	0x0800e621
 800e580:	0800e651 	.word	0x0800e651
 800e584:	0800e651 	.word	0x0800e651
 800e588:	0800e651 	.word	0x0800e651
 800e58c:	0800e651 	.word	0x0800e651
 800e590:	0800e651 	.word	0x0800e651
 800e594:	0800e651 	.word	0x0800e651
 800e598:	0800e651 	.word	0x0800e651
 800e59c:	0800e629 	.word	0x0800e629
 800e5a0:	0800e651 	.word	0x0800e651
 800e5a4:	0800e651 	.word	0x0800e651
 800e5a8:	0800e651 	.word	0x0800e651
 800e5ac:	0800e651 	.word	0x0800e651
 800e5b0:	0800e651 	.word	0x0800e651
 800e5b4:	0800e651 	.word	0x0800e651
 800e5b8:	0800e651 	.word	0x0800e651
 800e5bc:	0800e631 	.word	0x0800e631
 800e5c0:	0800e651 	.word	0x0800e651
 800e5c4:	0800e651 	.word	0x0800e651
 800e5c8:	0800e651 	.word	0x0800e651
 800e5cc:	0800e651 	.word	0x0800e651
 800e5d0:	0800e651 	.word	0x0800e651
 800e5d4:	0800e651 	.word	0x0800e651
 800e5d8:	0800e651 	.word	0x0800e651
 800e5dc:	0800e639 	.word	0x0800e639
 800e5e0:	0800e651 	.word	0x0800e651
 800e5e4:	0800e651 	.word	0x0800e651
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e651 	.word	0x0800e651
 800e5f0:	0800e651 	.word	0x0800e651
 800e5f4:	0800e651 	.word	0x0800e651
 800e5f8:	0800e651 	.word	0x0800e651
 800e5fc:	0800e641 	.word	0x0800e641
 800e600:	0800e651 	.word	0x0800e651
 800e604:	0800e651 	.word	0x0800e651
 800e608:	0800e651 	.word	0x0800e651
 800e60c:	0800e651 	.word	0x0800e651
 800e610:	0800e651 	.word	0x0800e651
 800e614:	0800e651 	.word	0x0800e651
 800e618:	0800e651 	.word	0x0800e651
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	2301      	movs	r3, #1
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e050      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e628:	2304      	movs	r3, #4
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62e:	e04c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e630:	2308      	movs	r3, #8
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e636:	e048      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e638:	2310      	movs	r3, #16
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e63e:	e044      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e640:	2320      	movs	r3, #32
 800e642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e646:	e040      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e648:	2340      	movs	r3, #64	; 0x40
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64e:	e03c      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e650:	2380      	movs	r3, #128	; 0x80
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e038      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a71      	ldr	r2, [pc, #452]	; (800e824 <UART_SetConfig+0x908>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d130      	bne.n	800e6c4 <UART_SetConfig+0x7a8>
 800e662:	4b6f      	ldr	r3, [pc, #444]	; (800e820 <UART_SetConfig+0x904>)
 800e664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e666:	f003 0307 	and.w	r3, r3, #7
 800e66a:	2b05      	cmp	r3, #5
 800e66c:	d826      	bhi.n	800e6bc <UART_SetConfig+0x7a0>
 800e66e:	a201      	add	r2, pc, #4	; (adr r2, 800e674 <UART_SetConfig+0x758>)
 800e670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e674:	0800e68d 	.word	0x0800e68d
 800e678:	0800e695 	.word	0x0800e695
 800e67c:	0800e69d 	.word	0x0800e69d
 800e680:	0800e6a5 	.word	0x0800e6a5
 800e684:	0800e6ad 	.word	0x0800e6ad
 800e688:	0800e6b5 	.word	0x0800e6b5
 800e68c:	2302      	movs	r3, #2
 800e68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e692:	e01a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e694:	2304      	movs	r3, #4
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69a:	e016      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e69c:	2308      	movs	r3, #8
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e012      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e00e      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e6ac:	2320      	movs	r3, #32
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e00a      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e6b4:	2340      	movs	r3, #64	; 0x40
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e006      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e6bc:	2380      	movs	r3, #128	; 0x80
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e002      	b.n	800e6ca <UART_SetConfig+0x7ae>
 800e6c4:	2380      	movs	r3, #128	; 0x80
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a55      	ldr	r2, [pc, #340]	; (800e824 <UART_SetConfig+0x908>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	f040 80f8 	bne.w	800e8c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6da:	2b20      	cmp	r3, #32
 800e6dc:	dc46      	bgt.n	800e76c <UART_SetConfig+0x850>
 800e6de:	2b02      	cmp	r3, #2
 800e6e0:	db75      	blt.n	800e7ce <UART_SetConfig+0x8b2>
 800e6e2:	3b02      	subs	r3, #2
 800e6e4:	2b1e      	cmp	r3, #30
 800e6e6:	d872      	bhi.n	800e7ce <UART_SetConfig+0x8b2>
 800e6e8:	a201      	add	r2, pc, #4	; (adr r2, 800e6f0 <UART_SetConfig+0x7d4>)
 800e6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ee:	bf00      	nop
 800e6f0:	0800e773 	.word	0x0800e773
 800e6f4:	0800e7cf 	.word	0x0800e7cf
 800e6f8:	0800e77b 	.word	0x0800e77b
 800e6fc:	0800e7cf 	.word	0x0800e7cf
 800e700:	0800e7cf 	.word	0x0800e7cf
 800e704:	0800e7cf 	.word	0x0800e7cf
 800e708:	0800e78b 	.word	0x0800e78b
 800e70c:	0800e7cf 	.word	0x0800e7cf
 800e710:	0800e7cf 	.word	0x0800e7cf
 800e714:	0800e7cf 	.word	0x0800e7cf
 800e718:	0800e7cf 	.word	0x0800e7cf
 800e71c:	0800e7cf 	.word	0x0800e7cf
 800e720:	0800e7cf 	.word	0x0800e7cf
 800e724:	0800e7cf 	.word	0x0800e7cf
 800e728:	0800e79b 	.word	0x0800e79b
 800e72c:	0800e7cf 	.word	0x0800e7cf
 800e730:	0800e7cf 	.word	0x0800e7cf
 800e734:	0800e7cf 	.word	0x0800e7cf
 800e738:	0800e7cf 	.word	0x0800e7cf
 800e73c:	0800e7cf 	.word	0x0800e7cf
 800e740:	0800e7cf 	.word	0x0800e7cf
 800e744:	0800e7cf 	.word	0x0800e7cf
 800e748:	0800e7cf 	.word	0x0800e7cf
 800e74c:	0800e7cf 	.word	0x0800e7cf
 800e750:	0800e7cf 	.word	0x0800e7cf
 800e754:	0800e7cf 	.word	0x0800e7cf
 800e758:	0800e7cf 	.word	0x0800e7cf
 800e75c:	0800e7cf 	.word	0x0800e7cf
 800e760:	0800e7cf 	.word	0x0800e7cf
 800e764:	0800e7cf 	.word	0x0800e7cf
 800e768:	0800e7c1 	.word	0x0800e7c1
 800e76c:	2b40      	cmp	r3, #64	; 0x40
 800e76e:	d02a      	beq.n	800e7c6 <UART_SetConfig+0x8aa>
 800e770:	e02d      	b.n	800e7ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e772:	f7fc fc3f 	bl	800aff4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e776:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e778:	e02f      	b.n	800e7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e77a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fc fc4e 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e788:	e027      	b.n	800e7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e78a:	f107 0318 	add.w	r3, r7, #24
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fc fd9a 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e798:	e01f      	b.n	800e7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e79a:	4b21      	ldr	r3, [pc, #132]	; (800e820 <UART_SetConfig+0x904>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f003 0320 	and.w	r3, r3, #32
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d009      	beq.n	800e7ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e7a6:	4b1e      	ldr	r3, [pc, #120]	; (800e820 <UART_SetConfig+0x904>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	08db      	lsrs	r3, r3, #3
 800e7ac:	f003 0303 	and.w	r3, r3, #3
 800e7b0:	4a1d      	ldr	r2, [pc, #116]	; (800e828 <UART_SetConfig+0x90c>)
 800e7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e7b8:	e00f      	b.n	800e7da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e7ba:	4b1b      	ldr	r3, [pc, #108]	; (800e828 <UART_SetConfig+0x90c>)
 800e7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7be:	e00c      	b.n	800e7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e7c0:	4b1a      	ldr	r3, [pc, #104]	; (800e82c <UART_SetConfig+0x910>)
 800e7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7c4:	e009      	b.n	800e7da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7cc:	e005      	b.n	800e7da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 81ee 	beq.w	800ebbe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e6:	4a12      	ldr	r2, [pc, #72]	; (800e830 <UART_SetConfig+0x914>)
 800e7e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7f4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	4413      	add	r3, r2
 800e800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e802:	429a      	cmp	r2, r3
 800e804:	d305      	bcc.n	800e812 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e80e:	429a      	cmp	r2, r3
 800e810:	d910      	bls.n	800e834 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e818:	e1d1      	b.n	800ebbe <UART_SetConfig+0xca2>
 800e81a:	bf00      	nop
 800e81c:	40011c00 	.word	0x40011c00
 800e820:	58024400 	.word	0x58024400
 800e824:	58000c00 	.word	0x58000c00
 800e828:	03d09000 	.word	0x03d09000
 800e82c:	003d0900 	.word	0x003d0900
 800e830:	08013cfc 	.word	0x08013cfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e836:	2200      	movs	r2, #0
 800e838:	60bb      	str	r3, [r7, #8]
 800e83a:	60fa      	str	r2, [r7, #12]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e840:	4ac0      	ldr	r2, [pc, #768]	; (800eb44 <UART_SetConfig+0xc28>)
 800e842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e846:	b29b      	uxth	r3, r3
 800e848:	2200      	movs	r2, #0
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e856:	f7f1 ff5f 	bl	8000718 <__aeabi_uldivmod>
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	4610      	mov	r0, r2
 800e860:	4619      	mov	r1, r3
 800e862:	f04f 0200 	mov.w	r2, #0
 800e866:	f04f 0300 	mov.w	r3, #0
 800e86a:	020b      	lsls	r3, r1, #8
 800e86c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e870:	0202      	lsls	r2, r0, #8
 800e872:	6979      	ldr	r1, [r7, #20]
 800e874:	6849      	ldr	r1, [r1, #4]
 800e876:	0849      	lsrs	r1, r1, #1
 800e878:	2000      	movs	r0, #0
 800e87a:	460c      	mov	r4, r1
 800e87c:	4605      	mov	r5, r0
 800e87e:	eb12 0804 	adds.w	r8, r2, r4
 800e882:	eb43 0905 	adc.w	r9, r3, r5
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	469a      	mov	sl, r3
 800e88e:	4693      	mov	fp, r2
 800e890:	4652      	mov	r2, sl
 800e892:	465b      	mov	r3, fp
 800e894:	4640      	mov	r0, r8
 800e896:	4649      	mov	r1, r9
 800e898:	f7f1 ff3e 	bl	8000718 <__aeabi_uldivmod>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e8aa:	d308      	bcc.n	800e8be <UART_SetConfig+0x9a2>
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8b2:	d204      	bcs.n	800e8be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8ba:	60da      	str	r2, [r3, #12]
 800e8bc:	e17f      	b.n	800ebbe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8c4:	e17b      	b.n	800ebbe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ce:	f040 80bd 	bne.w	800ea4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e8d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8d6:	2b20      	cmp	r3, #32
 800e8d8:	dc48      	bgt.n	800e96c <UART_SetConfig+0xa50>
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	db7b      	blt.n	800e9d6 <UART_SetConfig+0xaba>
 800e8de:	2b20      	cmp	r3, #32
 800e8e0:	d879      	bhi.n	800e9d6 <UART_SetConfig+0xaba>
 800e8e2:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0x9cc>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e973 	.word	0x0800e973
 800e8ec:	0800e97b 	.word	0x0800e97b
 800e8f0:	0800e9d7 	.word	0x0800e9d7
 800e8f4:	0800e9d7 	.word	0x0800e9d7
 800e8f8:	0800e983 	.word	0x0800e983
 800e8fc:	0800e9d7 	.word	0x0800e9d7
 800e900:	0800e9d7 	.word	0x0800e9d7
 800e904:	0800e9d7 	.word	0x0800e9d7
 800e908:	0800e993 	.word	0x0800e993
 800e90c:	0800e9d7 	.word	0x0800e9d7
 800e910:	0800e9d7 	.word	0x0800e9d7
 800e914:	0800e9d7 	.word	0x0800e9d7
 800e918:	0800e9d7 	.word	0x0800e9d7
 800e91c:	0800e9d7 	.word	0x0800e9d7
 800e920:	0800e9d7 	.word	0x0800e9d7
 800e924:	0800e9d7 	.word	0x0800e9d7
 800e928:	0800e9a3 	.word	0x0800e9a3
 800e92c:	0800e9d7 	.word	0x0800e9d7
 800e930:	0800e9d7 	.word	0x0800e9d7
 800e934:	0800e9d7 	.word	0x0800e9d7
 800e938:	0800e9d7 	.word	0x0800e9d7
 800e93c:	0800e9d7 	.word	0x0800e9d7
 800e940:	0800e9d7 	.word	0x0800e9d7
 800e944:	0800e9d7 	.word	0x0800e9d7
 800e948:	0800e9d7 	.word	0x0800e9d7
 800e94c:	0800e9d7 	.word	0x0800e9d7
 800e950:	0800e9d7 	.word	0x0800e9d7
 800e954:	0800e9d7 	.word	0x0800e9d7
 800e958:	0800e9d7 	.word	0x0800e9d7
 800e95c:	0800e9d7 	.word	0x0800e9d7
 800e960:	0800e9d7 	.word	0x0800e9d7
 800e964:	0800e9d7 	.word	0x0800e9d7
 800e968:	0800e9c9 	.word	0x0800e9c9
 800e96c:	2b40      	cmp	r3, #64	; 0x40
 800e96e:	d02e      	beq.n	800e9ce <UART_SetConfig+0xab2>
 800e970:	e031      	b.n	800e9d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e972:	f7fa fc7d 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800e976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e978:	e033      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e97a:	f7fa fc8f 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800e97e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e980:	e02f      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e986:	4618      	mov	r0, r3
 800e988:	f7fc fb4a 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e990:	e027      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f7fc fc96 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a0:	e01f      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9a2:	4b69      	ldr	r3, [pc, #420]	; (800eb48 <UART_SetConfig+0xc2c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0320 	and.w	r3, r3, #32
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d009      	beq.n	800e9c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ae:	4b66      	ldr	r3, [pc, #408]	; (800eb48 <UART_SetConfig+0xc2c>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	08db      	lsrs	r3, r3, #3
 800e9b4:	f003 0303 	and.w	r3, r3, #3
 800e9b8:	4a64      	ldr	r2, [pc, #400]	; (800eb4c <UART_SetConfig+0xc30>)
 800e9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9c0:	e00f      	b.n	800e9e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e9c2:	4b62      	ldr	r3, [pc, #392]	; (800eb4c <UART_SetConfig+0xc30>)
 800e9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9c6:	e00c      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9c8:	4b61      	ldr	r3, [pc, #388]	; (800eb50 <UART_SetConfig+0xc34>)
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9cc:	e009      	b.n	800e9e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d4:	e005      	b.n	800e9e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 80ea 	beq.w	800ebbe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ee:	4a55      	ldr	r2, [pc, #340]	; (800eb44 <UART_SetConfig+0xc28>)
 800e9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9fc:	005a      	lsls	r2, r3, #1
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	085b      	lsrs	r3, r3, #1
 800ea04:	441a      	add	r2, r3
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea12:	2b0f      	cmp	r3, #15
 800ea14:	d916      	bls.n	800ea44 <UART_SetConfig+0xb28>
 800ea16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea1c:	d212      	bcs.n	800ea44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	f023 030f 	bic.w	r3, r3, #15
 800ea26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	085b      	lsrs	r3, r3, #1
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	f003 0307 	and.w	r3, r3, #7
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea36:	4313      	orrs	r3, r2
 800ea38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea40:	60da      	str	r2, [r3, #12]
 800ea42:	e0bc      	b.n	800ebbe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ea44:	2301      	movs	r3, #1
 800ea46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea4a:	e0b8      	b.n	800ebbe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea50:	2b20      	cmp	r3, #32
 800ea52:	dc4b      	bgt.n	800eaec <UART_SetConfig+0xbd0>
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f2c0 8087 	blt.w	800eb68 <UART_SetConfig+0xc4c>
 800ea5a:	2b20      	cmp	r3, #32
 800ea5c:	f200 8084 	bhi.w	800eb68 <UART_SetConfig+0xc4c>
 800ea60:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <UART_SetConfig+0xb4c>)
 800ea62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea66:	bf00      	nop
 800ea68:	0800eaf3 	.word	0x0800eaf3
 800ea6c:	0800eafb 	.word	0x0800eafb
 800ea70:	0800eb69 	.word	0x0800eb69
 800ea74:	0800eb69 	.word	0x0800eb69
 800ea78:	0800eb03 	.word	0x0800eb03
 800ea7c:	0800eb69 	.word	0x0800eb69
 800ea80:	0800eb69 	.word	0x0800eb69
 800ea84:	0800eb69 	.word	0x0800eb69
 800ea88:	0800eb13 	.word	0x0800eb13
 800ea8c:	0800eb69 	.word	0x0800eb69
 800ea90:	0800eb69 	.word	0x0800eb69
 800ea94:	0800eb69 	.word	0x0800eb69
 800ea98:	0800eb69 	.word	0x0800eb69
 800ea9c:	0800eb69 	.word	0x0800eb69
 800eaa0:	0800eb69 	.word	0x0800eb69
 800eaa4:	0800eb69 	.word	0x0800eb69
 800eaa8:	0800eb23 	.word	0x0800eb23
 800eaac:	0800eb69 	.word	0x0800eb69
 800eab0:	0800eb69 	.word	0x0800eb69
 800eab4:	0800eb69 	.word	0x0800eb69
 800eab8:	0800eb69 	.word	0x0800eb69
 800eabc:	0800eb69 	.word	0x0800eb69
 800eac0:	0800eb69 	.word	0x0800eb69
 800eac4:	0800eb69 	.word	0x0800eb69
 800eac8:	0800eb69 	.word	0x0800eb69
 800eacc:	0800eb69 	.word	0x0800eb69
 800ead0:	0800eb69 	.word	0x0800eb69
 800ead4:	0800eb69 	.word	0x0800eb69
 800ead8:	0800eb69 	.word	0x0800eb69
 800eadc:	0800eb69 	.word	0x0800eb69
 800eae0:	0800eb69 	.word	0x0800eb69
 800eae4:	0800eb69 	.word	0x0800eb69
 800eae8:	0800eb5b 	.word	0x0800eb5b
 800eaec:	2b40      	cmp	r3, #64	; 0x40
 800eaee:	d037      	beq.n	800eb60 <UART_SetConfig+0xc44>
 800eaf0:	e03a      	b.n	800eb68 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eaf2:	f7fa fbbd 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800eaf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eaf8:	e03c      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eafa:	f7fa fbcf 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800eafe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb00:	e038      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc fa8a 	bl	800b020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb10:	e030      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb12:	f107 0318 	add.w	r3, r7, #24
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fc fbd6 	bl	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb20:	e028      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb22:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <UART_SetConfig+0xc2c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f003 0320 	and.w	r3, r3, #32
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d012      	beq.n	800eb54 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb2e:	4b06      	ldr	r3, [pc, #24]	; (800eb48 <UART_SetConfig+0xc2c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	08db      	lsrs	r3, r3, #3
 800eb34:	f003 0303 	and.w	r3, r3, #3
 800eb38:	4a04      	ldr	r2, [pc, #16]	; (800eb4c <UART_SetConfig+0xc30>)
 800eb3a:	fa22 f303 	lsr.w	r3, r2, r3
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb40:	e018      	b.n	800eb74 <UART_SetConfig+0xc58>
 800eb42:	bf00      	nop
 800eb44:	08013cfc 	.word	0x08013cfc
 800eb48:	58024400 	.word	0x58024400
 800eb4c:	03d09000 	.word	0x03d09000
 800eb50:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800eb54:	4b24      	ldr	r3, [pc, #144]	; (800ebe8 <UART_SetConfig+0xccc>)
 800eb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb58:	e00c      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb5a:	4b24      	ldr	r3, [pc, #144]	; (800ebec <UART_SetConfig+0xcd0>)
 800eb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb5e:	e009      	b.n	800eb74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb66:	e005      	b.n	800eb74 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb72:	bf00      	nop
    }

    if (pclk != 0U)
 800eb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d021      	beq.n	800ebbe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7e:	4a1c      	ldr	r2, [pc, #112]	; (800ebf0 <UART_SetConfig+0xcd4>)
 800eb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb84:	461a      	mov	r2, r3
 800eb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb88:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	085b      	lsrs	r3, r3, #1
 800eb92:	441a      	add	r2, r3
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	685b      	ldr	r3, [r3, #4]
 800eb98:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb9c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	2b0f      	cmp	r3, #15
 800eba2:	d909      	bls.n	800ebb8 <UART_SetConfig+0xc9c>
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebaa:	d205      	bcs.n	800ebb8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	60da      	str	r2, [r3, #12]
 800ebb6:	e002      	b.n	800ebbe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ebda:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3748      	adds	r7, #72	; 0x48
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebe8:	03d09000 	.word	0x03d09000
 800ebec:	003d0900 	.word	0x003d0900
 800ebf0:	08013cfc 	.word	0x08013cfc

0800ebf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec00:	f003 0301 	and.w	r3, r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00a      	beq.n	800ec1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	430a      	orrs	r2, r1
 800ec1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec22:	f003 0302 	and.w	r3, r3, #2
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d00a      	beq.n	800ec40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	430a      	orrs	r2, r1
 800ec3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec44:	f003 0304 	and.w	r3, r3, #4
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00a      	beq.n	800ec62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec66:	f003 0308 	and.w	r3, r3, #8
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00a      	beq.n	800ec84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	430a      	orrs	r2, r1
 800ec82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec88:	f003 0310 	and.w	r3, r3, #16
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00a      	beq.n	800eca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	430a      	orrs	r2, r1
 800eca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecaa:	f003 0320 	and.w	r3, r3, #32
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00a      	beq.n	800ecc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	430a      	orrs	r2, r1
 800ecc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d01a      	beq.n	800ed0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecf2:	d10a      	bne.n	800ed0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	430a      	orrs	r2, r1
 800ed08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	605a      	str	r2, [r3, #4]
  }
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b098      	sub	sp, #96	; 0x60
 800ed3c:	af02      	add	r7, sp, #8
 800ed3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed48:	f7f4 f940 	bl	8002fcc <HAL_GetTick>
 800ed4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f003 0308 	and.w	r3, r3, #8
 800ed58:	2b08      	cmp	r3, #8
 800ed5a:	d12f      	bne.n	800edbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed64:	2200      	movs	r2, #0
 800ed66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 f88e 	bl	800ee8c <UART_WaitOnFlagUntilTimeout>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d022      	beq.n	800edbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7e:	e853 3f00 	ldrex	r3, [r3]
 800ed82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	461a      	mov	r2, r3
 800ed92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed94:	647b      	str	r3, [r7, #68]	; 0x44
 800ed96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed9c:	e841 2300 	strex	r3, r2, [r1]
 800eda0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1e6      	bne.n	800ed76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2220      	movs	r2, #32
 800edac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edb8:	2303      	movs	r3, #3
 800edba:	e063      	b.n	800ee84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f003 0304 	and.w	r3, r3, #4
 800edc6:	2b04      	cmp	r3, #4
 800edc8:	d149      	bne.n	800ee5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd2:	2200      	movs	r2, #0
 800edd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 f857 	bl	800ee8c <UART_WaitOnFlagUntilTimeout>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d03c      	beq.n	800ee5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edec:	e853 3f00 	ldrex	r3, [r3]
 800edf0:	623b      	str	r3, [r7, #32]
   return(result);
 800edf2:	6a3b      	ldr	r3, [r7, #32]
 800edf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	461a      	mov	r2, r3
 800ee00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee02:	633b      	str	r3, [r7, #48]	; 0x30
 800ee04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee0a:	e841 2300 	strex	r3, r2, [r1]
 800ee0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1e6      	bne.n	800ede4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3308      	adds	r3, #8
 800ee1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	e853 3f00 	ldrex	r3, [r3]
 800ee24:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f023 0301 	bic.w	r3, r3, #1
 800ee2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3308      	adds	r3, #8
 800ee34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee36:	61fa      	str	r2, [r7, #28]
 800ee38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3a:	69b9      	ldr	r1, [r7, #24]
 800ee3c:	69fa      	ldr	r2, [r7, #28]
 800ee3e:	e841 2300 	strex	r3, r2, [r1]
 800ee42:	617b      	str	r3, [r7, #20]
   return(result);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1e5      	bne.n	800ee16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2220      	movs	r2, #32
 800ee4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	e012      	b.n	800ee84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2220      	movs	r2, #32
 800ee62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2220      	movs	r2, #32
 800ee6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee82:	2300      	movs	r3, #0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3758      	adds	r7, #88	; 0x58
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee9c:	e049      	b.n	800ef32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea4:	d045      	beq.n	800ef32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eea6:	f7f4 f891 	bl	8002fcc <HAL_GetTick>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	69ba      	ldr	r2, [r7, #24]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d302      	bcc.n	800eebc <UART_WaitOnFlagUntilTimeout+0x30>
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d101      	bne.n	800eec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	e048      	b.n	800ef52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d031      	beq.n	800ef32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	69db      	ldr	r3, [r3, #28]
 800eed4:	f003 0308 	and.w	r3, r3, #8
 800eed8:	2b08      	cmp	r3, #8
 800eeda:	d110      	bne.n	800eefe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2208      	movs	r2, #8
 800eee2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f000 f921 	bl	800f12c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2208      	movs	r2, #8
 800eeee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800eefa:	2301      	movs	r3, #1
 800eefc:	e029      	b.n	800ef52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	69db      	ldr	r3, [r3, #28]
 800ef04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef0c:	d111      	bne.n	800ef32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef18:	68f8      	ldr	r0, [r7, #12]
 800ef1a:	f000 f907 	bl	800f12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2220      	movs	r2, #32
 800ef22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e00f      	b.n	800ef52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	69da      	ldr	r2, [r3, #28]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	68ba      	ldr	r2, [r7, #8]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	bf0c      	ite	eq
 800ef42:	2301      	moveq	r3, #1
 800ef44:	2300      	movne	r3, #0
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	461a      	mov	r2, r3
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d0a6      	beq.n	800ee9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
	...

0800ef5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b096      	sub	sp, #88	; 0x58
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	4613      	mov	r3, r2
 800ef68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	88fa      	ldrh	r2, [r7, #6]
 800ef74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2222      	movs	r2, #34	; 0x22
 800ef84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d02d      	beq.n	800efee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef98:	4a40      	ldr	r2, [pc, #256]	; (800f09c <UART_Start_Receive_DMA+0x140>)
 800ef9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efa2:	4a3f      	ldr	r2, [pc, #252]	; (800f0a0 <UART_Start_Receive_DMA+0x144>)
 800efa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efac:	4a3d      	ldr	r2, [pc, #244]	; (800f0a4 <UART_Start_Receive_DMA+0x148>)
 800efae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efb6:	2200      	movs	r2, #0
 800efb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3324      	adds	r3, #36	; 0x24
 800efc6:	4619      	mov	r1, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efcc:	461a      	mov	r2, r3
 800efce:	88fb      	ldrh	r3, [r7, #6]
 800efd0:	f7f5 ff8e 	bl	8004ef0 <HAL_DMA_Start_IT>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d009      	beq.n	800efee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2210      	movs	r2, #16
 800efde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2220      	movs	r2, #32
 800efe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	e051      	b.n	800f092 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d018      	beq.n	800f028 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effe:	e853 3f00 	ldrex	r3, [r3]
 800f002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f00a:	657b      	str	r3, [r7, #84]	; 0x54
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	461a      	mov	r2, r3
 800f012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f014:	64bb      	str	r3, [r7, #72]	; 0x48
 800f016:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f018:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f01a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f01c:	e841 2300 	strex	r3, r2, [r1]
 800f020:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1e6      	bne.n	800eff6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3308      	adds	r3, #8
 800f02e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f032:	e853 3f00 	ldrex	r3, [r3]
 800f036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	f043 0301 	orr.w	r3, r3, #1
 800f03e:	653b      	str	r3, [r7, #80]	; 0x50
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	3308      	adds	r3, #8
 800f046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f048:	637a      	str	r2, [r7, #52]	; 0x34
 800f04a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f04e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f050:	e841 2300 	strex	r3, r2, [r1]
 800f054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1e5      	bne.n	800f028 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	3308      	adds	r3, #8
 800f062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	e853 3f00 	ldrex	r3, [r3]
 800f06a:	613b      	str	r3, [r7, #16]
   return(result);
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f072:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	3308      	adds	r3, #8
 800f07a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f07c:	623a      	str	r2, [r7, #32]
 800f07e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f080:	69f9      	ldr	r1, [r7, #28]
 800f082:	6a3a      	ldr	r2, [r7, #32]
 800f084:	e841 2300 	strex	r3, r2, [r1]
 800f088:	61bb      	str	r3, [r7, #24]
   return(result);
 800f08a:	69bb      	ldr	r3, [r7, #24]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1e5      	bne.n	800f05c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3758      	adds	r7, #88	; 0x58
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	0800f1f9 	.word	0x0800f1f9
 800f0a0:	0800f321 	.word	0x0800f321
 800f0a4:	0800f35f 	.word	0x0800f35f

0800f0a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b08f      	sub	sp, #60	; 0x3c
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b6:	6a3b      	ldr	r3, [r7, #32]
 800f0b8:	e853 3f00 	ldrex	r3, [r3]
 800f0bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0d6:	e841 2300 	strex	r3, r2, [r1]
 800f0da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1e6      	bne.n	800f0b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	e853 3f00 	ldrex	r3, [r3]
 800f0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f0f8:	633b      	str	r3, [r7, #48]	; 0x30
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	3308      	adds	r3, #8
 800f100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f102:	61ba      	str	r2, [r7, #24]
 800f104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f106:	6979      	ldr	r1, [r7, #20]
 800f108:	69ba      	ldr	r2, [r7, #24]
 800f10a:	e841 2300 	strex	r3, r2, [r1]
 800f10e:	613b      	str	r3, [r7, #16]
   return(result);
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1e5      	bne.n	800f0e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2220      	movs	r2, #32
 800f11a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800f11e:	bf00      	nop
 800f120:	373c      	adds	r7, #60	; 0x3c
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
	...

0800f12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b095      	sub	sp, #84	; 0x54
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f13c:	e853 3f00 	ldrex	r3, [r3]
 800f140:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f148:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f152:	643b      	str	r3, [r7, #64]	; 0x40
 800f154:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f156:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f15a:	e841 2300 	strex	r3, r2, [r1]
 800f15e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e6      	bne.n	800f134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3308      	adds	r3, #8
 800f16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16e:	6a3b      	ldr	r3, [r7, #32]
 800f170:	e853 3f00 	ldrex	r3, [r3]
 800f174:	61fb      	str	r3, [r7, #28]
   return(result);
 800f176:	69fa      	ldr	r2, [r7, #28]
 800f178:	4b1e      	ldr	r3, [pc, #120]	; (800f1f4 <UART_EndRxTransfer+0xc8>)
 800f17a:	4013      	ands	r3, r2
 800f17c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	3308      	adds	r3, #8
 800f184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f186:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f18a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f18e:	e841 2300 	strex	r3, r2, [r1]
 800f192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1e5      	bne.n	800f166 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d118      	bne.n	800f1d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	e853 3f00 	ldrex	r3, [r3]
 800f1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	f023 0310 	bic.w	r3, r3, #16
 800f1b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c0:	61bb      	str	r3, [r7, #24]
 800f1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c4:	6979      	ldr	r1, [r7, #20]
 800f1c6:	69ba      	ldr	r2, [r7, #24]
 800f1c8:	e841 2300 	strex	r3, r2, [r1]
 800f1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1e6      	bne.n	800f1a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2220      	movs	r2, #32
 800f1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f1e8:	bf00      	nop
 800f1ea:	3754      	adds	r7, #84	; 0x54
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	effffffe 	.word	0xeffffffe

0800f1f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b09c      	sub	sp, #112	; 0x70
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f204:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	69db      	ldr	r3, [r3, #28]
 800f20a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f20e:	d071      	beq.n	800f2f4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f212:	2200      	movs	r2, #0
 800f214:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f220:	e853 3f00 	ldrex	r3, [r3]
 800f224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f22c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	461a      	mov	r2, r3
 800f234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f236:	65bb      	str	r3, [r7, #88]	; 0x58
 800f238:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f23c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f23e:	e841 2300 	strex	r3, r2, [r1]
 800f242:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f246:	2b00      	cmp	r3, #0
 800f248:	d1e6      	bne.n	800f218 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f24a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	3308      	adds	r3, #8
 800f250:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	e853 3f00 	ldrex	r3, [r3]
 800f258:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f25c:	f023 0301 	bic.w	r3, r3, #1
 800f260:	667b      	str	r3, [r7, #100]	; 0x64
 800f262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	3308      	adds	r3, #8
 800f268:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f26a:	647a      	str	r2, [r7, #68]	; 0x44
 800f26c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f272:	e841 2300 	strex	r3, r2, [r1]
 800f276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1e5      	bne.n	800f24a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f27e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	3308      	adds	r3, #8
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f288:	e853 3f00 	ldrex	r3, [r3]
 800f28c:	623b      	str	r3, [r7, #32]
   return(result);
 800f28e:	6a3b      	ldr	r3, [r7, #32]
 800f290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f294:	663b      	str	r3, [r7, #96]	; 0x60
 800f296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3308      	adds	r3, #8
 800f29c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f29e:	633a      	str	r2, [r7, #48]	; 0x30
 800f2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2a6:	e841 2300 	strex	r3, r2, [r1]
 800f2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1e5      	bne.n	800f27e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f2b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2b4:	2220      	movs	r2, #32
 800f2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d118      	bne.n	800f2f4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	e853 3f00 	ldrex	r3, [r3]
 800f2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f023 0310 	bic.w	r3, r3, #16
 800f2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2e0:	61fb      	str	r3, [r7, #28]
 800f2e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e4:	69b9      	ldr	r1, [r7, #24]
 800f2e6:	69fa      	ldr	r2, [r7, #28]
 800f2e8:	e841 2300 	strex	r3, r2, [r1]
 800f2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1e6      	bne.n	800f2c2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d107      	bne.n	800f312 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f308:	4619      	mov	r1, r3
 800f30a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f30c:	f7f1 fc82 	bl	8000c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f310:	e002      	b.n	800f318 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f312:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f314:	f7fe fde4 	bl	800dee0 <HAL_UART_RxCpltCallback>
}
 800f318:	bf00      	nop
 800f31a:	3770      	adds	r7, #112	; 0x70
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2201      	movs	r2, #1
 800f332:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d109      	bne.n	800f350 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f342:	085b      	lsrs	r3, r3, #1
 800f344:	b29b      	uxth	r3, r3
 800f346:	4619      	mov	r1, r3
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	f7f1 fc63 	bl	8000c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f34e:	e002      	b.n	800f356 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7fe fdcf 	bl	800def4 <HAL_UART_RxHalfCpltCallback>
}
 800f356:	bf00      	nop
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f372:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f37a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f386:	2b80      	cmp	r3, #128	; 0x80
 800f388:	d109      	bne.n	800f39e <UART_DMAError+0x40>
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	2b21      	cmp	r3, #33	; 0x21
 800f38e:	d106      	bne.n	800f39e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2200      	movs	r2, #0
 800f394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f398:	6978      	ldr	r0, [r7, #20]
 800f39a:	f7ff fe85 	bl	800f0a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a8:	2b40      	cmp	r3, #64	; 0x40
 800f3aa:	d109      	bne.n	800f3c0 <UART_DMAError+0x62>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2b22      	cmp	r3, #34	; 0x22
 800f3b0:	d106      	bne.n	800f3c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f3ba:	6978      	ldr	r0, [r7, #20]
 800f3bc:	f7ff feb6 	bl	800f12c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3c6:	f043 0210 	orr.w	r2, r3, #16
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3d0:	6978      	ldr	r0, [r7, #20]
 800f3d2:	f7fe fd99 	bl	800df08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3d6:	bf00      	nop
 800f3d8:	3718      	adds	r7, #24
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b084      	sub	sp, #16
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7fe fd83 	bl	800df08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f402:	bf00      	nop
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b088      	sub	sp, #32
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	e853 3f00 	ldrex	r3, [r3]
 800f41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f426:	61fb      	str	r3, [r7, #28]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	461a      	mov	r2, r3
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	61bb      	str	r3, [r7, #24]
 800f432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f434:	6979      	ldr	r1, [r7, #20]
 800f436:	69ba      	ldr	r2, [r7, #24]
 800f438:	e841 2300 	strex	r3, r2, [r1]
 800f43c:	613b      	str	r3, [r7, #16]
   return(result);
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1e6      	bne.n	800f412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2220      	movs	r2, #32
 800f448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7fe fd3a 	bl	800decc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f458:	bf00      	nop
 800f45a:	3720      	adds	r7, #32
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f488:	b480      	push	{r7}
 800f48a:	b083      	sub	sp, #12
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f490:	bf00      	nop
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d101      	bne.n	800f4b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f4ae:	2302      	movs	r3, #2
 800f4b0:	e027      	b.n	800f502 <HAL_UARTEx_DisableFifoMode+0x66>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2224      	movs	r2, #36	; 0x24
 800f4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f022 0201 	bic.w	r2, r2, #1
 800f4d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f4e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2220      	movs	r2, #32
 800f4f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	3714      	adds	r7, #20
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b084      	sub	sp, #16
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
 800f516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d101      	bne.n	800f526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f522:	2302      	movs	r3, #2
 800f524:	e02d      	b.n	800f582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2201      	movs	r2, #1
 800f52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2224      	movs	r2, #36	; 0x24
 800f532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0201 	bic.w	r2, r2, #1
 800f54c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	683a      	ldr	r2, [r7, #0]
 800f55e:	430a      	orrs	r2, r1
 800f560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f8a4 	bl	800f6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b084      	sub	sp, #16
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d101      	bne.n	800f5a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e02d      	b.n	800f5fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2224      	movs	r2, #36	; 0x24
 800f5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f022 0201 	bic.w	r2, r2, #1
 800f5c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	683a      	ldr	r2, [r7, #0]
 800f5da:	430a      	orrs	r2, r1
 800f5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f866 	bl	800f6b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b08c      	sub	sp, #48	; 0x30
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	60f8      	str	r0, [r7, #12]
 800f60e:	60b9      	str	r1, [r7, #8]
 800f610:	4613      	mov	r3, r2
 800f612:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f61a:	2b20      	cmp	r3, #32
 800f61c:	d142      	bne.n	800f6a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f624:	88fb      	ldrh	r3, [r7, #6]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e03b      	b.n	800f6a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2201      	movs	r2, #1
 800f632:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2200      	movs	r2, #0
 800f638:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f63a:	88fb      	ldrh	r3, [r7, #6]
 800f63c:	461a      	mov	r2, r3
 800f63e:	68b9      	ldr	r1, [r7, #8]
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff fc8b 	bl	800ef5c <UART_Start_Receive_DMA>
 800f646:	4603      	mov	r3, r0
 800f648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f64c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f650:	2b00      	cmp	r3, #0
 800f652:	d124      	bne.n	800f69e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d11d      	bne.n	800f698 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2210      	movs	r2, #16
 800f662:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	e853 3f00 	ldrex	r3, [r3]
 800f670:	617b      	str	r3, [r7, #20]
   return(result);
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f043 0310 	orr.w	r3, r3, #16
 800f678:	62bb      	str	r3, [r7, #40]	; 0x28
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f682:	627b      	str	r3, [r7, #36]	; 0x24
 800f684:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f686:	6a39      	ldr	r1, [r7, #32]
 800f688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f68a:	e841 2300 	strex	r3, r2, [r1]
 800f68e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1e6      	bne.n	800f664 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800f696:	e002      	b.n	800f69e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f69e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6a2:	e000      	b.n	800f6a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f6a4:	2302      	movs	r3, #2
  }
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3730      	adds	r7, #48	; 0x30
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
	...

0800f6b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d108      	bne.n	800f6d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f6d0:	e031      	b.n	800f736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f6d2:	2310      	movs	r3, #16
 800f6d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f6d6:	2310      	movs	r3, #16
 800f6d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	0e5b      	lsrs	r3, r3, #25
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	f003 0307 	and.w	r3, r3, #7
 800f6e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	0f5b      	lsrs	r3, r3, #29
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	f003 0307 	and.w	r3, r3, #7
 800f6f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f6fa:	7bbb      	ldrb	r3, [r7, #14]
 800f6fc:	7b3a      	ldrb	r2, [r7, #12]
 800f6fe:	4911      	ldr	r1, [pc, #68]	; (800f744 <UARTEx_SetNbDataToProcess+0x94>)
 800f700:	5c8a      	ldrb	r2, [r1, r2]
 800f702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f706:	7b3a      	ldrb	r2, [r7, #12]
 800f708:	490f      	ldr	r1, [pc, #60]	; (800f748 <UARTEx_SetNbDataToProcess+0x98>)
 800f70a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f70c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f710:	b29a      	uxth	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	7b7a      	ldrb	r2, [r7, #13]
 800f71c:	4909      	ldr	r1, [pc, #36]	; (800f744 <UARTEx_SetNbDataToProcess+0x94>)
 800f71e:	5c8a      	ldrb	r2, [r1, r2]
 800f720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f724:	7b7a      	ldrb	r2, [r7, #13]
 800f726:	4908      	ldr	r1, [pc, #32]	; (800f748 <UARTEx_SetNbDataToProcess+0x98>)
 800f728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f72a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f72e:	b29a      	uxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f736:	bf00      	nop
 800f738:	3714      	adds	r7, #20
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	08013d14 	.word	0x08013d14
 800f748:	08013d1c 	.word	0x08013d1c

0800f74c <atof>:
 800f74c:	2100      	movs	r1, #0
 800f74e:	f001 bf39 	b.w	80115c4 <strtod>
	...

0800f754 <__errno>:
 800f754:	4b01      	ldr	r3, [pc, #4]	; (800f75c <__errno+0x8>)
 800f756:	6818      	ldr	r0, [r3, #0]
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	24000010 	.word	0x24000010

0800f760 <__sflush_r>:
 800f760:	898a      	ldrh	r2, [r1, #12]
 800f762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f766:	4605      	mov	r5, r0
 800f768:	0710      	lsls	r0, r2, #28
 800f76a:	460c      	mov	r4, r1
 800f76c:	d458      	bmi.n	800f820 <__sflush_r+0xc0>
 800f76e:	684b      	ldr	r3, [r1, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	dc05      	bgt.n	800f780 <__sflush_r+0x20>
 800f774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f776:	2b00      	cmp	r3, #0
 800f778:	dc02      	bgt.n	800f780 <__sflush_r+0x20>
 800f77a:	2000      	movs	r0, #0
 800f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f782:	2e00      	cmp	r6, #0
 800f784:	d0f9      	beq.n	800f77a <__sflush_r+0x1a>
 800f786:	2300      	movs	r3, #0
 800f788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f78c:	682f      	ldr	r7, [r5, #0]
 800f78e:	602b      	str	r3, [r5, #0]
 800f790:	d032      	beq.n	800f7f8 <__sflush_r+0x98>
 800f792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	075a      	lsls	r2, r3, #29
 800f798:	d505      	bpl.n	800f7a6 <__sflush_r+0x46>
 800f79a:	6863      	ldr	r3, [r4, #4]
 800f79c:	1ac0      	subs	r0, r0, r3
 800f79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7a0:	b10b      	cbz	r3, 800f7a6 <__sflush_r+0x46>
 800f7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7a4:	1ac0      	subs	r0, r0, r3
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ac:	6a21      	ldr	r1, [r4, #32]
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	47b0      	blx	r6
 800f7b2:	1c43      	adds	r3, r0, #1
 800f7b4:	89a3      	ldrh	r3, [r4, #12]
 800f7b6:	d106      	bne.n	800f7c6 <__sflush_r+0x66>
 800f7b8:	6829      	ldr	r1, [r5, #0]
 800f7ba:	291d      	cmp	r1, #29
 800f7bc:	d82c      	bhi.n	800f818 <__sflush_r+0xb8>
 800f7be:	4a2a      	ldr	r2, [pc, #168]	; (800f868 <__sflush_r+0x108>)
 800f7c0:	40ca      	lsrs	r2, r1
 800f7c2:	07d6      	lsls	r6, r2, #31
 800f7c4:	d528      	bpl.n	800f818 <__sflush_r+0xb8>
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	6062      	str	r2, [r4, #4]
 800f7ca:	04d9      	lsls	r1, r3, #19
 800f7cc:	6922      	ldr	r2, [r4, #16]
 800f7ce:	6022      	str	r2, [r4, #0]
 800f7d0:	d504      	bpl.n	800f7dc <__sflush_r+0x7c>
 800f7d2:	1c42      	adds	r2, r0, #1
 800f7d4:	d101      	bne.n	800f7da <__sflush_r+0x7a>
 800f7d6:	682b      	ldr	r3, [r5, #0]
 800f7d8:	b903      	cbnz	r3, 800f7dc <__sflush_r+0x7c>
 800f7da:	6560      	str	r0, [r4, #84]	; 0x54
 800f7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7de:	602f      	str	r7, [r5, #0]
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	d0ca      	beq.n	800f77a <__sflush_r+0x1a>
 800f7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7e8:	4299      	cmp	r1, r3
 800f7ea:	d002      	beq.n	800f7f2 <__sflush_r+0x92>
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f000 fa33 	bl	800fc58 <_free_r>
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f7f6:	e7c1      	b.n	800f77c <__sflush_r+0x1c>
 800f7f8:	6a21      	ldr	r1, [r4, #32]
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b0      	blx	r6
 800f800:	1c41      	adds	r1, r0, #1
 800f802:	d1c7      	bne.n	800f794 <__sflush_r+0x34>
 800f804:	682b      	ldr	r3, [r5, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d0c4      	beq.n	800f794 <__sflush_r+0x34>
 800f80a:	2b1d      	cmp	r3, #29
 800f80c:	d001      	beq.n	800f812 <__sflush_r+0xb2>
 800f80e:	2b16      	cmp	r3, #22
 800f810:	d101      	bne.n	800f816 <__sflush_r+0xb6>
 800f812:	602f      	str	r7, [r5, #0]
 800f814:	e7b1      	b.n	800f77a <__sflush_r+0x1a>
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f81c:	81a3      	strh	r3, [r4, #12]
 800f81e:	e7ad      	b.n	800f77c <__sflush_r+0x1c>
 800f820:	690f      	ldr	r7, [r1, #16]
 800f822:	2f00      	cmp	r7, #0
 800f824:	d0a9      	beq.n	800f77a <__sflush_r+0x1a>
 800f826:	0793      	lsls	r3, r2, #30
 800f828:	680e      	ldr	r6, [r1, #0]
 800f82a:	bf08      	it	eq
 800f82c:	694b      	ldreq	r3, [r1, #20]
 800f82e:	600f      	str	r7, [r1, #0]
 800f830:	bf18      	it	ne
 800f832:	2300      	movne	r3, #0
 800f834:	eba6 0807 	sub.w	r8, r6, r7
 800f838:	608b      	str	r3, [r1, #8]
 800f83a:	f1b8 0f00 	cmp.w	r8, #0
 800f83e:	dd9c      	ble.n	800f77a <__sflush_r+0x1a>
 800f840:	6a21      	ldr	r1, [r4, #32]
 800f842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f844:	4643      	mov	r3, r8
 800f846:	463a      	mov	r2, r7
 800f848:	4628      	mov	r0, r5
 800f84a:	47b0      	blx	r6
 800f84c:	2800      	cmp	r0, #0
 800f84e:	dc06      	bgt.n	800f85e <__sflush_r+0xfe>
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	f04f 30ff 	mov.w	r0, #4294967295
 800f85c:	e78e      	b.n	800f77c <__sflush_r+0x1c>
 800f85e:	4407      	add	r7, r0
 800f860:	eba8 0800 	sub.w	r8, r8, r0
 800f864:	e7e9      	b.n	800f83a <__sflush_r+0xda>
 800f866:	bf00      	nop
 800f868:	20400001 	.word	0x20400001

0800f86c <_fflush_r>:
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	690b      	ldr	r3, [r1, #16]
 800f870:	4605      	mov	r5, r0
 800f872:	460c      	mov	r4, r1
 800f874:	b913      	cbnz	r3, 800f87c <_fflush_r+0x10>
 800f876:	2500      	movs	r5, #0
 800f878:	4628      	mov	r0, r5
 800f87a:	bd38      	pop	{r3, r4, r5, pc}
 800f87c:	b118      	cbz	r0, 800f886 <_fflush_r+0x1a>
 800f87e:	6983      	ldr	r3, [r0, #24]
 800f880:	b90b      	cbnz	r3, 800f886 <_fflush_r+0x1a>
 800f882:	f000 f887 	bl	800f994 <__sinit>
 800f886:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <_fflush_r+0x6c>)
 800f888:	429c      	cmp	r4, r3
 800f88a:	d11b      	bne.n	800f8c4 <_fflush_r+0x58>
 800f88c:	686c      	ldr	r4, [r5, #4]
 800f88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0ef      	beq.n	800f876 <_fflush_r+0xa>
 800f896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f898:	07d0      	lsls	r0, r2, #31
 800f89a:	d404      	bmi.n	800f8a6 <_fflush_r+0x3a>
 800f89c:	0599      	lsls	r1, r3, #22
 800f89e:	d402      	bmi.n	800f8a6 <_fflush_r+0x3a>
 800f8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8a2:	f000 f94c 	bl	800fb3e <__retarget_lock_acquire_recursive>
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	f7ff ff59 	bl	800f760 <__sflush_r>
 800f8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8b0:	07da      	lsls	r2, r3, #31
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	d4e0      	bmi.n	800f878 <_fflush_r+0xc>
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	059b      	lsls	r3, r3, #22
 800f8ba:	d4dd      	bmi.n	800f878 <_fflush_r+0xc>
 800f8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8be:	f000 f93f 	bl	800fb40 <__retarget_lock_release_recursive>
 800f8c2:	e7d9      	b.n	800f878 <_fflush_r+0xc>
 800f8c4:	4b05      	ldr	r3, [pc, #20]	; (800f8dc <_fflush_r+0x70>)
 800f8c6:	429c      	cmp	r4, r3
 800f8c8:	d101      	bne.n	800f8ce <_fflush_r+0x62>
 800f8ca:	68ac      	ldr	r4, [r5, #8]
 800f8cc:	e7df      	b.n	800f88e <_fflush_r+0x22>
 800f8ce:	4b04      	ldr	r3, [pc, #16]	; (800f8e0 <_fflush_r+0x74>)
 800f8d0:	429c      	cmp	r4, r3
 800f8d2:	bf08      	it	eq
 800f8d4:	68ec      	ldreq	r4, [r5, #12]
 800f8d6:	e7da      	b.n	800f88e <_fflush_r+0x22>
 800f8d8:	08013e48 	.word	0x08013e48
 800f8dc:	08013e68 	.word	0x08013e68
 800f8e0:	08013e28 	.word	0x08013e28

0800f8e4 <std>:
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	b510      	push	{r4, lr}
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8f2:	6083      	str	r3, [r0, #8]
 800f8f4:	8181      	strh	r1, [r0, #12]
 800f8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800f8f8:	81c2      	strh	r2, [r0, #14]
 800f8fa:	6183      	str	r3, [r0, #24]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	2208      	movs	r2, #8
 800f900:	305c      	adds	r0, #92	; 0x5c
 800f902:	f000 f9a1 	bl	800fc48 <memset>
 800f906:	4b05      	ldr	r3, [pc, #20]	; (800f91c <std+0x38>)
 800f908:	6263      	str	r3, [r4, #36]	; 0x24
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <std+0x3c>)
 800f90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <std+0x40>)
 800f910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f912:	4b05      	ldr	r3, [pc, #20]	; (800f928 <std+0x44>)
 800f914:	6224      	str	r4, [r4, #32]
 800f916:	6323      	str	r3, [r4, #48]	; 0x30
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	bf00      	nop
 800f91c:	08010975 	.word	0x08010975
 800f920:	08010997 	.word	0x08010997
 800f924:	080109cf 	.word	0x080109cf
 800f928:	080109f3 	.word	0x080109f3

0800f92c <_cleanup_r>:
 800f92c:	4901      	ldr	r1, [pc, #4]	; (800f934 <_cleanup_r+0x8>)
 800f92e:	f000 b8c1 	b.w	800fab4 <_fwalk_reent>
 800f932:	bf00      	nop
 800f934:	0800f86d 	.word	0x0800f86d

0800f938 <__sfmoreglue>:
 800f938:	b570      	push	{r4, r5, r6, lr}
 800f93a:	2268      	movs	r2, #104	; 0x68
 800f93c:	1e4d      	subs	r5, r1, #1
 800f93e:	4355      	muls	r5, r2
 800f940:	460e      	mov	r6, r1
 800f942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f946:	f000 f9f3 	bl	800fd30 <_malloc_r>
 800f94a:	4604      	mov	r4, r0
 800f94c:	b140      	cbz	r0, 800f960 <__sfmoreglue+0x28>
 800f94e:	2100      	movs	r1, #0
 800f950:	e9c0 1600 	strd	r1, r6, [r0]
 800f954:	300c      	adds	r0, #12
 800f956:	60a0      	str	r0, [r4, #8]
 800f958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f95c:	f000 f974 	bl	800fc48 <memset>
 800f960:	4620      	mov	r0, r4
 800f962:	bd70      	pop	{r4, r5, r6, pc}

0800f964 <__sfp_lock_acquire>:
 800f964:	4801      	ldr	r0, [pc, #4]	; (800f96c <__sfp_lock_acquire+0x8>)
 800f966:	f000 b8ea 	b.w	800fb3e <__retarget_lock_acquire_recursive>
 800f96a:	bf00      	nop
 800f96c:	240011c9 	.word	0x240011c9

0800f970 <__sfp_lock_release>:
 800f970:	4801      	ldr	r0, [pc, #4]	; (800f978 <__sfp_lock_release+0x8>)
 800f972:	f000 b8e5 	b.w	800fb40 <__retarget_lock_release_recursive>
 800f976:	bf00      	nop
 800f978:	240011c9 	.word	0x240011c9

0800f97c <__sinit_lock_acquire>:
 800f97c:	4801      	ldr	r0, [pc, #4]	; (800f984 <__sinit_lock_acquire+0x8>)
 800f97e:	f000 b8de 	b.w	800fb3e <__retarget_lock_acquire_recursive>
 800f982:	bf00      	nop
 800f984:	240011ca 	.word	0x240011ca

0800f988 <__sinit_lock_release>:
 800f988:	4801      	ldr	r0, [pc, #4]	; (800f990 <__sinit_lock_release+0x8>)
 800f98a:	f000 b8d9 	b.w	800fb40 <__retarget_lock_release_recursive>
 800f98e:	bf00      	nop
 800f990:	240011ca 	.word	0x240011ca

0800f994 <__sinit>:
 800f994:	b510      	push	{r4, lr}
 800f996:	4604      	mov	r4, r0
 800f998:	f7ff fff0 	bl	800f97c <__sinit_lock_acquire>
 800f99c:	69a3      	ldr	r3, [r4, #24]
 800f99e:	b11b      	cbz	r3, 800f9a8 <__sinit+0x14>
 800f9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a4:	f7ff bff0 	b.w	800f988 <__sinit_lock_release>
 800f9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800f9ae:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <__sinit+0x68>)
 800f9b0:	4a13      	ldr	r2, [pc, #76]	; (800fa00 <__sinit+0x6c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9b6:	42a3      	cmp	r3, r4
 800f9b8:	bf04      	itt	eq
 800f9ba:	2301      	moveq	r3, #1
 800f9bc:	61a3      	streq	r3, [r4, #24]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 f820 	bl	800fa04 <__sfp>
 800f9c4:	6060      	str	r0, [r4, #4]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f000 f81c 	bl	800fa04 <__sfp>
 800f9cc:	60a0      	str	r0, [r4, #8]
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 f818 	bl	800fa04 <__sfp>
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	60e0      	str	r0, [r4, #12]
 800f9d8:	2104      	movs	r1, #4
 800f9da:	6860      	ldr	r0, [r4, #4]
 800f9dc:	f7ff ff82 	bl	800f8e4 <std>
 800f9e0:	68a0      	ldr	r0, [r4, #8]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	2109      	movs	r1, #9
 800f9e6:	f7ff ff7d 	bl	800f8e4 <std>
 800f9ea:	68e0      	ldr	r0, [r4, #12]
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	2112      	movs	r1, #18
 800f9f0:	f7ff ff78 	bl	800f8e4 <std>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	61a3      	str	r3, [r4, #24]
 800f9f8:	e7d2      	b.n	800f9a0 <__sinit+0xc>
 800f9fa:	bf00      	nop
 800f9fc:	08013e88 	.word	0x08013e88
 800fa00:	0800f92d 	.word	0x0800f92d

0800fa04 <__sfp>:
 800fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa06:	4607      	mov	r7, r0
 800fa08:	f7ff ffac 	bl	800f964 <__sfp_lock_acquire>
 800fa0c:	4b1e      	ldr	r3, [pc, #120]	; (800fa88 <__sfp+0x84>)
 800fa0e:	681e      	ldr	r6, [r3, #0]
 800fa10:	69b3      	ldr	r3, [r6, #24]
 800fa12:	b913      	cbnz	r3, 800fa1a <__sfp+0x16>
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7ff ffbd 	bl	800f994 <__sinit>
 800fa1a:	3648      	adds	r6, #72	; 0x48
 800fa1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa20:	3b01      	subs	r3, #1
 800fa22:	d503      	bpl.n	800fa2c <__sfp+0x28>
 800fa24:	6833      	ldr	r3, [r6, #0]
 800fa26:	b30b      	cbz	r3, 800fa6c <__sfp+0x68>
 800fa28:	6836      	ldr	r6, [r6, #0]
 800fa2a:	e7f7      	b.n	800fa1c <__sfp+0x18>
 800fa2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa30:	b9d5      	cbnz	r5, 800fa68 <__sfp+0x64>
 800fa32:	4b16      	ldr	r3, [pc, #88]	; (800fa8c <__sfp+0x88>)
 800fa34:	60e3      	str	r3, [r4, #12]
 800fa36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa3a:	6665      	str	r5, [r4, #100]	; 0x64
 800fa3c:	f000 f87e 	bl	800fb3c <__retarget_lock_init_recursive>
 800fa40:	f7ff ff96 	bl	800f970 <__sfp_lock_release>
 800fa44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa4c:	6025      	str	r5, [r4, #0]
 800fa4e:	61a5      	str	r5, [r4, #24]
 800fa50:	2208      	movs	r2, #8
 800fa52:	4629      	mov	r1, r5
 800fa54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa58:	f000 f8f6 	bl	800fc48 <memset>
 800fa5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa64:	4620      	mov	r0, r4
 800fa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa68:	3468      	adds	r4, #104	; 0x68
 800fa6a:	e7d9      	b.n	800fa20 <__sfp+0x1c>
 800fa6c:	2104      	movs	r1, #4
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f7ff ff62 	bl	800f938 <__sfmoreglue>
 800fa74:	4604      	mov	r4, r0
 800fa76:	6030      	str	r0, [r6, #0]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	d1d5      	bne.n	800fa28 <__sfp+0x24>
 800fa7c:	f7ff ff78 	bl	800f970 <__sfp_lock_release>
 800fa80:	230c      	movs	r3, #12
 800fa82:	603b      	str	r3, [r7, #0]
 800fa84:	e7ee      	b.n	800fa64 <__sfp+0x60>
 800fa86:	bf00      	nop
 800fa88:	08013e88 	.word	0x08013e88
 800fa8c:	ffff0001 	.word	0xffff0001

0800fa90 <fiprintf>:
 800fa90:	b40e      	push	{r1, r2, r3}
 800fa92:	b503      	push	{r0, r1, lr}
 800fa94:	4601      	mov	r1, r0
 800fa96:	ab03      	add	r3, sp, #12
 800fa98:	4805      	ldr	r0, [pc, #20]	; (800fab0 <fiprintf+0x20>)
 800fa9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa9e:	6800      	ldr	r0, [r0, #0]
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	f000 f9e3 	bl	800fe6c <_vfiprintf_r>
 800faa6:	b002      	add	sp, #8
 800faa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800faac:	b003      	add	sp, #12
 800faae:	4770      	bx	lr
 800fab0:	24000010 	.word	0x24000010

0800fab4 <_fwalk_reent>:
 800fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	4606      	mov	r6, r0
 800faba:	4688      	mov	r8, r1
 800fabc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fac0:	2700      	movs	r7, #0
 800fac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fac6:	f1b9 0901 	subs.w	r9, r9, #1
 800faca:	d505      	bpl.n	800fad8 <_fwalk_reent+0x24>
 800facc:	6824      	ldr	r4, [r4, #0]
 800face:	2c00      	cmp	r4, #0
 800fad0:	d1f7      	bne.n	800fac2 <_fwalk_reent+0xe>
 800fad2:	4638      	mov	r0, r7
 800fad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad8:	89ab      	ldrh	r3, [r5, #12]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d907      	bls.n	800faee <_fwalk_reent+0x3a>
 800fade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fae2:	3301      	adds	r3, #1
 800fae4:	d003      	beq.n	800faee <_fwalk_reent+0x3a>
 800fae6:	4629      	mov	r1, r5
 800fae8:	4630      	mov	r0, r6
 800faea:	47c0      	blx	r8
 800faec:	4307      	orrs	r7, r0
 800faee:	3568      	adds	r5, #104	; 0x68
 800faf0:	e7e9      	b.n	800fac6 <_fwalk_reent+0x12>
	...

0800faf4 <__libc_init_array>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4d0d      	ldr	r5, [pc, #52]	; (800fb2c <__libc_init_array+0x38>)
 800faf8:	4c0d      	ldr	r4, [pc, #52]	; (800fb30 <__libc_init_array+0x3c>)
 800fafa:	1b64      	subs	r4, r4, r5
 800fafc:	10a4      	asrs	r4, r4, #2
 800fafe:	2600      	movs	r6, #0
 800fb00:	42a6      	cmp	r6, r4
 800fb02:	d109      	bne.n	800fb18 <__libc_init_array+0x24>
 800fb04:	4d0b      	ldr	r5, [pc, #44]	; (800fb34 <__libc_init_array+0x40>)
 800fb06:	4c0c      	ldr	r4, [pc, #48]	; (800fb38 <__libc_init_array+0x44>)
 800fb08:	f003 fdce 	bl	80136a8 <_init>
 800fb0c:	1b64      	subs	r4, r4, r5
 800fb0e:	10a4      	asrs	r4, r4, #2
 800fb10:	2600      	movs	r6, #0
 800fb12:	42a6      	cmp	r6, r4
 800fb14:	d105      	bne.n	800fb22 <__libc_init_array+0x2e>
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb1c:	4798      	blx	r3
 800fb1e:	3601      	adds	r6, #1
 800fb20:	e7ee      	b.n	800fb00 <__libc_init_array+0xc>
 800fb22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb26:	4798      	blx	r3
 800fb28:	3601      	adds	r6, #1
 800fb2a:	e7f2      	b.n	800fb12 <__libc_init_array+0x1e>
 800fb2c:	0801422c 	.word	0x0801422c
 800fb30:	0801422c 	.word	0x0801422c
 800fb34:	0801422c 	.word	0x0801422c
 800fb38:	08014230 	.word	0x08014230

0800fb3c <__retarget_lock_init_recursive>:
 800fb3c:	4770      	bx	lr

0800fb3e <__retarget_lock_acquire_recursive>:
 800fb3e:	4770      	bx	lr

0800fb40 <__retarget_lock_release_recursive>:
 800fb40:	4770      	bx	lr

0800fb42 <__swhatbuf_r>:
 800fb42:	b570      	push	{r4, r5, r6, lr}
 800fb44:	460e      	mov	r6, r1
 800fb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4a:	2900      	cmp	r1, #0
 800fb4c:	b096      	sub	sp, #88	; 0x58
 800fb4e:	4614      	mov	r4, r2
 800fb50:	461d      	mov	r5, r3
 800fb52:	da08      	bge.n	800fb66 <__swhatbuf_r+0x24>
 800fb54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	602a      	str	r2, [r5, #0]
 800fb5c:	061a      	lsls	r2, r3, #24
 800fb5e:	d410      	bmi.n	800fb82 <__swhatbuf_r+0x40>
 800fb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb64:	e00e      	b.n	800fb84 <__swhatbuf_r+0x42>
 800fb66:	466a      	mov	r2, sp
 800fb68:	f002 fc90 	bl	801248c <_fstat_r>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	dbf1      	blt.n	800fb54 <__swhatbuf_r+0x12>
 800fb70:	9a01      	ldr	r2, [sp, #4]
 800fb72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb7a:	425a      	negs	r2, r3
 800fb7c:	415a      	adcs	r2, r3
 800fb7e:	602a      	str	r2, [r5, #0]
 800fb80:	e7ee      	b.n	800fb60 <__swhatbuf_r+0x1e>
 800fb82:	2340      	movs	r3, #64	; 0x40
 800fb84:	2000      	movs	r0, #0
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	b016      	add	sp, #88	; 0x58
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}

0800fb8c <__smakebuf_r>:
 800fb8c:	898b      	ldrh	r3, [r1, #12]
 800fb8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb90:	079d      	lsls	r5, r3, #30
 800fb92:	4606      	mov	r6, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	d507      	bpl.n	800fba8 <__smakebuf_r+0x1c>
 800fb98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	6123      	str	r3, [r4, #16]
 800fba0:	2301      	movs	r3, #1
 800fba2:	6163      	str	r3, [r4, #20]
 800fba4:	b002      	add	sp, #8
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	ab01      	add	r3, sp, #4
 800fbaa:	466a      	mov	r2, sp
 800fbac:	f7ff ffc9 	bl	800fb42 <__swhatbuf_r>
 800fbb0:	9900      	ldr	r1, [sp, #0]
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f000 f8bb 	bl	800fd30 <_malloc_r>
 800fbba:	b948      	cbnz	r0, 800fbd0 <__smakebuf_r+0x44>
 800fbbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc0:	059a      	lsls	r2, r3, #22
 800fbc2:	d4ef      	bmi.n	800fba4 <__smakebuf_r+0x18>
 800fbc4:	f023 0303 	bic.w	r3, r3, #3
 800fbc8:	f043 0302 	orr.w	r3, r3, #2
 800fbcc:	81a3      	strh	r3, [r4, #12]
 800fbce:	e7e3      	b.n	800fb98 <__smakebuf_r+0xc>
 800fbd0:	4b0d      	ldr	r3, [pc, #52]	; (800fc08 <__smakebuf_r+0x7c>)
 800fbd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	6020      	str	r0, [r4, #0]
 800fbd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbdc:	81a3      	strh	r3, [r4, #12]
 800fbde:	9b00      	ldr	r3, [sp, #0]
 800fbe0:	6163      	str	r3, [r4, #20]
 800fbe2:	9b01      	ldr	r3, [sp, #4]
 800fbe4:	6120      	str	r0, [r4, #16]
 800fbe6:	b15b      	cbz	r3, 800fc00 <__smakebuf_r+0x74>
 800fbe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbec:	4630      	mov	r0, r6
 800fbee:	f002 ffcf 	bl	8012b90 <_isatty_r>
 800fbf2:	b128      	cbz	r0, 800fc00 <__smakebuf_r+0x74>
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	f023 0303 	bic.w	r3, r3, #3
 800fbfa:	f043 0301 	orr.w	r3, r3, #1
 800fbfe:	81a3      	strh	r3, [r4, #12]
 800fc00:	89a0      	ldrh	r0, [r4, #12]
 800fc02:	4305      	orrs	r5, r0
 800fc04:	81a5      	strh	r5, [r4, #12]
 800fc06:	e7cd      	b.n	800fba4 <__smakebuf_r+0x18>
 800fc08:	0800f92d 	.word	0x0800f92d

0800fc0c <malloc>:
 800fc0c:	4b02      	ldr	r3, [pc, #8]	; (800fc18 <malloc+0xc>)
 800fc0e:	4601      	mov	r1, r0
 800fc10:	6818      	ldr	r0, [r3, #0]
 800fc12:	f000 b88d 	b.w	800fd30 <_malloc_r>
 800fc16:	bf00      	nop
 800fc18:	24000010 	.word	0x24000010

0800fc1c <free>:
 800fc1c:	4b02      	ldr	r3, [pc, #8]	; (800fc28 <free+0xc>)
 800fc1e:	4601      	mov	r1, r0
 800fc20:	6818      	ldr	r0, [r3, #0]
 800fc22:	f000 b819 	b.w	800fc58 <_free_r>
 800fc26:	bf00      	nop
 800fc28:	24000010 	.word	0x24000010

0800fc2c <memcpy>:
 800fc2c:	440a      	add	r2, r1
 800fc2e:	4291      	cmp	r1, r2
 800fc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc34:	d100      	bne.n	800fc38 <memcpy+0xc>
 800fc36:	4770      	bx	lr
 800fc38:	b510      	push	{r4, lr}
 800fc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc42:	4291      	cmp	r1, r2
 800fc44:	d1f9      	bne.n	800fc3a <memcpy+0xe>
 800fc46:	bd10      	pop	{r4, pc}

0800fc48 <memset>:
 800fc48:	4402      	add	r2, r0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d100      	bne.n	800fc52 <memset+0xa>
 800fc50:	4770      	bx	lr
 800fc52:	f803 1b01 	strb.w	r1, [r3], #1
 800fc56:	e7f9      	b.n	800fc4c <memset+0x4>

0800fc58 <_free_r>:
 800fc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc5a:	2900      	cmp	r1, #0
 800fc5c:	d044      	beq.n	800fce8 <_free_r+0x90>
 800fc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc62:	9001      	str	r0, [sp, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f1a1 0404 	sub.w	r4, r1, #4
 800fc6a:	bfb8      	it	lt
 800fc6c:	18e4      	addlt	r4, r4, r3
 800fc6e:	f002 ffc7 	bl	8012c00 <__malloc_lock>
 800fc72:	4a1e      	ldr	r2, [pc, #120]	; (800fcec <_free_r+0x94>)
 800fc74:	9801      	ldr	r0, [sp, #4]
 800fc76:	6813      	ldr	r3, [r2, #0]
 800fc78:	b933      	cbnz	r3, 800fc88 <_free_r+0x30>
 800fc7a:	6063      	str	r3, [r4, #4]
 800fc7c:	6014      	str	r4, [r2, #0]
 800fc7e:	b003      	add	sp, #12
 800fc80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc84:	f002 bfc2 	b.w	8012c0c <__malloc_unlock>
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d908      	bls.n	800fc9e <_free_r+0x46>
 800fc8c:	6825      	ldr	r5, [r4, #0]
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bf01      	itttt	eq
 800fc94:	6819      	ldreq	r1, [r3, #0]
 800fc96:	685b      	ldreq	r3, [r3, #4]
 800fc98:	1949      	addeq	r1, r1, r5
 800fc9a:	6021      	streq	r1, [r4, #0]
 800fc9c:	e7ed      	b.n	800fc7a <_free_r+0x22>
 800fc9e:	461a      	mov	r2, r3
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	b10b      	cbz	r3, 800fca8 <_free_r+0x50>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d9fa      	bls.n	800fc9e <_free_r+0x46>
 800fca8:	6811      	ldr	r1, [r2, #0]
 800fcaa:	1855      	adds	r5, r2, r1
 800fcac:	42a5      	cmp	r5, r4
 800fcae:	d10b      	bne.n	800fcc8 <_free_r+0x70>
 800fcb0:	6824      	ldr	r4, [r4, #0]
 800fcb2:	4421      	add	r1, r4
 800fcb4:	1854      	adds	r4, r2, r1
 800fcb6:	42a3      	cmp	r3, r4
 800fcb8:	6011      	str	r1, [r2, #0]
 800fcba:	d1e0      	bne.n	800fc7e <_free_r+0x26>
 800fcbc:	681c      	ldr	r4, [r3, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	6053      	str	r3, [r2, #4]
 800fcc2:	4421      	add	r1, r4
 800fcc4:	6011      	str	r1, [r2, #0]
 800fcc6:	e7da      	b.n	800fc7e <_free_r+0x26>
 800fcc8:	d902      	bls.n	800fcd0 <_free_r+0x78>
 800fcca:	230c      	movs	r3, #12
 800fccc:	6003      	str	r3, [r0, #0]
 800fcce:	e7d6      	b.n	800fc7e <_free_r+0x26>
 800fcd0:	6825      	ldr	r5, [r4, #0]
 800fcd2:	1961      	adds	r1, r4, r5
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf04      	itt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	6063      	str	r3, [r4, #4]
 800fcde:	bf04      	itt	eq
 800fce0:	1949      	addeq	r1, r1, r5
 800fce2:	6021      	streq	r1, [r4, #0]
 800fce4:	6054      	str	r4, [r2, #4]
 800fce6:	e7ca      	b.n	800fc7e <_free_r+0x26>
 800fce8:	b003      	add	sp, #12
 800fcea:	bd30      	pop	{r4, r5, pc}
 800fcec:	240011cc 	.word	0x240011cc

0800fcf0 <sbrk_aligned>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4e0e      	ldr	r6, [pc, #56]	; (800fd2c <sbrk_aligned+0x3c>)
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	6831      	ldr	r1, [r6, #0]
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	b911      	cbnz	r1, 800fd02 <sbrk_aligned+0x12>
 800fcfc:	f000 fe2a 	bl	8010954 <_sbrk_r>
 800fd00:	6030      	str	r0, [r6, #0]
 800fd02:	4621      	mov	r1, r4
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 fe25 	bl	8010954 <_sbrk_r>
 800fd0a:	1c43      	adds	r3, r0, #1
 800fd0c:	d00a      	beq.n	800fd24 <sbrk_aligned+0x34>
 800fd0e:	1cc4      	adds	r4, r0, #3
 800fd10:	f024 0403 	bic.w	r4, r4, #3
 800fd14:	42a0      	cmp	r0, r4
 800fd16:	d007      	beq.n	800fd28 <sbrk_aligned+0x38>
 800fd18:	1a21      	subs	r1, r4, r0
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f000 fe1a 	bl	8010954 <_sbrk_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	d101      	bne.n	800fd28 <sbrk_aligned+0x38>
 800fd24:	f04f 34ff 	mov.w	r4, #4294967295
 800fd28:	4620      	mov	r0, r4
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	240011d0 	.word	0x240011d0

0800fd30 <_malloc_r>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	1ccd      	adds	r5, r1, #3
 800fd36:	f025 0503 	bic.w	r5, r5, #3
 800fd3a:	3508      	adds	r5, #8
 800fd3c:	2d0c      	cmp	r5, #12
 800fd3e:	bf38      	it	cc
 800fd40:	250c      	movcc	r5, #12
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	4607      	mov	r7, r0
 800fd46:	db01      	blt.n	800fd4c <_malloc_r+0x1c>
 800fd48:	42a9      	cmp	r1, r5
 800fd4a:	d905      	bls.n	800fd58 <_malloc_r+0x28>
 800fd4c:	230c      	movs	r3, #12
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	2600      	movs	r6, #0
 800fd52:	4630      	mov	r0, r6
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4e2e      	ldr	r6, [pc, #184]	; (800fe14 <_malloc_r+0xe4>)
 800fd5a:	f002 ff51 	bl	8012c00 <__malloc_lock>
 800fd5e:	6833      	ldr	r3, [r6, #0]
 800fd60:	461c      	mov	r4, r3
 800fd62:	bb34      	cbnz	r4, 800fdb2 <_malloc_r+0x82>
 800fd64:	4629      	mov	r1, r5
 800fd66:	4638      	mov	r0, r7
 800fd68:	f7ff ffc2 	bl	800fcf0 <sbrk_aligned>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	4604      	mov	r4, r0
 800fd70:	d14d      	bne.n	800fe0e <_malloc_r+0xde>
 800fd72:	6834      	ldr	r4, [r6, #0]
 800fd74:	4626      	mov	r6, r4
 800fd76:	2e00      	cmp	r6, #0
 800fd78:	d140      	bne.n	800fdfc <_malloc_r+0xcc>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4631      	mov	r1, r6
 800fd7e:	4638      	mov	r0, r7
 800fd80:	eb04 0803 	add.w	r8, r4, r3
 800fd84:	f000 fde6 	bl	8010954 <_sbrk_r>
 800fd88:	4580      	cmp	r8, r0
 800fd8a:	d13a      	bne.n	800fe02 <_malloc_r+0xd2>
 800fd8c:	6821      	ldr	r1, [r4, #0]
 800fd8e:	3503      	adds	r5, #3
 800fd90:	1a6d      	subs	r5, r5, r1
 800fd92:	f025 0503 	bic.w	r5, r5, #3
 800fd96:	3508      	adds	r5, #8
 800fd98:	2d0c      	cmp	r5, #12
 800fd9a:	bf38      	it	cc
 800fd9c:	250c      	movcc	r5, #12
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4638      	mov	r0, r7
 800fda2:	f7ff ffa5 	bl	800fcf0 <sbrk_aligned>
 800fda6:	3001      	adds	r0, #1
 800fda8:	d02b      	beq.n	800fe02 <_malloc_r+0xd2>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	442b      	add	r3, r5
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	e00e      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	1b52      	subs	r2, r2, r5
 800fdb6:	d41e      	bmi.n	800fdf6 <_malloc_r+0xc6>
 800fdb8:	2a0b      	cmp	r2, #11
 800fdba:	d916      	bls.n	800fdea <_malloc_r+0xba>
 800fdbc:	1961      	adds	r1, r4, r5
 800fdbe:	42a3      	cmp	r3, r4
 800fdc0:	6025      	str	r5, [r4, #0]
 800fdc2:	bf18      	it	ne
 800fdc4:	6059      	strne	r1, [r3, #4]
 800fdc6:	6863      	ldr	r3, [r4, #4]
 800fdc8:	bf08      	it	eq
 800fdca:	6031      	streq	r1, [r6, #0]
 800fdcc:	5162      	str	r2, [r4, r5]
 800fdce:	604b      	str	r3, [r1, #4]
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f104 060b 	add.w	r6, r4, #11
 800fdd6:	f002 ff19 	bl	8012c0c <__malloc_unlock>
 800fdda:	f026 0607 	bic.w	r6, r6, #7
 800fdde:	1d23      	adds	r3, r4, #4
 800fde0:	1af2      	subs	r2, r6, r3
 800fde2:	d0b6      	beq.n	800fd52 <_malloc_r+0x22>
 800fde4:	1b9b      	subs	r3, r3, r6
 800fde6:	50a3      	str	r3, [r4, r2]
 800fde8:	e7b3      	b.n	800fd52 <_malloc_r+0x22>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	bf0c      	ite	eq
 800fdf0:	6032      	streq	r2, [r6, #0]
 800fdf2:	605a      	strne	r2, [r3, #4]
 800fdf4:	e7ec      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	6864      	ldr	r4, [r4, #4]
 800fdfa:	e7b2      	b.n	800fd62 <_malloc_r+0x32>
 800fdfc:	4634      	mov	r4, r6
 800fdfe:	6876      	ldr	r6, [r6, #4]
 800fe00:	e7b9      	b.n	800fd76 <_malloc_r+0x46>
 800fe02:	230c      	movs	r3, #12
 800fe04:	603b      	str	r3, [r7, #0]
 800fe06:	4638      	mov	r0, r7
 800fe08:	f002 ff00 	bl	8012c0c <__malloc_unlock>
 800fe0c:	e7a1      	b.n	800fd52 <_malloc_r+0x22>
 800fe0e:	6025      	str	r5, [r4, #0]
 800fe10:	e7de      	b.n	800fdd0 <_malloc_r+0xa0>
 800fe12:	bf00      	nop
 800fe14:	240011cc 	.word	0x240011cc

0800fe18 <__sfputc_r>:
 800fe18:	6893      	ldr	r3, [r2, #8]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	b410      	push	{r4}
 800fe20:	6093      	str	r3, [r2, #8]
 800fe22:	da08      	bge.n	800fe36 <__sfputc_r+0x1e>
 800fe24:	6994      	ldr	r4, [r2, #24]
 800fe26:	42a3      	cmp	r3, r4
 800fe28:	db01      	blt.n	800fe2e <__sfputc_r+0x16>
 800fe2a:	290a      	cmp	r1, #10
 800fe2c:	d103      	bne.n	800fe36 <__sfputc_r+0x1e>
 800fe2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe32:	f001 bc2f 	b.w	8011694 <__swbuf_r>
 800fe36:	6813      	ldr	r3, [r2, #0]
 800fe38:	1c58      	adds	r0, r3, #1
 800fe3a:	6010      	str	r0, [r2, #0]
 800fe3c:	7019      	strb	r1, [r3, #0]
 800fe3e:	4608      	mov	r0, r1
 800fe40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <__sfputs_r>:
 800fe46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe48:	4606      	mov	r6, r0
 800fe4a:	460f      	mov	r7, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	18d5      	adds	r5, r2, r3
 800fe50:	42ac      	cmp	r4, r5
 800fe52:	d101      	bne.n	800fe58 <__sfputs_r+0x12>
 800fe54:	2000      	movs	r0, #0
 800fe56:	e007      	b.n	800fe68 <__sfputs_r+0x22>
 800fe58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5c:	463a      	mov	r2, r7
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7ff ffda 	bl	800fe18 <__sfputc_r>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d1f3      	bne.n	800fe50 <__sfputs_r+0xa>
 800fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe6c <_vfiprintf_r>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	460d      	mov	r5, r1
 800fe72:	b09d      	sub	sp, #116	; 0x74
 800fe74:	4614      	mov	r4, r2
 800fe76:	4698      	mov	r8, r3
 800fe78:	4606      	mov	r6, r0
 800fe7a:	b118      	cbz	r0, 800fe84 <_vfiprintf_r+0x18>
 800fe7c:	6983      	ldr	r3, [r0, #24]
 800fe7e:	b90b      	cbnz	r3, 800fe84 <_vfiprintf_r+0x18>
 800fe80:	f7ff fd88 	bl	800f994 <__sinit>
 800fe84:	4b89      	ldr	r3, [pc, #548]	; (80100ac <_vfiprintf_r+0x240>)
 800fe86:	429d      	cmp	r5, r3
 800fe88:	d11b      	bne.n	800fec2 <_vfiprintf_r+0x56>
 800fe8a:	6875      	ldr	r5, [r6, #4]
 800fe8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe8e:	07d9      	lsls	r1, r3, #31
 800fe90:	d405      	bmi.n	800fe9e <_vfiprintf_r+0x32>
 800fe92:	89ab      	ldrh	r3, [r5, #12]
 800fe94:	059a      	lsls	r2, r3, #22
 800fe96:	d402      	bmi.n	800fe9e <_vfiprintf_r+0x32>
 800fe98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe9a:	f7ff fe50 	bl	800fb3e <__retarget_lock_acquire_recursive>
 800fe9e:	89ab      	ldrh	r3, [r5, #12]
 800fea0:	071b      	lsls	r3, r3, #28
 800fea2:	d501      	bpl.n	800fea8 <_vfiprintf_r+0x3c>
 800fea4:	692b      	ldr	r3, [r5, #16]
 800fea6:	b9eb      	cbnz	r3, 800fee4 <_vfiprintf_r+0x78>
 800fea8:	4629      	mov	r1, r5
 800feaa:	4630      	mov	r0, r6
 800feac:	f001 fc56 	bl	801175c <__swsetup_r>
 800feb0:	b1c0      	cbz	r0, 800fee4 <_vfiprintf_r+0x78>
 800feb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb4:	07dc      	lsls	r4, r3, #31
 800feb6:	d50e      	bpl.n	800fed6 <_vfiprintf_r+0x6a>
 800feb8:	f04f 30ff 	mov.w	r0, #4294967295
 800febc:	b01d      	add	sp, #116	; 0x74
 800febe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec2:	4b7b      	ldr	r3, [pc, #492]	; (80100b0 <_vfiprintf_r+0x244>)
 800fec4:	429d      	cmp	r5, r3
 800fec6:	d101      	bne.n	800fecc <_vfiprintf_r+0x60>
 800fec8:	68b5      	ldr	r5, [r6, #8]
 800feca:	e7df      	b.n	800fe8c <_vfiprintf_r+0x20>
 800fecc:	4b79      	ldr	r3, [pc, #484]	; (80100b4 <_vfiprintf_r+0x248>)
 800fece:	429d      	cmp	r5, r3
 800fed0:	bf08      	it	eq
 800fed2:	68f5      	ldreq	r5, [r6, #12]
 800fed4:	e7da      	b.n	800fe8c <_vfiprintf_r+0x20>
 800fed6:	89ab      	ldrh	r3, [r5, #12]
 800fed8:	0598      	lsls	r0, r3, #22
 800feda:	d4ed      	bmi.n	800feb8 <_vfiprintf_r+0x4c>
 800fedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fede:	f7ff fe2f 	bl	800fb40 <__retarget_lock_release_recursive>
 800fee2:	e7e9      	b.n	800feb8 <_vfiprintf_r+0x4c>
 800fee4:	2300      	movs	r3, #0
 800fee6:	9309      	str	r3, [sp, #36]	; 0x24
 800fee8:	2320      	movs	r3, #32
 800feea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fef2:	2330      	movs	r3, #48	; 0x30
 800fef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100b8 <_vfiprintf_r+0x24c>
 800fef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fefc:	f04f 0901 	mov.w	r9, #1
 800ff00:	4623      	mov	r3, r4
 800ff02:	469a      	mov	sl, r3
 800ff04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff08:	b10a      	cbz	r2, 800ff0e <_vfiprintf_r+0xa2>
 800ff0a:	2a25      	cmp	r2, #37	; 0x25
 800ff0c:	d1f9      	bne.n	800ff02 <_vfiprintf_r+0x96>
 800ff0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ff12:	d00b      	beq.n	800ff2c <_vfiprintf_r+0xc0>
 800ff14:	465b      	mov	r3, fp
 800ff16:	4622      	mov	r2, r4
 800ff18:	4629      	mov	r1, r5
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f7ff ff93 	bl	800fe46 <__sfputs_r>
 800ff20:	3001      	adds	r0, #1
 800ff22:	f000 80aa 	beq.w	801007a <_vfiprintf_r+0x20e>
 800ff26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff28:	445a      	add	r2, fp
 800ff2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ff2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 80a2 	beq.w	801007a <_vfiprintf_r+0x20e>
 800ff36:	2300      	movs	r3, #0
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff40:	f10a 0a01 	add.w	sl, sl, #1
 800ff44:	9304      	str	r3, [sp, #16]
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff4e:	4654      	mov	r4, sl
 800ff50:	2205      	movs	r2, #5
 800ff52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff56:	4858      	ldr	r0, [pc, #352]	; (80100b8 <_vfiprintf_r+0x24c>)
 800ff58:	f7f0 f9d2 	bl	8000300 <memchr>
 800ff5c:	9a04      	ldr	r2, [sp, #16]
 800ff5e:	b9d8      	cbnz	r0, 800ff98 <_vfiprintf_r+0x12c>
 800ff60:	06d1      	lsls	r1, r2, #27
 800ff62:	bf44      	itt	mi
 800ff64:	2320      	movmi	r3, #32
 800ff66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff6a:	0713      	lsls	r3, r2, #28
 800ff6c:	bf44      	itt	mi
 800ff6e:	232b      	movmi	r3, #43	; 0x2b
 800ff70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff74:	f89a 3000 	ldrb.w	r3, [sl]
 800ff78:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7a:	d015      	beq.n	800ffa8 <_vfiprintf_r+0x13c>
 800ff7c:	9a07      	ldr	r2, [sp, #28]
 800ff7e:	4654      	mov	r4, sl
 800ff80:	2000      	movs	r0, #0
 800ff82:	f04f 0c0a 	mov.w	ip, #10
 800ff86:	4621      	mov	r1, r4
 800ff88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff8c:	3b30      	subs	r3, #48	; 0x30
 800ff8e:	2b09      	cmp	r3, #9
 800ff90:	d94e      	bls.n	8010030 <_vfiprintf_r+0x1c4>
 800ff92:	b1b0      	cbz	r0, 800ffc2 <_vfiprintf_r+0x156>
 800ff94:	9207      	str	r2, [sp, #28]
 800ff96:	e014      	b.n	800ffc2 <_vfiprintf_r+0x156>
 800ff98:	eba0 0308 	sub.w	r3, r0, r8
 800ff9c:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	9304      	str	r3, [sp, #16]
 800ffa4:	46a2      	mov	sl, r4
 800ffa6:	e7d2      	b.n	800ff4e <_vfiprintf_r+0xe2>
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	1d19      	adds	r1, r3, #4
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	9103      	str	r1, [sp, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	bfbb      	ittet	lt
 800ffb4:	425b      	neglt	r3, r3
 800ffb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ffba:	9307      	strge	r3, [sp, #28]
 800ffbc:	9307      	strlt	r3, [sp, #28]
 800ffbe:	bfb8      	it	lt
 800ffc0:	9204      	strlt	r2, [sp, #16]
 800ffc2:	7823      	ldrb	r3, [r4, #0]
 800ffc4:	2b2e      	cmp	r3, #46	; 0x2e
 800ffc6:	d10c      	bne.n	800ffe2 <_vfiprintf_r+0x176>
 800ffc8:	7863      	ldrb	r3, [r4, #1]
 800ffca:	2b2a      	cmp	r3, #42	; 0x2a
 800ffcc:	d135      	bne.n	801003a <_vfiprintf_r+0x1ce>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d1a      	adds	r2, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9203      	str	r2, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfb8      	it	lt
 800ffda:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffde:	3402      	adds	r4, #2
 800ffe0:	9305      	str	r3, [sp, #20]
 800ffe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100c8 <_vfiprintf_r+0x25c>
 800ffe6:	7821      	ldrb	r1, [r4, #0]
 800ffe8:	2203      	movs	r2, #3
 800ffea:	4650      	mov	r0, sl
 800ffec:	f7f0 f988 	bl	8000300 <memchr>
 800fff0:	b140      	cbz	r0, 8010004 <_vfiprintf_r+0x198>
 800fff2:	2340      	movs	r3, #64	; 0x40
 800fff4:	eba0 000a 	sub.w	r0, r0, sl
 800fff8:	fa03 f000 	lsl.w	r0, r3, r0
 800fffc:	9b04      	ldr	r3, [sp, #16]
 800fffe:	4303      	orrs	r3, r0
 8010000:	3401      	adds	r4, #1
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010008:	482c      	ldr	r0, [pc, #176]	; (80100bc <_vfiprintf_r+0x250>)
 801000a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801000e:	2206      	movs	r2, #6
 8010010:	f7f0 f976 	bl	8000300 <memchr>
 8010014:	2800      	cmp	r0, #0
 8010016:	d03f      	beq.n	8010098 <_vfiprintf_r+0x22c>
 8010018:	4b29      	ldr	r3, [pc, #164]	; (80100c0 <_vfiprintf_r+0x254>)
 801001a:	bb1b      	cbnz	r3, 8010064 <_vfiprintf_r+0x1f8>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	3307      	adds	r3, #7
 8010020:	f023 0307 	bic.w	r3, r3, #7
 8010024:	3308      	adds	r3, #8
 8010026:	9303      	str	r3, [sp, #12]
 8010028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002a:	443b      	add	r3, r7
 801002c:	9309      	str	r3, [sp, #36]	; 0x24
 801002e:	e767      	b.n	800ff00 <_vfiprintf_r+0x94>
 8010030:	fb0c 3202 	mla	r2, ip, r2, r3
 8010034:	460c      	mov	r4, r1
 8010036:	2001      	movs	r0, #1
 8010038:	e7a5      	b.n	800ff86 <_vfiprintf_r+0x11a>
 801003a:	2300      	movs	r3, #0
 801003c:	3401      	adds	r4, #1
 801003e:	9305      	str	r3, [sp, #20]
 8010040:	4619      	mov	r1, r3
 8010042:	f04f 0c0a 	mov.w	ip, #10
 8010046:	4620      	mov	r0, r4
 8010048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801004c:	3a30      	subs	r2, #48	; 0x30
 801004e:	2a09      	cmp	r2, #9
 8010050:	d903      	bls.n	801005a <_vfiprintf_r+0x1ee>
 8010052:	2b00      	cmp	r3, #0
 8010054:	d0c5      	beq.n	800ffe2 <_vfiprintf_r+0x176>
 8010056:	9105      	str	r1, [sp, #20]
 8010058:	e7c3      	b.n	800ffe2 <_vfiprintf_r+0x176>
 801005a:	fb0c 2101 	mla	r1, ip, r1, r2
 801005e:	4604      	mov	r4, r0
 8010060:	2301      	movs	r3, #1
 8010062:	e7f0      	b.n	8010046 <_vfiprintf_r+0x1da>
 8010064:	ab03      	add	r3, sp, #12
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	462a      	mov	r2, r5
 801006a:	4b16      	ldr	r3, [pc, #88]	; (80100c4 <_vfiprintf_r+0x258>)
 801006c:	a904      	add	r1, sp, #16
 801006e:	4630      	mov	r0, r6
 8010070:	f000 f8be 	bl	80101f0 <_printf_float>
 8010074:	4607      	mov	r7, r0
 8010076:	1c78      	adds	r0, r7, #1
 8010078:	d1d6      	bne.n	8010028 <_vfiprintf_r+0x1bc>
 801007a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801007c:	07d9      	lsls	r1, r3, #31
 801007e:	d405      	bmi.n	801008c <_vfiprintf_r+0x220>
 8010080:	89ab      	ldrh	r3, [r5, #12]
 8010082:	059a      	lsls	r2, r3, #22
 8010084:	d402      	bmi.n	801008c <_vfiprintf_r+0x220>
 8010086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010088:	f7ff fd5a 	bl	800fb40 <__retarget_lock_release_recursive>
 801008c:	89ab      	ldrh	r3, [r5, #12]
 801008e:	065b      	lsls	r3, r3, #25
 8010090:	f53f af12 	bmi.w	800feb8 <_vfiprintf_r+0x4c>
 8010094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010096:	e711      	b.n	800febc <_vfiprintf_r+0x50>
 8010098:	ab03      	add	r3, sp, #12
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	462a      	mov	r2, r5
 801009e:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <_vfiprintf_r+0x258>)
 80100a0:	a904      	add	r1, sp, #16
 80100a2:	4630      	mov	r0, r6
 80100a4:	f000 fb30 	bl	8010708 <_printf_i>
 80100a8:	e7e4      	b.n	8010074 <_vfiprintf_r+0x208>
 80100aa:	bf00      	nop
 80100ac:	08013e48 	.word	0x08013e48
 80100b0:	08013e68 	.word	0x08013e68
 80100b4:	08013e28 	.word	0x08013e28
 80100b8:	08013e8c 	.word	0x08013e8c
 80100bc:	08013e96 	.word	0x08013e96
 80100c0:	080101f1 	.word	0x080101f1
 80100c4:	0800fe47 	.word	0x0800fe47
 80100c8:	08013e92 	.word	0x08013e92

080100cc <__cvt>:
 80100cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ce:	ed2d 8b02 	vpush	{d8}
 80100d2:	eeb0 8b40 	vmov.f64	d8, d0
 80100d6:	b085      	sub	sp, #20
 80100d8:	4617      	mov	r7, r2
 80100da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80100dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80100de:	ee18 2a90 	vmov	r2, s17
 80100e2:	f025 0520 	bic.w	r5, r5, #32
 80100e6:	2a00      	cmp	r2, #0
 80100e8:	bfb6      	itet	lt
 80100ea:	222d      	movlt	r2, #45	; 0x2d
 80100ec:	2200      	movge	r2, #0
 80100ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80100f2:	2d46      	cmp	r5, #70	; 0x46
 80100f4:	460c      	mov	r4, r1
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	d004      	beq.n	8010104 <__cvt+0x38>
 80100fa:	2d45      	cmp	r5, #69	; 0x45
 80100fc:	d100      	bne.n	8010100 <__cvt+0x34>
 80100fe:	3401      	adds	r4, #1
 8010100:	2102      	movs	r1, #2
 8010102:	e000      	b.n	8010106 <__cvt+0x3a>
 8010104:	2103      	movs	r1, #3
 8010106:	ab03      	add	r3, sp, #12
 8010108:	9301      	str	r3, [sp, #4]
 801010a:	ab02      	add	r3, sp, #8
 801010c:	9300      	str	r3, [sp, #0]
 801010e:	4622      	mov	r2, r4
 8010110:	4633      	mov	r3, r6
 8010112:	eeb0 0b48 	vmov.f64	d0, d8
 8010116:	f001 fc4b 	bl	80119b0 <_dtoa_r>
 801011a:	2d47      	cmp	r5, #71	; 0x47
 801011c:	d101      	bne.n	8010122 <__cvt+0x56>
 801011e:	07fb      	lsls	r3, r7, #31
 8010120:	d51a      	bpl.n	8010158 <__cvt+0x8c>
 8010122:	2d46      	cmp	r5, #70	; 0x46
 8010124:	eb00 0204 	add.w	r2, r0, r4
 8010128:	d10c      	bne.n	8010144 <__cvt+0x78>
 801012a:	7803      	ldrb	r3, [r0, #0]
 801012c:	2b30      	cmp	r3, #48	; 0x30
 801012e:	d107      	bne.n	8010140 <__cvt+0x74>
 8010130:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010138:	bf1c      	itt	ne
 801013a:	f1c4 0401 	rsbne	r4, r4, #1
 801013e:	6034      	strne	r4, [r6, #0]
 8010140:	6833      	ldr	r3, [r6, #0]
 8010142:	441a      	add	r2, r3
 8010144:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014c:	bf08      	it	eq
 801014e:	9203      	streq	r2, [sp, #12]
 8010150:	2130      	movs	r1, #48	; 0x30
 8010152:	9b03      	ldr	r3, [sp, #12]
 8010154:	4293      	cmp	r3, r2
 8010156:	d307      	bcc.n	8010168 <__cvt+0x9c>
 8010158:	9b03      	ldr	r3, [sp, #12]
 801015a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801015c:	1a1b      	subs	r3, r3, r0
 801015e:	6013      	str	r3, [r2, #0]
 8010160:	b005      	add	sp, #20
 8010162:	ecbd 8b02 	vpop	{d8}
 8010166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010168:	1c5c      	adds	r4, r3, #1
 801016a:	9403      	str	r4, [sp, #12]
 801016c:	7019      	strb	r1, [r3, #0]
 801016e:	e7f0      	b.n	8010152 <__cvt+0x86>

08010170 <__exponent>:
 8010170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010172:	4603      	mov	r3, r0
 8010174:	2900      	cmp	r1, #0
 8010176:	bfb8      	it	lt
 8010178:	4249      	neglt	r1, r1
 801017a:	f803 2b02 	strb.w	r2, [r3], #2
 801017e:	bfb4      	ite	lt
 8010180:	222d      	movlt	r2, #45	; 0x2d
 8010182:	222b      	movge	r2, #43	; 0x2b
 8010184:	2909      	cmp	r1, #9
 8010186:	7042      	strb	r2, [r0, #1]
 8010188:	dd2a      	ble.n	80101e0 <__exponent+0x70>
 801018a:	f10d 0407 	add.w	r4, sp, #7
 801018e:	46a4      	mov	ip, r4
 8010190:	270a      	movs	r7, #10
 8010192:	46a6      	mov	lr, r4
 8010194:	460a      	mov	r2, r1
 8010196:	fb91 f6f7 	sdiv	r6, r1, r7
 801019a:	fb07 1516 	mls	r5, r7, r6, r1
 801019e:	3530      	adds	r5, #48	; 0x30
 80101a0:	2a63      	cmp	r2, #99	; 0x63
 80101a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80101a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80101aa:	4631      	mov	r1, r6
 80101ac:	dcf1      	bgt.n	8010192 <__exponent+0x22>
 80101ae:	3130      	adds	r1, #48	; 0x30
 80101b0:	f1ae 0502 	sub.w	r5, lr, #2
 80101b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80101b8:	1c44      	adds	r4, r0, #1
 80101ba:	4629      	mov	r1, r5
 80101bc:	4561      	cmp	r1, ip
 80101be:	d30a      	bcc.n	80101d6 <__exponent+0x66>
 80101c0:	f10d 0209 	add.w	r2, sp, #9
 80101c4:	eba2 020e 	sub.w	r2, r2, lr
 80101c8:	4565      	cmp	r5, ip
 80101ca:	bf88      	it	hi
 80101cc:	2200      	movhi	r2, #0
 80101ce:	4413      	add	r3, r2
 80101d0:	1a18      	subs	r0, r3, r0
 80101d2:	b003      	add	sp, #12
 80101d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80101de:	e7ed      	b.n	80101bc <__exponent+0x4c>
 80101e0:	2330      	movs	r3, #48	; 0x30
 80101e2:	3130      	adds	r1, #48	; 0x30
 80101e4:	7083      	strb	r3, [r0, #2]
 80101e6:	70c1      	strb	r1, [r0, #3]
 80101e8:	1d03      	adds	r3, r0, #4
 80101ea:	e7f1      	b.n	80101d0 <__exponent+0x60>
 80101ec:	0000      	movs	r0, r0
	...

080101f0 <_printf_float>:
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	b08b      	sub	sp, #44	; 0x2c
 80101f6:	460c      	mov	r4, r1
 80101f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80101fc:	4616      	mov	r6, r2
 80101fe:	461f      	mov	r7, r3
 8010200:	4605      	mov	r5, r0
 8010202:	f002 fcd5 	bl	8012bb0 <_localeconv_r>
 8010206:	f8d0 b000 	ldr.w	fp, [r0]
 801020a:	4658      	mov	r0, fp
 801020c:	f7f0 f870 	bl	80002f0 <strlen>
 8010210:	2300      	movs	r3, #0
 8010212:	9308      	str	r3, [sp, #32]
 8010214:	f8d8 3000 	ldr.w	r3, [r8]
 8010218:	f894 9018 	ldrb.w	r9, [r4, #24]
 801021c:	6822      	ldr	r2, [r4, #0]
 801021e:	3307      	adds	r3, #7
 8010220:	f023 0307 	bic.w	r3, r3, #7
 8010224:	f103 0108 	add.w	r1, r3, #8
 8010228:	f8c8 1000 	str.w	r1, [r8]
 801022c:	4682      	mov	sl, r0
 801022e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010232:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010236:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010498 <_printf_float+0x2a8>
 801023a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801023e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010242:	eeb4 6b47 	vcmp.f64	d6, d7
 8010246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024a:	dd24      	ble.n	8010296 <_printf_float+0xa6>
 801024c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010254:	d502      	bpl.n	801025c <_printf_float+0x6c>
 8010256:	232d      	movs	r3, #45	; 0x2d
 8010258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801025c:	4b90      	ldr	r3, [pc, #576]	; (80104a0 <_printf_float+0x2b0>)
 801025e:	4891      	ldr	r0, [pc, #580]	; (80104a4 <_printf_float+0x2b4>)
 8010260:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010264:	bf94      	ite	ls
 8010266:	4698      	movls	r8, r3
 8010268:	4680      	movhi	r8, r0
 801026a:	2303      	movs	r3, #3
 801026c:	6123      	str	r3, [r4, #16]
 801026e:	f022 0204 	bic.w	r2, r2, #4
 8010272:	2300      	movs	r3, #0
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	9304      	str	r3, [sp, #16]
 8010278:	9700      	str	r7, [sp, #0]
 801027a:	4633      	mov	r3, r6
 801027c:	aa09      	add	r2, sp, #36	; 0x24
 801027e:	4621      	mov	r1, r4
 8010280:	4628      	mov	r0, r5
 8010282:	f000 f9d3 	bl	801062c <_printf_common>
 8010286:	3001      	adds	r0, #1
 8010288:	f040 808a 	bne.w	80103a0 <_printf_float+0x1b0>
 801028c:	f04f 30ff 	mov.w	r0, #4294967295
 8010290:	b00b      	add	sp, #44	; 0x2c
 8010292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010296:	eeb4 0b40 	vcmp.f64	d0, d0
 801029a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029e:	d709      	bvc.n	80102b4 <_printf_float+0xc4>
 80102a0:	ee10 3a90 	vmov	r3, s1
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	bfbc      	itt	lt
 80102a8:	232d      	movlt	r3, #45	; 0x2d
 80102aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80102ae:	487e      	ldr	r0, [pc, #504]	; (80104a8 <_printf_float+0x2b8>)
 80102b0:	4b7e      	ldr	r3, [pc, #504]	; (80104ac <_printf_float+0x2bc>)
 80102b2:	e7d5      	b.n	8010260 <_printf_float+0x70>
 80102b4:	6863      	ldr	r3, [r4, #4]
 80102b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80102ba:	9104      	str	r1, [sp, #16]
 80102bc:	1c59      	adds	r1, r3, #1
 80102be:	d13c      	bne.n	801033a <_printf_float+0x14a>
 80102c0:	2306      	movs	r3, #6
 80102c2:	6063      	str	r3, [r4, #4]
 80102c4:	2300      	movs	r3, #0
 80102c6:	9303      	str	r3, [sp, #12]
 80102c8:	ab08      	add	r3, sp, #32
 80102ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80102ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80102d2:	ab07      	add	r3, sp, #28
 80102d4:	6861      	ldr	r1, [r4, #4]
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	6022      	str	r2, [r4, #0]
 80102da:	f10d 031b 	add.w	r3, sp, #27
 80102de:	4628      	mov	r0, r5
 80102e0:	f7ff fef4 	bl	80100cc <__cvt>
 80102e4:	9b04      	ldr	r3, [sp, #16]
 80102e6:	9907      	ldr	r1, [sp, #28]
 80102e8:	2b47      	cmp	r3, #71	; 0x47
 80102ea:	4680      	mov	r8, r0
 80102ec:	d108      	bne.n	8010300 <_printf_float+0x110>
 80102ee:	1cc8      	adds	r0, r1, #3
 80102f0:	db02      	blt.n	80102f8 <_printf_float+0x108>
 80102f2:	6863      	ldr	r3, [r4, #4]
 80102f4:	4299      	cmp	r1, r3
 80102f6:	dd41      	ble.n	801037c <_printf_float+0x18c>
 80102f8:	f1a9 0902 	sub.w	r9, r9, #2
 80102fc:	fa5f f989 	uxtb.w	r9, r9
 8010300:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010304:	d820      	bhi.n	8010348 <_printf_float+0x158>
 8010306:	3901      	subs	r1, #1
 8010308:	464a      	mov	r2, r9
 801030a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801030e:	9107      	str	r1, [sp, #28]
 8010310:	f7ff ff2e 	bl	8010170 <__exponent>
 8010314:	9a08      	ldr	r2, [sp, #32]
 8010316:	9004      	str	r0, [sp, #16]
 8010318:	1813      	adds	r3, r2, r0
 801031a:	2a01      	cmp	r2, #1
 801031c:	6123      	str	r3, [r4, #16]
 801031e:	dc02      	bgt.n	8010326 <_printf_float+0x136>
 8010320:	6822      	ldr	r2, [r4, #0]
 8010322:	07d2      	lsls	r2, r2, #31
 8010324:	d501      	bpl.n	801032a <_printf_float+0x13a>
 8010326:	3301      	adds	r3, #1
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d0a2      	beq.n	8010278 <_printf_float+0x88>
 8010332:	232d      	movs	r3, #45	; 0x2d
 8010334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010338:	e79e      	b.n	8010278 <_printf_float+0x88>
 801033a:	9904      	ldr	r1, [sp, #16]
 801033c:	2947      	cmp	r1, #71	; 0x47
 801033e:	d1c1      	bne.n	80102c4 <_printf_float+0xd4>
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1bf      	bne.n	80102c4 <_printf_float+0xd4>
 8010344:	2301      	movs	r3, #1
 8010346:	e7bc      	b.n	80102c2 <_printf_float+0xd2>
 8010348:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801034c:	d118      	bne.n	8010380 <_printf_float+0x190>
 801034e:	2900      	cmp	r1, #0
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	dd0b      	ble.n	801036c <_printf_float+0x17c>
 8010354:	6121      	str	r1, [r4, #16]
 8010356:	b913      	cbnz	r3, 801035e <_printf_float+0x16e>
 8010358:	6822      	ldr	r2, [r4, #0]
 801035a:	07d0      	lsls	r0, r2, #31
 801035c:	d502      	bpl.n	8010364 <_printf_float+0x174>
 801035e:	3301      	adds	r3, #1
 8010360:	440b      	add	r3, r1
 8010362:	6123      	str	r3, [r4, #16]
 8010364:	2300      	movs	r3, #0
 8010366:	65a1      	str	r1, [r4, #88]	; 0x58
 8010368:	9304      	str	r3, [sp, #16]
 801036a:	e7de      	b.n	801032a <_printf_float+0x13a>
 801036c:	b913      	cbnz	r3, 8010374 <_printf_float+0x184>
 801036e:	6822      	ldr	r2, [r4, #0]
 8010370:	07d2      	lsls	r2, r2, #31
 8010372:	d501      	bpl.n	8010378 <_printf_float+0x188>
 8010374:	3302      	adds	r3, #2
 8010376:	e7f4      	b.n	8010362 <_printf_float+0x172>
 8010378:	2301      	movs	r3, #1
 801037a:	e7f2      	b.n	8010362 <_printf_float+0x172>
 801037c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010380:	9b08      	ldr	r3, [sp, #32]
 8010382:	4299      	cmp	r1, r3
 8010384:	db05      	blt.n	8010392 <_printf_float+0x1a2>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	6121      	str	r1, [r4, #16]
 801038a:	07d8      	lsls	r0, r3, #31
 801038c:	d5ea      	bpl.n	8010364 <_printf_float+0x174>
 801038e:	1c4b      	adds	r3, r1, #1
 8010390:	e7e7      	b.n	8010362 <_printf_float+0x172>
 8010392:	2900      	cmp	r1, #0
 8010394:	bfd4      	ite	le
 8010396:	f1c1 0202 	rsble	r2, r1, #2
 801039a:	2201      	movgt	r2, #1
 801039c:	4413      	add	r3, r2
 801039e:	e7e0      	b.n	8010362 <_printf_float+0x172>
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	055a      	lsls	r2, r3, #21
 80103a4:	d407      	bmi.n	80103b6 <_printf_float+0x1c6>
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	4642      	mov	r2, r8
 80103aa:	4631      	mov	r1, r6
 80103ac:	4628      	mov	r0, r5
 80103ae:	47b8      	blx	r7
 80103b0:	3001      	adds	r0, #1
 80103b2:	d12a      	bne.n	801040a <_printf_float+0x21a>
 80103b4:	e76a      	b.n	801028c <_printf_float+0x9c>
 80103b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80103ba:	f240 80e2 	bls.w	8010582 <_printf_float+0x392>
 80103be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80103c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ca:	d133      	bne.n	8010434 <_printf_float+0x244>
 80103cc:	4a38      	ldr	r2, [pc, #224]	; (80104b0 <_printf_float+0x2c0>)
 80103ce:	2301      	movs	r3, #1
 80103d0:	4631      	mov	r1, r6
 80103d2:	4628      	mov	r0, r5
 80103d4:	47b8      	blx	r7
 80103d6:	3001      	adds	r0, #1
 80103d8:	f43f af58 	beq.w	801028c <_printf_float+0x9c>
 80103dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80103e0:	429a      	cmp	r2, r3
 80103e2:	db02      	blt.n	80103ea <_printf_float+0x1fa>
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	07d8      	lsls	r0, r3, #31
 80103e8:	d50f      	bpl.n	801040a <_printf_float+0x21a>
 80103ea:	4653      	mov	r3, sl
 80103ec:	465a      	mov	r2, fp
 80103ee:	4631      	mov	r1, r6
 80103f0:	4628      	mov	r0, r5
 80103f2:	47b8      	blx	r7
 80103f4:	3001      	adds	r0, #1
 80103f6:	f43f af49 	beq.w	801028c <_printf_float+0x9c>
 80103fa:	f04f 0800 	mov.w	r8, #0
 80103fe:	f104 091a 	add.w	r9, r4, #26
 8010402:	9b08      	ldr	r3, [sp, #32]
 8010404:	3b01      	subs	r3, #1
 8010406:	4543      	cmp	r3, r8
 8010408:	dc09      	bgt.n	801041e <_printf_float+0x22e>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	079b      	lsls	r3, r3, #30
 801040e:	f100 8108 	bmi.w	8010622 <_printf_float+0x432>
 8010412:	68e0      	ldr	r0, [r4, #12]
 8010414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010416:	4298      	cmp	r0, r3
 8010418:	bfb8      	it	lt
 801041a:	4618      	movlt	r0, r3
 801041c:	e738      	b.n	8010290 <_printf_float+0xa0>
 801041e:	2301      	movs	r3, #1
 8010420:	464a      	mov	r2, r9
 8010422:	4631      	mov	r1, r6
 8010424:	4628      	mov	r0, r5
 8010426:	47b8      	blx	r7
 8010428:	3001      	adds	r0, #1
 801042a:	f43f af2f 	beq.w	801028c <_printf_float+0x9c>
 801042e:	f108 0801 	add.w	r8, r8, #1
 8010432:	e7e6      	b.n	8010402 <_printf_float+0x212>
 8010434:	9b07      	ldr	r3, [sp, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	dc3c      	bgt.n	80104b4 <_printf_float+0x2c4>
 801043a:	4a1d      	ldr	r2, [pc, #116]	; (80104b0 <_printf_float+0x2c0>)
 801043c:	2301      	movs	r3, #1
 801043e:	4631      	mov	r1, r6
 8010440:	4628      	mov	r0, r5
 8010442:	47b8      	blx	r7
 8010444:	3001      	adds	r0, #1
 8010446:	f43f af21 	beq.w	801028c <_printf_float+0x9c>
 801044a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801044e:	4313      	orrs	r3, r2
 8010450:	d102      	bne.n	8010458 <_printf_float+0x268>
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	07d9      	lsls	r1, r3, #31
 8010456:	d5d8      	bpl.n	801040a <_printf_float+0x21a>
 8010458:	4653      	mov	r3, sl
 801045a:	465a      	mov	r2, fp
 801045c:	4631      	mov	r1, r6
 801045e:	4628      	mov	r0, r5
 8010460:	47b8      	blx	r7
 8010462:	3001      	adds	r0, #1
 8010464:	f43f af12 	beq.w	801028c <_printf_float+0x9c>
 8010468:	f04f 0900 	mov.w	r9, #0
 801046c:	f104 0a1a 	add.w	sl, r4, #26
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	425b      	negs	r3, r3
 8010474:	454b      	cmp	r3, r9
 8010476:	dc01      	bgt.n	801047c <_printf_float+0x28c>
 8010478:	9b08      	ldr	r3, [sp, #32]
 801047a:	e795      	b.n	80103a8 <_printf_float+0x1b8>
 801047c:	2301      	movs	r3, #1
 801047e:	4652      	mov	r2, sl
 8010480:	4631      	mov	r1, r6
 8010482:	4628      	mov	r0, r5
 8010484:	47b8      	blx	r7
 8010486:	3001      	adds	r0, #1
 8010488:	f43f af00 	beq.w	801028c <_printf_float+0x9c>
 801048c:	f109 0901 	add.w	r9, r9, #1
 8010490:	e7ee      	b.n	8010470 <_printf_float+0x280>
 8010492:	bf00      	nop
 8010494:	f3af 8000 	nop.w
 8010498:	ffffffff 	.word	0xffffffff
 801049c:	7fefffff 	.word	0x7fefffff
 80104a0:	08013e9d 	.word	0x08013e9d
 80104a4:	08013ea1 	.word	0x08013ea1
 80104a8:	08013ea9 	.word	0x08013ea9
 80104ac:	08013ea5 	.word	0x08013ea5
 80104b0:	08013ead 	.word	0x08013ead
 80104b4:	9a08      	ldr	r2, [sp, #32]
 80104b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104b8:	429a      	cmp	r2, r3
 80104ba:	bfa8      	it	ge
 80104bc:	461a      	movge	r2, r3
 80104be:	2a00      	cmp	r2, #0
 80104c0:	4691      	mov	r9, r2
 80104c2:	dc38      	bgt.n	8010536 <_printf_float+0x346>
 80104c4:	2300      	movs	r3, #0
 80104c6:	9305      	str	r3, [sp, #20]
 80104c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104cc:	f104 021a 	add.w	r2, r4, #26
 80104d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104d2:	9905      	ldr	r1, [sp, #20]
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	eba3 0309 	sub.w	r3, r3, r9
 80104da:	428b      	cmp	r3, r1
 80104dc:	dc33      	bgt.n	8010546 <_printf_float+0x356>
 80104de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	db3c      	blt.n	8010560 <_printf_float+0x370>
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	07da      	lsls	r2, r3, #31
 80104ea:	d439      	bmi.n	8010560 <_printf_float+0x370>
 80104ec:	9b08      	ldr	r3, [sp, #32]
 80104ee:	9a04      	ldr	r2, [sp, #16]
 80104f0:	9907      	ldr	r1, [sp, #28]
 80104f2:	1a9a      	subs	r2, r3, r2
 80104f4:	eba3 0901 	sub.w	r9, r3, r1
 80104f8:	4591      	cmp	r9, r2
 80104fa:	bfa8      	it	ge
 80104fc:	4691      	movge	r9, r2
 80104fe:	f1b9 0f00 	cmp.w	r9, #0
 8010502:	dc35      	bgt.n	8010570 <_printf_float+0x380>
 8010504:	f04f 0800 	mov.w	r8, #0
 8010508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801050c:	f104 0a1a 	add.w	sl, r4, #26
 8010510:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010514:	1a9b      	subs	r3, r3, r2
 8010516:	eba3 0309 	sub.w	r3, r3, r9
 801051a:	4543      	cmp	r3, r8
 801051c:	f77f af75 	ble.w	801040a <_printf_float+0x21a>
 8010520:	2301      	movs	r3, #1
 8010522:	4652      	mov	r2, sl
 8010524:	4631      	mov	r1, r6
 8010526:	4628      	mov	r0, r5
 8010528:	47b8      	blx	r7
 801052a:	3001      	adds	r0, #1
 801052c:	f43f aeae 	beq.w	801028c <_printf_float+0x9c>
 8010530:	f108 0801 	add.w	r8, r8, #1
 8010534:	e7ec      	b.n	8010510 <_printf_float+0x320>
 8010536:	4613      	mov	r3, r2
 8010538:	4631      	mov	r1, r6
 801053a:	4642      	mov	r2, r8
 801053c:	4628      	mov	r0, r5
 801053e:	47b8      	blx	r7
 8010540:	3001      	adds	r0, #1
 8010542:	d1bf      	bne.n	80104c4 <_printf_float+0x2d4>
 8010544:	e6a2      	b.n	801028c <_printf_float+0x9c>
 8010546:	2301      	movs	r3, #1
 8010548:	4631      	mov	r1, r6
 801054a:	4628      	mov	r0, r5
 801054c:	9204      	str	r2, [sp, #16]
 801054e:	47b8      	blx	r7
 8010550:	3001      	adds	r0, #1
 8010552:	f43f ae9b 	beq.w	801028c <_printf_float+0x9c>
 8010556:	9b05      	ldr	r3, [sp, #20]
 8010558:	9a04      	ldr	r2, [sp, #16]
 801055a:	3301      	adds	r3, #1
 801055c:	9305      	str	r3, [sp, #20]
 801055e:	e7b7      	b.n	80104d0 <_printf_float+0x2e0>
 8010560:	4653      	mov	r3, sl
 8010562:	465a      	mov	r2, fp
 8010564:	4631      	mov	r1, r6
 8010566:	4628      	mov	r0, r5
 8010568:	47b8      	blx	r7
 801056a:	3001      	adds	r0, #1
 801056c:	d1be      	bne.n	80104ec <_printf_float+0x2fc>
 801056e:	e68d      	b.n	801028c <_printf_float+0x9c>
 8010570:	9a04      	ldr	r2, [sp, #16]
 8010572:	464b      	mov	r3, r9
 8010574:	4442      	add	r2, r8
 8010576:	4631      	mov	r1, r6
 8010578:	4628      	mov	r0, r5
 801057a:	47b8      	blx	r7
 801057c:	3001      	adds	r0, #1
 801057e:	d1c1      	bne.n	8010504 <_printf_float+0x314>
 8010580:	e684      	b.n	801028c <_printf_float+0x9c>
 8010582:	9a08      	ldr	r2, [sp, #32]
 8010584:	2a01      	cmp	r2, #1
 8010586:	dc01      	bgt.n	801058c <_printf_float+0x39c>
 8010588:	07db      	lsls	r3, r3, #31
 801058a:	d537      	bpl.n	80105fc <_printf_float+0x40c>
 801058c:	2301      	movs	r3, #1
 801058e:	4642      	mov	r2, r8
 8010590:	4631      	mov	r1, r6
 8010592:	4628      	mov	r0, r5
 8010594:	47b8      	blx	r7
 8010596:	3001      	adds	r0, #1
 8010598:	f43f ae78 	beq.w	801028c <_printf_float+0x9c>
 801059c:	4653      	mov	r3, sl
 801059e:	465a      	mov	r2, fp
 80105a0:	4631      	mov	r1, r6
 80105a2:	4628      	mov	r0, r5
 80105a4:	47b8      	blx	r7
 80105a6:	3001      	adds	r0, #1
 80105a8:	f43f ae70 	beq.w	801028c <_printf_float+0x9c>
 80105ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80105b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b8:	d01b      	beq.n	80105f2 <_printf_float+0x402>
 80105ba:	9b08      	ldr	r3, [sp, #32]
 80105bc:	f108 0201 	add.w	r2, r8, #1
 80105c0:	3b01      	subs	r3, #1
 80105c2:	4631      	mov	r1, r6
 80105c4:	4628      	mov	r0, r5
 80105c6:	47b8      	blx	r7
 80105c8:	3001      	adds	r0, #1
 80105ca:	d10e      	bne.n	80105ea <_printf_float+0x3fa>
 80105cc:	e65e      	b.n	801028c <_printf_float+0x9c>
 80105ce:	2301      	movs	r3, #1
 80105d0:	464a      	mov	r2, r9
 80105d2:	4631      	mov	r1, r6
 80105d4:	4628      	mov	r0, r5
 80105d6:	47b8      	blx	r7
 80105d8:	3001      	adds	r0, #1
 80105da:	f43f ae57 	beq.w	801028c <_printf_float+0x9c>
 80105de:	f108 0801 	add.w	r8, r8, #1
 80105e2:	9b08      	ldr	r3, [sp, #32]
 80105e4:	3b01      	subs	r3, #1
 80105e6:	4543      	cmp	r3, r8
 80105e8:	dcf1      	bgt.n	80105ce <_printf_float+0x3de>
 80105ea:	9b04      	ldr	r3, [sp, #16]
 80105ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80105f0:	e6db      	b.n	80103aa <_printf_float+0x1ba>
 80105f2:	f04f 0800 	mov.w	r8, #0
 80105f6:	f104 091a 	add.w	r9, r4, #26
 80105fa:	e7f2      	b.n	80105e2 <_printf_float+0x3f2>
 80105fc:	2301      	movs	r3, #1
 80105fe:	4642      	mov	r2, r8
 8010600:	e7df      	b.n	80105c2 <_printf_float+0x3d2>
 8010602:	2301      	movs	r3, #1
 8010604:	464a      	mov	r2, r9
 8010606:	4631      	mov	r1, r6
 8010608:	4628      	mov	r0, r5
 801060a:	47b8      	blx	r7
 801060c:	3001      	adds	r0, #1
 801060e:	f43f ae3d 	beq.w	801028c <_printf_float+0x9c>
 8010612:	f108 0801 	add.w	r8, r8, #1
 8010616:	68e3      	ldr	r3, [r4, #12]
 8010618:	9909      	ldr	r1, [sp, #36]	; 0x24
 801061a:	1a5b      	subs	r3, r3, r1
 801061c:	4543      	cmp	r3, r8
 801061e:	dcf0      	bgt.n	8010602 <_printf_float+0x412>
 8010620:	e6f7      	b.n	8010412 <_printf_float+0x222>
 8010622:	f04f 0800 	mov.w	r8, #0
 8010626:	f104 0919 	add.w	r9, r4, #25
 801062a:	e7f4      	b.n	8010616 <_printf_float+0x426>

0801062c <_printf_common>:
 801062c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010630:	4616      	mov	r6, r2
 8010632:	4699      	mov	r9, r3
 8010634:	688a      	ldr	r2, [r1, #8]
 8010636:	690b      	ldr	r3, [r1, #16]
 8010638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801063c:	4293      	cmp	r3, r2
 801063e:	bfb8      	it	lt
 8010640:	4613      	movlt	r3, r2
 8010642:	6033      	str	r3, [r6, #0]
 8010644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010648:	4607      	mov	r7, r0
 801064a:	460c      	mov	r4, r1
 801064c:	b10a      	cbz	r2, 8010652 <_printf_common+0x26>
 801064e:	3301      	adds	r3, #1
 8010650:	6033      	str	r3, [r6, #0]
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	0699      	lsls	r1, r3, #26
 8010656:	bf42      	ittt	mi
 8010658:	6833      	ldrmi	r3, [r6, #0]
 801065a:	3302      	addmi	r3, #2
 801065c:	6033      	strmi	r3, [r6, #0]
 801065e:	6825      	ldr	r5, [r4, #0]
 8010660:	f015 0506 	ands.w	r5, r5, #6
 8010664:	d106      	bne.n	8010674 <_printf_common+0x48>
 8010666:	f104 0a19 	add.w	sl, r4, #25
 801066a:	68e3      	ldr	r3, [r4, #12]
 801066c:	6832      	ldr	r2, [r6, #0]
 801066e:	1a9b      	subs	r3, r3, r2
 8010670:	42ab      	cmp	r3, r5
 8010672:	dc26      	bgt.n	80106c2 <_printf_common+0x96>
 8010674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010678:	1e13      	subs	r3, r2, #0
 801067a:	6822      	ldr	r2, [r4, #0]
 801067c:	bf18      	it	ne
 801067e:	2301      	movne	r3, #1
 8010680:	0692      	lsls	r2, r2, #26
 8010682:	d42b      	bmi.n	80106dc <_printf_common+0xb0>
 8010684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010688:	4649      	mov	r1, r9
 801068a:	4638      	mov	r0, r7
 801068c:	47c0      	blx	r8
 801068e:	3001      	adds	r0, #1
 8010690:	d01e      	beq.n	80106d0 <_printf_common+0xa4>
 8010692:	6823      	ldr	r3, [r4, #0]
 8010694:	68e5      	ldr	r5, [r4, #12]
 8010696:	6832      	ldr	r2, [r6, #0]
 8010698:	f003 0306 	and.w	r3, r3, #6
 801069c:	2b04      	cmp	r3, #4
 801069e:	bf08      	it	eq
 80106a0:	1aad      	subeq	r5, r5, r2
 80106a2:	68a3      	ldr	r3, [r4, #8]
 80106a4:	6922      	ldr	r2, [r4, #16]
 80106a6:	bf0c      	ite	eq
 80106a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106ac:	2500      	movne	r5, #0
 80106ae:	4293      	cmp	r3, r2
 80106b0:	bfc4      	itt	gt
 80106b2:	1a9b      	subgt	r3, r3, r2
 80106b4:	18ed      	addgt	r5, r5, r3
 80106b6:	2600      	movs	r6, #0
 80106b8:	341a      	adds	r4, #26
 80106ba:	42b5      	cmp	r5, r6
 80106bc:	d11a      	bne.n	80106f4 <_printf_common+0xc8>
 80106be:	2000      	movs	r0, #0
 80106c0:	e008      	b.n	80106d4 <_printf_common+0xa8>
 80106c2:	2301      	movs	r3, #1
 80106c4:	4652      	mov	r2, sl
 80106c6:	4649      	mov	r1, r9
 80106c8:	4638      	mov	r0, r7
 80106ca:	47c0      	blx	r8
 80106cc:	3001      	adds	r0, #1
 80106ce:	d103      	bne.n	80106d8 <_printf_common+0xac>
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d8:	3501      	adds	r5, #1
 80106da:	e7c6      	b.n	801066a <_printf_common+0x3e>
 80106dc:	18e1      	adds	r1, r4, r3
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	2030      	movs	r0, #48	; 0x30
 80106e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80106e6:	4422      	add	r2, r4
 80106e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80106ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80106f0:	3302      	adds	r3, #2
 80106f2:	e7c7      	b.n	8010684 <_printf_common+0x58>
 80106f4:	2301      	movs	r3, #1
 80106f6:	4622      	mov	r2, r4
 80106f8:	4649      	mov	r1, r9
 80106fa:	4638      	mov	r0, r7
 80106fc:	47c0      	blx	r8
 80106fe:	3001      	adds	r0, #1
 8010700:	d0e6      	beq.n	80106d0 <_printf_common+0xa4>
 8010702:	3601      	adds	r6, #1
 8010704:	e7d9      	b.n	80106ba <_printf_common+0x8e>
	...

08010708 <_printf_i>:
 8010708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801070c:	7e0f      	ldrb	r7, [r1, #24]
 801070e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010710:	2f78      	cmp	r7, #120	; 0x78
 8010712:	4691      	mov	r9, r2
 8010714:	4680      	mov	r8, r0
 8010716:	460c      	mov	r4, r1
 8010718:	469a      	mov	sl, r3
 801071a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801071e:	d807      	bhi.n	8010730 <_printf_i+0x28>
 8010720:	2f62      	cmp	r7, #98	; 0x62
 8010722:	d80a      	bhi.n	801073a <_printf_i+0x32>
 8010724:	2f00      	cmp	r7, #0
 8010726:	f000 80d8 	beq.w	80108da <_printf_i+0x1d2>
 801072a:	2f58      	cmp	r7, #88	; 0x58
 801072c:	f000 80a3 	beq.w	8010876 <_printf_i+0x16e>
 8010730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010738:	e03a      	b.n	80107b0 <_printf_i+0xa8>
 801073a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801073e:	2b15      	cmp	r3, #21
 8010740:	d8f6      	bhi.n	8010730 <_printf_i+0x28>
 8010742:	a101      	add	r1, pc, #4	; (adr r1, 8010748 <_printf_i+0x40>)
 8010744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010748:	080107a1 	.word	0x080107a1
 801074c:	080107b5 	.word	0x080107b5
 8010750:	08010731 	.word	0x08010731
 8010754:	08010731 	.word	0x08010731
 8010758:	08010731 	.word	0x08010731
 801075c:	08010731 	.word	0x08010731
 8010760:	080107b5 	.word	0x080107b5
 8010764:	08010731 	.word	0x08010731
 8010768:	08010731 	.word	0x08010731
 801076c:	08010731 	.word	0x08010731
 8010770:	08010731 	.word	0x08010731
 8010774:	080108c1 	.word	0x080108c1
 8010778:	080107e5 	.word	0x080107e5
 801077c:	080108a3 	.word	0x080108a3
 8010780:	08010731 	.word	0x08010731
 8010784:	08010731 	.word	0x08010731
 8010788:	080108e3 	.word	0x080108e3
 801078c:	08010731 	.word	0x08010731
 8010790:	080107e5 	.word	0x080107e5
 8010794:	08010731 	.word	0x08010731
 8010798:	08010731 	.word	0x08010731
 801079c:	080108ab 	.word	0x080108ab
 80107a0:	682b      	ldr	r3, [r5, #0]
 80107a2:	1d1a      	adds	r2, r3, #4
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	602a      	str	r2, [r5, #0]
 80107a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107b0:	2301      	movs	r3, #1
 80107b2:	e0a3      	b.n	80108fc <_printf_i+0x1f4>
 80107b4:	6820      	ldr	r0, [r4, #0]
 80107b6:	6829      	ldr	r1, [r5, #0]
 80107b8:	0606      	lsls	r6, r0, #24
 80107ba:	f101 0304 	add.w	r3, r1, #4
 80107be:	d50a      	bpl.n	80107d6 <_printf_i+0xce>
 80107c0:	680e      	ldr	r6, [r1, #0]
 80107c2:	602b      	str	r3, [r5, #0]
 80107c4:	2e00      	cmp	r6, #0
 80107c6:	da03      	bge.n	80107d0 <_printf_i+0xc8>
 80107c8:	232d      	movs	r3, #45	; 0x2d
 80107ca:	4276      	negs	r6, r6
 80107cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107d0:	485e      	ldr	r0, [pc, #376]	; (801094c <_printf_i+0x244>)
 80107d2:	230a      	movs	r3, #10
 80107d4:	e019      	b.n	801080a <_printf_i+0x102>
 80107d6:	680e      	ldr	r6, [r1, #0]
 80107d8:	602b      	str	r3, [r5, #0]
 80107da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80107de:	bf18      	it	ne
 80107e0:	b236      	sxthne	r6, r6
 80107e2:	e7ef      	b.n	80107c4 <_printf_i+0xbc>
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	6820      	ldr	r0, [r4, #0]
 80107e8:	1d19      	adds	r1, r3, #4
 80107ea:	6029      	str	r1, [r5, #0]
 80107ec:	0601      	lsls	r1, r0, #24
 80107ee:	d501      	bpl.n	80107f4 <_printf_i+0xec>
 80107f0:	681e      	ldr	r6, [r3, #0]
 80107f2:	e002      	b.n	80107fa <_printf_i+0xf2>
 80107f4:	0646      	lsls	r6, r0, #25
 80107f6:	d5fb      	bpl.n	80107f0 <_printf_i+0xe8>
 80107f8:	881e      	ldrh	r6, [r3, #0]
 80107fa:	4854      	ldr	r0, [pc, #336]	; (801094c <_printf_i+0x244>)
 80107fc:	2f6f      	cmp	r7, #111	; 0x6f
 80107fe:	bf0c      	ite	eq
 8010800:	2308      	moveq	r3, #8
 8010802:	230a      	movne	r3, #10
 8010804:	2100      	movs	r1, #0
 8010806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801080a:	6865      	ldr	r5, [r4, #4]
 801080c:	60a5      	str	r5, [r4, #8]
 801080e:	2d00      	cmp	r5, #0
 8010810:	bfa2      	ittt	ge
 8010812:	6821      	ldrge	r1, [r4, #0]
 8010814:	f021 0104 	bicge.w	r1, r1, #4
 8010818:	6021      	strge	r1, [r4, #0]
 801081a:	b90e      	cbnz	r6, 8010820 <_printf_i+0x118>
 801081c:	2d00      	cmp	r5, #0
 801081e:	d04d      	beq.n	80108bc <_printf_i+0x1b4>
 8010820:	4615      	mov	r5, r2
 8010822:	fbb6 f1f3 	udiv	r1, r6, r3
 8010826:	fb03 6711 	mls	r7, r3, r1, r6
 801082a:	5dc7      	ldrb	r7, [r0, r7]
 801082c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010830:	4637      	mov	r7, r6
 8010832:	42bb      	cmp	r3, r7
 8010834:	460e      	mov	r6, r1
 8010836:	d9f4      	bls.n	8010822 <_printf_i+0x11a>
 8010838:	2b08      	cmp	r3, #8
 801083a:	d10b      	bne.n	8010854 <_printf_i+0x14c>
 801083c:	6823      	ldr	r3, [r4, #0]
 801083e:	07de      	lsls	r6, r3, #31
 8010840:	d508      	bpl.n	8010854 <_printf_i+0x14c>
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	6861      	ldr	r1, [r4, #4]
 8010846:	4299      	cmp	r1, r3
 8010848:	bfde      	ittt	le
 801084a:	2330      	movle	r3, #48	; 0x30
 801084c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010854:	1b52      	subs	r2, r2, r5
 8010856:	6122      	str	r2, [r4, #16]
 8010858:	f8cd a000 	str.w	sl, [sp]
 801085c:	464b      	mov	r3, r9
 801085e:	aa03      	add	r2, sp, #12
 8010860:	4621      	mov	r1, r4
 8010862:	4640      	mov	r0, r8
 8010864:	f7ff fee2 	bl	801062c <_printf_common>
 8010868:	3001      	adds	r0, #1
 801086a:	d14c      	bne.n	8010906 <_printf_i+0x1fe>
 801086c:	f04f 30ff 	mov.w	r0, #4294967295
 8010870:	b004      	add	sp, #16
 8010872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010876:	4835      	ldr	r0, [pc, #212]	; (801094c <_printf_i+0x244>)
 8010878:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801087c:	6829      	ldr	r1, [r5, #0]
 801087e:	6823      	ldr	r3, [r4, #0]
 8010880:	f851 6b04 	ldr.w	r6, [r1], #4
 8010884:	6029      	str	r1, [r5, #0]
 8010886:	061d      	lsls	r5, r3, #24
 8010888:	d514      	bpl.n	80108b4 <_printf_i+0x1ac>
 801088a:	07df      	lsls	r7, r3, #31
 801088c:	bf44      	itt	mi
 801088e:	f043 0320 	orrmi.w	r3, r3, #32
 8010892:	6023      	strmi	r3, [r4, #0]
 8010894:	b91e      	cbnz	r6, 801089e <_printf_i+0x196>
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	f023 0320 	bic.w	r3, r3, #32
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	2310      	movs	r3, #16
 80108a0:	e7b0      	b.n	8010804 <_printf_i+0xfc>
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	f043 0320 	orr.w	r3, r3, #32
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	2378      	movs	r3, #120	; 0x78
 80108ac:	4828      	ldr	r0, [pc, #160]	; (8010950 <_printf_i+0x248>)
 80108ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108b2:	e7e3      	b.n	801087c <_printf_i+0x174>
 80108b4:	0659      	lsls	r1, r3, #25
 80108b6:	bf48      	it	mi
 80108b8:	b2b6      	uxthmi	r6, r6
 80108ba:	e7e6      	b.n	801088a <_printf_i+0x182>
 80108bc:	4615      	mov	r5, r2
 80108be:	e7bb      	b.n	8010838 <_printf_i+0x130>
 80108c0:	682b      	ldr	r3, [r5, #0]
 80108c2:	6826      	ldr	r6, [r4, #0]
 80108c4:	6961      	ldr	r1, [r4, #20]
 80108c6:	1d18      	adds	r0, r3, #4
 80108c8:	6028      	str	r0, [r5, #0]
 80108ca:	0635      	lsls	r5, r6, #24
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	d501      	bpl.n	80108d4 <_printf_i+0x1cc>
 80108d0:	6019      	str	r1, [r3, #0]
 80108d2:	e002      	b.n	80108da <_printf_i+0x1d2>
 80108d4:	0670      	lsls	r0, r6, #25
 80108d6:	d5fb      	bpl.n	80108d0 <_printf_i+0x1c8>
 80108d8:	8019      	strh	r1, [r3, #0]
 80108da:	2300      	movs	r3, #0
 80108dc:	6123      	str	r3, [r4, #16]
 80108de:	4615      	mov	r5, r2
 80108e0:	e7ba      	b.n	8010858 <_printf_i+0x150>
 80108e2:	682b      	ldr	r3, [r5, #0]
 80108e4:	1d1a      	adds	r2, r3, #4
 80108e6:	602a      	str	r2, [r5, #0]
 80108e8:	681d      	ldr	r5, [r3, #0]
 80108ea:	6862      	ldr	r2, [r4, #4]
 80108ec:	2100      	movs	r1, #0
 80108ee:	4628      	mov	r0, r5
 80108f0:	f7ef fd06 	bl	8000300 <memchr>
 80108f4:	b108      	cbz	r0, 80108fa <_printf_i+0x1f2>
 80108f6:	1b40      	subs	r0, r0, r5
 80108f8:	6060      	str	r0, [r4, #4]
 80108fa:	6863      	ldr	r3, [r4, #4]
 80108fc:	6123      	str	r3, [r4, #16]
 80108fe:	2300      	movs	r3, #0
 8010900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010904:	e7a8      	b.n	8010858 <_printf_i+0x150>
 8010906:	6923      	ldr	r3, [r4, #16]
 8010908:	462a      	mov	r2, r5
 801090a:	4649      	mov	r1, r9
 801090c:	4640      	mov	r0, r8
 801090e:	47d0      	blx	sl
 8010910:	3001      	adds	r0, #1
 8010912:	d0ab      	beq.n	801086c <_printf_i+0x164>
 8010914:	6823      	ldr	r3, [r4, #0]
 8010916:	079b      	lsls	r3, r3, #30
 8010918:	d413      	bmi.n	8010942 <_printf_i+0x23a>
 801091a:	68e0      	ldr	r0, [r4, #12]
 801091c:	9b03      	ldr	r3, [sp, #12]
 801091e:	4298      	cmp	r0, r3
 8010920:	bfb8      	it	lt
 8010922:	4618      	movlt	r0, r3
 8010924:	e7a4      	b.n	8010870 <_printf_i+0x168>
 8010926:	2301      	movs	r3, #1
 8010928:	4632      	mov	r2, r6
 801092a:	4649      	mov	r1, r9
 801092c:	4640      	mov	r0, r8
 801092e:	47d0      	blx	sl
 8010930:	3001      	adds	r0, #1
 8010932:	d09b      	beq.n	801086c <_printf_i+0x164>
 8010934:	3501      	adds	r5, #1
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	9903      	ldr	r1, [sp, #12]
 801093a:	1a5b      	subs	r3, r3, r1
 801093c:	42ab      	cmp	r3, r5
 801093e:	dcf2      	bgt.n	8010926 <_printf_i+0x21e>
 8010940:	e7eb      	b.n	801091a <_printf_i+0x212>
 8010942:	2500      	movs	r5, #0
 8010944:	f104 0619 	add.w	r6, r4, #25
 8010948:	e7f5      	b.n	8010936 <_printf_i+0x22e>
 801094a:	bf00      	nop
 801094c:	08013eaf 	.word	0x08013eaf
 8010950:	08013ec0 	.word	0x08013ec0

08010954 <_sbrk_r>:
 8010954:	b538      	push	{r3, r4, r5, lr}
 8010956:	4d06      	ldr	r5, [pc, #24]	; (8010970 <_sbrk_r+0x1c>)
 8010958:	2300      	movs	r3, #0
 801095a:	4604      	mov	r4, r0
 801095c:	4608      	mov	r0, r1
 801095e:	602b      	str	r3, [r5, #0]
 8010960:	f7f1 fc98 	bl	8002294 <_sbrk>
 8010964:	1c43      	adds	r3, r0, #1
 8010966:	d102      	bne.n	801096e <_sbrk_r+0x1a>
 8010968:	682b      	ldr	r3, [r5, #0]
 801096a:	b103      	cbz	r3, 801096e <_sbrk_r+0x1a>
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	bd38      	pop	{r3, r4, r5, pc}
 8010970:	240011d4 	.word	0x240011d4

08010974 <__sread>:
 8010974:	b510      	push	{r4, lr}
 8010976:	460c      	mov	r4, r1
 8010978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801097c:	f002 fe20 	bl	80135c0 <_read_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	bfab      	itete	ge
 8010984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010986:	89a3      	ldrhlt	r3, [r4, #12]
 8010988:	181b      	addge	r3, r3, r0
 801098a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801098e:	bfac      	ite	ge
 8010990:	6563      	strge	r3, [r4, #84]	; 0x54
 8010992:	81a3      	strhlt	r3, [r4, #12]
 8010994:	bd10      	pop	{r4, pc}

08010996 <__swrite>:
 8010996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099a:	461f      	mov	r7, r3
 801099c:	898b      	ldrh	r3, [r1, #12]
 801099e:	05db      	lsls	r3, r3, #23
 80109a0:	4605      	mov	r5, r0
 80109a2:	460c      	mov	r4, r1
 80109a4:	4616      	mov	r6, r2
 80109a6:	d505      	bpl.n	80109b4 <__swrite+0x1e>
 80109a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ac:	2302      	movs	r3, #2
 80109ae:	2200      	movs	r2, #0
 80109b0:	f002 f902 	bl	8012bb8 <_lseek_r>
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109be:	81a3      	strh	r3, [r4, #12]
 80109c0:	4632      	mov	r2, r6
 80109c2:	463b      	mov	r3, r7
 80109c4:	4628      	mov	r0, r5
 80109c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109ca:	f000 beb5 	b.w	8011738 <_write_r>

080109ce <__sseek>:
 80109ce:	b510      	push	{r4, lr}
 80109d0:	460c      	mov	r4, r1
 80109d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d6:	f002 f8ef 	bl	8012bb8 <_lseek_r>
 80109da:	1c43      	adds	r3, r0, #1
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	bf15      	itete	ne
 80109e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80109e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109ea:	81a3      	strheq	r3, [r4, #12]
 80109ec:	bf18      	it	ne
 80109ee:	81a3      	strhne	r3, [r4, #12]
 80109f0:	bd10      	pop	{r4, pc}

080109f2 <__sclose>:
 80109f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f6:	f000 bf3d 	b.w	8011874 <_close_r>

080109fa <strncmp>:
 80109fa:	b510      	push	{r4, lr}
 80109fc:	b17a      	cbz	r2, 8010a1e <strncmp+0x24>
 80109fe:	4603      	mov	r3, r0
 8010a00:	3901      	subs	r1, #1
 8010a02:	1884      	adds	r4, r0, r2
 8010a04:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a0c:	4290      	cmp	r0, r2
 8010a0e:	d101      	bne.n	8010a14 <strncmp+0x1a>
 8010a10:	42a3      	cmp	r3, r4
 8010a12:	d101      	bne.n	8010a18 <strncmp+0x1e>
 8010a14:	1a80      	subs	r0, r0, r2
 8010a16:	bd10      	pop	{r4, pc}
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d1f3      	bne.n	8010a04 <strncmp+0xa>
 8010a1c:	e7fa      	b.n	8010a14 <strncmp+0x1a>
 8010a1e:	4610      	mov	r0, r2
 8010a20:	e7f9      	b.n	8010a16 <strncmp+0x1c>

08010a22 <sulp>:
 8010a22:	b570      	push	{r4, r5, r6, lr}
 8010a24:	4604      	mov	r4, r0
 8010a26:	460d      	mov	r5, r1
 8010a28:	4616      	mov	r6, r2
 8010a2a:	ec45 4b10 	vmov	d0, r4, r5
 8010a2e:	f002 fc65 	bl	80132fc <__ulp>
 8010a32:	b17e      	cbz	r6, 8010a54 <sulp+0x32>
 8010a34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010a38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dd09      	ble.n	8010a54 <sulp+0x32>
 8010a40:	051b      	lsls	r3, r3, #20
 8010a42:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8010a46:	2000      	movs	r0, #0
 8010a48:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8010a4c:	ec41 0b17 	vmov	d7, r0, r1
 8010a50:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a58 <_strtod_l>:
 8010a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5c:	ed2d 8b0e 	vpush	{d8-d14}
 8010a60:	b097      	sub	sp, #92	; 0x5c
 8010a62:	461f      	mov	r7, r3
 8010a64:	2300      	movs	r3, #0
 8010a66:	9312      	str	r3, [sp, #72]	; 0x48
 8010a68:	4ba1      	ldr	r3, [pc, #644]	; (8010cf0 <_strtod_l+0x298>)
 8010a6a:	920d      	str	r2, [sp, #52]	; 0x34
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	9307      	str	r3, [sp, #28]
 8010a70:	4604      	mov	r4, r0
 8010a72:	4618      	mov	r0, r3
 8010a74:	468b      	mov	fp, r1
 8010a76:	f7ef fc3b 	bl	80002f0 <strlen>
 8010a7a:	f04f 0800 	mov.w	r8, #0
 8010a7e:	4605      	mov	r5, r0
 8010a80:	f04f 0900 	mov.w	r9, #0
 8010a84:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010a88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010a8a:	7813      	ldrb	r3, [r2, #0]
 8010a8c:	2b2b      	cmp	r3, #43	; 0x2b
 8010a8e:	d04d      	beq.n	8010b2c <_strtod_l+0xd4>
 8010a90:	d83a      	bhi.n	8010b08 <_strtod_l+0xb0>
 8010a92:	2b0d      	cmp	r3, #13
 8010a94:	d833      	bhi.n	8010afe <_strtod_l+0xa6>
 8010a96:	2b08      	cmp	r3, #8
 8010a98:	d833      	bhi.n	8010b02 <_strtod_l+0xaa>
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d03d      	beq.n	8010b1a <_strtod_l+0xc2>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	9308      	str	r3, [sp, #32]
 8010aa2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010aa4:	7833      	ldrb	r3, [r6, #0]
 8010aa6:	2b30      	cmp	r3, #48	; 0x30
 8010aa8:	f040 80b0 	bne.w	8010c0c <_strtod_l+0x1b4>
 8010aac:	7873      	ldrb	r3, [r6, #1]
 8010aae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ab2:	2b58      	cmp	r3, #88	; 0x58
 8010ab4:	d167      	bne.n	8010b86 <_strtod_l+0x12e>
 8010ab6:	9b08      	ldr	r3, [sp, #32]
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	ab12      	add	r3, sp, #72	; 0x48
 8010abc:	9702      	str	r7, [sp, #8]
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	4a8c      	ldr	r2, [pc, #560]	; (8010cf4 <_strtod_l+0x29c>)
 8010ac2:	ab13      	add	r3, sp, #76	; 0x4c
 8010ac4:	a911      	add	r1, sp, #68	; 0x44
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f001 fd5a 	bl	8012580 <__gethex>
 8010acc:	f010 0507 	ands.w	r5, r0, #7
 8010ad0:	4607      	mov	r7, r0
 8010ad2:	d005      	beq.n	8010ae0 <_strtod_l+0x88>
 8010ad4:	2d06      	cmp	r5, #6
 8010ad6:	d12b      	bne.n	8010b30 <_strtod_l+0xd8>
 8010ad8:	3601      	adds	r6, #1
 8010ada:	2300      	movs	r3, #0
 8010adc:	9611      	str	r6, [sp, #68]	; 0x44
 8010ade:	9308      	str	r3, [sp, #32]
 8010ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	f040 854e 	bne.w	8011584 <_strtod_l+0xb2c>
 8010ae8:	9b08      	ldr	r3, [sp, #32]
 8010aea:	b1e3      	cbz	r3, 8010b26 <_strtod_l+0xce>
 8010aec:	ec49 8b17 	vmov	d7, r8, r9
 8010af0:	eeb1 0b47 	vneg.f64	d0, d7
 8010af4:	b017      	add	sp, #92	; 0x5c
 8010af6:	ecbd 8b0e 	vpop	{d8-d14}
 8010afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afe:	2b20      	cmp	r3, #32
 8010b00:	d1cd      	bne.n	8010a9e <_strtod_l+0x46>
 8010b02:	3201      	adds	r2, #1
 8010b04:	9211      	str	r2, [sp, #68]	; 0x44
 8010b06:	e7bf      	b.n	8010a88 <_strtod_l+0x30>
 8010b08:	2b2d      	cmp	r3, #45	; 0x2d
 8010b0a:	d1c8      	bne.n	8010a9e <_strtod_l+0x46>
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	9308      	str	r3, [sp, #32]
 8010b10:	1c53      	adds	r3, r2, #1
 8010b12:	9311      	str	r3, [sp, #68]	; 0x44
 8010b14:	7853      	ldrb	r3, [r2, #1]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1c3      	bne.n	8010aa2 <_strtod_l+0x4a>
 8010b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b1c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f040 852d 	bne.w	8011580 <_strtod_l+0xb28>
 8010b26:	ec49 8b10 	vmov	d0, r8, r9
 8010b2a:	e7e3      	b.n	8010af4 <_strtod_l+0x9c>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	e7ee      	b.n	8010b0e <_strtod_l+0xb6>
 8010b30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010b32:	b13a      	cbz	r2, 8010b44 <_strtod_l+0xec>
 8010b34:	2135      	movs	r1, #53	; 0x35
 8010b36:	a814      	add	r0, sp, #80	; 0x50
 8010b38:	f002 fce8 	bl	801350c <__copybits>
 8010b3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f002 f8aa 	bl	8012c98 <_Bfree>
 8010b44:	3d01      	subs	r5, #1
 8010b46:	2d04      	cmp	r5, #4
 8010b48:	d806      	bhi.n	8010b58 <_strtod_l+0x100>
 8010b4a:	e8df f005 	tbb	[pc, r5]
 8010b4e:	030a      	.short	0x030a
 8010b50:	1714      	.short	0x1714
 8010b52:	0a          	.byte	0x0a
 8010b53:	00          	.byte	0x00
 8010b54:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8010b58:	073f      	lsls	r7, r7, #28
 8010b5a:	d5c1      	bpl.n	8010ae0 <_strtod_l+0x88>
 8010b5c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8010b60:	e7be      	b.n	8010ae0 <_strtod_l+0x88>
 8010b62:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8010b66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010b6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010b70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010b74:	e7f0      	b.n	8010b58 <_strtod_l+0x100>
 8010b76:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8010cf8 <_strtod_l+0x2a0>
 8010b7a:	e7ed      	b.n	8010b58 <_strtod_l+0x100>
 8010b7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010b80:	f04f 38ff 	mov.w	r8, #4294967295
 8010b84:	e7e8      	b.n	8010b58 <_strtod_l+0x100>
 8010b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	9211      	str	r2, [sp, #68]	; 0x44
 8010b8c:	785b      	ldrb	r3, [r3, #1]
 8010b8e:	2b30      	cmp	r3, #48	; 0x30
 8010b90:	d0f9      	beq.n	8010b86 <_strtod_l+0x12e>
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d0a4      	beq.n	8010ae0 <_strtod_l+0x88>
 8010b96:	2301      	movs	r3, #1
 8010b98:	f04f 0a00 	mov.w	sl, #0
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8010ba2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010ba6:	f8cd a018 	str.w	sl, [sp, #24]
 8010baa:	220a      	movs	r2, #10
 8010bac:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010bae:	7807      	ldrb	r7, [r0, #0]
 8010bb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8010bb4:	b2d9      	uxtb	r1, r3
 8010bb6:	2909      	cmp	r1, #9
 8010bb8:	d92a      	bls.n	8010c10 <_strtod_l+0x1b8>
 8010bba:	9907      	ldr	r1, [sp, #28]
 8010bbc:	462a      	mov	r2, r5
 8010bbe:	f7ff ff1c 	bl	80109fa <strncmp>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	d033      	beq.n	8010c2e <_strtod_l+0x1d6>
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	9b06      	ldr	r3, [sp, #24]
 8010bca:	463a      	mov	r2, r7
 8010bcc:	4601      	mov	r1, r0
 8010bce:	4607      	mov	r7, r0
 8010bd0:	2a65      	cmp	r2, #101	; 0x65
 8010bd2:	d001      	beq.n	8010bd8 <_strtod_l+0x180>
 8010bd4:	2a45      	cmp	r2, #69	; 0x45
 8010bd6:	d117      	bne.n	8010c08 <_strtod_l+0x1b0>
 8010bd8:	b91b      	cbnz	r3, 8010be2 <_strtod_l+0x18a>
 8010bda:	9b04      	ldr	r3, [sp, #16]
 8010bdc:	4303      	orrs	r3, r0
 8010bde:	d09c      	beq.n	8010b1a <_strtod_l+0xc2>
 8010be0:	2300      	movs	r3, #0
 8010be2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8010be6:	f10b 0201 	add.w	r2, fp, #1
 8010bea:	9211      	str	r2, [sp, #68]	; 0x44
 8010bec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8010bf0:	2a2b      	cmp	r2, #43	; 0x2b
 8010bf2:	d071      	beq.n	8010cd8 <_strtod_l+0x280>
 8010bf4:	2a2d      	cmp	r2, #45	; 0x2d
 8010bf6:	d077      	beq.n	8010ce8 <_strtod_l+0x290>
 8010bf8:	f04f 0e00 	mov.w	lr, #0
 8010bfc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8010c00:	2d09      	cmp	r5, #9
 8010c02:	d97f      	bls.n	8010d04 <_strtod_l+0x2ac>
 8010c04:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010c08:	2500      	movs	r5, #0
 8010c0a:	e09b      	b.n	8010d44 <_strtod_l+0x2ec>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	e7c3      	b.n	8010b98 <_strtod_l+0x140>
 8010c10:	9906      	ldr	r1, [sp, #24]
 8010c12:	2908      	cmp	r1, #8
 8010c14:	bfdd      	ittte	le
 8010c16:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010c18:	fb02 3301 	mlale	r3, r2, r1, r3
 8010c1c:	9309      	strle	r3, [sp, #36]	; 0x24
 8010c1e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010c22:	9b06      	ldr	r3, [sp, #24]
 8010c24:	3001      	adds	r0, #1
 8010c26:	3301      	adds	r3, #1
 8010c28:	9306      	str	r3, [sp, #24]
 8010c2a:	9011      	str	r0, [sp, #68]	; 0x44
 8010c2c:	e7be      	b.n	8010bac <_strtod_l+0x154>
 8010c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c30:	195a      	adds	r2, r3, r5
 8010c32:	9211      	str	r2, [sp, #68]	; 0x44
 8010c34:	5d5a      	ldrb	r2, [r3, r5]
 8010c36:	9b06      	ldr	r3, [sp, #24]
 8010c38:	b3a3      	cbz	r3, 8010ca4 <_strtod_l+0x24c>
 8010c3a:	4607      	mov	r7, r0
 8010c3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010c40:	2909      	cmp	r1, #9
 8010c42:	d912      	bls.n	8010c6a <_strtod_l+0x212>
 8010c44:	2101      	movs	r1, #1
 8010c46:	e7c3      	b.n	8010bd0 <_strtod_l+0x178>
 8010c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	9211      	str	r2, [sp, #68]	; 0x44
 8010c4e:	785a      	ldrb	r2, [r3, #1]
 8010c50:	3001      	adds	r0, #1
 8010c52:	2a30      	cmp	r2, #48	; 0x30
 8010c54:	d0f8      	beq.n	8010c48 <_strtod_l+0x1f0>
 8010c56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010c5a:	2b08      	cmp	r3, #8
 8010c5c:	f200 8497 	bhi.w	801158e <_strtod_l+0xb36>
 8010c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c62:	930a      	str	r3, [sp, #40]	; 0x28
 8010c64:	4607      	mov	r7, r0
 8010c66:	2000      	movs	r0, #0
 8010c68:	4603      	mov	r3, r0
 8010c6a:	3a30      	subs	r2, #48	; 0x30
 8010c6c:	f100 0101 	add.w	r1, r0, #1
 8010c70:	d012      	beq.n	8010c98 <_strtod_l+0x240>
 8010c72:	440f      	add	r7, r1
 8010c74:	eb00 0c03 	add.w	ip, r0, r3
 8010c78:	4619      	mov	r1, r3
 8010c7a:	250a      	movs	r5, #10
 8010c7c:	4561      	cmp	r1, ip
 8010c7e:	d113      	bne.n	8010ca8 <_strtod_l+0x250>
 8010c80:	1819      	adds	r1, r3, r0
 8010c82:	2908      	cmp	r1, #8
 8010c84:	f103 0301 	add.w	r3, r3, #1
 8010c88:	4403      	add	r3, r0
 8010c8a:	dc1c      	bgt.n	8010cc6 <_strtod_l+0x26e>
 8010c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c8e:	210a      	movs	r1, #10
 8010c90:	fb01 2200 	mla	r2, r1, r0, r2
 8010c94:	9209      	str	r2, [sp, #36]	; 0x24
 8010c96:	2100      	movs	r1, #0
 8010c98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c9a:	1c50      	adds	r0, r2, #1
 8010c9c:	9011      	str	r0, [sp, #68]	; 0x44
 8010c9e:	7852      	ldrb	r2, [r2, #1]
 8010ca0:	4608      	mov	r0, r1
 8010ca2:	e7cb      	b.n	8010c3c <_strtod_l+0x1e4>
 8010ca4:	9806      	ldr	r0, [sp, #24]
 8010ca6:	e7d4      	b.n	8010c52 <_strtod_l+0x1fa>
 8010ca8:	2908      	cmp	r1, #8
 8010caa:	dc04      	bgt.n	8010cb6 <_strtod_l+0x25e>
 8010cac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010cae:	436e      	muls	r6, r5
 8010cb0:	9609      	str	r6, [sp, #36]	; 0x24
 8010cb2:	3101      	adds	r1, #1
 8010cb4:	e7e2      	b.n	8010c7c <_strtod_l+0x224>
 8010cb6:	f101 0e01 	add.w	lr, r1, #1
 8010cba:	f1be 0f10 	cmp.w	lr, #16
 8010cbe:	bfd8      	it	le
 8010cc0:	fb05 fa0a 	mulle.w	sl, r5, sl
 8010cc4:	e7f5      	b.n	8010cb2 <_strtod_l+0x25a>
 8010cc6:	2b10      	cmp	r3, #16
 8010cc8:	bfdc      	itt	le
 8010cca:	210a      	movle	r1, #10
 8010ccc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8010cd0:	e7e1      	b.n	8010c96 <_strtod_l+0x23e>
 8010cd2:	2700      	movs	r7, #0
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	e780      	b.n	8010bda <_strtod_l+0x182>
 8010cd8:	f04f 0e00 	mov.w	lr, #0
 8010cdc:	f10b 0202 	add.w	r2, fp, #2
 8010ce0:	9211      	str	r2, [sp, #68]	; 0x44
 8010ce2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8010ce6:	e789      	b.n	8010bfc <_strtod_l+0x1a4>
 8010ce8:	f04f 0e01 	mov.w	lr, #1
 8010cec:	e7f6      	b.n	8010cdc <_strtod_l+0x284>
 8010cee:	bf00      	nop
 8010cf0:	080140b8 	.word	0x080140b8
 8010cf4:	08013ed4 	.word	0x08013ed4
 8010cf8:	7ff00000 	.word	0x7ff00000
 8010cfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010cfe:	1c55      	adds	r5, r2, #1
 8010d00:	9511      	str	r5, [sp, #68]	; 0x44
 8010d02:	7852      	ldrb	r2, [r2, #1]
 8010d04:	2a30      	cmp	r2, #48	; 0x30
 8010d06:	d0f9      	beq.n	8010cfc <_strtod_l+0x2a4>
 8010d08:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8010d0c:	2d08      	cmp	r5, #8
 8010d0e:	f63f af7b 	bhi.w	8010c08 <_strtod_l+0x1b0>
 8010d12:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8010d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d18:	9207      	str	r2, [sp, #28]
 8010d1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010d1c:	1c55      	adds	r5, r2, #1
 8010d1e:	9511      	str	r5, [sp, #68]	; 0x44
 8010d20:	7852      	ldrb	r2, [r2, #1]
 8010d22:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010d26:	2e09      	cmp	r6, #9
 8010d28:	d937      	bls.n	8010d9a <_strtod_l+0x342>
 8010d2a:	9e07      	ldr	r6, [sp, #28]
 8010d2c:	1bad      	subs	r5, r5, r6
 8010d2e:	2d08      	cmp	r5, #8
 8010d30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8010d34:	dc02      	bgt.n	8010d3c <_strtod_l+0x2e4>
 8010d36:	4565      	cmp	r5, ip
 8010d38:	bfa8      	it	ge
 8010d3a:	4665      	movge	r5, ip
 8010d3c:	f1be 0f00 	cmp.w	lr, #0
 8010d40:	d000      	beq.n	8010d44 <_strtod_l+0x2ec>
 8010d42:	426d      	negs	r5, r5
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d14d      	bne.n	8010de4 <_strtod_l+0x38c>
 8010d48:	9b04      	ldr	r3, [sp, #16]
 8010d4a:	4303      	orrs	r3, r0
 8010d4c:	f47f aec8 	bne.w	8010ae0 <_strtod_l+0x88>
 8010d50:	2900      	cmp	r1, #0
 8010d52:	f47f aee2 	bne.w	8010b1a <_strtod_l+0xc2>
 8010d56:	2a69      	cmp	r2, #105	; 0x69
 8010d58:	d027      	beq.n	8010daa <_strtod_l+0x352>
 8010d5a:	dc24      	bgt.n	8010da6 <_strtod_l+0x34e>
 8010d5c:	2a49      	cmp	r2, #73	; 0x49
 8010d5e:	d024      	beq.n	8010daa <_strtod_l+0x352>
 8010d60:	2a4e      	cmp	r2, #78	; 0x4e
 8010d62:	f47f aeda 	bne.w	8010b1a <_strtod_l+0xc2>
 8010d66:	4996      	ldr	r1, [pc, #600]	; (8010fc0 <_strtod_l+0x568>)
 8010d68:	a811      	add	r0, sp, #68	; 0x44
 8010d6a:	f001 fe61 	bl	8012a30 <__match>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f43f aed3 	beq.w	8010b1a <_strtod_l+0xc2>
 8010d74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	2b28      	cmp	r3, #40	; 0x28
 8010d7a:	d12d      	bne.n	8010dd8 <_strtod_l+0x380>
 8010d7c:	4991      	ldr	r1, [pc, #580]	; (8010fc4 <_strtod_l+0x56c>)
 8010d7e:	aa14      	add	r2, sp, #80	; 0x50
 8010d80:	a811      	add	r0, sp, #68	; 0x44
 8010d82:	f001 fe69 	bl	8012a58 <__hexnan>
 8010d86:	2805      	cmp	r0, #5
 8010d88:	d126      	bne.n	8010dd8 <_strtod_l+0x380>
 8010d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d8c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010d90:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010d94:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010d98:	e6a2      	b.n	8010ae0 <_strtod_l+0x88>
 8010d9a:	250a      	movs	r5, #10
 8010d9c:	fb05 250c 	mla	r5, r5, ip, r2
 8010da0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8010da4:	e7b9      	b.n	8010d1a <_strtod_l+0x2c2>
 8010da6:	2a6e      	cmp	r2, #110	; 0x6e
 8010da8:	e7db      	b.n	8010d62 <_strtod_l+0x30a>
 8010daa:	4987      	ldr	r1, [pc, #540]	; (8010fc8 <_strtod_l+0x570>)
 8010dac:	a811      	add	r0, sp, #68	; 0x44
 8010dae:	f001 fe3f 	bl	8012a30 <__match>
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f43f aeb1 	beq.w	8010b1a <_strtod_l+0xc2>
 8010db8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dba:	4984      	ldr	r1, [pc, #528]	; (8010fcc <_strtod_l+0x574>)
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	a811      	add	r0, sp, #68	; 0x44
 8010dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8010dc2:	f001 fe35 	bl	8012a30 <__match>
 8010dc6:	b910      	cbnz	r0, 8010dce <_strtod_l+0x376>
 8010dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dca:	3301      	adds	r3, #1
 8010dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8010dce:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8010fe0 <_strtod_l+0x588>
 8010dd2:	f04f 0800 	mov.w	r8, #0
 8010dd6:	e683      	b.n	8010ae0 <_strtod_l+0x88>
 8010dd8:	487d      	ldr	r0, [pc, #500]	; (8010fd0 <_strtod_l+0x578>)
 8010dda:	f002 fc05 	bl	80135e8 <nan>
 8010dde:	ec59 8b10 	vmov	r8, r9, d0
 8010de2:	e67d      	b.n	8010ae0 <_strtod_l+0x88>
 8010de4:	1bea      	subs	r2, r5, r7
 8010de6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8010dea:	9207      	str	r2, [sp, #28]
 8010dec:	9a06      	ldr	r2, [sp, #24]
 8010dee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010df2:	2a00      	cmp	r2, #0
 8010df4:	bf08      	it	eq
 8010df6:	461a      	moveq	r2, r3
 8010df8:	2b10      	cmp	r3, #16
 8010dfa:	9206      	str	r2, [sp, #24]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	bfa8      	it	ge
 8010e00:	2210      	movge	r2, #16
 8010e02:	2b09      	cmp	r3, #9
 8010e04:	ec59 8b17 	vmov	r8, r9, d7
 8010e08:	dd0c      	ble.n	8010e24 <_strtod_l+0x3cc>
 8010e0a:	4972      	ldr	r1, [pc, #456]	; (8010fd4 <_strtod_l+0x57c>)
 8010e0c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010e10:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8010e14:	ee06 aa90 	vmov	s13, sl
 8010e18:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010e1c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010e20:	ec59 8b16 	vmov	r8, r9, d6
 8010e24:	2b0f      	cmp	r3, #15
 8010e26:	dc36      	bgt.n	8010e96 <_strtod_l+0x43e>
 8010e28:	9907      	ldr	r1, [sp, #28]
 8010e2a:	2900      	cmp	r1, #0
 8010e2c:	f43f ae58 	beq.w	8010ae0 <_strtod_l+0x88>
 8010e30:	dd23      	ble.n	8010e7a <_strtod_l+0x422>
 8010e32:	2916      	cmp	r1, #22
 8010e34:	dc0b      	bgt.n	8010e4e <_strtod_l+0x3f6>
 8010e36:	4b67      	ldr	r3, [pc, #412]	; (8010fd4 <_strtod_l+0x57c>)
 8010e38:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010e3c:	ed93 7b00 	vldr	d7, [r3]
 8010e40:	ec49 8b16 	vmov	d6, r8, r9
 8010e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e48:	ec59 8b17 	vmov	r8, r9, d7
 8010e4c:	e648      	b.n	8010ae0 <_strtod_l+0x88>
 8010e4e:	9807      	ldr	r0, [sp, #28]
 8010e50:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8010e54:	4281      	cmp	r1, r0
 8010e56:	db1e      	blt.n	8010e96 <_strtod_l+0x43e>
 8010e58:	4a5e      	ldr	r2, [pc, #376]	; (8010fd4 <_strtod_l+0x57c>)
 8010e5a:	f1c3 030f 	rsb	r3, r3, #15
 8010e5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010e62:	ed91 7b00 	vldr	d7, [r1]
 8010e66:	ec49 8b16 	vmov	d6, r8, r9
 8010e6a:	1ac3      	subs	r3, r0, r3
 8010e6c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e74:	ed92 6b00 	vldr	d6, [r2]
 8010e78:	e7e4      	b.n	8010e44 <_strtod_l+0x3ec>
 8010e7a:	9907      	ldr	r1, [sp, #28]
 8010e7c:	3116      	adds	r1, #22
 8010e7e:	db0a      	blt.n	8010e96 <_strtod_l+0x43e>
 8010e80:	4b54      	ldr	r3, [pc, #336]	; (8010fd4 <_strtod_l+0x57c>)
 8010e82:	1b7d      	subs	r5, r7, r5
 8010e84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010e88:	ed95 7b00 	vldr	d7, [r5]
 8010e8c:	ec49 8b16 	vmov	d6, r8, r9
 8010e90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010e94:	e7d8      	b.n	8010e48 <_strtod_l+0x3f0>
 8010e96:	9907      	ldr	r1, [sp, #28]
 8010e98:	1a9a      	subs	r2, r3, r2
 8010e9a:	440a      	add	r2, r1
 8010e9c:	2a00      	cmp	r2, #0
 8010e9e:	dd6f      	ble.n	8010f80 <_strtod_l+0x528>
 8010ea0:	f012 000f 	ands.w	r0, r2, #15
 8010ea4:	d00a      	beq.n	8010ebc <_strtod_l+0x464>
 8010ea6:	494b      	ldr	r1, [pc, #300]	; (8010fd4 <_strtod_l+0x57c>)
 8010ea8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010eac:	ed91 7b00 	vldr	d7, [r1]
 8010eb0:	ec49 8b16 	vmov	d6, r8, r9
 8010eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010eb8:	ec59 8b17 	vmov	r8, r9, d7
 8010ebc:	f032 020f 	bics.w	r2, r2, #15
 8010ec0:	d04f      	beq.n	8010f62 <_strtod_l+0x50a>
 8010ec2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8010ec6:	dd22      	ble.n	8010f0e <_strtod_l+0x4b6>
 8010ec8:	2500      	movs	r5, #0
 8010eca:	462e      	mov	r6, r5
 8010ecc:	9506      	str	r5, [sp, #24]
 8010ece:	462f      	mov	r7, r5
 8010ed0:	2322      	movs	r3, #34	; 0x22
 8010ed2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8010fe0 <_strtod_l+0x588>
 8010ed6:	6023      	str	r3, [r4, #0]
 8010ed8:	f04f 0800 	mov.w	r8, #0
 8010edc:	9b06      	ldr	r3, [sp, #24]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f43f adfe 	beq.w	8010ae0 <_strtod_l+0x88>
 8010ee4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f001 fed6 	bl	8012c98 <_Bfree>
 8010eec:	4639      	mov	r1, r7
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f001 fed2 	bl	8012c98 <_Bfree>
 8010ef4:	4631      	mov	r1, r6
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f001 fece 	bl	8012c98 <_Bfree>
 8010efc:	9906      	ldr	r1, [sp, #24]
 8010efe:	4620      	mov	r0, r4
 8010f00:	f001 feca 	bl	8012c98 <_Bfree>
 8010f04:	4629      	mov	r1, r5
 8010f06:	4620      	mov	r0, r4
 8010f08:	f001 fec6 	bl	8012c98 <_Bfree>
 8010f0c:	e5e8      	b.n	8010ae0 <_strtod_l+0x88>
 8010f0e:	2000      	movs	r0, #0
 8010f10:	ec49 8b17 	vmov	d7, r8, r9
 8010f14:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8010fd8 <_strtod_l+0x580>
 8010f18:	1112      	asrs	r2, r2, #4
 8010f1a:	4601      	mov	r1, r0
 8010f1c:	2a01      	cmp	r2, #1
 8010f1e:	dc23      	bgt.n	8010f68 <_strtod_l+0x510>
 8010f20:	b108      	cbz	r0, 8010f26 <_strtod_l+0x4ce>
 8010f22:	ec59 8b17 	vmov	r8, r9, d7
 8010f26:	4a2c      	ldr	r2, [pc, #176]	; (8010fd8 <_strtod_l+0x580>)
 8010f28:	482c      	ldr	r0, [pc, #176]	; (8010fdc <_strtod_l+0x584>)
 8010f2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010f2e:	ed92 7b00 	vldr	d7, [r2]
 8010f32:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010f36:	ec49 8b16 	vmov	d6, r8, r9
 8010f3a:	4a29      	ldr	r2, [pc, #164]	; (8010fe0 <_strtod_l+0x588>)
 8010f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f40:	ee17 1a90 	vmov	r1, s15
 8010f44:	400a      	ands	r2, r1
 8010f46:	4282      	cmp	r2, r0
 8010f48:	ec59 8b17 	vmov	r8, r9, d7
 8010f4c:	d8bc      	bhi.n	8010ec8 <_strtod_l+0x470>
 8010f4e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8010f52:	4282      	cmp	r2, r0
 8010f54:	bf86      	itte	hi
 8010f56:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8010fe4 <_strtod_l+0x58c>
 8010f5a:	f04f 38ff 	movhi.w	r8, #4294967295
 8010f5e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8010f62:	2200      	movs	r2, #0
 8010f64:	9204      	str	r2, [sp, #16]
 8010f66:	e078      	b.n	801105a <_strtod_l+0x602>
 8010f68:	07d6      	lsls	r6, r2, #31
 8010f6a:	d504      	bpl.n	8010f76 <_strtod_l+0x51e>
 8010f6c:	ed9c 6b00 	vldr	d6, [ip]
 8010f70:	2001      	movs	r0, #1
 8010f72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f76:	3101      	adds	r1, #1
 8010f78:	1052      	asrs	r2, r2, #1
 8010f7a:	f10c 0c08 	add.w	ip, ip, #8
 8010f7e:	e7cd      	b.n	8010f1c <_strtod_l+0x4c4>
 8010f80:	d0ef      	beq.n	8010f62 <_strtod_l+0x50a>
 8010f82:	4252      	negs	r2, r2
 8010f84:	f012 000f 	ands.w	r0, r2, #15
 8010f88:	d00a      	beq.n	8010fa0 <_strtod_l+0x548>
 8010f8a:	4912      	ldr	r1, [pc, #72]	; (8010fd4 <_strtod_l+0x57c>)
 8010f8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010f90:	ed91 7b00 	vldr	d7, [r1]
 8010f94:	ec49 8b16 	vmov	d6, r8, r9
 8010f98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010f9c:	ec59 8b17 	vmov	r8, r9, d7
 8010fa0:	1112      	asrs	r2, r2, #4
 8010fa2:	d0de      	beq.n	8010f62 <_strtod_l+0x50a>
 8010fa4:	2a1f      	cmp	r2, #31
 8010fa6:	dd1f      	ble.n	8010fe8 <_strtod_l+0x590>
 8010fa8:	2500      	movs	r5, #0
 8010faa:	462e      	mov	r6, r5
 8010fac:	9506      	str	r5, [sp, #24]
 8010fae:	462f      	mov	r7, r5
 8010fb0:	2322      	movs	r3, #34	; 0x22
 8010fb2:	f04f 0800 	mov.w	r8, #0
 8010fb6:	f04f 0900 	mov.w	r9, #0
 8010fba:	6023      	str	r3, [r4, #0]
 8010fbc:	e78e      	b.n	8010edc <_strtod_l+0x484>
 8010fbe:	bf00      	nop
 8010fc0:	08013eaa 	.word	0x08013eaa
 8010fc4:	08013ee8 	.word	0x08013ee8
 8010fc8:	08013ea2 	.word	0x08013ea2
 8010fcc:	08013fdb 	.word	0x08013fdb
 8010fd0:	08013fd7 	.word	0x08013fd7
 8010fd4:	08014150 	.word	0x08014150
 8010fd8:	08014128 	.word	0x08014128
 8010fdc:	7ca00000 	.word	0x7ca00000
 8010fe0:	7ff00000 	.word	0x7ff00000
 8010fe4:	7fefffff 	.word	0x7fefffff
 8010fe8:	f012 0110 	ands.w	r1, r2, #16
 8010fec:	bf18      	it	ne
 8010fee:	216a      	movne	r1, #106	; 0x6a
 8010ff0:	9104      	str	r1, [sp, #16]
 8010ff2:	ec49 8b17 	vmov	d7, r8, r9
 8010ff6:	49be      	ldr	r1, [pc, #760]	; (80112f0 <_strtod_l+0x898>)
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	07d6      	lsls	r6, r2, #31
 8010ffc:	d504      	bpl.n	8011008 <_strtod_l+0x5b0>
 8010ffe:	ed91 6b00 	vldr	d6, [r1]
 8011002:	2001      	movs	r0, #1
 8011004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011008:	1052      	asrs	r2, r2, #1
 801100a:	f101 0108 	add.w	r1, r1, #8
 801100e:	d1f4      	bne.n	8010ffa <_strtod_l+0x5a2>
 8011010:	b108      	cbz	r0, 8011016 <_strtod_l+0x5be>
 8011012:	ec59 8b17 	vmov	r8, r9, d7
 8011016:	9a04      	ldr	r2, [sp, #16]
 8011018:	b1c2      	cbz	r2, 801104c <_strtod_l+0x5f4>
 801101a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801101e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8011022:	2a00      	cmp	r2, #0
 8011024:	4648      	mov	r0, r9
 8011026:	dd11      	ble.n	801104c <_strtod_l+0x5f4>
 8011028:	2a1f      	cmp	r2, #31
 801102a:	f340 812e 	ble.w	801128a <_strtod_l+0x832>
 801102e:	2a34      	cmp	r2, #52	; 0x34
 8011030:	bfde      	ittt	le
 8011032:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8011036:	f04f 32ff 	movle.w	r2, #4294967295
 801103a:	fa02 f101 	lslle.w	r1, r2, r1
 801103e:	f04f 0800 	mov.w	r8, #0
 8011042:	bfcc      	ite	gt
 8011044:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011048:	ea01 0900 	andle.w	r9, r1, r0
 801104c:	ec49 8b17 	vmov	d7, r8, r9
 8011050:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011058:	d0a6      	beq.n	8010fa8 <_strtod_l+0x550>
 801105a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801105c:	9200      	str	r2, [sp, #0]
 801105e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011060:	9a06      	ldr	r2, [sp, #24]
 8011062:	4620      	mov	r0, r4
 8011064:	f001 fe80 	bl	8012d68 <__s2b>
 8011068:	9006      	str	r0, [sp, #24]
 801106a:	2800      	cmp	r0, #0
 801106c:	f43f af2c 	beq.w	8010ec8 <_strtod_l+0x470>
 8011070:	9b07      	ldr	r3, [sp, #28]
 8011072:	1b7d      	subs	r5, r7, r5
 8011074:	2b00      	cmp	r3, #0
 8011076:	bfb4      	ite	lt
 8011078:	462b      	movlt	r3, r5
 801107a:	2300      	movge	r3, #0
 801107c:	9309      	str	r3, [sp, #36]	; 0x24
 801107e:	9b07      	ldr	r3, [sp, #28]
 8011080:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80112d0 <_strtod_l+0x878>
 8011084:	ed9f ab94 	vldr	d10, [pc, #592]	; 80112d8 <_strtod_l+0x880>
 8011088:	ed9f bb95 	vldr	d11, [pc, #596]	; 80112e0 <_strtod_l+0x888>
 801108c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011090:	2500      	movs	r5, #0
 8011092:	930c      	str	r3, [sp, #48]	; 0x30
 8011094:	462e      	mov	r6, r5
 8011096:	9b06      	ldr	r3, [sp, #24]
 8011098:	4620      	mov	r0, r4
 801109a:	6859      	ldr	r1, [r3, #4]
 801109c:	f001 fdbc 	bl	8012c18 <_Balloc>
 80110a0:	4607      	mov	r7, r0
 80110a2:	2800      	cmp	r0, #0
 80110a4:	f43f af14 	beq.w	8010ed0 <_strtod_l+0x478>
 80110a8:	9b06      	ldr	r3, [sp, #24]
 80110aa:	691a      	ldr	r2, [r3, #16]
 80110ac:	3202      	adds	r2, #2
 80110ae:	f103 010c 	add.w	r1, r3, #12
 80110b2:	0092      	lsls	r2, r2, #2
 80110b4:	300c      	adds	r0, #12
 80110b6:	f7fe fdb9 	bl	800fc2c <memcpy>
 80110ba:	ec49 8b10 	vmov	d0, r8, r9
 80110be:	aa14      	add	r2, sp, #80	; 0x50
 80110c0:	a913      	add	r1, sp, #76	; 0x4c
 80110c2:	4620      	mov	r0, r4
 80110c4:	f002 f996 	bl	80133f4 <__d2b>
 80110c8:	ec49 8b18 	vmov	d8, r8, r9
 80110cc:	9012      	str	r0, [sp, #72]	; 0x48
 80110ce:	2800      	cmp	r0, #0
 80110d0:	f43f aefe 	beq.w	8010ed0 <_strtod_l+0x478>
 80110d4:	2101      	movs	r1, #1
 80110d6:	4620      	mov	r0, r4
 80110d8:	f001 fee0 	bl	8012e9c <__i2b>
 80110dc:	4606      	mov	r6, r0
 80110de:	2800      	cmp	r0, #0
 80110e0:	f43f aef6 	beq.w	8010ed0 <_strtod_l+0x478>
 80110e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80110e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	bfab      	itete	ge
 80110ec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80110ee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80110f0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80110f4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80110f8:	bfac      	ite	ge
 80110fa:	eb03 0b02 	addge.w	fp, r3, r2
 80110fe:	eba2 0a03 	sublt.w	sl, r2, r3
 8011102:	9a04      	ldr	r2, [sp, #16]
 8011104:	1a9b      	subs	r3, r3, r2
 8011106:	440b      	add	r3, r1
 8011108:	4a7a      	ldr	r2, [pc, #488]	; (80112f4 <_strtod_l+0x89c>)
 801110a:	3b01      	subs	r3, #1
 801110c:	4293      	cmp	r3, r2
 801110e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8011112:	f280 80cd 	bge.w	80112b0 <_strtod_l+0x858>
 8011116:	1ad2      	subs	r2, r2, r3
 8011118:	2a1f      	cmp	r2, #31
 801111a:	eba1 0102 	sub.w	r1, r1, r2
 801111e:	f04f 0001 	mov.w	r0, #1
 8011122:	f300 80b9 	bgt.w	8011298 <_strtod_l+0x840>
 8011126:	fa00 f302 	lsl.w	r3, r0, r2
 801112a:	930b      	str	r3, [sp, #44]	; 0x2c
 801112c:	2300      	movs	r3, #0
 801112e:	930a      	str	r3, [sp, #40]	; 0x28
 8011130:	eb0b 0301 	add.w	r3, fp, r1
 8011134:	9a04      	ldr	r2, [sp, #16]
 8011136:	459b      	cmp	fp, r3
 8011138:	448a      	add	sl, r1
 801113a:	4492      	add	sl, r2
 801113c:	465a      	mov	r2, fp
 801113e:	bfa8      	it	ge
 8011140:	461a      	movge	r2, r3
 8011142:	4552      	cmp	r2, sl
 8011144:	bfa8      	it	ge
 8011146:	4652      	movge	r2, sl
 8011148:	2a00      	cmp	r2, #0
 801114a:	bfc2      	ittt	gt
 801114c:	1a9b      	subgt	r3, r3, r2
 801114e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8011152:	ebab 0b02 	subgt.w	fp, fp, r2
 8011156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011158:	2a00      	cmp	r2, #0
 801115a:	dd18      	ble.n	801118e <_strtod_l+0x736>
 801115c:	4631      	mov	r1, r6
 801115e:	4620      	mov	r0, r4
 8011160:	930f      	str	r3, [sp, #60]	; 0x3c
 8011162:	f001 ff5b 	bl	801301c <__pow5mult>
 8011166:	4606      	mov	r6, r0
 8011168:	2800      	cmp	r0, #0
 801116a:	f43f aeb1 	beq.w	8010ed0 <_strtod_l+0x478>
 801116e:	4601      	mov	r1, r0
 8011170:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011172:	4620      	mov	r0, r4
 8011174:	f001 fea8 	bl	8012ec8 <__multiply>
 8011178:	900e      	str	r0, [sp, #56]	; 0x38
 801117a:	2800      	cmp	r0, #0
 801117c:	f43f aea8 	beq.w	8010ed0 <_strtod_l+0x478>
 8011180:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011182:	4620      	mov	r0, r4
 8011184:	f001 fd88 	bl	8012c98 <_Bfree>
 8011188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801118a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801118c:	9212      	str	r2, [sp, #72]	; 0x48
 801118e:	2b00      	cmp	r3, #0
 8011190:	f300 8093 	bgt.w	80112ba <_strtod_l+0x862>
 8011194:	9b07      	ldr	r3, [sp, #28]
 8011196:	2b00      	cmp	r3, #0
 8011198:	dd08      	ble.n	80111ac <_strtod_l+0x754>
 801119a:	4639      	mov	r1, r7
 801119c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801119e:	4620      	mov	r0, r4
 80111a0:	f001 ff3c 	bl	801301c <__pow5mult>
 80111a4:	4607      	mov	r7, r0
 80111a6:	2800      	cmp	r0, #0
 80111a8:	f43f ae92 	beq.w	8010ed0 <_strtod_l+0x478>
 80111ac:	f1ba 0f00 	cmp.w	sl, #0
 80111b0:	dd08      	ble.n	80111c4 <_strtod_l+0x76c>
 80111b2:	4639      	mov	r1, r7
 80111b4:	4652      	mov	r2, sl
 80111b6:	4620      	mov	r0, r4
 80111b8:	f001 ff8a 	bl	80130d0 <__lshift>
 80111bc:	4607      	mov	r7, r0
 80111be:	2800      	cmp	r0, #0
 80111c0:	f43f ae86 	beq.w	8010ed0 <_strtod_l+0x478>
 80111c4:	f1bb 0f00 	cmp.w	fp, #0
 80111c8:	dd08      	ble.n	80111dc <_strtod_l+0x784>
 80111ca:	4631      	mov	r1, r6
 80111cc:	465a      	mov	r2, fp
 80111ce:	4620      	mov	r0, r4
 80111d0:	f001 ff7e 	bl	80130d0 <__lshift>
 80111d4:	4606      	mov	r6, r0
 80111d6:	2800      	cmp	r0, #0
 80111d8:	f43f ae7a 	beq.w	8010ed0 <_strtod_l+0x478>
 80111dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80111de:	463a      	mov	r2, r7
 80111e0:	4620      	mov	r0, r4
 80111e2:	f002 f801 	bl	80131e8 <__mdiff>
 80111e6:	4605      	mov	r5, r0
 80111e8:	2800      	cmp	r0, #0
 80111ea:	f43f ae71 	beq.w	8010ed0 <_strtod_l+0x478>
 80111ee:	2300      	movs	r3, #0
 80111f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80111f4:	60c3      	str	r3, [r0, #12]
 80111f6:	4631      	mov	r1, r6
 80111f8:	f001 ffda 	bl	80131b0 <__mcmp>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	da7d      	bge.n	80112fc <_strtod_l+0x8a4>
 8011200:	ea5a 0308 	orrs.w	r3, sl, r8
 8011204:	f040 80a3 	bne.w	801134e <_strtod_l+0x8f6>
 8011208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801120c:	2b00      	cmp	r3, #0
 801120e:	f040 809e 	bne.w	801134e <_strtod_l+0x8f6>
 8011212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011216:	0d1b      	lsrs	r3, r3, #20
 8011218:	051b      	lsls	r3, r3, #20
 801121a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801121e:	f240 8096 	bls.w	801134e <_strtod_l+0x8f6>
 8011222:	696b      	ldr	r3, [r5, #20]
 8011224:	b91b      	cbnz	r3, 801122e <_strtod_l+0x7d6>
 8011226:	692b      	ldr	r3, [r5, #16]
 8011228:	2b01      	cmp	r3, #1
 801122a:	f340 8090 	ble.w	801134e <_strtod_l+0x8f6>
 801122e:	4629      	mov	r1, r5
 8011230:	2201      	movs	r2, #1
 8011232:	4620      	mov	r0, r4
 8011234:	f001 ff4c 	bl	80130d0 <__lshift>
 8011238:	4631      	mov	r1, r6
 801123a:	4605      	mov	r5, r0
 801123c:	f001 ffb8 	bl	80131b0 <__mcmp>
 8011240:	2800      	cmp	r0, #0
 8011242:	f340 8084 	ble.w	801134e <_strtod_l+0x8f6>
 8011246:	9904      	ldr	r1, [sp, #16]
 8011248:	4a2b      	ldr	r2, [pc, #172]	; (80112f8 <_strtod_l+0x8a0>)
 801124a:	464b      	mov	r3, r9
 801124c:	2900      	cmp	r1, #0
 801124e:	f000 809d 	beq.w	801138c <_strtod_l+0x934>
 8011252:	ea02 0109 	and.w	r1, r2, r9
 8011256:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801125a:	f300 8097 	bgt.w	801138c <_strtod_l+0x934>
 801125e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011262:	f77f aea5 	ble.w	8010fb0 <_strtod_l+0x558>
 8011266:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80112e8 <_strtod_l+0x890>
 801126a:	ec49 8b16 	vmov	d6, r8, r9
 801126e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011272:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011276:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801127a:	4313      	orrs	r3, r2
 801127c:	bf08      	it	eq
 801127e:	2322      	moveq	r3, #34	; 0x22
 8011280:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011284:	bf08      	it	eq
 8011286:	6023      	streq	r3, [r4, #0]
 8011288:	e62c      	b.n	8010ee4 <_strtod_l+0x48c>
 801128a:	f04f 31ff 	mov.w	r1, #4294967295
 801128e:	fa01 f202 	lsl.w	r2, r1, r2
 8011292:	ea02 0808 	and.w	r8, r2, r8
 8011296:	e6d9      	b.n	801104c <_strtod_l+0x5f4>
 8011298:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801129c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80112a0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80112a4:	33e2      	adds	r3, #226	; 0xe2
 80112a6:	fa00 f303 	lsl.w	r3, r0, r3
 80112aa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80112ae:	e73f      	b.n	8011130 <_strtod_l+0x6d8>
 80112b0:	2200      	movs	r2, #0
 80112b2:	2301      	movs	r3, #1
 80112b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80112b8:	e73a      	b.n	8011130 <_strtod_l+0x6d8>
 80112ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80112bc:	461a      	mov	r2, r3
 80112be:	4620      	mov	r0, r4
 80112c0:	f001 ff06 	bl	80130d0 <__lshift>
 80112c4:	9012      	str	r0, [sp, #72]	; 0x48
 80112c6:	2800      	cmp	r0, #0
 80112c8:	f47f af64 	bne.w	8011194 <_strtod_l+0x73c>
 80112cc:	e600      	b.n	8010ed0 <_strtod_l+0x478>
 80112ce:	bf00      	nop
 80112d0:	94a03595 	.word	0x94a03595
 80112d4:	3fcfffff 	.word	0x3fcfffff
 80112d8:	94a03595 	.word	0x94a03595
 80112dc:	3fdfffff 	.word	0x3fdfffff
 80112e0:	35afe535 	.word	0x35afe535
 80112e4:	3fe00000 	.word	0x3fe00000
 80112e8:	00000000 	.word	0x00000000
 80112ec:	39500000 	.word	0x39500000
 80112f0:	08013f00 	.word	0x08013f00
 80112f4:	fffffc02 	.word	0xfffffc02
 80112f8:	7ff00000 	.word	0x7ff00000
 80112fc:	46cb      	mov	fp, r9
 80112fe:	d15f      	bne.n	80113c0 <_strtod_l+0x968>
 8011300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011304:	f1ba 0f00 	cmp.w	sl, #0
 8011308:	d02a      	beq.n	8011360 <_strtod_l+0x908>
 801130a:	4aa7      	ldr	r2, [pc, #668]	; (80115a8 <_strtod_l+0xb50>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d12b      	bne.n	8011368 <_strtod_l+0x910>
 8011310:	9b04      	ldr	r3, [sp, #16]
 8011312:	4642      	mov	r2, r8
 8011314:	b1fb      	cbz	r3, 8011356 <_strtod_l+0x8fe>
 8011316:	4ba5      	ldr	r3, [pc, #660]	; (80115ac <_strtod_l+0xb54>)
 8011318:	ea09 0303 	and.w	r3, r9, r3
 801131c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011320:	f04f 31ff 	mov.w	r1, #4294967295
 8011324:	d81a      	bhi.n	801135c <_strtod_l+0x904>
 8011326:	0d1b      	lsrs	r3, r3, #20
 8011328:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801132c:	fa01 f303 	lsl.w	r3, r1, r3
 8011330:	429a      	cmp	r2, r3
 8011332:	d119      	bne.n	8011368 <_strtod_l+0x910>
 8011334:	4b9e      	ldr	r3, [pc, #632]	; (80115b0 <_strtod_l+0xb58>)
 8011336:	459b      	cmp	fp, r3
 8011338:	d102      	bne.n	8011340 <_strtod_l+0x8e8>
 801133a:	3201      	adds	r2, #1
 801133c:	f43f adc8 	beq.w	8010ed0 <_strtod_l+0x478>
 8011340:	4b9a      	ldr	r3, [pc, #616]	; (80115ac <_strtod_l+0xb54>)
 8011342:	ea0b 0303 	and.w	r3, fp, r3
 8011346:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801134a:	f04f 0800 	mov.w	r8, #0
 801134e:	9b04      	ldr	r3, [sp, #16]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d188      	bne.n	8011266 <_strtod_l+0x80e>
 8011354:	e5c6      	b.n	8010ee4 <_strtod_l+0x48c>
 8011356:	f04f 33ff 	mov.w	r3, #4294967295
 801135a:	e7e9      	b.n	8011330 <_strtod_l+0x8d8>
 801135c:	460b      	mov	r3, r1
 801135e:	e7e7      	b.n	8011330 <_strtod_l+0x8d8>
 8011360:	ea53 0308 	orrs.w	r3, r3, r8
 8011364:	f43f af6f 	beq.w	8011246 <_strtod_l+0x7ee>
 8011368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801136a:	b1cb      	cbz	r3, 80113a0 <_strtod_l+0x948>
 801136c:	ea13 0f0b 	tst.w	r3, fp
 8011370:	d0ed      	beq.n	801134e <_strtod_l+0x8f6>
 8011372:	9a04      	ldr	r2, [sp, #16]
 8011374:	4640      	mov	r0, r8
 8011376:	4649      	mov	r1, r9
 8011378:	f1ba 0f00 	cmp.w	sl, #0
 801137c:	d014      	beq.n	80113a8 <_strtod_l+0x950>
 801137e:	f7ff fb50 	bl	8010a22 <sulp>
 8011382:	ee38 7b00 	vadd.f64	d7, d8, d0
 8011386:	ec59 8b17 	vmov	r8, r9, d7
 801138a:	e7e0      	b.n	801134e <_strtod_l+0x8f6>
 801138c:	4013      	ands	r3, r2
 801138e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011392:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011396:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801139a:	f04f 38ff 	mov.w	r8, #4294967295
 801139e:	e7d6      	b.n	801134e <_strtod_l+0x8f6>
 80113a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113a2:	ea13 0f08 	tst.w	r3, r8
 80113a6:	e7e3      	b.n	8011370 <_strtod_l+0x918>
 80113a8:	f7ff fb3b 	bl	8010a22 <sulp>
 80113ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 80113b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80113b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b8:	ec59 8b10 	vmov	r8, r9, d0
 80113bc:	d1c7      	bne.n	801134e <_strtod_l+0x8f6>
 80113be:	e5f7      	b.n	8010fb0 <_strtod_l+0x558>
 80113c0:	4631      	mov	r1, r6
 80113c2:	4628      	mov	r0, r5
 80113c4:	f002 f872 	bl	80134ac <__ratio>
 80113c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80113cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80113d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d4:	d865      	bhi.n	80114a2 <_strtod_l+0xa4a>
 80113d6:	f1ba 0f00 	cmp.w	sl, #0
 80113da:	d042      	beq.n	8011462 <_strtod_l+0xa0a>
 80113dc:	4b75      	ldr	r3, [pc, #468]	; (80115b4 <_strtod_l+0xb5c>)
 80113de:	2200      	movs	r2, #0
 80113e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80113e4:	4871      	ldr	r0, [pc, #452]	; (80115ac <_strtod_l+0xb54>)
 80113e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80115c0 <_strtod_l+0xb68>
 80113ea:	ea0b 0100 	and.w	r1, fp, r0
 80113ee:	4561      	cmp	r1, ip
 80113f0:	f040 808e 	bne.w	8011510 <_strtod_l+0xab8>
 80113f4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80113f8:	ec49 8b10 	vmov	d0, r8, r9
 80113fc:	ec43 2b1c 	vmov	d12, r2, r3
 8011400:	910a      	str	r1, [sp, #40]	; 0x28
 8011402:	f001 ff7b 	bl	80132fc <__ulp>
 8011406:	ec49 8b1e 	vmov	d14, r8, r9
 801140a:	4868      	ldr	r0, [pc, #416]	; (80115ac <_strtod_l+0xb54>)
 801140c:	eeac eb00 	vfma.f64	d14, d12, d0
 8011410:	ee1e 3a90 	vmov	r3, s29
 8011414:	4a68      	ldr	r2, [pc, #416]	; (80115b8 <_strtod_l+0xb60>)
 8011416:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011418:	4018      	ands	r0, r3
 801141a:	4290      	cmp	r0, r2
 801141c:	ec59 8b1e 	vmov	r8, r9, d14
 8011420:	d94e      	bls.n	80114c0 <_strtod_l+0xa68>
 8011422:	ee18 3a90 	vmov	r3, s17
 8011426:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801142a:	4293      	cmp	r3, r2
 801142c:	d104      	bne.n	8011438 <_strtod_l+0x9e0>
 801142e:	ee18 3a10 	vmov	r3, s16
 8011432:	3301      	adds	r3, #1
 8011434:	f43f ad4c 	beq.w	8010ed0 <_strtod_l+0x478>
 8011438:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80115b0 <_strtod_l+0xb58>
 801143c:	f04f 38ff 	mov.w	r8, #4294967295
 8011440:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011442:	4620      	mov	r0, r4
 8011444:	f001 fc28 	bl	8012c98 <_Bfree>
 8011448:	4639      	mov	r1, r7
 801144a:	4620      	mov	r0, r4
 801144c:	f001 fc24 	bl	8012c98 <_Bfree>
 8011450:	4631      	mov	r1, r6
 8011452:	4620      	mov	r0, r4
 8011454:	f001 fc20 	bl	8012c98 <_Bfree>
 8011458:	4629      	mov	r1, r5
 801145a:	4620      	mov	r0, r4
 801145c:	f001 fc1c 	bl	8012c98 <_Bfree>
 8011460:	e619      	b.n	8011096 <_strtod_l+0x63e>
 8011462:	f1b8 0f00 	cmp.w	r8, #0
 8011466:	d112      	bne.n	801148e <_strtod_l+0xa36>
 8011468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801146c:	b9b3      	cbnz	r3, 801149c <_strtod_l+0xa44>
 801146e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011472:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801147a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801147e:	bf58      	it	pl
 8011480:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8011484:	eeb1 7b4d 	vneg.f64	d7, d13
 8011488:	ec53 2b17 	vmov	r2, r3, d7
 801148c:	e7aa      	b.n	80113e4 <_strtod_l+0x98c>
 801148e:	f1b8 0f01 	cmp.w	r8, #1
 8011492:	d103      	bne.n	801149c <_strtod_l+0xa44>
 8011494:	f1b9 0f00 	cmp.w	r9, #0
 8011498:	f43f ad8a 	beq.w	8010fb0 <_strtod_l+0x558>
 801149c:	4b47      	ldr	r3, [pc, #284]	; (80115bc <_strtod_l+0xb64>)
 801149e:	2200      	movs	r2, #0
 80114a0:	e79e      	b.n	80113e0 <_strtod_l+0x988>
 80114a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80114a6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80114aa:	f1ba 0f00 	cmp.w	sl, #0
 80114ae:	d104      	bne.n	80114ba <_strtod_l+0xa62>
 80114b0:	eeb1 7b4d 	vneg.f64	d7, d13
 80114b4:	ec53 2b17 	vmov	r2, r3, d7
 80114b8:	e794      	b.n	80113e4 <_strtod_l+0x98c>
 80114ba:	eeb0 7b4d 	vmov.f64	d7, d13
 80114be:	e7f9      	b.n	80114b4 <_strtod_l+0xa5c>
 80114c0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80114c4:	9b04      	ldr	r3, [sp, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1ba      	bne.n	8011440 <_strtod_l+0x9e8>
 80114ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114ce:	0d1b      	lsrs	r3, r3, #20
 80114d0:	051b      	lsls	r3, r3, #20
 80114d2:	4299      	cmp	r1, r3
 80114d4:	d1b4      	bne.n	8011440 <_strtod_l+0x9e8>
 80114d6:	ec51 0b1d 	vmov	r0, r1, d13
 80114da:	f7ef f935 	bl	8000748 <__aeabi_d2lz>
 80114de:	f7ef f8ed 	bl	80006bc <__aeabi_l2d>
 80114e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114e6:	ec41 0b17 	vmov	d7, r0, r1
 80114ea:	ea43 0308 	orr.w	r3, r3, r8
 80114ee:	ea53 030a 	orrs.w	r3, r3, sl
 80114f2:	ee3d db47 	vsub.f64	d13, d13, d7
 80114f6:	d03c      	beq.n	8011572 <_strtod_l+0xb1a>
 80114f8:	eeb4 dbca 	vcmpe.f64	d13, d10
 80114fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011500:	f53f acf0 	bmi.w	8010ee4 <_strtod_l+0x48c>
 8011504:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8011508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150c:	dd98      	ble.n	8011440 <_strtod_l+0x9e8>
 801150e:	e4e9      	b.n	8010ee4 <_strtod_l+0x48c>
 8011510:	9804      	ldr	r0, [sp, #16]
 8011512:	b1f0      	cbz	r0, 8011552 <_strtod_l+0xafa>
 8011514:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8011518:	d81b      	bhi.n	8011552 <_strtod_l+0xafa>
 801151a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80115a0 <_strtod_l+0xb48>
 801151e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	d811      	bhi.n	801154c <_strtod_l+0xaf4>
 8011528:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801152c:	ee1d 3a10 	vmov	r3, s26
 8011530:	2b01      	cmp	r3, #1
 8011532:	bf38      	it	cc
 8011534:	2301      	movcc	r3, #1
 8011536:	ee0d 3a10 	vmov	s26, r3
 801153a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801153e:	f1ba 0f00 	cmp.w	sl, #0
 8011542:	d113      	bne.n	801156c <_strtod_l+0xb14>
 8011544:	eeb1 7b4d 	vneg.f64	d7, d13
 8011548:	ec53 2b17 	vmov	r2, r3, d7
 801154c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8011550:	1a43      	subs	r3, r0, r1
 8011552:	eeb0 0b48 	vmov.f64	d0, d8
 8011556:	ec43 2b1c 	vmov	d12, r2, r3
 801155a:	910a      	str	r1, [sp, #40]	; 0x28
 801155c:	f001 fece 	bl	80132fc <__ulp>
 8011560:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011562:	eeac 8b00 	vfma.f64	d8, d12, d0
 8011566:	ec59 8b18 	vmov	r8, r9, d8
 801156a:	e7ab      	b.n	80114c4 <_strtod_l+0xa6c>
 801156c:	eeb0 7b4d 	vmov.f64	d7, d13
 8011570:	e7ea      	b.n	8011548 <_strtod_l+0xaf0>
 8011572:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8011576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157a:	f57f af61 	bpl.w	8011440 <_strtod_l+0x9e8>
 801157e:	e4b1      	b.n	8010ee4 <_strtod_l+0x48c>
 8011580:	2300      	movs	r3, #0
 8011582:	9308      	str	r3, [sp, #32]
 8011584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011588:	6013      	str	r3, [r2, #0]
 801158a:	f7ff baad 	b.w	8010ae8 <_strtod_l+0x90>
 801158e:	2a65      	cmp	r2, #101	; 0x65
 8011590:	f43f ab9f 	beq.w	8010cd2 <_strtod_l+0x27a>
 8011594:	2a45      	cmp	r2, #69	; 0x45
 8011596:	f43f ab9c 	beq.w	8010cd2 <_strtod_l+0x27a>
 801159a:	2101      	movs	r1, #1
 801159c:	f7ff bbd4 	b.w	8010d48 <_strtod_l+0x2f0>
 80115a0:	ffc00000 	.word	0xffc00000
 80115a4:	41dfffff 	.word	0x41dfffff
 80115a8:	000fffff 	.word	0x000fffff
 80115ac:	7ff00000 	.word	0x7ff00000
 80115b0:	7fefffff 	.word	0x7fefffff
 80115b4:	3ff00000 	.word	0x3ff00000
 80115b8:	7c9fffff 	.word	0x7c9fffff
 80115bc:	bff00000 	.word	0xbff00000
 80115c0:	7fe00000 	.word	0x7fe00000

080115c4 <strtod>:
 80115c4:	460a      	mov	r2, r1
 80115c6:	4601      	mov	r1, r0
 80115c8:	4802      	ldr	r0, [pc, #8]	; (80115d4 <strtod+0x10>)
 80115ca:	4b03      	ldr	r3, [pc, #12]	; (80115d8 <strtod+0x14>)
 80115cc:	6800      	ldr	r0, [r0, #0]
 80115ce:	f7ff ba43 	b.w	8010a58 <_strtod_l>
 80115d2:	bf00      	nop
 80115d4:	24000010 	.word	0x24000010
 80115d8:	24000078 	.word	0x24000078

080115dc <strtok>:
 80115dc:	4b16      	ldr	r3, [pc, #88]	; (8011638 <strtok+0x5c>)
 80115de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115e0:	681e      	ldr	r6, [r3, #0]
 80115e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80115e4:	4605      	mov	r5, r0
 80115e6:	b9fc      	cbnz	r4, 8011628 <strtok+0x4c>
 80115e8:	2050      	movs	r0, #80	; 0x50
 80115ea:	9101      	str	r1, [sp, #4]
 80115ec:	f7fe fb0e 	bl	800fc0c <malloc>
 80115f0:	9901      	ldr	r1, [sp, #4]
 80115f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80115f4:	4602      	mov	r2, r0
 80115f6:	b920      	cbnz	r0, 8011602 <strtok+0x26>
 80115f8:	4b10      	ldr	r3, [pc, #64]	; (801163c <strtok+0x60>)
 80115fa:	4811      	ldr	r0, [pc, #68]	; (8011640 <strtok+0x64>)
 80115fc:	2157      	movs	r1, #87	; 0x57
 80115fe:	f000 f91b 	bl	8011838 <__assert_func>
 8011602:	e9c0 4400 	strd	r4, r4, [r0]
 8011606:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801160a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801160e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011612:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011616:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801161a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801161e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011622:	6184      	str	r4, [r0, #24]
 8011624:	7704      	strb	r4, [r0, #28]
 8011626:	6244      	str	r4, [r0, #36]	; 0x24
 8011628:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801162a:	2301      	movs	r3, #1
 801162c:	4628      	mov	r0, r5
 801162e:	b002      	add	sp, #8
 8011630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011634:	f000 b806 	b.w	8011644 <__strtok_r>
 8011638:	24000010 	.word	0x24000010
 801163c:	08013f28 	.word	0x08013f28
 8011640:	08013f3f 	.word	0x08013f3f

08011644 <__strtok_r>:
 8011644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011646:	b908      	cbnz	r0, 801164c <__strtok_r+0x8>
 8011648:	6810      	ldr	r0, [r2, #0]
 801164a:	b188      	cbz	r0, 8011670 <__strtok_r+0x2c>
 801164c:	4604      	mov	r4, r0
 801164e:	4620      	mov	r0, r4
 8011650:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011654:	460f      	mov	r7, r1
 8011656:	f817 6b01 	ldrb.w	r6, [r7], #1
 801165a:	b91e      	cbnz	r6, 8011664 <__strtok_r+0x20>
 801165c:	b965      	cbnz	r5, 8011678 <__strtok_r+0x34>
 801165e:	6015      	str	r5, [r2, #0]
 8011660:	4628      	mov	r0, r5
 8011662:	e005      	b.n	8011670 <__strtok_r+0x2c>
 8011664:	42b5      	cmp	r5, r6
 8011666:	d1f6      	bne.n	8011656 <__strtok_r+0x12>
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1f0      	bne.n	801164e <__strtok_r+0xa>
 801166c:	6014      	str	r4, [r2, #0]
 801166e:	7003      	strb	r3, [r0, #0]
 8011670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011672:	461c      	mov	r4, r3
 8011674:	e00c      	b.n	8011690 <__strtok_r+0x4c>
 8011676:	b915      	cbnz	r5, 801167e <__strtok_r+0x3a>
 8011678:	f814 3b01 	ldrb.w	r3, [r4], #1
 801167c:	460e      	mov	r6, r1
 801167e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011682:	42ab      	cmp	r3, r5
 8011684:	d1f7      	bne.n	8011676 <__strtok_r+0x32>
 8011686:	2b00      	cmp	r3, #0
 8011688:	d0f3      	beq.n	8011672 <__strtok_r+0x2e>
 801168a:	2300      	movs	r3, #0
 801168c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011690:	6014      	str	r4, [r2, #0]
 8011692:	e7ed      	b.n	8011670 <__strtok_r+0x2c>

08011694 <__swbuf_r>:
 8011694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011696:	460e      	mov	r6, r1
 8011698:	4614      	mov	r4, r2
 801169a:	4605      	mov	r5, r0
 801169c:	b118      	cbz	r0, 80116a6 <__swbuf_r+0x12>
 801169e:	6983      	ldr	r3, [r0, #24]
 80116a0:	b90b      	cbnz	r3, 80116a6 <__swbuf_r+0x12>
 80116a2:	f7fe f977 	bl	800f994 <__sinit>
 80116a6:	4b21      	ldr	r3, [pc, #132]	; (801172c <__swbuf_r+0x98>)
 80116a8:	429c      	cmp	r4, r3
 80116aa:	d12b      	bne.n	8011704 <__swbuf_r+0x70>
 80116ac:	686c      	ldr	r4, [r5, #4]
 80116ae:	69a3      	ldr	r3, [r4, #24]
 80116b0:	60a3      	str	r3, [r4, #8]
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	071a      	lsls	r2, r3, #28
 80116b6:	d52f      	bpl.n	8011718 <__swbuf_r+0x84>
 80116b8:	6923      	ldr	r3, [r4, #16]
 80116ba:	b36b      	cbz	r3, 8011718 <__swbuf_r+0x84>
 80116bc:	6923      	ldr	r3, [r4, #16]
 80116be:	6820      	ldr	r0, [r4, #0]
 80116c0:	1ac0      	subs	r0, r0, r3
 80116c2:	6963      	ldr	r3, [r4, #20]
 80116c4:	b2f6      	uxtb	r6, r6
 80116c6:	4283      	cmp	r3, r0
 80116c8:	4637      	mov	r7, r6
 80116ca:	dc04      	bgt.n	80116d6 <__swbuf_r+0x42>
 80116cc:	4621      	mov	r1, r4
 80116ce:	4628      	mov	r0, r5
 80116d0:	f7fe f8cc 	bl	800f86c <_fflush_r>
 80116d4:	bb30      	cbnz	r0, 8011724 <__swbuf_r+0x90>
 80116d6:	68a3      	ldr	r3, [r4, #8]
 80116d8:	3b01      	subs	r3, #1
 80116da:	60a3      	str	r3, [r4, #8]
 80116dc:	6823      	ldr	r3, [r4, #0]
 80116de:	1c5a      	adds	r2, r3, #1
 80116e0:	6022      	str	r2, [r4, #0]
 80116e2:	701e      	strb	r6, [r3, #0]
 80116e4:	6963      	ldr	r3, [r4, #20]
 80116e6:	3001      	adds	r0, #1
 80116e8:	4283      	cmp	r3, r0
 80116ea:	d004      	beq.n	80116f6 <__swbuf_r+0x62>
 80116ec:	89a3      	ldrh	r3, [r4, #12]
 80116ee:	07db      	lsls	r3, r3, #31
 80116f0:	d506      	bpl.n	8011700 <__swbuf_r+0x6c>
 80116f2:	2e0a      	cmp	r6, #10
 80116f4:	d104      	bne.n	8011700 <__swbuf_r+0x6c>
 80116f6:	4621      	mov	r1, r4
 80116f8:	4628      	mov	r0, r5
 80116fa:	f7fe f8b7 	bl	800f86c <_fflush_r>
 80116fe:	b988      	cbnz	r0, 8011724 <__swbuf_r+0x90>
 8011700:	4638      	mov	r0, r7
 8011702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011704:	4b0a      	ldr	r3, [pc, #40]	; (8011730 <__swbuf_r+0x9c>)
 8011706:	429c      	cmp	r4, r3
 8011708:	d101      	bne.n	801170e <__swbuf_r+0x7a>
 801170a:	68ac      	ldr	r4, [r5, #8]
 801170c:	e7cf      	b.n	80116ae <__swbuf_r+0x1a>
 801170e:	4b09      	ldr	r3, [pc, #36]	; (8011734 <__swbuf_r+0xa0>)
 8011710:	429c      	cmp	r4, r3
 8011712:	bf08      	it	eq
 8011714:	68ec      	ldreq	r4, [r5, #12]
 8011716:	e7ca      	b.n	80116ae <__swbuf_r+0x1a>
 8011718:	4621      	mov	r1, r4
 801171a:	4628      	mov	r0, r5
 801171c:	f000 f81e 	bl	801175c <__swsetup_r>
 8011720:	2800      	cmp	r0, #0
 8011722:	d0cb      	beq.n	80116bc <__swbuf_r+0x28>
 8011724:	f04f 37ff 	mov.w	r7, #4294967295
 8011728:	e7ea      	b.n	8011700 <__swbuf_r+0x6c>
 801172a:	bf00      	nop
 801172c:	08013e48 	.word	0x08013e48
 8011730:	08013e68 	.word	0x08013e68
 8011734:	08013e28 	.word	0x08013e28

08011738 <_write_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4d07      	ldr	r5, [pc, #28]	; (8011758 <_write_r+0x20>)
 801173c:	4604      	mov	r4, r0
 801173e:	4608      	mov	r0, r1
 8011740:	4611      	mov	r1, r2
 8011742:	2200      	movs	r2, #0
 8011744:	602a      	str	r2, [r5, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	f7f0 fd53 	bl	80021f2 <_write>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d102      	bne.n	8011756 <_write_r+0x1e>
 8011750:	682b      	ldr	r3, [r5, #0]
 8011752:	b103      	cbz	r3, 8011756 <_write_r+0x1e>
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	bd38      	pop	{r3, r4, r5, pc}
 8011758:	240011d4 	.word	0x240011d4

0801175c <__swsetup_r>:
 801175c:	4b32      	ldr	r3, [pc, #200]	; (8011828 <__swsetup_r+0xcc>)
 801175e:	b570      	push	{r4, r5, r6, lr}
 8011760:	681d      	ldr	r5, [r3, #0]
 8011762:	4606      	mov	r6, r0
 8011764:	460c      	mov	r4, r1
 8011766:	b125      	cbz	r5, 8011772 <__swsetup_r+0x16>
 8011768:	69ab      	ldr	r3, [r5, #24]
 801176a:	b913      	cbnz	r3, 8011772 <__swsetup_r+0x16>
 801176c:	4628      	mov	r0, r5
 801176e:	f7fe f911 	bl	800f994 <__sinit>
 8011772:	4b2e      	ldr	r3, [pc, #184]	; (801182c <__swsetup_r+0xd0>)
 8011774:	429c      	cmp	r4, r3
 8011776:	d10f      	bne.n	8011798 <__swsetup_r+0x3c>
 8011778:	686c      	ldr	r4, [r5, #4]
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011780:	0719      	lsls	r1, r3, #28
 8011782:	d42c      	bmi.n	80117de <__swsetup_r+0x82>
 8011784:	06dd      	lsls	r5, r3, #27
 8011786:	d411      	bmi.n	80117ac <__swsetup_r+0x50>
 8011788:	2309      	movs	r3, #9
 801178a:	6033      	str	r3, [r6, #0]
 801178c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011790:	81a3      	strh	r3, [r4, #12]
 8011792:	f04f 30ff 	mov.w	r0, #4294967295
 8011796:	e03e      	b.n	8011816 <__swsetup_r+0xba>
 8011798:	4b25      	ldr	r3, [pc, #148]	; (8011830 <__swsetup_r+0xd4>)
 801179a:	429c      	cmp	r4, r3
 801179c:	d101      	bne.n	80117a2 <__swsetup_r+0x46>
 801179e:	68ac      	ldr	r4, [r5, #8]
 80117a0:	e7eb      	b.n	801177a <__swsetup_r+0x1e>
 80117a2:	4b24      	ldr	r3, [pc, #144]	; (8011834 <__swsetup_r+0xd8>)
 80117a4:	429c      	cmp	r4, r3
 80117a6:	bf08      	it	eq
 80117a8:	68ec      	ldreq	r4, [r5, #12]
 80117aa:	e7e6      	b.n	801177a <__swsetup_r+0x1e>
 80117ac:	0758      	lsls	r0, r3, #29
 80117ae:	d512      	bpl.n	80117d6 <__swsetup_r+0x7a>
 80117b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117b2:	b141      	cbz	r1, 80117c6 <__swsetup_r+0x6a>
 80117b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117b8:	4299      	cmp	r1, r3
 80117ba:	d002      	beq.n	80117c2 <__swsetup_r+0x66>
 80117bc:	4630      	mov	r0, r6
 80117be:	f7fe fa4b 	bl	800fc58 <_free_r>
 80117c2:	2300      	movs	r3, #0
 80117c4:	6363      	str	r3, [r4, #52]	; 0x34
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	2300      	movs	r3, #0
 80117d0:	6063      	str	r3, [r4, #4]
 80117d2:	6923      	ldr	r3, [r4, #16]
 80117d4:	6023      	str	r3, [r4, #0]
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	f043 0308 	orr.w	r3, r3, #8
 80117dc:	81a3      	strh	r3, [r4, #12]
 80117de:	6923      	ldr	r3, [r4, #16]
 80117e0:	b94b      	cbnz	r3, 80117f6 <__swsetup_r+0x9a>
 80117e2:	89a3      	ldrh	r3, [r4, #12]
 80117e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117ec:	d003      	beq.n	80117f6 <__swsetup_r+0x9a>
 80117ee:	4621      	mov	r1, r4
 80117f0:	4630      	mov	r0, r6
 80117f2:	f7fe f9cb 	bl	800fb8c <__smakebuf_r>
 80117f6:	89a0      	ldrh	r0, [r4, #12]
 80117f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117fc:	f010 0301 	ands.w	r3, r0, #1
 8011800:	d00a      	beq.n	8011818 <__swsetup_r+0xbc>
 8011802:	2300      	movs	r3, #0
 8011804:	60a3      	str	r3, [r4, #8]
 8011806:	6963      	ldr	r3, [r4, #20]
 8011808:	425b      	negs	r3, r3
 801180a:	61a3      	str	r3, [r4, #24]
 801180c:	6923      	ldr	r3, [r4, #16]
 801180e:	b943      	cbnz	r3, 8011822 <__swsetup_r+0xc6>
 8011810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011814:	d1ba      	bne.n	801178c <__swsetup_r+0x30>
 8011816:	bd70      	pop	{r4, r5, r6, pc}
 8011818:	0781      	lsls	r1, r0, #30
 801181a:	bf58      	it	pl
 801181c:	6963      	ldrpl	r3, [r4, #20]
 801181e:	60a3      	str	r3, [r4, #8]
 8011820:	e7f4      	b.n	801180c <__swsetup_r+0xb0>
 8011822:	2000      	movs	r0, #0
 8011824:	e7f7      	b.n	8011816 <__swsetup_r+0xba>
 8011826:	bf00      	nop
 8011828:	24000010 	.word	0x24000010
 801182c:	08013e48 	.word	0x08013e48
 8011830:	08013e68 	.word	0x08013e68
 8011834:	08013e28 	.word	0x08013e28

08011838 <__assert_func>:
 8011838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801183a:	4614      	mov	r4, r2
 801183c:	461a      	mov	r2, r3
 801183e:	4b09      	ldr	r3, [pc, #36]	; (8011864 <__assert_func+0x2c>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	4605      	mov	r5, r0
 8011844:	68d8      	ldr	r0, [r3, #12]
 8011846:	b14c      	cbz	r4, 801185c <__assert_func+0x24>
 8011848:	4b07      	ldr	r3, [pc, #28]	; (8011868 <__assert_func+0x30>)
 801184a:	9100      	str	r1, [sp, #0]
 801184c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011850:	4906      	ldr	r1, [pc, #24]	; (801186c <__assert_func+0x34>)
 8011852:	462b      	mov	r3, r5
 8011854:	f7fe f91c 	bl	800fa90 <fiprintf>
 8011858:	f001 fedb 	bl	8013612 <abort>
 801185c:	4b04      	ldr	r3, [pc, #16]	; (8011870 <__assert_func+0x38>)
 801185e:	461c      	mov	r4, r3
 8011860:	e7f3      	b.n	801184a <__assert_func+0x12>
 8011862:	bf00      	nop
 8011864:	24000010 	.word	0x24000010
 8011868:	08013f9c 	.word	0x08013f9c
 801186c:	08013fa9 	.word	0x08013fa9
 8011870:	08013fd7 	.word	0x08013fd7

08011874 <_close_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4d06      	ldr	r5, [pc, #24]	; (8011890 <_close_r+0x1c>)
 8011878:	2300      	movs	r3, #0
 801187a:	4604      	mov	r4, r0
 801187c:	4608      	mov	r0, r1
 801187e:	602b      	str	r3, [r5, #0]
 8011880:	f7f0 fcd3 	bl	800222a <_close>
 8011884:	1c43      	adds	r3, r0, #1
 8011886:	d102      	bne.n	801188e <_close_r+0x1a>
 8011888:	682b      	ldr	r3, [r5, #0]
 801188a:	b103      	cbz	r3, 801188e <_close_r+0x1a>
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	bd38      	pop	{r3, r4, r5, pc}
 8011890:	240011d4 	.word	0x240011d4

08011894 <quorem>:
 8011894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	6903      	ldr	r3, [r0, #16]
 801189a:	690c      	ldr	r4, [r1, #16]
 801189c:	42a3      	cmp	r3, r4
 801189e:	4607      	mov	r7, r0
 80118a0:	f2c0 8081 	blt.w	80119a6 <quorem+0x112>
 80118a4:	3c01      	subs	r4, #1
 80118a6:	f101 0814 	add.w	r8, r1, #20
 80118aa:	f100 0514 	add.w	r5, r0, #20
 80118ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80118b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118bc:	3301      	adds	r3, #1
 80118be:	429a      	cmp	r2, r3
 80118c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80118c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80118c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80118cc:	d331      	bcc.n	8011932 <quorem+0x9e>
 80118ce:	f04f 0e00 	mov.w	lr, #0
 80118d2:	4640      	mov	r0, r8
 80118d4:	46ac      	mov	ip, r5
 80118d6:	46f2      	mov	sl, lr
 80118d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80118dc:	b293      	uxth	r3, r2
 80118de:	fb06 e303 	mla	r3, r6, r3, lr
 80118e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	ebaa 0303 	sub.w	r3, sl, r3
 80118ec:	f8dc a000 	ldr.w	sl, [ip]
 80118f0:	0c12      	lsrs	r2, r2, #16
 80118f2:	fa13 f38a 	uxtah	r3, r3, sl
 80118f6:	fb06 e202 	mla	r2, r6, r2, lr
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	9b00      	ldr	r3, [sp, #0]
 80118fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011902:	b292      	uxth	r2, r2
 8011904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801190c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011910:	4581      	cmp	r9, r0
 8011912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011916:	f84c 3b04 	str.w	r3, [ip], #4
 801191a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801191e:	d2db      	bcs.n	80118d8 <quorem+0x44>
 8011920:	f855 300b 	ldr.w	r3, [r5, fp]
 8011924:	b92b      	cbnz	r3, 8011932 <quorem+0x9e>
 8011926:	9b01      	ldr	r3, [sp, #4]
 8011928:	3b04      	subs	r3, #4
 801192a:	429d      	cmp	r5, r3
 801192c:	461a      	mov	r2, r3
 801192e:	d32e      	bcc.n	801198e <quorem+0xfa>
 8011930:	613c      	str	r4, [r7, #16]
 8011932:	4638      	mov	r0, r7
 8011934:	f001 fc3c 	bl	80131b0 <__mcmp>
 8011938:	2800      	cmp	r0, #0
 801193a:	db24      	blt.n	8011986 <quorem+0xf2>
 801193c:	3601      	adds	r6, #1
 801193e:	4628      	mov	r0, r5
 8011940:	f04f 0c00 	mov.w	ip, #0
 8011944:	f858 2b04 	ldr.w	r2, [r8], #4
 8011948:	f8d0 e000 	ldr.w	lr, [r0]
 801194c:	b293      	uxth	r3, r2
 801194e:	ebac 0303 	sub.w	r3, ip, r3
 8011952:	0c12      	lsrs	r2, r2, #16
 8011954:	fa13 f38e 	uxtah	r3, r3, lr
 8011958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801195c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011960:	b29b      	uxth	r3, r3
 8011962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011966:	45c1      	cmp	r9, r8
 8011968:	f840 3b04 	str.w	r3, [r0], #4
 801196c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011970:	d2e8      	bcs.n	8011944 <quorem+0xb0>
 8011972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801197a:	b922      	cbnz	r2, 8011986 <quorem+0xf2>
 801197c:	3b04      	subs	r3, #4
 801197e:	429d      	cmp	r5, r3
 8011980:	461a      	mov	r2, r3
 8011982:	d30a      	bcc.n	801199a <quorem+0x106>
 8011984:	613c      	str	r4, [r7, #16]
 8011986:	4630      	mov	r0, r6
 8011988:	b003      	add	sp, #12
 801198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198e:	6812      	ldr	r2, [r2, #0]
 8011990:	3b04      	subs	r3, #4
 8011992:	2a00      	cmp	r2, #0
 8011994:	d1cc      	bne.n	8011930 <quorem+0x9c>
 8011996:	3c01      	subs	r4, #1
 8011998:	e7c7      	b.n	801192a <quorem+0x96>
 801199a:	6812      	ldr	r2, [r2, #0]
 801199c:	3b04      	subs	r3, #4
 801199e:	2a00      	cmp	r2, #0
 80119a0:	d1f0      	bne.n	8011984 <quorem+0xf0>
 80119a2:	3c01      	subs	r4, #1
 80119a4:	e7eb      	b.n	801197e <quorem+0xea>
 80119a6:	2000      	movs	r0, #0
 80119a8:	e7ee      	b.n	8011988 <quorem+0xf4>
 80119aa:	0000      	movs	r0, r0
 80119ac:	0000      	movs	r0, r0
	...

080119b0 <_dtoa_r>:
 80119b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b4:	ed2d 8b02 	vpush	{d8}
 80119b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80119ba:	b091      	sub	sp, #68	; 0x44
 80119bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80119c0:	ec59 8b10 	vmov	r8, r9, d0
 80119c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80119c6:	9106      	str	r1, [sp, #24]
 80119c8:	4606      	mov	r6, r0
 80119ca:	9208      	str	r2, [sp, #32]
 80119cc:	930c      	str	r3, [sp, #48]	; 0x30
 80119ce:	b975      	cbnz	r5, 80119ee <_dtoa_r+0x3e>
 80119d0:	2010      	movs	r0, #16
 80119d2:	f7fe f91b 	bl	800fc0c <malloc>
 80119d6:	4602      	mov	r2, r0
 80119d8:	6270      	str	r0, [r6, #36]	; 0x24
 80119da:	b920      	cbnz	r0, 80119e6 <_dtoa_r+0x36>
 80119dc:	4baa      	ldr	r3, [pc, #680]	; (8011c88 <_dtoa_r+0x2d8>)
 80119de:	21ea      	movs	r1, #234	; 0xea
 80119e0:	48aa      	ldr	r0, [pc, #680]	; (8011c8c <_dtoa_r+0x2dc>)
 80119e2:	f7ff ff29 	bl	8011838 <__assert_func>
 80119e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80119ea:	6005      	str	r5, [r0, #0]
 80119ec:	60c5      	str	r5, [r0, #12]
 80119ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80119f0:	6819      	ldr	r1, [r3, #0]
 80119f2:	b151      	cbz	r1, 8011a0a <_dtoa_r+0x5a>
 80119f4:	685a      	ldr	r2, [r3, #4]
 80119f6:	604a      	str	r2, [r1, #4]
 80119f8:	2301      	movs	r3, #1
 80119fa:	4093      	lsls	r3, r2
 80119fc:	608b      	str	r3, [r1, #8]
 80119fe:	4630      	mov	r0, r6
 8011a00:	f001 f94a 	bl	8012c98 <_Bfree>
 8011a04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011a06:	2200      	movs	r2, #0
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	f1b9 0300 	subs.w	r3, r9, #0
 8011a0e:	bfbb      	ittet	lt
 8011a10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a14:	9303      	strlt	r3, [sp, #12]
 8011a16:	2300      	movge	r3, #0
 8011a18:	2201      	movlt	r2, #1
 8011a1a:	bfac      	ite	ge
 8011a1c:	6023      	strge	r3, [r4, #0]
 8011a1e:	6022      	strlt	r2, [r4, #0]
 8011a20:	4b9b      	ldr	r3, [pc, #620]	; (8011c90 <_dtoa_r+0x2e0>)
 8011a22:	9c03      	ldr	r4, [sp, #12]
 8011a24:	43a3      	bics	r3, r4
 8011a26:	d11c      	bne.n	8011a62 <_dtoa_r+0xb2>
 8011a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a2e:	6013      	str	r3, [r2, #0]
 8011a30:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011a34:	ea53 0308 	orrs.w	r3, r3, r8
 8011a38:	f000 84fd 	beq.w	8012436 <_dtoa_r+0xa86>
 8011a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a3e:	b963      	cbnz	r3, 8011a5a <_dtoa_r+0xaa>
 8011a40:	4b94      	ldr	r3, [pc, #592]	; (8011c94 <_dtoa_r+0x2e4>)
 8011a42:	e01f      	b.n	8011a84 <_dtoa_r+0xd4>
 8011a44:	4b94      	ldr	r3, [pc, #592]	; (8011c98 <_dtoa_r+0x2e8>)
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	3308      	adds	r3, #8
 8011a4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	9801      	ldr	r0, [sp, #4]
 8011a50:	b011      	add	sp, #68	; 0x44
 8011a52:	ecbd 8b02 	vpop	{d8}
 8011a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5a:	4b8e      	ldr	r3, [pc, #568]	; (8011c94 <_dtoa_r+0x2e4>)
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	3303      	adds	r3, #3
 8011a60:	e7f3      	b.n	8011a4a <_dtoa_r+0x9a>
 8011a62:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011a66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a6e:	d10b      	bne.n	8011a88 <_dtoa_r+0xd8>
 8011a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a72:	2301      	movs	r3, #1
 8011a74:	6013      	str	r3, [r2, #0]
 8011a76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f000 84d9 	beq.w	8012430 <_dtoa_r+0xa80>
 8011a7e:	4887      	ldr	r0, [pc, #540]	; (8011c9c <_dtoa_r+0x2ec>)
 8011a80:	6018      	str	r0, [r3, #0]
 8011a82:	1e43      	subs	r3, r0, #1
 8011a84:	9301      	str	r3, [sp, #4]
 8011a86:	e7e2      	b.n	8011a4e <_dtoa_r+0x9e>
 8011a88:	a90f      	add	r1, sp, #60	; 0x3c
 8011a8a:	aa0e      	add	r2, sp, #56	; 0x38
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	eeb0 0b48 	vmov.f64	d0, d8
 8011a92:	f001 fcaf 	bl	80133f4 <__d2b>
 8011a96:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011a9a:	4605      	mov	r5, r0
 8011a9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011a9e:	2900      	cmp	r1, #0
 8011aa0:	d046      	beq.n	8011b30 <_dtoa_r+0x180>
 8011aa2:	ee18 4a90 	vmov	r4, s17
 8011aa6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011aaa:	ec53 2b18 	vmov	r2, r3, d8
 8011aae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011ab2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ab6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011aba:	2400      	movs	r4, #0
 8011abc:	ec43 2b16 	vmov	d6, r2, r3
 8011ac0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011ac4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c70 <_dtoa_r+0x2c0>
 8011ac8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011acc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011c78 <_dtoa_r+0x2c8>
 8011ad0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011ad4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011c80 <_dtoa_r+0x2d0>
 8011ad8:	ee07 1a90 	vmov	s15, r1
 8011adc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011ae0:	eeb0 7b46 	vmov.f64	d7, d6
 8011ae4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011ae8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011aec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af4:	ee16 ba90 	vmov	fp, s13
 8011af8:	940a      	str	r4, [sp, #40]	; 0x28
 8011afa:	d508      	bpl.n	8011b0e <_dtoa_r+0x15e>
 8011afc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011b00:	eeb4 6b47 	vcmp.f64	d6, d7
 8011b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b08:	bf18      	it	ne
 8011b0a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011b0e:	f1bb 0f16 	cmp.w	fp, #22
 8011b12:	d82f      	bhi.n	8011b74 <_dtoa_r+0x1c4>
 8011b14:	4b62      	ldr	r3, [pc, #392]	; (8011ca0 <_dtoa_r+0x2f0>)
 8011b16:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011b1a:	ed93 7b00 	vldr	d7, [r3]
 8011b1e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b26:	d501      	bpl.n	8011b2c <_dtoa_r+0x17c>
 8011b28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	e022      	b.n	8011b76 <_dtoa_r+0x1c6>
 8011b30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b32:	4401      	add	r1, r0
 8011b34:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011b38:	2b20      	cmp	r3, #32
 8011b3a:	bfc1      	itttt	gt
 8011b3c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011b40:	fa04 f303 	lslgt.w	r3, r4, r3
 8011b44:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011b48:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011b4c:	bfd6      	itet	le
 8011b4e:	f1c3 0320 	rsble	r3, r3, #32
 8011b52:	ea43 0808 	orrgt.w	r8, r3, r8
 8011b56:	fa08 f803 	lslle.w	r8, r8, r3
 8011b5a:	ee07 8a90 	vmov	s15, r8
 8011b5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b62:	3901      	subs	r1, #1
 8011b64:	ee17 4a90 	vmov	r4, s15
 8011b68:	ec53 2b17 	vmov	r2, r3, d7
 8011b6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011b70:	2401      	movs	r4, #1
 8011b72:	e7a3      	b.n	8011abc <_dtoa_r+0x10c>
 8011b74:	2301      	movs	r3, #1
 8011b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b78:	1a43      	subs	r3, r0, r1
 8011b7a:	1e5a      	subs	r2, r3, #1
 8011b7c:	bf45      	ittet	mi
 8011b7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011b82:	9304      	strmi	r3, [sp, #16]
 8011b84:	2300      	movpl	r3, #0
 8011b86:	2300      	movmi	r3, #0
 8011b88:	9205      	str	r2, [sp, #20]
 8011b8a:	bf54      	ite	pl
 8011b8c:	9304      	strpl	r3, [sp, #16]
 8011b8e:	9305      	strmi	r3, [sp, #20]
 8011b90:	f1bb 0f00 	cmp.w	fp, #0
 8011b94:	db18      	blt.n	8011bc8 <_dtoa_r+0x218>
 8011b96:	9b05      	ldr	r3, [sp, #20]
 8011b98:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8011b9c:	445b      	add	r3, fp
 8011b9e:	9305      	str	r3, [sp, #20]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	9a06      	ldr	r2, [sp, #24]
 8011ba4:	2a09      	cmp	r2, #9
 8011ba6:	d849      	bhi.n	8011c3c <_dtoa_r+0x28c>
 8011ba8:	2a05      	cmp	r2, #5
 8011baa:	bfc4      	itt	gt
 8011bac:	3a04      	subgt	r2, #4
 8011bae:	9206      	strgt	r2, [sp, #24]
 8011bb0:	9a06      	ldr	r2, [sp, #24]
 8011bb2:	f1a2 0202 	sub.w	r2, r2, #2
 8011bb6:	bfcc      	ite	gt
 8011bb8:	2400      	movgt	r4, #0
 8011bba:	2401      	movle	r4, #1
 8011bbc:	2a03      	cmp	r2, #3
 8011bbe:	d848      	bhi.n	8011c52 <_dtoa_r+0x2a2>
 8011bc0:	e8df f002 	tbb	[pc, r2]
 8011bc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8011bc8:	9b04      	ldr	r3, [sp, #16]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	eba3 030b 	sub.w	r3, r3, fp
 8011bd0:	9304      	str	r3, [sp, #16]
 8011bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8011bd4:	f1cb 0300 	rsb	r3, fp, #0
 8011bd8:	e7e3      	b.n	8011ba2 <_dtoa_r+0x1f2>
 8011bda:	2200      	movs	r2, #0
 8011bdc:	9207      	str	r2, [sp, #28]
 8011bde:	9a08      	ldr	r2, [sp, #32]
 8011be0:	2a00      	cmp	r2, #0
 8011be2:	dc39      	bgt.n	8011c58 <_dtoa_r+0x2a8>
 8011be4:	f04f 0a01 	mov.w	sl, #1
 8011be8:	46d1      	mov	r9, sl
 8011bea:	4652      	mov	r2, sl
 8011bec:	f8cd a020 	str.w	sl, [sp, #32]
 8011bf0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	6079      	str	r1, [r7, #4]
 8011bf6:	2004      	movs	r0, #4
 8011bf8:	f100 0c14 	add.w	ip, r0, #20
 8011bfc:	4594      	cmp	ip, r2
 8011bfe:	6879      	ldr	r1, [r7, #4]
 8011c00:	d92f      	bls.n	8011c62 <_dtoa_r+0x2b2>
 8011c02:	4630      	mov	r0, r6
 8011c04:	930d      	str	r3, [sp, #52]	; 0x34
 8011c06:	f001 f807 	bl	8012c18 <_Balloc>
 8011c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c0c:	9001      	str	r0, [sp, #4]
 8011c0e:	4602      	mov	r2, r0
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d149      	bne.n	8011ca8 <_dtoa_r+0x2f8>
 8011c14:	4b23      	ldr	r3, [pc, #140]	; (8011ca4 <_dtoa_r+0x2f4>)
 8011c16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011c1a:	e6e1      	b.n	80119e0 <_dtoa_r+0x30>
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	e7dd      	b.n	8011bdc <_dtoa_r+0x22c>
 8011c20:	2200      	movs	r2, #0
 8011c22:	9207      	str	r2, [sp, #28]
 8011c24:	9a08      	ldr	r2, [sp, #32]
 8011c26:	eb0b 0a02 	add.w	sl, fp, r2
 8011c2a:	f10a 0901 	add.w	r9, sl, #1
 8011c2e:	464a      	mov	r2, r9
 8011c30:	2a01      	cmp	r2, #1
 8011c32:	bfb8      	it	lt
 8011c34:	2201      	movlt	r2, #1
 8011c36:	e7db      	b.n	8011bf0 <_dtoa_r+0x240>
 8011c38:	2201      	movs	r2, #1
 8011c3a:	e7f2      	b.n	8011c22 <_dtoa_r+0x272>
 8011c3c:	2401      	movs	r4, #1
 8011c3e:	2200      	movs	r2, #0
 8011c40:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011c44:	f04f 3aff 	mov.w	sl, #4294967295
 8011c48:	2100      	movs	r1, #0
 8011c4a:	46d1      	mov	r9, sl
 8011c4c:	2212      	movs	r2, #18
 8011c4e:	9108      	str	r1, [sp, #32]
 8011c50:	e7ce      	b.n	8011bf0 <_dtoa_r+0x240>
 8011c52:	2201      	movs	r2, #1
 8011c54:	9207      	str	r2, [sp, #28]
 8011c56:	e7f5      	b.n	8011c44 <_dtoa_r+0x294>
 8011c58:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c5c:	46d1      	mov	r9, sl
 8011c5e:	4652      	mov	r2, sl
 8011c60:	e7c6      	b.n	8011bf0 <_dtoa_r+0x240>
 8011c62:	3101      	adds	r1, #1
 8011c64:	6079      	str	r1, [r7, #4]
 8011c66:	0040      	lsls	r0, r0, #1
 8011c68:	e7c6      	b.n	8011bf8 <_dtoa_r+0x248>
 8011c6a:	bf00      	nop
 8011c6c:	f3af 8000 	nop.w
 8011c70:	636f4361 	.word	0x636f4361
 8011c74:	3fd287a7 	.word	0x3fd287a7
 8011c78:	8b60c8b3 	.word	0x8b60c8b3
 8011c7c:	3fc68a28 	.word	0x3fc68a28
 8011c80:	509f79fb 	.word	0x509f79fb
 8011c84:	3fd34413 	.word	0x3fd34413
 8011c88:	08013f28 	.word	0x08013f28
 8011c8c:	08013fe5 	.word	0x08013fe5
 8011c90:	7ff00000 	.word	0x7ff00000
 8011c94:	08013fe1 	.word	0x08013fe1
 8011c98:	08013fd8 	.word	0x08013fd8
 8011c9c:	08013eae 	.word	0x08013eae
 8011ca0:	08014150 	.word	0x08014150
 8011ca4:	08014040 	.word	0x08014040
 8011ca8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8011caa:	9901      	ldr	r1, [sp, #4]
 8011cac:	6011      	str	r1, [r2, #0]
 8011cae:	f1b9 0f0e 	cmp.w	r9, #14
 8011cb2:	d86c      	bhi.n	8011d8e <_dtoa_r+0x3de>
 8011cb4:	2c00      	cmp	r4, #0
 8011cb6:	d06a      	beq.n	8011d8e <_dtoa_r+0x3de>
 8011cb8:	f1bb 0f00 	cmp.w	fp, #0
 8011cbc:	f340 80a0 	ble.w	8011e00 <_dtoa_r+0x450>
 8011cc0:	49c1      	ldr	r1, [pc, #772]	; (8011fc8 <_dtoa_r+0x618>)
 8011cc2:	f00b 020f 	and.w	r2, fp, #15
 8011cc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011cca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011cce:	ed92 7b00 	vldr	d7, [r2]
 8011cd2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8011cd6:	f000 8087 	beq.w	8011de8 <_dtoa_r+0x438>
 8011cda:	4abc      	ldr	r2, [pc, #752]	; (8011fcc <_dtoa_r+0x61c>)
 8011cdc:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ce0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011ce4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011ce8:	f001 010f 	and.w	r1, r1, #15
 8011cec:	2203      	movs	r2, #3
 8011cee:	48b7      	ldr	r0, [pc, #732]	; (8011fcc <_dtoa_r+0x61c>)
 8011cf0:	2900      	cmp	r1, #0
 8011cf2:	d17b      	bne.n	8011dec <_dtoa_r+0x43c>
 8011cf4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011cf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011cfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d02:	2900      	cmp	r1, #0
 8011d04:	f000 80a2 	beq.w	8011e4c <_dtoa_r+0x49c>
 8011d08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011d0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011d10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	f140 8098 	bpl.w	8011e4c <_dtoa_r+0x49c>
 8011d1c:	f1b9 0f00 	cmp.w	r9, #0
 8011d20:	f000 8094 	beq.w	8011e4c <_dtoa_r+0x49c>
 8011d24:	f1ba 0f00 	cmp.w	sl, #0
 8011d28:	dd2f      	ble.n	8011d8a <_dtoa_r+0x3da>
 8011d2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d32:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011d36:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011d3a:	3201      	adds	r2, #1
 8011d3c:	4650      	mov	r0, sl
 8011d3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d42:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011d46:	ee07 2a90 	vmov	s15, r2
 8011d4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011d4e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011d52:	ee15 4a90 	vmov	r4, s11
 8011d56:	ec52 1b15 	vmov	r1, r2, d5
 8011d5a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d177      	bne.n	8011e52 <_dtoa_r+0x4a2>
 8011d62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011d66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d6a:	ec42 1b17 	vmov	d7, r1, r2
 8011d6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d76:	f300 8263 	bgt.w	8012240 <_dtoa_r+0x890>
 8011d7a:	eeb1 7b47 	vneg.f64	d7, d7
 8011d7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d86:	f100 8258 	bmi.w	801223a <_dtoa_r+0x88a>
 8011d8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011d90:	2a00      	cmp	r2, #0
 8011d92:	f2c0 811d 	blt.w	8011fd0 <_dtoa_r+0x620>
 8011d96:	f1bb 0f0e 	cmp.w	fp, #14
 8011d9a:	f300 8119 	bgt.w	8011fd0 <_dtoa_r+0x620>
 8011d9e:	4b8a      	ldr	r3, [pc, #552]	; (8011fc8 <_dtoa_r+0x618>)
 8011da0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011da4:	ed93 6b00 	vldr	d6, [r3]
 8011da8:	9b08      	ldr	r3, [sp, #32]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	f280 80b7 	bge.w	8011f1e <_dtoa_r+0x56e>
 8011db0:	f1b9 0f00 	cmp.w	r9, #0
 8011db4:	f300 80b3 	bgt.w	8011f1e <_dtoa_r+0x56e>
 8011db8:	f040 823f 	bne.w	801223a <_dtoa_r+0x88a>
 8011dbc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011dc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011dc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	464c      	mov	r4, r9
 8011dd2:	464f      	mov	r7, r9
 8011dd4:	f280 8215 	bge.w	8012202 <_dtoa_r+0x852>
 8011dd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011ddc:	2331      	movs	r3, #49	; 0x31
 8011dde:	f808 3b01 	strb.w	r3, [r8], #1
 8011de2:	f10b 0b01 	add.w	fp, fp, #1
 8011de6:	e211      	b.n	801220c <_dtoa_r+0x85c>
 8011de8:	2202      	movs	r2, #2
 8011dea:	e780      	b.n	8011cee <_dtoa_r+0x33e>
 8011dec:	07cc      	lsls	r4, r1, #31
 8011dee:	d504      	bpl.n	8011dfa <_dtoa_r+0x44a>
 8011df0:	ed90 6b00 	vldr	d6, [r0]
 8011df4:	3201      	adds	r2, #1
 8011df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011dfa:	1049      	asrs	r1, r1, #1
 8011dfc:	3008      	adds	r0, #8
 8011dfe:	e777      	b.n	8011cf0 <_dtoa_r+0x340>
 8011e00:	d022      	beq.n	8011e48 <_dtoa_r+0x498>
 8011e02:	f1cb 0100 	rsb	r1, fp, #0
 8011e06:	4a70      	ldr	r2, [pc, #448]	; (8011fc8 <_dtoa_r+0x618>)
 8011e08:	f001 000f 	and.w	r0, r1, #15
 8011e0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e10:	ed92 7b00 	vldr	d7, [r2]
 8011e14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011e18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e1c:	486b      	ldr	r0, [pc, #428]	; (8011fcc <_dtoa_r+0x61c>)
 8011e1e:	1109      	asrs	r1, r1, #4
 8011e20:	2400      	movs	r4, #0
 8011e22:	2202      	movs	r2, #2
 8011e24:	b929      	cbnz	r1, 8011e32 <_dtoa_r+0x482>
 8011e26:	2c00      	cmp	r4, #0
 8011e28:	f43f af6a 	beq.w	8011d00 <_dtoa_r+0x350>
 8011e2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e30:	e766      	b.n	8011d00 <_dtoa_r+0x350>
 8011e32:	07cf      	lsls	r7, r1, #31
 8011e34:	d505      	bpl.n	8011e42 <_dtoa_r+0x492>
 8011e36:	ed90 6b00 	vldr	d6, [r0]
 8011e3a:	3201      	adds	r2, #1
 8011e3c:	2401      	movs	r4, #1
 8011e3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e42:	1049      	asrs	r1, r1, #1
 8011e44:	3008      	adds	r0, #8
 8011e46:	e7ed      	b.n	8011e24 <_dtoa_r+0x474>
 8011e48:	2202      	movs	r2, #2
 8011e4a:	e759      	b.n	8011d00 <_dtoa_r+0x350>
 8011e4c:	465f      	mov	r7, fp
 8011e4e:	4648      	mov	r0, r9
 8011e50:	e775      	b.n	8011d3e <_dtoa_r+0x38e>
 8011e52:	ec42 1b17 	vmov	d7, r1, r2
 8011e56:	4a5c      	ldr	r2, [pc, #368]	; (8011fc8 <_dtoa_r+0x618>)
 8011e58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011e5c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011e60:	9a01      	ldr	r2, [sp, #4]
 8011e62:	1814      	adds	r4, r2, r0
 8011e64:	9a07      	ldr	r2, [sp, #28]
 8011e66:	b352      	cbz	r2, 8011ebe <_dtoa_r+0x50e>
 8011e68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011e6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011e70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011e74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011e78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011e7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011e84:	ee14 2a90 	vmov	r2, s9
 8011e88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011e8c:	3230      	adds	r2, #48	; 0x30
 8011e8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011e92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9a:	f808 2b01 	strb.w	r2, [r8], #1
 8011e9e:	d439      	bmi.n	8011f14 <_dtoa_r+0x564>
 8011ea0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011ea4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eac:	d472      	bmi.n	8011f94 <_dtoa_r+0x5e4>
 8011eae:	45a0      	cmp	r8, r4
 8011eb0:	f43f af6b 	beq.w	8011d8a <_dtoa_r+0x3da>
 8011eb4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011eb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011ebc:	e7e0      	b.n	8011e80 <_dtoa_r+0x4d0>
 8011ebe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011ec2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011ecc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011ed0:	ee14 2a90 	vmov	r2, s9
 8011ed4:	3230      	adds	r2, #48	; 0x30
 8011ed6:	f808 2b01 	strb.w	r2, [r8], #1
 8011eda:	45a0      	cmp	r8, r4
 8011edc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011ee0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011ee4:	d118      	bne.n	8011f18 <_dtoa_r+0x568>
 8011ee6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011eea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011eee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef6:	dc4d      	bgt.n	8011f94 <_dtoa_r+0x5e4>
 8011ef8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011efc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f04:	f57f af41 	bpl.w	8011d8a <_dtoa_r+0x3da>
 8011f08:	4688      	mov	r8, r1
 8011f0a:	3901      	subs	r1, #1
 8011f0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011f10:	2b30      	cmp	r3, #48	; 0x30
 8011f12:	d0f9      	beq.n	8011f08 <_dtoa_r+0x558>
 8011f14:	46bb      	mov	fp, r7
 8011f16:	e02a      	b.n	8011f6e <_dtoa_r+0x5be>
 8011f18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011f1c:	e7d6      	b.n	8011ecc <_dtoa_r+0x51c>
 8011f1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011f26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011f2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011f32:	ee15 3a10 	vmov	r3, s10
 8011f36:	3330      	adds	r3, #48	; 0x30
 8011f38:	f808 3b01 	strb.w	r3, [r8], #1
 8011f3c:	9b01      	ldr	r3, [sp, #4]
 8011f3e:	eba8 0303 	sub.w	r3, r8, r3
 8011f42:	4599      	cmp	r9, r3
 8011f44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011f48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011f4c:	d133      	bne.n	8011fb6 <_dtoa_r+0x606>
 8011f4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011f52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5a:	dc1a      	bgt.n	8011f92 <_dtoa_r+0x5e2>
 8011f5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f64:	d103      	bne.n	8011f6e <_dtoa_r+0x5be>
 8011f66:	ee15 3a10 	vmov	r3, s10
 8011f6a:	07d9      	lsls	r1, r3, #31
 8011f6c:	d411      	bmi.n	8011f92 <_dtoa_r+0x5e2>
 8011f6e:	4629      	mov	r1, r5
 8011f70:	4630      	mov	r0, r6
 8011f72:	f000 fe91 	bl	8012c98 <_Bfree>
 8011f76:	2300      	movs	r3, #0
 8011f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f7a:	f888 3000 	strb.w	r3, [r8]
 8011f7e:	f10b 0301 	add.w	r3, fp, #1
 8011f82:	6013      	str	r3, [r2, #0]
 8011f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f43f ad61 	beq.w	8011a4e <_dtoa_r+0x9e>
 8011f8c:	f8c3 8000 	str.w	r8, [r3]
 8011f90:	e55d      	b.n	8011a4e <_dtoa_r+0x9e>
 8011f92:	465f      	mov	r7, fp
 8011f94:	4643      	mov	r3, r8
 8011f96:	4698      	mov	r8, r3
 8011f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f9c:	2a39      	cmp	r2, #57	; 0x39
 8011f9e:	d106      	bne.n	8011fae <_dtoa_r+0x5fe>
 8011fa0:	9a01      	ldr	r2, [sp, #4]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d1f7      	bne.n	8011f96 <_dtoa_r+0x5e6>
 8011fa6:	9901      	ldr	r1, [sp, #4]
 8011fa8:	2230      	movs	r2, #48	; 0x30
 8011faa:	3701      	adds	r7, #1
 8011fac:	700a      	strb	r2, [r1, #0]
 8011fae:	781a      	ldrb	r2, [r3, #0]
 8011fb0:	3201      	adds	r2, #1
 8011fb2:	701a      	strb	r2, [r3, #0]
 8011fb4:	e7ae      	b.n	8011f14 <_dtoa_r+0x564>
 8011fb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011fba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc2:	d1b2      	bne.n	8011f2a <_dtoa_r+0x57a>
 8011fc4:	e7d3      	b.n	8011f6e <_dtoa_r+0x5be>
 8011fc6:	bf00      	nop
 8011fc8:	08014150 	.word	0x08014150
 8011fcc:	08014128 	.word	0x08014128
 8011fd0:	9907      	ldr	r1, [sp, #28]
 8011fd2:	2900      	cmp	r1, #0
 8011fd4:	f000 80d0 	beq.w	8012178 <_dtoa_r+0x7c8>
 8011fd8:	9906      	ldr	r1, [sp, #24]
 8011fda:	2901      	cmp	r1, #1
 8011fdc:	f300 80b4 	bgt.w	8012148 <_dtoa_r+0x798>
 8011fe0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011fe2:	2900      	cmp	r1, #0
 8011fe4:	f000 80ac 	beq.w	8012140 <_dtoa_r+0x790>
 8011fe8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011fec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011ff0:	461c      	mov	r4, r3
 8011ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ff4:	9b04      	ldr	r3, [sp, #16]
 8011ff6:	4413      	add	r3, r2
 8011ff8:	9304      	str	r3, [sp, #16]
 8011ffa:	9b05      	ldr	r3, [sp, #20]
 8011ffc:	2101      	movs	r1, #1
 8011ffe:	4413      	add	r3, r2
 8012000:	4630      	mov	r0, r6
 8012002:	9305      	str	r3, [sp, #20]
 8012004:	f000 ff4a 	bl	8012e9c <__i2b>
 8012008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801200a:	4607      	mov	r7, r0
 801200c:	f1b8 0f00 	cmp.w	r8, #0
 8012010:	dd0d      	ble.n	801202e <_dtoa_r+0x67e>
 8012012:	9a05      	ldr	r2, [sp, #20]
 8012014:	2a00      	cmp	r2, #0
 8012016:	dd0a      	ble.n	801202e <_dtoa_r+0x67e>
 8012018:	4542      	cmp	r2, r8
 801201a:	9904      	ldr	r1, [sp, #16]
 801201c:	bfa8      	it	ge
 801201e:	4642      	movge	r2, r8
 8012020:	1a89      	subs	r1, r1, r2
 8012022:	9104      	str	r1, [sp, #16]
 8012024:	9905      	ldr	r1, [sp, #20]
 8012026:	eba8 0802 	sub.w	r8, r8, r2
 801202a:	1a8a      	subs	r2, r1, r2
 801202c:	9205      	str	r2, [sp, #20]
 801202e:	b303      	cbz	r3, 8012072 <_dtoa_r+0x6c2>
 8012030:	9a07      	ldr	r2, [sp, #28]
 8012032:	2a00      	cmp	r2, #0
 8012034:	f000 80a5 	beq.w	8012182 <_dtoa_r+0x7d2>
 8012038:	2c00      	cmp	r4, #0
 801203a:	dd13      	ble.n	8012064 <_dtoa_r+0x6b4>
 801203c:	4639      	mov	r1, r7
 801203e:	4622      	mov	r2, r4
 8012040:	4630      	mov	r0, r6
 8012042:	930d      	str	r3, [sp, #52]	; 0x34
 8012044:	f000 ffea 	bl	801301c <__pow5mult>
 8012048:	462a      	mov	r2, r5
 801204a:	4601      	mov	r1, r0
 801204c:	4607      	mov	r7, r0
 801204e:	4630      	mov	r0, r6
 8012050:	f000 ff3a 	bl	8012ec8 <__multiply>
 8012054:	4629      	mov	r1, r5
 8012056:	900a      	str	r0, [sp, #40]	; 0x28
 8012058:	4630      	mov	r0, r6
 801205a:	f000 fe1d 	bl	8012c98 <_Bfree>
 801205e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012060:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012062:	4615      	mov	r5, r2
 8012064:	1b1a      	subs	r2, r3, r4
 8012066:	d004      	beq.n	8012072 <_dtoa_r+0x6c2>
 8012068:	4629      	mov	r1, r5
 801206a:	4630      	mov	r0, r6
 801206c:	f000 ffd6 	bl	801301c <__pow5mult>
 8012070:	4605      	mov	r5, r0
 8012072:	2101      	movs	r1, #1
 8012074:	4630      	mov	r0, r6
 8012076:	f000 ff11 	bl	8012e9c <__i2b>
 801207a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801207c:	2b00      	cmp	r3, #0
 801207e:	4604      	mov	r4, r0
 8012080:	f340 8081 	ble.w	8012186 <_dtoa_r+0x7d6>
 8012084:	461a      	mov	r2, r3
 8012086:	4601      	mov	r1, r0
 8012088:	4630      	mov	r0, r6
 801208a:	f000 ffc7 	bl	801301c <__pow5mult>
 801208e:	9b06      	ldr	r3, [sp, #24]
 8012090:	2b01      	cmp	r3, #1
 8012092:	4604      	mov	r4, r0
 8012094:	dd7a      	ble.n	801218c <_dtoa_r+0x7dc>
 8012096:	2300      	movs	r3, #0
 8012098:	930a      	str	r3, [sp, #40]	; 0x28
 801209a:	6922      	ldr	r2, [r4, #16]
 801209c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80120a0:	6910      	ldr	r0, [r2, #16]
 80120a2:	f000 feab 	bl	8012dfc <__hi0bits>
 80120a6:	f1c0 0020 	rsb	r0, r0, #32
 80120aa:	9b05      	ldr	r3, [sp, #20]
 80120ac:	4418      	add	r0, r3
 80120ae:	f010 001f 	ands.w	r0, r0, #31
 80120b2:	f000 808c 	beq.w	80121ce <_dtoa_r+0x81e>
 80120b6:	f1c0 0220 	rsb	r2, r0, #32
 80120ba:	2a04      	cmp	r2, #4
 80120bc:	f340 8085 	ble.w	80121ca <_dtoa_r+0x81a>
 80120c0:	f1c0 001c 	rsb	r0, r0, #28
 80120c4:	9b04      	ldr	r3, [sp, #16]
 80120c6:	4403      	add	r3, r0
 80120c8:	9304      	str	r3, [sp, #16]
 80120ca:	9b05      	ldr	r3, [sp, #20]
 80120cc:	4403      	add	r3, r0
 80120ce:	4480      	add	r8, r0
 80120d0:	9305      	str	r3, [sp, #20]
 80120d2:	9b04      	ldr	r3, [sp, #16]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	dd05      	ble.n	80120e4 <_dtoa_r+0x734>
 80120d8:	4629      	mov	r1, r5
 80120da:	461a      	mov	r2, r3
 80120dc:	4630      	mov	r0, r6
 80120de:	f000 fff7 	bl	80130d0 <__lshift>
 80120e2:	4605      	mov	r5, r0
 80120e4:	9b05      	ldr	r3, [sp, #20]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	dd05      	ble.n	80120f6 <_dtoa_r+0x746>
 80120ea:	4621      	mov	r1, r4
 80120ec:	461a      	mov	r2, r3
 80120ee:	4630      	mov	r0, r6
 80120f0:	f000 ffee 	bl	80130d0 <__lshift>
 80120f4:	4604      	mov	r4, r0
 80120f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d06a      	beq.n	80121d2 <_dtoa_r+0x822>
 80120fc:	4621      	mov	r1, r4
 80120fe:	4628      	mov	r0, r5
 8012100:	f001 f856 	bl	80131b0 <__mcmp>
 8012104:	2800      	cmp	r0, #0
 8012106:	da64      	bge.n	80121d2 <_dtoa_r+0x822>
 8012108:	2300      	movs	r3, #0
 801210a:	4629      	mov	r1, r5
 801210c:	220a      	movs	r2, #10
 801210e:	4630      	mov	r0, r6
 8012110:	f000 fde4 	bl	8012cdc <__multadd>
 8012114:	9b07      	ldr	r3, [sp, #28]
 8012116:	f10b 3bff 	add.w	fp, fp, #4294967295
 801211a:	4605      	mov	r5, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	f000 8191 	beq.w	8012444 <_dtoa_r+0xa94>
 8012122:	4639      	mov	r1, r7
 8012124:	2300      	movs	r3, #0
 8012126:	220a      	movs	r2, #10
 8012128:	4630      	mov	r0, r6
 801212a:	f000 fdd7 	bl	8012cdc <__multadd>
 801212e:	f1ba 0f00 	cmp.w	sl, #0
 8012132:	4607      	mov	r7, r0
 8012134:	f300 808d 	bgt.w	8012252 <_dtoa_r+0x8a2>
 8012138:	9b06      	ldr	r3, [sp, #24]
 801213a:	2b02      	cmp	r3, #2
 801213c:	dc50      	bgt.n	80121e0 <_dtoa_r+0x830>
 801213e:	e088      	b.n	8012252 <_dtoa_r+0x8a2>
 8012140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012142:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012146:	e751      	b.n	8011fec <_dtoa_r+0x63c>
 8012148:	f109 34ff 	add.w	r4, r9, #4294967295
 801214c:	42a3      	cmp	r3, r4
 801214e:	bfbf      	itttt	lt
 8012150:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8012152:	1ae3      	sublt	r3, r4, r3
 8012154:	18d2      	addlt	r2, r2, r3
 8012156:	9209      	strlt	r2, [sp, #36]	; 0x24
 8012158:	bfb6      	itet	lt
 801215a:	4623      	movlt	r3, r4
 801215c:	1b1c      	subge	r4, r3, r4
 801215e:	2400      	movlt	r4, #0
 8012160:	f1b9 0f00 	cmp.w	r9, #0
 8012164:	bfb5      	itete	lt
 8012166:	9a04      	ldrlt	r2, [sp, #16]
 8012168:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801216c:	eba2 0809 	sublt.w	r8, r2, r9
 8012170:	464a      	movge	r2, r9
 8012172:	bfb8      	it	lt
 8012174:	2200      	movlt	r2, #0
 8012176:	e73c      	b.n	8011ff2 <_dtoa_r+0x642>
 8012178:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801217c:	9f07      	ldr	r7, [sp, #28]
 801217e:	461c      	mov	r4, r3
 8012180:	e744      	b.n	801200c <_dtoa_r+0x65c>
 8012182:	461a      	mov	r2, r3
 8012184:	e770      	b.n	8012068 <_dtoa_r+0x6b8>
 8012186:	9b06      	ldr	r3, [sp, #24]
 8012188:	2b01      	cmp	r3, #1
 801218a:	dc18      	bgt.n	80121be <_dtoa_r+0x80e>
 801218c:	9b02      	ldr	r3, [sp, #8]
 801218e:	b9b3      	cbnz	r3, 80121be <_dtoa_r+0x80e>
 8012190:	9b03      	ldr	r3, [sp, #12]
 8012192:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012196:	b9a2      	cbnz	r2, 80121c2 <_dtoa_r+0x812>
 8012198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801219c:	0d12      	lsrs	r2, r2, #20
 801219e:	0512      	lsls	r2, r2, #20
 80121a0:	b18a      	cbz	r2, 80121c6 <_dtoa_r+0x816>
 80121a2:	9b04      	ldr	r3, [sp, #16]
 80121a4:	3301      	adds	r3, #1
 80121a6:	9304      	str	r3, [sp, #16]
 80121a8:	9b05      	ldr	r3, [sp, #20]
 80121aa:	3301      	adds	r3, #1
 80121ac:	9305      	str	r3, [sp, #20]
 80121ae:	2301      	movs	r3, #1
 80121b0:	930a      	str	r3, [sp, #40]	; 0x28
 80121b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f47f af70 	bne.w	801209a <_dtoa_r+0x6ea>
 80121ba:	2001      	movs	r0, #1
 80121bc:	e775      	b.n	80120aa <_dtoa_r+0x6fa>
 80121be:	2300      	movs	r3, #0
 80121c0:	e7f6      	b.n	80121b0 <_dtoa_r+0x800>
 80121c2:	9b02      	ldr	r3, [sp, #8]
 80121c4:	e7f4      	b.n	80121b0 <_dtoa_r+0x800>
 80121c6:	920a      	str	r2, [sp, #40]	; 0x28
 80121c8:	e7f3      	b.n	80121b2 <_dtoa_r+0x802>
 80121ca:	d082      	beq.n	80120d2 <_dtoa_r+0x722>
 80121cc:	4610      	mov	r0, r2
 80121ce:	301c      	adds	r0, #28
 80121d0:	e778      	b.n	80120c4 <_dtoa_r+0x714>
 80121d2:	f1b9 0f00 	cmp.w	r9, #0
 80121d6:	dc37      	bgt.n	8012248 <_dtoa_r+0x898>
 80121d8:	9b06      	ldr	r3, [sp, #24]
 80121da:	2b02      	cmp	r3, #2
 80121dc:	dd34      	ble.n	8012248 <_dtoa_r+0x898>
 80121de:	46ca      	mov	sl, r9
 80121e0:	f1ba 0f00 	cmp.w	sl, #0
 80121e4:	d10d      	bne.n	8012202 <_dtoa_r+0x852>
 80121e6:	4621      	mov	r1, r4
 80121e8:	4653      	mov	r3, sl
 80121ea:	2205      	movs	r2, #5
 80121ec:	4630      	mov	r0, r6
 80121ee:	f000 fd75 	bl	8012cdc <__multadd>
 80121f2:	4601      	mov	r1, r0
 80121f4:	4604      	mov	r4, r0
 80121f6:	4628      	mov	r0, r5
 80121f8:	f000 ffda 	bl	80131b0 <__mcmp>
 80121fc:	2800      	cmp	r0, #0
 80121fe:	f73f adeb 	bgt.w	8011dd8 <_dtoa_r+0x428>
 8012202:	9b08      	ldr	r3, [sp, #32]
 8012204:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012208:	ea6f 0b03 	mvn.w	fp, r3
 801220c:	f04f 0900 	mov.w	r9, #0
 8012210:	4621      	mov	r1, r4
 8012212:	4630      	mov	r0, r6
 8012214:	f000 fd40 	bl	8012c98 <_Bfree>
 8012218:	2f00      	cmp	r7, #0
 801221a:	f43f aea8 	beq.w	8011f6e <_dtoa_r+0x5be>
 801221e:	f1b9 0f00 	cmp.w	r9, #0
 8012222:	d005      	beq.n	8012230 <_dtoa_r+0x880>
 8012224:	45b9      	cmp	r9, r7
 8012226:	d003      	beq.n	8012230 <_dtoa_r+0x880>
 8012228:	4649      	mov	r1, r9
 801222a:	4630      	mov	r0, r6
 801222c:	f000 fd34 	bl	8012c98 <_Bfree>
 8012230:	4639      	mov	r1, r7
 8012232:	4630      	mov	r0, r6
 8012234:	f000 fd30 	bl	8012c98 <_Bfree>
 8012238:	e699      	b.n	8011f6e <_dtoa_r+0x5be>
 801223a:	2400      	movs	r4, #0
 801223c:	4627      	mov	r7, r4
 801223e:	e7e0      	b.n	8012202 <_dtoa_r+0x852>
 8012240:	46bb      	mov	fp, r7
 8012242:	4604      	mov	r4, r0
 8012244:	4607      	mov	r7, r0
 8012246:	e5c7      	b.n	8011dd8 <_dtoa_r+0x428>
 8012248:	9b07      	ldr	r3, [sp, #28]
 801224a:	46ca      	mov	sl, r9
 801224c:	2b00      	cmp	r3, #0
 801224e:	f000 8100 	beq.w	8012452 <_dtoa_r+0xaa2>
 8012252:	f1b8 0f00 	cmp.w	r8, #0
 8012256:	dd05      	ble.n	8012264 <_dtoa_r+0x8b4>
 8012258:	4639      	mov	r1, r7
 801225a:	4642      	mov	r2, r8
 801225c:	4630      	mov	r0, r6
 801225e:	f000 ff37 	bl	80130d0 <__lshift>
 8012262:	4607      	mov	r7, r0
 8012264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012266:	2b00      	cmp	r3, #0
 8012268:	d05d      	beq.n	8012326 <_dtoa_r+0x976>
 801226a:	6879      	ldr	r1, [r7, #4]
 801226c:	4630      	mov	r0, r6
 801226e:	f000 fcd3 	bl	8012c18 <_Balloc>
 8012272:	4680      	mov	r8, r0
 8012274:	b928      	cbnz	r0, 8012282 <_dtoa_r+0x8d2>
 8012276:	4b82      	ldr	r3, [pc, #520]	; (8012480 <_dtoa_r+0xad0>)
 8012278:	4602      	mov	r2, r0
 801227a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801227e:	f7ff bbaf 	b.w	80119e0 <_dtoa_r+0x30>
 8012282:	693a      	ldr	r2, [r7, #16]
 8012284:	3202      	adds	r2, #2
 8012286:	0092      	lsls	r2, r2, #2
 8012288:	f107 010c 	add.w	r1, r7, #12
 801228c:	300c      	adds	r0, #12
 801228e:	f7fd fccd 	bl	800fc2c <memcpy>
 8012292:	2201      	movs	r2, #1
 8012294:	4641      	mov	r1, r8
 8012296:	4630      	mov	r0, r6
 8012298:	f000 ff1a 	bl	80130d0 <__lshift>
 801229c:	9b01      	ldr	r3, [sp, #4]
 801229e:	3301      	adds	r3, #1
 80122a0:	9304      	str	r3, [sp, #16]
 80122a2:	9b01      	ldr	r3, [sp, #4]
 80122a4:	4453      	add	r3, sl
 80122a6:	9308      	str	r3, [sp, #32]
 80122a8:	9b02      	ldr	r3, [sp, #8]
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	46b9      	mov	r9, r7
 80122b0:	9307      	str	r3, [sp, #28]
 80122b2:	4607      	mov	r7, r0
 80122b4:	9b04      	ldr	r3, [sp, #16]
 80122b6:	4621      	mov	r1, r4
 80122b8:	3b01      	subs	r3, #1
 80122ba:	4628      	mov	r0, r5
 80122bc:	9302      	str	r3, [sp, #8]
 80122be:	f7ff fae9 	bl	8011894 <quorem>
 80122c2:	4603      	mov	r3, r0
 80122c4:	3330      	adds	r3, #48	; 0x30
 80122c6:	9005      	str	r0, [sp, #20]
 80122c8:	4649      	mov	r1, r9
 80122ca:	4628      	mov	r0, r5
 80122cc:	9309      	str	r3, [sp, #36]	; 0x24
 80122ce:	f000 ff6f 	bl	80131b0 <__mcmp>
 80122d2:	463a      	mov	r2, r7
 80122d4:	4682      	mov	sl, r0
 80122d6:	4621      	mov	r1, r4
 80122d8:	4630      	mov	r0, r6
 80122da:	f000 ff85 	bl	80131e8 <__mdiff>
 80122de:	68c2      	ldr	r2, [r0, #12]
 80122e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e2:	4680      	mov	r8, r0
 80122e4:	bb0a      	cbnz	r2, 801232a <_dtoa_r+0x97a>
 80122e6:	4601      	mov	r1, r0
 80122e8:	4628      	mov	r0, r5
 80122ea:	f000 ff61 	bl	80131b0 <__mcmp>
 80122ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f0:	4602      	mov	r2, r0
 80122f2:	4641      	mov	r1, r8
 80122f4:	4630      	mov	r0, r6
 80122f6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80122fa:	f000 fccd 	bl	8012c98 <_Bfree>
 80122fe:	9b06      	ldr	r3, [sp, #24]
 8012300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012302:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012306:	ea43 0102 	orr.w	r1, r3, r2
 801230a:	9b07      	ldr	r3, [sp, #28]
 801230c:	430b      	orrs	r3, r1
 801230e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012310:	d10d      	bne.n	801232e <_dtoa_r+0x97e>
 8012312:	2b39      	cmp	r3, #57	; 0x39
 8012314:	d029      	beq.n	801236a <_dtoa_r+0x9ba>
 8012316:	f1ba 0f00 	cmp.w	sl, #0
 801231a:	dd01      	ble.n	8012320 <_dtoa_r+0x970>
 801231c:	9b05      	ldr	r3, [sp, #20]
 801231e:	3331      	adds	r3, #49	; 0x31
 8012320:	9a02      	ldr	r2, [sp, #8]
 8012322:	7013      	strb	r3, [r2, #0]
 8012324:	e774      	b.n	8012210 <_dtoa_r+0x860>
 8012326:	4638      	mov	r0, r7
 8012328:	e7b8      	b.n	801229c <_dtoa_r+0x8ec>
 801232a:	2201      	movs	r2, #1
 801232c:	e7e1      	b.n	80122f2 <_dtoa_r+0x942>
 801232e:	f1ba 0f00 	cmp.w	sl, #0
 8012332:	db06      	blt.n	8012342 <_dtoa_r+0x992>
 8012334:	9906      	ldr	r1, [sp, #24]
 8012336:	ea41 0a0a 	orr.w	sl, r1, sl
 801233a:	9907      	ldr	r1, [sp, #28]
 801233c:	ea5a 0101 	orrs.w	r1, sl, r1
 8012340:	d120      	bne.n	8012384 <_dtoa_r+0x9d4>
 8012342:	2a00      	cmp	r2, #0
 8012344:	ddec      	ble.n	8012320 <_dtoa_r+0x970>
 8012346:	4629      	mov	r1, r5
 8012348:	2201      	movs	r2, #1
 801234a:	4630      	mov	r0, r6
 801234c:	9304      	str	r3, [sp, #16]
 801234e:	f000 febf 	bl	80130d0 <__lshift>
 8012352:	4621      	mov	r1, r4
 8012354:	4605      	mov	r5, r0
 8012356:	f000 ff2b 	bl	80131b0 <__mcmp>
 801235a:	2800      	cmp	r0, #0
 801235c:	9b04      	ldr	r3, [sp, #16]
 801235e:	dc02      	bgt.n	8012366 <_dtoa_r+0x9b6>
 8012360:	d1de      	bne.n	8012320 <_dtoa_r+0x970>
 8012362:	07da      	lsls	r2, r3, #31
 8012364:	d5dc      	bpl.n	8012320 <_dtoa_r+0x970>
 8012366:	2b39      	cmp	r3, #57	; 0x39
 8012368:	d1d8      	bne.n	801231c <_dtoa_r+0x96c>
 801236a:	9a02      	ldr	r2, [sp, #8]
 801236c:	2339      	movs	r3, #57	; 0x39
 801236e:	7013      	strb	r3, [r2, #0]
 8012370:	4643      	mov	r3, r8
 8012372:	4698      	mov	r8, r3
 8012374:	3b01      	subs	r3, #1
 8012376:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801237a:	2a39      	cmp	r2, #57	; 0x39
 801237c:	d051      	beq.n	8012422 <_dtoa_r+0xa72>
 801237e:	3201      	adds	r2, #1
 8012380:	701a      	strb	r2, [r3, #0]
 8012382:	e745      	b.n	8012210 <_dtoa_r+0x860>
 8012384:	2a00      	cmp	r2, #0
 8012386:	dd03      	ble.n	8012390 <_dtoa_r+0x9e0>
 8012388:	2b39      	cmp	r3, #57	; 0x39
 801238a:	d0ee      	beq.n	801236a <_dtoa_r+0x9ba>
 801238c:	3301      	adds	r3, #1
 801238e:	e7c7      	b.n	8012320 <_dtoa_r+0x970>
 8012390:	9a04      	ldr	r2, [sp, #16]
 8012392:	9908      	ldr	r1, [sp, #32]
 8012394:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012398:	428a      	cmp	r2, r1
 801239a:	d02b      	beq.n	80123f4 <_dtoa_r+0xa44>
 801239c:	4629      	mov	r1, r5
 801239e:	2300      	movs	r3, #0
 80123a0:	220a      	movs	r2, #10
 80123a2:	4630      	mov	r0, r6
 80123a4:	f000 fc9a 	bl	8012cdc <__multadd>
 80123a8:	45b9      	cmp	r9, r7
 80123aa:	4605      	mov	r5, r0
 80123ac:	f04f 0300 	mov.w	r3, #0
 80123b0:	f04f 020a 	mov.w	r2, #10
 80123b4:	4649      	mov	r1, r9
 80123b6:	4630      	mov	r0, r6
 80123b8:	d107      	bne.n	80123ca <_dtoa_r+0xa1a>
 80123ba:	f000 fc8f 	bl	8012cdc <__multadd>
 80123be:	4681      	mov	r9, r0
 80123c0:	4607      	mov	r7, r0
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	3301      	adds	r3, #1
 80123c6:	9304      	str	r3, [sp, #16]
 80123c8:	e774      	b.n	80122b4 <_dtoa_r+0x904>
 80123ca:	f000 fc87 	bl	8012cdc <__multadd>
 80123ce:	4639      	mov	r1, r7
 80123d0:	4681      	mov	r9, r0
 80123d2:	2300      	movs	r3, #0
 80123d4:	220a      	movs	r2, #10
 80123d6:	4630      	mov	r0, r6
 80123d8:	f000 fc80 	bl	8012cdc <__multadd>
 80123dc:	4607      	mov	r7, r0
 80123de:	e7f0      	b.n	80123c2 <_dtoa_r+0xa12>
 80123e0:	f1ba 0f00 	cmp.w	sl, #0
 80123e4:	9a01      	ldr	r2, [sp, #4]
 80123e6:	bfcc      	ite	gt
 80123e8:	46d0      	movgt	r8, sl
 80123ea:	f04f 0801 	movle.w	r8, #1
 80123ee:	4490      	add	r8, r2
 80123f0:	f04f 0900 	mov.w	r9, #0
 80123f4:	4629      	mov	r1, r5
 80123f6:	2201      	movs	r2, #1
 80123f8:	4630      	mov	r0, r6
 80123fa:	9302      	str	r3, [sp, #8]
 80123fc:	f000 fe68 	bl	80130d0 <__lshift>
 8012400:	4621      	mov	r1, r4
 8012402:	4605      	mov	r5, r0
 8012404:	f000 fed4 	bl	80131b0 <__mcmp>
 8012408:	2800      	cmp	r0, #0
 801240a:	dcb1      	bgt.n	8012370 <_dtoa_r+0x9c0>
 801240c:	d102      	bne.n	8012414 <_dtoa_r+0xa64>
 801240e:	9b02      	ldr	r3, [sp, #8]
 8012410:	07db      	lsls	r3, r3, #31
 8012412:	d4ad      	bmi.n	8012370 <_dtoa_r+0x9c0>
 8012414:	4643      	mov	r3, r8
 8012416:	4698      	mov	r8, r3
 8012418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801241c:	2a30      	cmp	r2, #48	; 0x30
 801241e:	d0fa      	beq.n	8012416 <_dtoa_r+0xa66>
 8012420:	e6f6      	b.n	8012210 <_dtoa_r+0x860>
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	429a      	cmp	r2, r3
 8012426:	d1a4      	bne.n	8012372 <_dtoa_r+0x9c2>
 8012428:	f10b 0b01 	add.w	fp, fp, #1
 801242c:	2331      	movs	r3, #49	; 0x31
 801242e:	e778      	b.n	8012322 <_dtoa_r+0x972>
 8012430:	4b14      	ldr	r3, [pc, #80]	; (8012484 <_dtoa_r+0xad4>)
 8012432:	f7ff bb27 	b.w	8011a84 <_dtoa_r+0xd4>
 8012436:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012438:	2b00      	cmp	r3, #0
 801243a:	f47f ab03 	bne.w	8011a44 <_dtoa_r+0x94>
 801243e:	4b12      	ldr	r3, [pc, #72]	; (8012488 <_dtoa_r+0xad8>)
 8012440:	f7ff bb20 	b.w	8011a84 <_dtoa_r+0xd4>
 8012444:	f1ba 0f00 	cmp.w	sl, #0
 8012448:	dc03      	bgt.n	8012452 <_dtoa_r+0xaa2>
 801244a:	9b06      	ldr	r3, [sp, #24]
 801244c:	2b02      	cmp	r3, #2
 801244e:	f73f aec7 	bgt.w	80121e0 <_dtoa_r+0x830>
 8012452:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012456:	4621      	mov	r1, r4
 8012458:	4628      	mov	r0, r5
 801245a:	f7ff fa1b 	bl	8011894 <quorem>
 801245e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012462:	f808 3b01 	strb.w	r3, [r8], #1
 8012466:	9a01      	ldr	r2, [sp, #4]
 8012468:	eba8 0202 	sub.w	r2, r8, r2
 801246c:	4592      	cmp	sl, r2
 801246e:	ddb7      	ble.n	80123e0 <_dtoa_r+0xa30>
 8012470:	4629      	mov	r1, r5
 8012472:	2300      	movs	r3, #0
 8012474:	220a      	movs	r2, #10
 8012476:	4630      	mov	r0, r6
 8012478:	f000 fc30 	bl	8012cdc <__multadd>
 801247c:	4605      	mov	r5, r0
 801247e:	e7ea      	b.n	8012456 <_dtoa_r+0xaa6>
 8012480:	08014040 	.word	0x08014040
 8012484:	08013ead 	.word	0x08013ead
 8012488:	08013fd8 	.word	0x08013fd8

0801248c <_fstat_r>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	4d07      	ldr	r5, [pc, #28]	; (80124ac <_fstat_r+0x20>)
 8012490:	2300      	movs	r3, #0
 8012492:	4604      	mov	r4, r0
 8012494:	4608      	mov	r0, r1
 8012496:	4611      	mov	r1, r2
 8012498:	602b      	str	r3, [r5, #0]
 801249a:	f7ef fed2 	bl	8002242 <_fstat>
 801249e:	1c43      	adds	r3, r0, #1
 80124a0:	d102      	bne.n	80124a8 <_fstat_r+0x1c>
 80124a2:	682b      	ldr	r3, [r5, #0]
 80124a4:	b103      	cbz	r3, 80124a8 <_fstat_r+0x1c>
 80124a6:	6023      	str	r3, [r4, #0]
 80124a8:	bd38      	pop	{r3, r4, r5, pc}
 80124aa:	bf00      	nop
 80124ac:	240011d4 	.word	0x240011d4

080124b0 <rshift>:
 80124b0:	6903      	ldr	r3, [r0, #16]
 80124b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80124b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80124be:	f100 0414 	add.w	r4, r0, #20
 80124c2:	dd45      	ble.n	8012550 <rshift+0xa0>
 80124c4:	f011 011f 	ands.w	r1, r1, #31
 80124c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124d0:	d10c      	bne.n	80124ec <rshift+0x3c>
 80124d2:	f100 0710 	add.w	r7, r0, #16
 80124d6:	4629      	mov	r1, r5
 80124d8:	42b1      	cmp	r1, r6
 80124da:	d334      	bcc.n	8012546 <rshift+0x96>
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	009b      	lsls	r3, r3, #2
 80124e0:	1eea      	subs	r2, r5, #3
 80124e2:	4296      	cmp	r6, r2
 80124e4:	bf38      	it	cc
 80124e6:	2300      	movcc	r3, #0
 80124e8:	4423      	add	r3, r4
 80124ea:	e015      	b.n	8012518 <rshift+0x68>
 80124ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124f0:	f1c1 0820 	rsb	r8, r1, #32
 80124f4:	40cf      	lsrs	r7, r1
 80124f6:	f105 0e04 	add.w	lr, r5, #4
 80124fa:	46a1      	mov	r9, r4
 80124fc:	4576      	cmp	r6, lr
 80124fe:	46f4      	mov	ip, lr
 8012500:	d815      	bhi.n	801252e <rshift+0x7e>
 8012502:	1a9a      	subs	r2, r3, r2
 8012504:	0092      	lsls	r2, r2, #2
 8012506:	3a04      	subs	r2, #4
 8012508:	3501      	adds	r5, #1
 801250a:	42ae      	cmp	r6, r5
 801250c:	bf38      	it	cc
 801250e:	2200      	movcc	r2, #0
 8012510:	18a3      	adds	r3, r4, r2
 8012512:	50a7      	str	r7, [r4, r2]
 8012514:	b107      	cbz	r7, 8012518 <rshift+0x68>
 8012516:	3304      	adds	r3, #4
 8012518:	1b1a      	subs	r2, r3, r4
 801251a:	42a3      	cmp	r3, r4
 801251c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012520:	bf08      	it	eq
 8012522:	2300      	moveq	r3, #0
 8012524:	6102      	str	r2, [r0, #16]
 8012526:	bf08      	it	eq
 8012528:	6143      	streq	r3, [r0, #20]
 801252a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801252e:	f8dc c000 	ldr.w	ip, [ip]
 8012532:	fa0c fc08 	lsl.w	ip, ip, r8
 8012536:	ea4c 0707 	orr.w	r7, ip, r7
 801253a:	f849 7b04 	str.w	r7, [r9], #4
 801253e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012542:	40cf      	lsrs	r7, r1
 8012544:	e7da      	b.n	80124fc <rshift+0x4c>
 8012546:	f851 cb04 	ldr.w	ip, [r1], #4
 801254a:	f847 cf04 	str.w	ip, [r7, #4]!
 801254e:	e7c3      	b.n	80124d8 <rshift+0x28>
 8012550:	4623      	mov	r3, r4
 8012552:	e7e1      	b.n	8012518 <rshift+0x68>

08012554 <__hexdig_fun>:
 8012554:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012558:	2b09      	cmp	r3, #9
 801255a:	d802      	bhi.n	8012562 <__hexdig_fun+0xe>
 801255c:	3820      	subs	r0, #32
 801255e:	b2c0      	uxtb	r0, r0
 8012560:	4770      	bx	lr
 8012562:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012566:	2b05      	cmp	r3, #5
 8012568:	d801      	bhi.n	801256e <__hexdig_fun+0x1a>
 801256a:	3847      	subs	r0, #71	; 0x47
 801256c:	e7f7      	b.n	801255e <__hexdig_fun+0xa>
 801256e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012572:	2b05      	cmp	r3, #5
 8012574:	d801      	bhi.n	801257a <__hexdig_fun+0x26>
 8012576:	3827      	subs	r0, #39	; 0x27
 8012578:	e7f1      	b.n	801255e <__hexdig_fun+0xa>
 801257a:	2000      	movs	r0, #0
 801257c:	4770      	bx	lr
	...

08012580 <__gethex>:
 8012580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	ed2d 8b02 	vpush	{d8}
 8012588:	b089      	sub	sp, #36	; 0x24
 801258a:	ee08 0a10 	vmov	s16, r0
 801258e:	9304      	str	r3, [sp, #16]
 8012590:	4bb4      	ldr	r3, [pc, #720]	; (8012864 <__gethex+0x2e4>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	468b      	mov	fp, r1
 801259a:	4690      	mov	r8, r2
 801259c:	f7ed fea8 	bl	80002f0 <strlen>
 80125a0:	9b01      	ldr	r3, [sp, #4]
 80125a2:	f8db 2000 	ldr.w	r2, [fp]
 80125a6:	4403      	add	r3, r0
 80125a8:	4682      	mov	sl, r0
 80125aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80125ae:	9305      	str	r3, [sp, #20]
 80125b0:	1c93      	adds	r3, r2, #2
 80125b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80125b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80125ba:	32fe      	adds	r2, #254	; 0xfe
 80125bc:	18d1      	adds	r1, r2, r3
 80125be:	461f      	mov	r7, r3
 80125c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125c4:	9100      	str	r1, [sp, #0]
 80125c6:	2830      	cmp	r0, #48	; 0x30
 80125c8:	d0f8      	beq.n	80125bc <__gethex+0x3c>
 80125ca:	f7ff ffc3 	bl	8012554 <__hexdig_fun>
 80125ce:	4604      	mov	r4, r0
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d13a      	bne.n	801264a <__gethex+0xca>
 80125d4:	9901      	ldr	r1, [sp, #4]
 80125d6:	4652      	mov	r2, sl
 80125d8:	4638      	mov	r0, r7
 80125da:	f7fe fa0e 	bl	80109fa <strncmp>
 80125de:	4605      	mov	r5, r0
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d168      	bne.n	80126b6 <__gethex+0x136>
 80125e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80125e8:	eb07 060a 	add.w	r6, r7, sl
 80125ec:	f7ff ffb2 	bl	8012554 <__hexdig_fun>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d062      	beq.n	80126ba <__gethex+0x13a>
 80125f4:	4633      	mov	r3, r6
 80125f6:	7818      	ldrb	r0, [r3, #0]
 80125f8:	2830      	cmp	r0, #48	; 0x30
 80125fa:	461f      	mov	r7, r3
 80125fc:	f103 0301 	add.w	r3, r3, #1
 8012600:	d0f9      	beq.n	80125f6 <__gethex+0x76>
 8012602:	f7ff ffa7 	bl	8012554 <__hexdig_fun>
 8012606:	2301      	movs	r3, #1
 8012608:	fab0 f480 	clz	r4, r0
 801260c:	0964      	lsrs	r4, r4, #5
 801260e:	4635      	mov	r5, r6
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	463a      	mov	r2, r7
 8012614:	4616      	mov	r6, r2
 8012616:	3201      	adds	r2, #1
 8012618:	7830      	ldrb	r0, [r6, #0]
 801261a:	f7ff ff9b 	bl	8012554 <__hexdig_fun>
 801261e:	2800      	cmp	r0, #0
 8012620:	d1f8      	bne.n	8012614 <__gethex+0x94>
 8012622:	9901      	ldr	r1, [sp, #4]
 8012624:	4652      	mov	r2, sl
 8012626:	4630      	mov	r0, r6
 8012628:	f7fe f9e7 	bl	80109fa <strncmp>
 801262c:	b980      	cbnz	r0, 8012650 <__gethex+0xd0>
 801262e:	b94d      	cbnz	r5, 8012644 <__gethex+0xc4>
 8012630:	eb06 050a 	add.w	r5, r6, sl
 8012634:	462a      	mov	r2, r5
 8012636:	4616      	mov	r6, r2
 8012638:	3201      	adds	r2, #1
 801263a:	7830      	ldrb	r0, [r6, #0]
 801263c:	f7ff ff8a 	bl	8012554 <__hexdig_fun>
 8012640:	2800      	cmp	r0, #0
 8012642:	d1f8      	bne.n	8012636 <__gethex+0xb6>
 8012644:	1bad      	subs	r5, r5, r6
 8012646:	00ad      	lsls	r5, r5, #2
 8012648:	e004      	b.n	8012654 <__gethex+0xd4>
 801264a:	2400      	movs	r4, #0
 801264c:	4625      	mov	r5, r4
 801264e:	e7e0      	b.n	8012612 <__gethex+0x92>
 8012650:	2d00      	cmp	r5, #0
 8012652:	d1f7      	bne.n	8012644 <__gethex+0xc4>
 8012654:	7833      	ldrb	r3, [r6, #0]
 8012656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801265a:	2b50      	cmp	r3, #80	; 0x50
 801265c:	d13b      	bne.n	80126d6 <__gethex+0x156>
 801265e:	7873      	ldrb	r3, [r6, #1]
 8012660:	2b2b      	cmp	r3, #43	; 0x2b
 8012662:	d02c      	beq.n	80126be <__gethex+0x13e>
 8012664:	2b2d      	cmp	r3, #45	; 0x2d
 8012666:	d02e      	beq.n	80126c6 <__gethex+0x146>
 8012668:	1c71      	adds	r1, r6, #1
 801266a:	f04f 0900 	mov.w	r9, #0
 801266e:	7808      	ldrb	r0, [r1, #0]
 8012670:	f7ff ff70 	bl	8012554 <__hexdig_fun>
 8012674:	1e43      	subs	r3, r0, #1
 8012676:	b2db      	uxtb	r3, r3
 8012678:	2b18      	cmp	r3, #24
 801267a:	d82c      	bhi.n	80126d6 <__gethex+0x156>
 801267c:	f1a0 0210 	sub.w	r2, r0, #16
 8012680:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012684:	f7ff ff66 	bl	8012554 <__hexdig_fun>
 8012688:	1e43      	subs	r3, r0, #1
 801268a:	b2db      	uxtb	r3, r3
 801268c:	2b18      	cmp	r3, #24
 801268e:	d91d      	bls.n	80126cc <__gethex+0x14c>
 8012690:	f1b9 0f00 	cmp.w	r9, #0
 8012694:	d000      	beq.n	8012698 <__gethex+0x118>
 8012696:	4252      	negs	r2, r2
 8012698:	4415      	add	r5, r2
 801269a:	f8cb 1000 	str.w	r1, [fp]
 801269e:	b1e4      	cbz	r4, 80126da <__gethex+0x15a>
 80126a0:	9b00      	ldr	r3, [sp, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	bf14      	ite	ne
 80126a6:	2700      	movne	r7, #0
 80126a8:	2706      	moveq	r7, #6
 80126aa:	4638      	mov	r0, r7
 80126ac:	b009      	add	sp, #36	; 0x24
 80126ae:	ecbd 8b02 	vpop	{d8}
 80126b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b6:	463e      	mov	r6, r7
 80126b8:	4625      	mov	r5, r4
 80126ba:	2401      	movs	r4, #1
 80126bc:	e7ca      	b.n	8012654 <__gethex+0xd4>
 80126be:	f04f 0900 	mov.w	r9, #0
 80126c2:	1cb1      	adds	r1, r6, #2
 80126c4:	e7d3      	b.n	801266e <__gethex+0xee>
 80126c6:	f04f 0901 	mov.w	r9, #1
 80126ca:	e7fa      	b.n	80126c2 <__gethex+0x142>
 80126cc:	230a      	movs	r3, #10
 80126ce:	fb03 0202 	mla	r2, r3, r2, r0
 80126d2:	3a10      	subs	r2, #16
 80126d4:	e7d4      	b.n	8012680 <__gethex+0x100>
 80126d6:	4631      	mov	r1, r6
 80126d8:	e7df      	b.n	801269a <__gethex+0x11a>
 80126da:	1bf3      	subs	r3, r6, r7
 80126dc:	3b01      	subs	r3, #1
 80126de:	4621      	mov	r1, r4
 80126e0:	2b07      	cmp	r3, #7
 80126e2:	dc0b      	bgt.n	80126fc <__gethex+0x17c>
 80126e4:	ee18 0a10 	vmov	r0, s16
 80126e8:	f000 fa96 	bl	8012c18 <_Balloc>
 80126ec:	4604      	mov	r4, r0
 80126ee:	b940      	cbnz	r0, 8012702 <__gethex+0x182>
 80126f0:	4b5d      	ldr	r3, [pc, #372]	; (8012868 <__gethex+0x2e8>)
 80126f2:	4602      	mov	r2, r0
 80126f4:	21de      	movs	r1, #222	; 0xde
 80126f6:	485d      	ldr	r0, [pc, #372]	; (801286c <__gethex+0x2ec>)
 80126f8:	f7ff f89e 	bl	8011838 <__assert_func>
 80126fc:	3101      	adds	r1, #1
 80126fe:	105b      	asrs	r3, r3, #1
 8012700:	e7ee      	b.n	80126e0 <__gethex+0x160>
 8012702:	f100 0914 	add.w	r9, r0, #20
 8012706:	f04f 0b00 	mov.w	fp, #0
 801270a:	f1ca 0301 	rsb	r3, sl, #1
 801270e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012712:	f8cd b000 	str.w	fp, [sp]
 8012716:	9306      	str	r3, [sp, #24]
 8012718:	42b7      	cmp	r7, r6
 801271a:	d340      	bcc.n	801279e <__gethex+0x21e>
 801271c:	9802      	ldr	r0, [sp, #8]
 801271e:	9b00      	ldr	r3, [sp, #0]
 8012720:	f840 3b04 	str.w	r3, [r0], #4
 8012724:	eba0 0009 	sub.w	r0, r0, r9
 8012728:	1080      	asrs	r0, r0, #2
 801272a:	0146      	lsls	r6, r0, #5
 801272c:	6120      	str	r0, [r4, #16]
 801272e:	4618      	mov	r0, r3
 8012730:	f000 fb64 	bl	8012dfc <__hi0bits>
 8012734:	1a30      	subs	r0, r6, r0
 8012736:	f8d8 6000 	ldr.w	r6, [r8]
 801273a:	42b0      	cmp	r0, r6
 801273c:	dd63      	ble.n	8012806 <__gethex+0x286>
 801273e:	1b87      	subs	r7, r0, r6
 8012740:	4639      	mov	r1, r7
 8012742:	4620      	mov	r0, r4
 8012744:	f000 ff05 	bl	8013552 <__any_on>
 8012748:	4682      	mov	sl, r0
 801274a:	b1a8      	cbz	r0, 8012778 <__gethex+0x1f8>
 801274c:	1e7b      	subs	r3, r7, #1
 801274e:	1159      	asrs	r1, r3, #5
 8012750:	f003 021f 	and.w	r2, r3, #31
 8012754:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012758:	f04f 0a01 	mov.w	sl, #1
 801275c:	fa0a f202 	lsl.w	r2, sl, r2
 8012760:	420a      	tst	r2, r1
 8012762:	d009      	beq.n	8012778 <__gethex+0x1f8>
 8012764:	4553      	cmp	r3, sl
 8012766:	dd05      	ble.n	8012774 <__gethex+0x1f4>
 8012768:	1eb9      	subs	r1, r7, #2
 801276a:	4620      	mov	r0, r4
 801276c:	f000 fef1 	bl	8013552 <__any_on>
 8012770:	2800      	cmp	r0, #0
 8012772:	d145      	bne.n	8012800 <__gethex+0x280>
 8012774:	f04f 0a02 	mov.w	sl, #2
 8012778:	4639      	mov	r1, r7
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff fe98 	bl	80124b0 <rshift>
 8012780:	443d      	add	r5, r7
 8012782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012786:	42ab      	cmp	r3, r5
 8012788:	da4c      	bge.n	8012824 <__gethex+0x2a4>
 801278a:	ee18 0a10 	vmov	r0, s16
 801278e:	4621      	mov	r1, r4
 8012790:	f000 fa82 	bl	8012c98 <_Bfree>
 8012794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012796:	2300      	movs	r3, #0
 8012798:	6013      	str	r3, [r2, #0]
 801279a:	27a3      	movs	r7, #163	; 0xa3
 801279c:	e785      	b.n	80126aa <__gethex+0x12a>
 801279e:	1e73      	subs	r3, r6, #1
 80127a0:	9a05      	ldr	r2, [sp, #20]
 80127a2:	9303      	str	r3, [sp, #12]
 80127a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127a8:	4293      	cmp	r3, r2
 80127aa:	d019      	beq.n	80127e0 <__gethex+0x260>
 80127ac:	f1bb 0f20 	cmp.w	fp, #32
 80127b0:	d107      	bne.n	80127c2 <__gethex+0x242>
 80127b2:	9b02      	ldr	r3, [sp, #8]
 80127b4:	9a00      	ldr	r2, [sp, #0]
 80127b6:	f843 2b04 	str.w	r2, [r3], #4
 80127ba:	9302      	str	r3, [sp, #8]
 80127bc:	2300      	movs	r3, #0
 80127be:	9300      	str	r3, [sp, #0]
 80127c0:	469b      	mov	fp, r3
 80127c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127c6:	f7ff fec5 	bl	8012554 <__hexdig_fun>
 80127ca:	9b00      	ldr	r3, [sp, #0]
 80127cc:	f000 000f 	and.w	r0, r0, #15
 80127d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80127d4:	4303      	orrs	r3, r0
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	f10b 0b04 	add.w	fp, fp, #4
 80127dc:	9b03      	ldr	r3, [sp, #12]
 80127de:	e00d      	b.n	80127fc <__gethex+0x27c>
 80127e0:	9b03      	ldr	r3, [sp, #12]
 80127e2:	9a06      	ldr	r2, [sp, #24]
 80127e4:	4413      	add	r3, r2
 80127e6:	42bb      	cmp	r3, r7
 80127e8:	d3e0      	bcc.n	80127ac <__gethex+0x22c>
 80127ea:	4618      	mov	r0, r3
 80127ec:	9901      	ldr	r1, [sp, #4]
 80127ee:	9307      	str	r3, [sp, #28]
 80127f0:	4652      	mov	r2, sl
 80127f2:	f7fe f902 	bl	80109fa <strncmp>
 80127f6:	9b07      	ldr	r3, [sp, #28]
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d1d7      	bne.n	80127ac <__gethex+0x22c>
 80127fc:	461e      	mov	r6, r3
 80127fe:	e78b      	b.n	8012718 <__gethex+0x198>
 8012800:	f04f 0a03 	mov.w	sl, #3
 8012804:	e7b8      	b.n	8012778 <__gethex+0x1f8>
 8012806:	da0a      	bge.n	801281e <__gethex+0x29e>
 8012808:	1a37      	subs	r7, r6, r0
 801280a:	4621      	mov	r1, r4
 801280c:	ee18 0a10 	vmov	r0, s16
 8012810:	463a      	mov	r2, r7
 8012812:	f000 fc5d 	bl	80130d0 <__lshift>
 8012816:	1bed      	subs	r5, r5, r7
 8012818:	4604      	mov	r4, r0
 801281a:	f100 0914 	add.w	r9, r0, #20
 801281e:	f04f 0a00 	mov.w	sl, #0
 8012822:	e7ae      	b.n	8012782 <__gethex+0x202>
 8012824:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012828:	42a8      	cmp	r0, r5
 801282a:	dd72      	ble.n	8012912 <__gethex+0x392>
 801282c:	1b45      	subs	r5, r0, r5
 801282e:	42ae      	cmp	r6, r5
 8012830:	dc36      	bgt.n	80128a0 <__gethex+0x320>
 8012832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012836:	2b02      	cmp	r3, #2
 8012838:	d02a      	beq.n	8012890 <__gethex+0x310>
 801283a:	2b03      	cmp	r3, #3
 801283c:	d02c      	beq.n	8012898 <__gethex+0x318>
 801283e:	2b01      	cmp	r3, #1
 8012840:	d11c      	bne.n	801287c <__gethex+0x2fc>
 8012842:	42ae      	cmp	r6, r5
 8012844:	d11a      	bne.n	801287c <__gethex+0x2fc>
 8012846:	2e01      	cmp	r6, #1
 8012848:	d112      	bne.n	8012870 <__gethex+0x2f0>
 801284a:	9a04      	ldr	r2, [sp, #16]
 801284c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012850:	6013      	str	r3, [r2, #0]
 8012852:	2301      	movs	r3, #1
 8012854:	6123      	str	r3, [r4, #16]
 8012856:	f8c9 3000 	str.w	r3, [r9]
 801285a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801285c:	2762      	movs	r7, #98	; 0x62
 801285e:	601c      	str	r4, [r3, #0]
 8012860:	e723      	b.n	80126aa <__gethex+0x12a>
 8012862:	bf00      	nop
 8012864:	080140b8 	.word	0x080140b8
 8012868:	08014040 	.word	0x08014040
 801286c:	08014051 	.word	0x08014051
 8012870:	1e71      	subs	r1, r6, #1
 8012872:	4620      	mov	r0, r4
 8012874:	f000 fe6d 	bl	8013552 <__any_on>
 8012878:	2800      	cmp	r0, #0
 801287a:	d1e6      	bne.n	801284a <__gethex+0x2ca>
 801287c:	ee18 0a10 	vmov	r0, s16
 8012880:	4621      	mov	r1, r4
 8012882:	f000 fa09 	bl	8012c98 <_Bfree>
 8012886:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012888:	2300      	movs	r3, #0
 801288a:	6013      	str	r3, [r2, #0]
 801288c:	2750      	movs	r7, #80	; 0x50
 801288e:	e70c      	b.n	80126aa <__gethex+0x12a>
 8012890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1f2      	bne.n	801287c <__gethex+0x2fc>
 8012896:	e7d8      	b.n	801284a <__gethex+0x2ca>
 8012898:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801289a:	2b00      	cmp	r3, #0
 801289c:	d1d5      	bne.n	801284a <__gethex+0x2ca>
 801289e:	e7ed      	b.n	801287c <__gethex+0x2fc>
 80128a0:	1e6f      	subs	r7, r5, #1
 80128a2:	f1ba 0f00 	cmp.w	sl, #0
 80128a6:	d131      	bne.n	801290c <__gethex+0x38c>
 80128a8:	b127      	cbz	r7, 80128b4 <__gethex+0x334>
 80128aa:	4639      	mov	r1, r7
 80128ac:	4620      	mov	r0, r4
 80128ae:	f000 fe50 	bl	8013552 <__any_on>
 80128b2:	4682      	mov	sl, r0
 80128b4:	117b      	asrs	r3, r7, #5
 80128b6:	2101      	movs	r1, #1
 80128b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80128bc:	f007 071f 	and.w	r7, r7, #31
 80128c0:	fa01 f707 	lsl.w	r7, r1, r7
 80128c4:	421f      	tst	r7, r3
 80128c6:	4629      	mov	r1, r5
 80128c8:	4620      	mov	r0, r4
 80128ca:	bf18      	it	ne
 80128cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80128d0:	1b76      	subs	r6, r6, r5
 80128d2:	f7ff fded 	bl	80124b0 <rshift>
 80128d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128da:	2702      	movs	r7, #2
 80128dc:	f1ba 0f00 	cmp.w	sl, #0
 80128e0:	d048      	beq.n	8012974 <__gethex+0x3f4>
 80128e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128e6:	2b02      	cmp	r3, #2
 80128e8:	d015      	beq.n	8012916 <__gethex+0x396>
 80128ea:	2b03      	cmp	r3, #3
 80128ec:	d017      	beq.n	801291e <__gethex+0x39e>
 80128ee:	2b01      	cmp	r3, #1
 80128f0:	d109      	bne.n	8012906 <__gethex+0x386>
 80128f2:	f01a 0f02 	tst.w	sl, #2
 80128f6:	d006      	beq.n	8012906 <__gethex+0x386>
 80128f8:	f8d9 0000 	ldr.w	r0, [r9]
 80128fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8012900:	f01a 0f01 	tst.w	sl, #1
 8012904:	d10e      	bne.n	8012924 <__gethex+0x3a4>
 8012906:	f047 0710 	orr.w	r7, r7, #16
 801290a:	e033      	b.n	8012974 <__gethex+0x3f4>
 801290c:	f04f 0a01 	mov.w	sl, #1
 8012910:	e7d0      	b.n	80128b4 <__gethex+0x334>
 8012912:	2701      	movs	r7, #1
 8012914:	e7e2      	b.n	80128dc <__gethex+0x35c>
 8012916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012918:	f1c3 0301 	rsb	r3, r3, #1
 801291c:	9315      	str	r3, [sp, #84]	; 0x54
 801291e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012920:	2b00      	cmp	r3, #0
 8012922:	d0f0      	beq.n	8012906 <__gethex+0x386>
 8012924:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012928:	f104 0314 	add.w	r3, r4, #20
 801292c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012930:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012934:	f04f 0c00 	mov.w	ip, #0
 8012938:	4618      	mov	r0, r3
 801293a:	f853 2b04 	ldr.w	r2, [r3], #4
 801293e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012942:	d01c      	beq.n	801297e <__gethex+0x3fe>
 8012944:	3201      	adds	r2, #1
 8012946:	6002      	str	r2, [r0, #0]
 8012948:	2f02      	cmp	r7, #2
 801294a:	f104 0314 	add.w	r3, r4, #20
 801294e:	d13f      	bne.n	80129d0 <__gethex+0x450>
 8012950:	f8d8 2000 	ldr.w	r2, [r8]
 8012954:	3a01      	subs	r2, #1
 8012956:	42b2      	cmp	r2, r6
 8012958:	d10a      	bne.n	8012970 <__gethex+0x3f0>
 801295a:	1171      	asrs	r1, r6, #5
 801295c:	2201      	movs	r2, #1
 801295e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012962:	f006 061f 	and.w	r6, r6, #31
 8012966:	fa02 f606 	lsl.w	r6, r2, r6
 801296a:	421e      	tst	r6, r3
 801296c:	bf18      	it	ne
 801296e:	4617      	movne	r7, r2
 8012970:	f047 0720 	orr.w	r7, r7, #32
 8012974:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012976:	601c      	str	r4, [r3, #0]
 8012978:	9b04      	ldr	r3, [sp, #16]
 801297a:	601d      	str	r5, [r3, #0]
 801297c:	e695      	b.n	80126aa <__gethex+0x12a>
 801297e:	4299      	cmp	r1, r3
 8012980:	f843 cc04 	str.w	ip, [r3, #-4]
 8012984:	d8d8      	bhi.n	8012938 <__gethex+0x3b8>
 8012986:	68a3      	ldr	r3, [r4, #8]
 8012988:	459b      	cmp	fp, r3
 801298a:	db19      	blt.n	80129c0 <__gethex+0x440>
 801298c:	6861      	ldr	r1, [r4, #4]
 801298e:	ee18 0a10 	vmov	r0, s16
 8012992:	3101      	adds	r1, #1
 8012994:	f000 f940 	bl	8012c18 <_Balloc>
 8012998:	4681      	mov	r9, r0
 801299a:	b918      	cbnz	r0, 80129a4 <__gethex+0x424>
 801299c:	4b1a      	ldr	r3, [pc, #104]	; (8012a08 <__gethex+0x488>)
 801299e:	4602      	mov	r2, r0
 80129a0:	2184      	movs	r1, #132	; 0x84
 80129a2:	e6a8      	b.n	80126f6 <__gethex+0x176>
 80129a4:	6922      	ldr	r2, [r4, #16]
 80129a6:	3202      	adds	r2, #2
 80129a8:	f104 010c 	add.w	r1, r4, #12
 80129ac:	0092      	lsls	r2, r2, #2
 80129ae:	300c      	adds	r0, #12
 80129b0:	f7fd f93c 	bl	800fc2c <memcpy>
 80129b4:	4621      	mov	r1, r4
 80129b6:	ee18 0a10 	vmov	r0, s16
 80129ba:	f000 f96d 	bl	8012c98 <_Bfree>
 80129be:	464c      	mov	r4, r9
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	1c5a      	adds	r2, r3, #1
 80129c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129c8:	6122      	str	r2, [r4, #16]
 80129ca:	2201      	movs	r2, #1
 80129cc:	615a      	str	r2, [r3, #20]
 80129ce:	e7bb      	b.n	8012948 <__gethex+0x3c8>
 80129d0:	6922      	ldr	r2, [r4, #16]
 80129d2:	455a      	cmp	r2, fp
 80129d4:	dd0b      	ble.n	80129ee <__gethex+0x46e>
 80129d6:	2101      	movs	r1, #1
 80129d8:	4620      	mov	r0, r4
 80129da:	f7ff fd69 	bl	80124b0 <rshift>
 80129de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129e2:	3501      	adds	r5, #1
 80129e4:	42ab      	cmp	r3, r5
 80129e6:	f6ff aed0 	blt.w	801278a <__gethex+0x20a>
 80129ea:	2701      	movs	r7, #1
 80129ec:	e7c0      	b.n	8012970 <__gethex+0x3f0>
 80129ee:	f016 061f 	ands.w	r6, r6, #31
 80129f2:	d0fa      	beq.n	80129ea <__gethex+0x46a>
 80129f4:	4453      	add	r3, sl
 80129f6:	f1c6 0620 	rsb	r6, r6, #32
 80129fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80129fe:	f000 f9fd 	bl	8012dfc <__hi0bits>
 8012a02:	42b0      	cmp	r0, r6
 8012a04:	dbe7      	blt.n	80129d6 <__gethex+0x456>
 8012a06:	e7f0      	b.n	80129ea <__gethex+0x46a>
 8012a08:	08014040 	.word	0x08014040

08012a0c <L_shift>:
 8012a0c:	f1c2 0208 	rsb	r2, r2, #8
 8012a10:	0092      	lsls	r2, r2, #2
 8012a12:	b570      	push	{r4, r5, r6, lr}
 8012a14:	f1c2 0620 	rsb	r6, r2, #32
 8012a18:	6843      	ldr	r3, [r0, #4]
 8012a1a:	6804      	ldr	r4, [r0, #0]
 8012a1c:	fa03 f506 	lsl.w	r5, r3, r6
 8012a20:	432c      	orrs	r4, r5
 8012a22:	40d3      	lsrs	r3, r2
 8012a24:	6004      	str	r4, [r0, #0]
 8012a26:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a2a:	4288      	cmp	r0, r1
 8012a2c:	d3f4      	bcc.n	8012a18 <L_shift+0xc>
 8012a2e:	bd70      	pop	{r4, r5, r6, pc}

08012a30 <__match>:
 8012a30:	b530      	push	{r4, r5, lr}
 8012a32:	6803      	ldr	r3, [r0, #0]
 8012a34:	3301      	adds	r3, #1
 8012a36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a3a:	b914      	cbnz	r4, 8012a42 <__match+0x12>
 8012a3c:	6003      	str	r3, [r0, #0]
 8012a3e:	2001      	movs	r0, #1
 8012a40:	bd30      	pop	{r4, r5, pc}
 8012a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a4a:	2d19      	cmp	r5, #25
 8012a4c:	bf98      	it	ls
 8012a4e:	3220      	addls	r2, #32
 8012a50:	42a2      	cmp	r2, r4
 8012a52:	d0f0      	beq.n	8012a36 <__match+0x6>
 8012a54:	2000      	movs	r0, #0
 8012a56:	e7f3      	b.n	8012a40 <__match+0x10>

08012a58 <__hexnan>:
 8012a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5c:	680b      	ldr	r3, [r1, #0]
 8012a5e:	115e      	asrs	r6, r3, #5
 8012a60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a64:	f013 031f 	ands.w	r3, r3, #31
 8012a68:	b087      	sub	sp, #28
 8012a6a:	bf18      	it	ne
 8012a6c:	3604      	addne	r6, #4
 8012a6e:	2500      	movs	r5, #0
 8012a70:	1f37      	subs	r7, r6, #4
 8012a72:	4690      	mov	r8, r2
 8012a74:	6802      	ldr	r2, [r0, #0]
 8012a76:	9301      	str	r3, [sp, #4]
 8012a78:	4682      	mov	sl, r0
 8012a7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a7e:	46b9      	mov	r9, r7
 8012a80:	463c      	mov	r4, r7
 8012a82:	9502      	str	r5, [sp, #8]
 8012a84:	46ab      	mov	fp, r5
 8012a86:	7851      	ldrb	r1, [r2, #1]
 8012a88:	1c53      	adds	r3, r2, #1
 8012a8a:	9303      	str	r3, [sp, #12]
 8012a8c:	b341      	cbz	r1, 8012ae0 <__hexnan+0x88>
 8012a8e:	4608      	mov	r0, r1
 8012a90:	9205      	str	r2, [sp, #20]
 8012a92:	9104      	str	r1, [sp, #16]
 8012a94:	f7ff fd5e 	bl	8012554 <__hexdig_fun>
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	d14f      	bne.n	8012b3c <__hexnan+0xe4>
 8012a9c:	9904      	ldr	r1, [sp, #16]
 8012a9e:	9a05      	ldr	r2, [sp, #20]
 8012aa0:	2920      	cmp	r1, #32
 8012aa2:	d818      	bhi.n	8012ad6 <__hexnan+0x7e>
 8012aa4:	9b02      	ldr	r3, [sp, #8]
 8012aa6:	459b      	cmp	fp, r3
 8012aa8:	dd13      	ble.n	8012ad2 <__hexnan+0x7a>
 8012aaa:	454c      	cmp	r4, r9
 8012aac:	d206      	bcs.n	8012abc <__hexnan+0x64>
 8012aae:	2d07      	cmp	r5, #7
 8012ab0:	dc04      	bgt.n	8012abc <__hexnan+0x64>
 8012ab2:	462a      	mov	r2, r5
 8012ab4:	4649      	mov	r1, r9
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f7ff ffa8 	bl	8012a0c <L_shift>
 8012abc:	4544      	cmp	r4, r8
 8012abe:	d950      	bls.n	8012b62 <__hexnan+0x10a>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	f1a4 0904 	sub.w	r9, r4, #4
 8012ac6:	f844 3c04 	str.w	r3, [r4, #-4]
 8012aca:	f8cd b008 	str.w	fp, [sp, #8]
 8012ace:	464c      	mov	r4, r9
 8012ad0:	461d      	mov	r5, r3
 8012ad2:	9a03      	ldr	r2, [sp, #12]
 8012ad4:	e7d7      	b.n	8012a86 <__hexnan+0x2e>
 8012ad6:	2929      	cmp	r1, #41	; 0x29
 8012ad8:	d156      	bne.n	8012b88 <__hexnan+0x130>
 8012ada:	3202      	adds	r2, #2
 8012adc:	f8ca 2000 	str.w	r2, [sl]
 8012ae0:	f1bb 0f00 	cmp.w	fp, #0
 8012ae4:	d050      	beq.n	8012b88 <__hexnan+0x130>
 8012ae6:	454c      	cmp	r4, r9
 8012ae8:	d206      	bcs.n	8012af8 <__hexnan+0xa0>
 8012aea:	2d07      	cmp	r5, #7
 8012aec:	dc04      	bgt.n	8012af8 <__hexnan+0xa0>
 8012aee:	462a      	mov	r2, r5
 8012af0:	4649      	mov	r1, r9
 8012af2:	4620      	mov	r0, r4
 8012af4:	f7ff ff8a 	bl	8012a0c <L_shift>
 8012af8:	4544      	cmp	r4, r8
 8012afa:	d934      	bls.n	8012b66 <__hexnan+0x10e>
 8012afc:	f1a8 0204 	sub.w	r2, r8, #4
 8012b00:	4623      	mov	r3, r4
 8012b02:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b06:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b0a:	429f      	cmp	r7, r3
 8012b0c:	d2f9      	bcs.n	8012b02 <__hexnan+0xaa>
 8012b0e:	1b3b      	subs	r3, r7, r4
 8012b10:	f023 0303 	bic.w	r3, r3, #3
 8012b14:	3304      	adds	r3, #4
 8012b16:	3401      	adds	r4, #1
 8012b18:	3e03      	subs	r6, #3
 8012b1a:	42b4      	cmp	r4, r6
 8012b1c:	bf88      	it	hi
 8012b1e:	2304      	movhi	r3, #4
 8012b20:	4443      	add	r3, r8
 8012b22:	2200      	movs	r2, #0
 8012b24:	f843 2b04 	str.w	r2, [r3], #4
 8012b28:	429f      	cmp	r7, r3
 8012b2a:	d2fb      	bcs.n	8012b24 <__hexnan+0xcc>
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	b91b      	cbnz	r3, 8012b38 <__hexnan+0xe0>
 8012b30:	4547      	cmp	r7, r8
 8012b32:	d127      	bne.n	8012b84 <__hexnan+0x12c>
 8012b34:	2301      	movs	r3, #1
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	2005      	movs	r0, #5
 8012b3a:	e026      	b.n	8012b8a <__hexnan+0x132>
 8012b3c:	3501      	adds	r5, #1
 8012b3e:	2d08      	cmp	r5, #8
 8012b40:	f10b 0b01 	add.w	fp, fp, #1
 8012b44:	dd06      	ble.n	8012b54 <__hexnan+0xfc>
 8012b46:	4544      	cmp	r4, r8
 8012b48:	d9c3      	bls.n	8012ad2 <__hexnan+0x7a>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b50:	2501      	movs	r5, #1
 8012b52:	3c04      	subs	r4, #4
 8012b54:	6822      	ldr	r2, [r4, #0]
 8012b56:	f000 000f 	and.w	r0, r0, #15
 8012b5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b5e:	6022      	str	r2, [r4, #0]
 8012b60:	e7b7      	b.n	8012ad2 <__hexnan+0x7a>
 8012b62:	2508      	movs	r5, #8
 8012b64:	e7b5      	b.n	8012ad2 <__hexnan+0x7a>
 8012b66:	9b01      	ldr	r3, [sp, #4]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d0df      	beq.n	8012b2c <__hexnan+0xd4>
 8012b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b70:	f1c3 0320 	rsb	r3, r3, #32
 8012b74:	fa22 f303 	lsr.w	r3, r2, r3
 8012b78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b7c:	401a      	ands	r2, r3
 8012b7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012b82:	e7d3      	b.n	8012b2c <__hexnan+0xd4>
 8012b84:	3f04      	subs	r7, #4
 8012b86:	e7d1      	b.n	8012b2c <__hexnan+0xd4>
 8012b88:	2004      	movs	r0, #4
 8012b8a:	b007      	add	sp, #28
 8012b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b90 <_isatty_r>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	4d06      	ldr	r5, [pc, #24]	; (8012bac <_isatty_r+0x1c>)
 8012b94:	2300      	movs	r3, #0
 8012b96:	4604      	mov	r4, r0
 8012b98:	4608      	mov	r0, r1
 8012b9a:	602b      	str	r3, [r5, #0]
 8012b9c:	f7ef fb61 	bl	8002262 <_isatty>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d102      	bne.n	8012baa <_isatty_r+0x1a>
 8012ba4:	682b      	ldr	r3, [r5, #0]
 8012ba6:	b103      	cbz	r3, 8012baa <_isatty_r+0x1a>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	240011d4 	.word	0x240011d4

08012bb0 <_localeconv_r>:
 8012bb0:	4800      	ldr	r0, [pc, #0]	; (8012bb4 <_localeconv_r+0x4>)
 8012bb2:	4770      	bx	lr
 8012bb4:	24000168 	.word	0x24000168

08012bb8 <_lseek_r>:
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	4d07      	ldr	r5, [pc, #28]	; (8012bd8 <_lseek_r+0x20>)
 8012bbc:	4604      	mov	r4, r0
 8012bbe:	4608      	mov	r0, r1
 8012bc0:	4611      	mov	r1, r2
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	602a      	str	r2, [r5, #0]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	f7ef fb56 	bl	8002278 <_lseek>
 8012bcc:	1c43      	adds	r3, r0, #1
 8012bce:	d102      	bne.n	8012bd6 <_lseek_r+0x1e>
 8012bd0:	682b      	ldr	r3, [r5, #0]
 8012bd2:	b103      	cbz	r3, 8012bd6 <_lseek_r+0x1e>
 8012bd4:	6023      	str	r3, [r4, #0]
 8012bd6:	bd38      	pop	{r3, r4, r5, pc}
 8012bd8:	240011d4 	.word	0x240011d4

08012bdc <__ascii_mbtowc>:
 8012bdc:	b082      	sub	sp, #8
 8012bde:	b901      	cbnz	r1, 8012be2 <__ascii_mbtowc+0x6>
 8012be0:	a901      	add	r1, sp, #4
 8012be2:	b142      	cbz	r2, 8012bf6 <__ascii_mbtowc+0x1a>
 8012be4:	b14b      	cbz	r3, 8012bfa <__ascii_mbtowc+0x1e>
 8012be6:	7813      	ldrb	r3, [r2, #0]
 8012be8:	600b      	str	r3, [r1, #0]
 8012bea:	7812      	ldrb	r2, [r2, #0]
 8012bec:	1e10      	subs	r0, r2, #0
 8012bee:	bf18      	it	ne
 8012bf0:	2001      	movne	r0, #1
 8012bf2:	b002      	add	sp, #8
 8012bf4:	4770      	bx	lr
 8012bf6:	4610      	mov	r0, r2
 8012bf8:	e7fb      	b.n	8012bf2 <__ascii_mbtowc+0x16>
 8012bfa:	f06f 0001 	mvn.w	r0, #1
 8012bfe:	e7f8      	b.n	8012bf2 <__ascii_mbtowc+0x16>

08012c00 <__malloc_lock>:
 8012c00:	4801      	ldr	r0, [pc, #4]	; (8012c08 <__malloc_lock+0x8>)
 8012c02:	f7fc bf9c 	b.w	800fb3e <__retarget_lock_acquire_recursive>
 8012c06:	bf00      	nop
 8012c08:	240011c8 	.word	0x240011c8

08012c0c <__malloc_unlock>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	; (8012c14 <__malloc_unlock+0x8>)
 8012c0e:	f7fc bf97 	b.w	800fb40 <__retarget_lock_release_recursive>
 8012c12:	bf00      	nop
 8012c14:	240011c8 	.word	0x240011c8

08012c18 <_Balloc>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	460d      	mov	r5, r1
 8012c20:	b976      	cbnz	r6, 8012c40 <_Balloc+0x28>
 8012c22:	2010      	movs	r0, #16
 8012c24:	f7fc fff2 	bl	800fc0c <malloc>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	6260      	str	r0, [r4, #36]	; 0x24
 8012c2c:	b920      	cbnz	r0, 8012c38 <_Balloc+0x20>
 8012c2e:	4b18      	ldr	r3, [pc, #96]	; (8012c90 <_Balloc+0x78>)
 8012c30:	4818      	ldr	r0, [pc, #96]	; (8012c94 <_Balloc+0x7c>)
 8012c32:	2166      	movs	r1, #102	; 0x66
 8012c34:	f7fe fe00 	bl	8011838 <__assert_func>
 8012c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c3c:	6006      	str	r6, [r0, #0]
 8012c3e:	60c6      	str	r6, [r0, #12]
 8012c40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c42:	68f3      	ldr	r3, [r6, #12]
 8012c44:	b183      	cbz	r3, 8012c68 <_Balloc+0x50>
 8012c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c48:	68db      	ldr	r3, [r3, #12]
 8012c4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c4e:	b9b8      	cbnz	r0, 8012c80 <_Balloc+0x68>
 8012c50:	2101      	movs	r1, #1
 8012c52:	fa01 f605 	lsl.w	r6, r1, r5
 8012c56:	1d72      	adds	r2, r6, #5
 8012c58:	0092      	lsls	r2, r2, #2
 8012c5a:	4620      	mov	r0, r4
 8012c5c:	f000 fc9a 	bl	8013594 <_calloc_r>
 8012c60:	b160      	cbz	r0, 8012c7c <_Balloc+0x64>
 8012c62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012c66:	e00e      	b.n	8012c86 <_Balloc+0x6e>
 8012c68:	2221      	movs	r2, #33	; 0x21
 8012c6a:	2104      	movs	r1, #4
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f000 fc91 	bl	8013594 <_calloc_r>
 8012c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c74:	60f0      	str	r0, [r6, #12]
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d1e4      	bne.n	8012c46 <_Balloc+0x2e>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	bd70      	pop	{r4, r5, r6, pc}
 8012c80:	6802      	ldr	r2, [r0, #0]
 8012c82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c86:	2300      	movs	r3, #0
 8012c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c8c:	e7f7      	b.n	8012c7e <_Balloc+0x66>
 8012c8e:	bf00      	nop
 8012c90:	08013f28 	.word	0x08013f28
 8012c94:	080140cc 	.word	0x080140cc

08012c98 <_Bfree>:
 8012c98:	b570      	push	{r4, r5, r6, lr}
 8012c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c9c:	4605      	mov	r5, r0
 8012c9e:	460c      	mov	r4, r1
 8012ca0:	b976      	cbnz	r6, 8012cc0 <_Bfree+0x28>
 8012ca2:	2010      	movs	r0, #16
 8012ca4:	f7fc ffb2 	bl	800fc0c <malloc>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	6268      	str	r0, [r5, #36]	; 0x24
 8012cac:	b920      	cbnz	r0, 8012cb8 <_Bfree+0x20>
 8012cae:	4b09      	ldr	r3, [pc, #36]	; (8012cd4 <_Bfree+0x3c>)
 8012cb0:	4809      	ldr	r0, [pc, #36]	; (8012cd8 <_Bfree+0x40>)
 8012cb2:	218a      	movs	r1, #138	; 0x8a
 8012cb4:	f7fe fdc0 	bl	8011838 <__assert_func>
 8012cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cbc:	6006      	str	r6, [r0, #0]
 8012cbe:	60c6      	str	r6, [r0, #12]
 8012cc0:	b13c      	cbz	r4, 8012cd2 <_Bfree+0x3a>
 8012cc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012cc4:	6862      	ldr	r2, [r4, #4]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ccc:	6021      	str	r1, [r4, #0]
 8012cce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012cd2:	bd70      	pop	{r4, r5, r6, pc}
 8012cd4:	08013f28 	.word	0x08013f28
 8012cd8:	080140cc 	.word	0x080140cc

08012cdc <__multadd>:
 8012cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce0:	690d      	ldr	r5, [r1, #16]
 8012ce2:	4607      	mov	r7, r0
 8012ce4:	460c      	mov	r4, r1
 8012ce6:	461e      	mov	r6, r3
 8012ce8:	f101 0c14 	add.w	ip, r1, #20
 8012cec:	2000      	movs	r0, #0
 8012cee:	f8dc 3000 	ldr.w	r3, [ip]
 8012cf2:	b299      	uxth	r1, r3
 8012cf4:	fb02 6101 	mla	r1, r2, r1, r6
 8012cf8:	0c1e      	lsrs	r6, r3, #16
 8012cfa:	0c0b      	lsrs	r3, r1, #16
 8012cfc:	fb02 3306 	mla	r3, r2, r6, r3
 8012d00:	b289      	uxth	r1, r1
 8012d02:	3001      	adds	r0, #1
 8012d04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d08:	4285      	cmp	r5, r0
 8012d0a:	f84c 1b04 	str.w	r1, [ip], #4
 8012d0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d12:	dcec      	bgt.n	8012cee <__multadd+0x12>
 8012d14:	b30e      	cbz	r6, 8012d5a <__multadd+0x7e>
 8012d16:	68a3      	ldr	r3, [r4, #8]
 8012d18:	42ab      	cmp	r3, r5
 8012d1a:	dc19      	bgt.n	8012d50 <__multadd+0x74>
 8012d1c:	6861      	ldr	r1, [r4, #4]
 8012d1e:	4638      	mov	r0, r7
 8012d20:	3101      	adds	r1, #1
 8012d22:	f7ff ff79 	bl	8012c18 <_Balloc>
 8012d26:	4680      	mov	r8, r0
 8012d28:	b928      	cbnz	r0, 8012d36 <__multadd+0x5a>
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	4b0c      	ldr	r3, [pc, #48]	; (8012d60 <__multadd+0x84>)
 8012d2e:	480d      	ldr	r0, [pc, #52]	; (8012d64 <__multadd+0x88>)
 8012d30:	21b5      	movs	r1, #181	; 0xb5
 8012d32:	f7fe fd81 	bl	8011838 <__assert_func>
 8012d36:	6922      	ldr	r2, [r4, #16]
 8012d38:	3202      	adds	r2, #2
 8012d3a:	f104 010c 	add.w	r1, r4, #12
 8012d3e:	0092      	lsls	r2, r2, #2
 8012d40:	300c      	adds	r0, #12
 8012d42:	f7fc ff73 	bl	800fc2c <memcpy>
 8012d46:	4621      	mov	r1, r4
 8012d48:	4638      	mov	r0, r7
 8012d4a:	f7ff ffa5 	bl	8012c98 <_Bfree>
 8012d4e:	4644      	mov	r4, r8
 8012d50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012d54:	3501      	adds	r5, #1
 8012d56:	615e      	str	r6, [r3, #20]
 8012d58:	6125      	str	r5, [r4, #16]
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	08014040 	.word	0x08014040
 8012d64:	080140cc 	.word	0x080140cc

08012d68 <__s2b>:
 8012d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d6c:	460c      	mov	r4, r1
 8012d6e:	4615      	mov	r5, r2
 8012d70:	461f      	mov	r7, r3
 8012d72:	2209      	movs	r2, #9
 8012d74:	3308      	adds	r3, #8
 8012d76:	4606      	mov	r6, r0
 8012d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d7c:	2100      	movs	r1, #0
 8012d7e:	2201      	movs	r2, #1
 8012d80:	429a      	cmp	r2, r3
 8012d82:	db09      	blt.n	8012d98 <__s2b+0x30>
 8012d84:	4630      	mov	r0, r6
 8012d86:	f7ff ff47 	bl	8012c18 <_Balloc>
 8012d8a:	b940      	cbnz	r0, 8012d9e <__s2b+0x36>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	4b19      	ldr	r3, [pc, #100]	; (8012df4 <__s2b+0x8c>)
 8012d90:	4819      	ldr	r0, [pc, #100]	; (8012df8 <__s2b+0x90>)
 8012d92:	21ce      	movs	r1, #206	; 0xce
 8012d94:	f7fe fd50 	bl	8011838 <__assert_func>
 8012d98:	0052      	lsls	r2, r2, #1
 8012d9a:	3101      	adds	r1, #1
 8012d9c:	e7f0      	b.n	8012d80 <__s2b+0x18>
 8012d9e:	9b08      	ldr	r3, [sp, #32]
 8012da0:	6143      	str	r3, [r0, #20]
 8012da2:	2d09      	cmp	r5, #9
 8012da4:	f04f 0301 	mov.w	r3, #1
 8012da8:	6103      	str	r3, [r0, #16]
 8012daa:	dd16      	ble.n	8012dda <__s2b+0x72>
 8012dac:	f104 0909 	add.w	r9, r4, #9
 8012db0:	46c8      	mov	r8, r9
 8012db2:	442c      	add	r4, r5
 8012db4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012db8:	4601      	mov	r1, r0
 8012dba:	3b30      	subs	r3, #48	; 0x30
 8012dbc:	220a      	movs	r2, #10
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f7ff ff8c 	bl	8012cdc <__multadd>
 8012dc4:	45a0      	cmp	r8, r4
 8012dc6:	d1f5      	bne.n	8012db4 <__s2b+0x4c>
 8012dc8:	f1a5 0408 	sub.w	r4, r5, #8
 8012dcc:	444c      	add	r4, r9
 8012dce:	1b2d      	subs	r5, r5, r4
 8012dd0:	1963      	adds	r3, r4, r5
 8012dd2:	42bb      	cmp	r3, r7
 8012dd4:	db04      	blt.n	8012de0 <__s2b+0x78>
 8012dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dda:	340a      	adds	r4, #10
 8012ddc:	2509      	movs	r5, #9
 8012dde:	e7f6      	b.n	8012dce <__s2b+0x66>
 8012de0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012de4:	4601      	mov	r1, r0
 8012de6:	3b30      	subs	r3, #48	; 0x30
 8012de8:	220a      	movs	r2, #10
 8012dea:	4630      	mov	r0, r6
 8012dec:	f7ff ff76 	bl	8012cdc <__multadd>
 8012df0:	e7ee      	b.n	8012dd0 <__s2b+0x68>
 8012df2:	bf00      	nop
 8012df4:	08014040 	.word	0x08014040
 8012df8:	080140cc 	.word	0x080140cc

08012dfc <__hi0bits>:
 8012dfc:	0c03      	lsrs	r3, r0, #16
 8012dfe:	041b      	lsls	r3, r3, #16
 8012e00:	b9d3      	cbnz	r3, 8012e38 <__hi0bits+0x3c>
 8012e02:	0400      	lsls	r0, r0, #16
 8012e04:	2310      	movs	r3, #16
 8012e06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e0a:	bf04      	itt	eq
 8012e0c:	0200      	lsleq	r0, r0, #8
 8012e0e:	3308      	addeq	r3, #8
 8012e10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e14:	bf04      	itt	eq
 8012e16:	0100      	lsleq	r0, r0, #4
 8012e18:	3304      	addeq	r3, #4
 8012e1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e1e:	bf04      	itt	eq
 8012e20:	0080      	lsleq	r0, r0, #2
 8012e22:	3302      	addeq	r3, #2
 8012e24:	2800      	cmp	r0, #0
 8012e26:	db05      	blt.n	8012e34 <__hi0bits+0x38>
 8012e28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e2c:	f103 0301 	add.w	r3, r3, #1
 8012e30:	bf08      	it	eq
 8012e32:	2320      	moveq	r3, #32
 8012e34:	4618      	mov	r0, r3
 8012e36:	4770      	bx	lr
 8012e38:	2300      	movs	r3, #0
 8012e3a:	e7e4      	b.n	8012e06 <__hi0bits+0xa>

08012e3c <__lo0bits>:
 8012e3c:	6803      	ldr	r3, [r0, #0]
 8012e3e:	f013 0207 	ands.w	r2, r3, #7
 8012e42:	4601      	mov	r1, r0
 8012e44:	d00b      	beq.n	8012e5e <__lo0bits+0x22>
 8012e46:	07da      	lsls	r2, r3, #31
 8012e48:	d423      	bmi.n	8012e92 <__lo0bits+0x56>
 8012e4a:	0798      	lsls	r0, r3, #30
 8012e4c:	bf49      	itett	mi
 8012e4e:	085b      	lsrmi	r3, r3, #1
 8012e50:	089b      	lsrpl	r3, r3, #2
 8012e52:	2001      	movmi	r0, #1
 8012e54:	600b      	strmi	r3, [r1, #0]
 8012e56:	bf5c      	itt	pl
 8012e58:	600b      	strpl	r3, [r1, #0]
 8012e5a:	2002      	movpl	r0, #2
 8012e5c:	4770      	bx	lr
 8012e5e:	b298      	uxth	r0, r3
 8012e60:	b9a8      	cbnz	r0, 8012e8e <__lo0bits+0x52>
 8012e62:	0c1b      	lsrs	r3, r3, #16
 8012e64:	2010      	movs	r0, #16
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	b90a      	cbnz	r2, 8012e6e <__lo0bits+0x32>
 8012e6a:	3008      	adds	r0, #8
 8012e6c:	0a1b      	lsrs	r3, r3, #8
 8012e6e:	071a      	lsls	r2, r3, #28
 8012e70:	bf04      	itt	eq
 8012e72:	091b      	lsreq	r3, r3, #4
 8012e74:	3004      	addeq	r0, #4
 8012e76:	079a      	lsls	r2, r3, #30
 8012e78:	bf04      	itt	eq
 8012e7a:	089b      	lsreq	r3, r3, #2
 8012e7c:	3002      	addeq	r0, #2
 8012e7e:	07da      	lsls	r2, r3, #31
 8012e80:	d403      	bmi.n	8012e8a <__lo0bits+0x4e>
 8012e82:	085b      	lsrs	r3, r3, #1
 8012e84:	f100 0001 	add.w	r0, r0, #1
 8012e88:	d005      	beq.n	8012e96 <__lo0bits+0x5a>
 8012e8a:	600b      	str	r3, [r1, #0]
 8012e8c:	4770      	bx	lr
 8012e8e:	4610      	mov	r0, r2
 8012e90:	e7e9      	b.n	8012e66 <__lo0bits+0x2a>
 8012e92:	2000      	movs	r0, #0
 8012e94:	4770      	bx	lr
 8012e96:	2020      	movs	r0, #32
 8012e98:	4770      	bx	lr
	...

08012e9c <__i2b>:
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	460c      	mov	r4, r1
 8012ea0:	2101      	movs	r1, #1
 8012ea2:	f7ff feb9 	bl	8012c18 <_Balloc>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	b928      	cbnz	r0, 8012eb6 <__i2b+0x1a>
 8012eaa:	4b05      	ldr	r3, [pc, #20]	; (8012ec0 <__i2b+0x24>)
 8012eac:	4805      	ldr	r0, [pc, #20]	; (8012ec4 <__i2b+0x28>)
 8012eae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012eb2:	f7fe fcc1 	bl	8011838 <__assert_func>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	6144      	str	r4, [r0, #20]
 8012eba:	6103      	str	r3, [r0, #16]
 8012ebc:	bd10      	pop	{r4, pc}
 8012ebe:	bf00      	nop
 8012ec0:	08014040 	.word	0x08014040
 8012ec4:	080140cc 	.word	0x080140cc

08012ec8 <__multiply>:
 8012ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ecc:	4691      	mov	r9, r2
 8012ece:	690a      	ldr	r2, [r1, #16]
 8012ed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	bfb8      	it	lt
 8012ed8:	460b      	movlt	r3, r1
 8012eda:	460c      	mov	r4, r1
 8012edc:	bfbc      	itt	lt
 8012ede:	464c      	movlt	r4, r9
 8012ee0:	4699      	movlt	r9, r3
 8012ee2:	6927      	ldr	r7, [r4, #16]
 8012ee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	6861      	ldr	r1, [r4, #4]
 8012eec:	eb07 060a 	add.w	r6, r7, sl
 8012ef0:	42b3      	cmp	r3, r6
 8012ef2:	b085      	sub	sp, #20
 8012ef4:	bfb8      	it	lt
 8012ef6:	3101      	addlt	r1, #1
 8012ef8:	f7ff fe8e 	bl	8012c18 <_Balloc>
 8012efc:	b930      	cbnz	r0, 8012f0c <__multiply+0x44>
 8012efe:	4602      	mov	r2, r0
 8012f00:	4b44      	ldr	r3, [pc, #272]	; (8013014 <__multiply+0x14c>)
 8012f02:	4845      	ldr	r0, [pc, #276]	; (8013018 <__multiply+0x150>)
 8012f04:	f240 115d 	movw	r1, #349	; 0x15d
 8012f08:	f7fe fc96 	bl	8011838 <__assert_func>
 8012f0c:	f100 0514 	add.w	r5, r0, #20
 8012f10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f14:	462b      	mov	r3, r5
 8012f16:	2200      	movs	r2, #0
 8012f18:	4543      	cmp	r3, r8
 8012f1a:	d321      	bcc.n	8012f60 <__multiply+0x98>
 8012f1c:	f104 0314 	add.w	r3, r4, #20
 8012f20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f24:	f109 0314 	add.w	r3, r9, #20
 8012f28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f2c:	9202      	str	r2, [sp, #8]
 8012f2e:	1b3a      	subs	r2, r7, r4
 8012f30:	3a15      	subs	r2, #21
 8012f32:	f022 0203 	bic.w	r2, r2, #3
 8012f36:	3204      	adds	r2, #4
 8012f38:	f104 0115 	add.w	r1, r4, #21
 8012f3c:	428f      	cmp	r7, r1
 8012f3e:	bf38      	it	cc
 8012f40:	2204      	movcc	r2, #4
 8012f42:	9201      	str	r2, [sp, #4]
 8012f44:	9a02      	ldr	r2, [sp, #8]
 8012f46:	9303      	str	r3, [sp, #12]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d80c      	bhi.n	8012f66 <__multiply+0x9e>
 8012f4c:	2e00      	cmp	r6, #0
 8012f4e:	dd03      	ble.n	8012f58 <__multiply+0x90>
 8012f50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d05a      	beq.n	801300e <__multiply+0x146>
 8012f58:	6106      	str	r6, [r0, #16]
 8012f5a:	b005      	add	sp, #20
 8012f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f60:	f843 2b04 	str.w	r2, [r3], #4
 8012f64:	e7d8      	b.n	8012f18 <__multiply+0x50>
 8012f66:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f6a:	f1ba 0f00 	cmp.w	sl, #0
 8012f6e:	d024      	beq.n	8012fba <__multiply+0xf2>
 8012f70:	f104 0e14 	add.w	lr, r4, #20
 8012f74:	46a9      	mov	r9, r5
 8012f76:	f04f 0c00 	mov.w	ip, #0
 8012f7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012f7e:	f8d9 1000 	ldr.w	r1, [r9]
 8012f82:	fa1f fb82 	uxth.w	fp, r2
 8012f86:	b289      	uxth	r1, r1
 8012f88:	fb0a 110b 	mla	r1, sl, fp, r1
 8012f8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012f90:	f8d9 2000 	ldr.w	r2, [r9]
 8012f94:	4461      	add	r1, ip
 8012f96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8012f9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012fa2:	b289      	uxth	r1, r1
 8012fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012fa8:	4577      	cmp	r7, lr
 8012faa:	f849 1b04 	str.w	r1, [r9], #4
 8012fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012fb2:	d8e2      	bhi.n	8012f7a <__multiply+0xb2>
 8012fb4:	9a01      	ldr	r2, [sp, #4]
 8012fb6:	f845 c002 	str.w	ip, [r5, r2]
 8012fba:	9a03      	ldr	r2, [sp, #12]
 8012fbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	f1b9 0f00 	cmp.w	r9, #0
 8012fc6:	d020      	beq.n	801300a <__multiply+0x142>
 8012fc8:	6829      	ldr	r1, [r5, #0]
 8012fca:	f104 0c14 	add.w	ip, r4, #20
 8012fce:	46ae      	mov	lr, r5
 8012fd0:	f04f 0a00 	mov.w	sl, #0
 8012fd4:	f8bc b000 	ldrh.w	fp, [ip]
 8012fd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012fdc:	fb09 220b 	mla	r2, r9, fp, r2
 8012fe0:	4492      	add	sl, r2
 8012fe2:	b289      	uxth	r1, r1
 8012fe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012fe8:	f84e 1b04 	str.w	r1, [lr], #4
 8012fec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012ff0:	f8be 1000 	ldrh.w	r1, [lr]
 8012ff4:	0c12      	lsrs	r2, r2, #16
 8012ff6:	fb09 1102 	mla	r1, r9, r2, r1
 8012ffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012ffe:	4567      	cmp	r7, ip
 8013000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013004:	d8e6      	bhi.n	8012fd4 <__multiply+0x10c>
 8013006:	9a01      	ldr	r2, [sp, #4]
 8013008:	50a9      	str	r1, [r5, r2]
 801300a:	3504      	adds	r5, #4
 801300c:	e79a      	b.n	8012f44 <__multiply+0x7c>
 801300e:	3e01      	subs	r6, #1
 8013010:	e79c      	b.n	8012f4c <__multiply+0x84>
 8013012:	bf00      	nop
 8013014:	08014040 	.word	0x08014040
 8013018:	080140cc 	.word	0x080140cc

0801301c <__pow5mult>:
 801301c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013020:	4615      	mov	r5, r2
 8013022:	f012 0203 	ands.w	r2, r2, #3
 8013026:	4606      	mov	r6, r0
 8013028:	460f      	mov	r7, r1
 801302a:	d007      	beq.n	801303c <__pow5mult+0x20>
 801302c:	4c25      	ldr	r4, [pc, #148]	; (80130c4 <__pow5mult+0xa8>)
 801302e:	3a01      	subs	r2, #1
 8013030:	2300      	movs	r3, #0
 8013032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013036:	f7ff fe51 	bl	8012cdc <__multadd>
 801303a:	4607      	mov	r7, r0
 801303c:	10ad      	asrs	r5, r5, #2
 801303e:	d03d      	beq.n	80130bc <__pow5mult+0xa0>
 8013040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013042:	b97c      	cbnz	r4, 8013064 <__pow5mult+0x48>
 8013044:	2010      	movs	r0, #16
 8013046:	f7fc fde1 	bl	800fc0c <malloc>
 801304a:	4602      	mov	r2, r0
 801304c:	6270      	str	r0, [r6, #36]	; 0x24
 801304e:	b928      	cbnz	r0, 801305c <__pow5mult+0x40>
 8013050:	4b1d      	ldr	r3, [pc, #116]	; (80130c8 <__pow5mult+0xac>)
 8013052:	481e      	ldr	r0, [pc, #120]	; (80130cc <__pow5mult+0xb0>)
 8013054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013058:	f7fe fbee 	bl	8011838 <__assert_func>
 801305c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013060:	6004      	str	r4, [r0, #0]
 8013062:	60c4      	str	r4, [r0, #12]
 8013064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801306c:	b94c      	cbnz	r4, 8013082 <__pow5mult+0x66>
 801306e:	f240 2171 	movw	r1, #625	; 0x271
 8013072:	4630      	mov	r0, r6
 8013074:	f7ff ff12 	bl	8012e9c <__i2b>
 8013078:	2300      	movs	r3, #0
 801307a:	f8c8 0008 	str.w	r0, [r8, #8]
 801307e:	4604      	mov	r4, r0
 8013080:	6003      	str	r3, [r0, #0]
 8013082:	f04f 0900 	mov.w	r9, #0
 8013086:	07eb      	lsls	r3, r5, #31
 8013088:	d50a      	bpl.n	80130a0 <__pow5mult+0x84>
 801308a:	4639      	mov	r1, r7
 801308c:	4622      	mov	r2, r4
 801308e:	4630      	mov	r0, r6
 8013090:	f7ff ff1a 	bl	8012ec8 <__multiply>
 8013094:	4639      	mov	r1, r7
 8013096:	4680      	mov	r8, r0
 8013098:	4630      	mov	r0, r6
 801309a:	f7ff fdfd 	bl	8012c98 <_Bfree>
 801309e:	4647      	mov	r7, r8
 80130a0:	106d      	asrs	r5, r5, #1
 80130a2:	d00b      	beq.n	80130bc <__pow5mult+0xa0>
 80130a4:	6820      	ldr	r0, [r4, #0]
 80130a6:	b938      	cbnz	r0, 80130b8 <__pow5mult+0x9c>
 80130a8:	4622      	mov	r2, r4
 80130aa:	4621      	mov	r1, r4
 80130ac:	4630      	mov	r0, r6
 80130ae:	f7ff ff0b 	bl	8012ec8 <__multiply>
 80130b2:	6020      	str	r0, [r4, #0]
 80130b4:	f8c0 9000 	str.w	r9, [r0]
 80130b8:	4604      	mov	r4, r0
 80130ba:	e7e4      	b.n	8013086 <__pow5mult+0x6a>
 80130bc:	4638      	mov	r0, r7
 80130be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130c2:	bf00      	nop
 80130c4:	08014218 	.word	0x08014218
 80130c8:	08013f28 	.word	0x08013f28
 80130cc:	080140cc 	.word	0x080140cc

080130d0 <__lshift>:
 80130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130d4:	460c      	mov	r4, r1
 80130d6:	6849      	ldr	r1, [r1, #4]
 80130d8:	6923      	ldr	r3, [r4, #16]
 80130da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130de:	68a3      	ldr	r3, [r4, #8]
 80130e0:	4607      	mov	r7, r0
 80130e2:	4691      	mov	r9, r2
 80130e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130e8:	f108 0601 	add.w	r6, r8, #1
 80130ec:	42b3      	cmp	r3, r6
 80130ee:	db0b      	blt.n	8013108 <__lshift+0x38>
 80130f0:	4638      	mov	r0, r7
 80130f2:	f7ff fd91 	bl	8012c18 <_Balloc>
 80130f6:	4605      	mov	r5, r0
 80130f8:	b948      	cbnz	r0, 801310e <__lshift+0x3e>
 80130fa:	4602      	mov	r2, r0
 80130fc:	4b2a      	ldr	r3, [pc, #168]	; (80131a8 <__lshift+0xd8>)
 80130fe:	482b      	ldr	r0, [pc, #172]	; (80131ac <__lshift+0xdc>)
 8013100:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013104:	f7fe fb98 	bl	8011838 <__assert_func>
 8013108:	3101      	adds	r1, #1
 801310a:	005b      	lsls	r3, r3, #1
 801310c:	e7ee      	b.n	80130ec <__lshift+0x1c>
 801310e:	2300      	movs	r3, #0
 8013110:	f100 0114 	add.w	r1, r0, #20
 8013114:	f100 0210 	add.w	r2, r0, #16
 8013118:	4618      	mov	r0, r3
 801311a:	4553      	cmp	r3, sl
 801311c:	db37      	blt.n	801318e <__lshift+0xbe>
 801311e:	6920      	ldr	r0, [r4, #16]
 8013120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013124:	f104 0314 	add.w	r3, r4, #20
 8013128:	f019 091f 	ands.w	r9, r9, #31
 801312c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013134:	d02f      	beq.n	8013196 <__lshift+0xc6>
 8013136:	f1c9 0e20 	rsb	lr, r9, #32
 801313a:	468a      	mov	sl, r1
 801313c:	f04f 0c00 	mov.w	ip, #0
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	fa02 f209 	lsl.w	r2, r2, r9
 8013146:	ea42 020c 	orr.w	r2, r2, ip
 801314a:	f84a 2b04 	str.w	r2, [sl], #4
 801314e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013152:	4298      	cmp	r0, r3
 8013154:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013158:	d8f2      	bhi.n	8013140 <__lshift+0x70>
 801315a:	1b03      	subs	r3, r0, r4
 801315c:	3b15      	subs	r3, #21
 801315e:	f023 0303 	bic.w	r3, r3, #3
 8013162:	3304      	adds	r3, #4
 8013164:	f104 0215 	add.w	r2, r4, #21
 8013168:	4290      	cmp	r0, r2
 801316a:	bf38      	it	cc
 801316c:	2304      	movcc	r3, #4
 801316e:	f841 c003 	str.w	ip, [r1, r3]
 8013172:	f1bc 0f00 	cmp.w	ip, #0
 8013176:	d001      	beq.n	801317c <__lshift+0xac>
 8013178:	f108 0602 	add.w	r6, r8, #2
 801317c:	3e01      	subs	r6, #1
 801317e:	4638      	mov	r0, r7
 8013180:	612e      	str	r6, [r5, #16]
 8013182:	4621      	mov	r1, r4
 8013184:	f7ff fd88 	bl	8012c98 <_Bfree>
 8013188:	4628      	mov	r0, r5
 801318a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801318e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013192:	3301      	adds	r3, #1
 8013194:	e7c1      	b.n	801311a <__lshift+0x4a>
 8013196:	3904      	subs	r1, #4
 8013198:	f853 2b04 	ldr.w	r2, [r3], #4
 801319c:	f841 2f04 	str.w	r2, [r1, #4]!
 80131a0:	4298      	cmp	r0, r3
 80131a2:	d8f9      	bhi.n	8013198 <__lshift+0xc8>
 80131a4:	e7ea      	b.n	801317c <__lshift+0xac>
 80131a6:	bf00      	nop
 80131a8:	08014040 	.word	0x08014040
 80131ac:	080140cc 	.word	0x080140cc

080131b0 <__mcmp>:
 80131b0:	b530      	push	{r4, r5, lr}
 80131b2:	6902      	ldr	r2, [r0, #16]
 80131b4:	690c      	ldr	r4, [r1, #16]
 80131b6:	1b12      	subs	r2, r2, r4
 80131b8:	d10e      	bne.n	80131d8 <__mcmp+0x28>
 80131ba:	f100 0314 	add.w	r3, r0, #20
 80131be:	3114      	adds	r1, #20
 80131c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80131c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80131c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80131cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80131d0:	42a5      	cmp	r5, r4
 80131d2:	d003      	beq.n	80131dc <__mcmp+0x2c>
 80131d4:	d305      	bcc.n	80131e2 <__mcmp+0x32>
 80131d6:	2201      	movs	r2, #1
 80131d8:	4610      	mov	r0, r2
 80131da:	bd30      	pop	{r4, r5, pc}
 80131dc:	4283      	cmp	r3, r0
 80131de:	d3f3      	bcc.n	80131c8 <__mcmp+0x18>
 80131e0:	e7fa      	b.n	80131d8 <__mcmp+0x28>
 80131e2:	f04f 32ff 	mov.w	r2, #4294967295
 80131e6:	e7f7      	b.n	80131d8 <__mcmp+0x28>

080131e8 <__mdiff>:
 80131e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ec:	460c      	mov	r4, r1
 80131ee:	4606      	mov	r6, r0
 80131f0:	4611      	mov	r1, r2
 80131f2:	4620      	mov	r0, r4
 80131f4:	4690      	mov	r8, r2
 80131f6:	f7ff ffdb 	bl	80131b0 <__mcmp>
 80131fa:	1e05      	subs	r5, r0, #0
 80131fc:	d110      	bne.n	8013220 <__mdiff+0x38>
 80131fe:	4629      	mov	r1, r5
 8013200:	4630      	mov	r0, r6
 8013202:	f7ff fd09 	bl	8012c18 <_Balloc>
 8013206:	b930      	cbnz	r0, 8013216 <__mdiff+0x2e>
 8013208:	4b3a      	ldr	r3, [pc, #232]	; (80132f4 <__mdiff+0x10c>)
 801320a:	4602      	mov	r2, r0
 801320c:	f240 2132 	movw	r1, #562	; 0x232
 8013210:	4839      	ldr	r0, [pc, #228]	; (80132f8 <__mdiff+0x110>)
 8013212:	f7fe fb11 	bl	8011838 <__assert_func>
 8013216:	2301      	movs	r3, #1
 8013218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801321c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013220:	bfa4      	itt	ge
 8013222:	4643      	movge	r3, r8
 8013224:	46a0      	movge	r8, r4
 8013226:	4630      	mov	r0, r6
 8013228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801322c:	bfa6      	itte	ge
 801322e:	461c      	movge	r4, r3
 8013230:	2500      	movge	r5, #0
 8013232:	2501      	movlt	r5, #1
 8013234:	f7ff fcf0 	bl	8012c18 <_Balloc>
 8013238:	b920      	cbnz	r0, 8013244 <__mdiff+0x5c>
 801323a:	4b2e      	ldr	r3, [pc, #184]	; (80132f4 <__mdiff+0x10c>)
 801323c:	4602      	mov	r2, r0
 801323e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013242:	e7e5      	b.n	8013210 <__mdiff+0x28>
 8013244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013248:	6926      	ldr	r6, [r4, #16]
 801324a:	60c5      	str	r5, [r0, #12]
 801324c:	f104 0914 	add.w	r9, r4, #20
 8013250:	f108 0514 	add.w	r5, r8, #20
 8013254:	f100 0e14 	add.w	lr, r0, #20
 8013258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801325c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013260:	f108 0210 	add.w	r2, r8, #16
 8013264:	46f2      	mov	sl, lr
 8013266:	2100      	movs	r1, #0
 8013268:	f859 3b04 	ldr.w	r3, [r9], #4
 801326c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013270:	fa1f f883 	uxth.w	r8, r3
 8013274:	fa11 f18b 	uxtah	r1, r1, fp
 8013278:	0c1b      	lsrs	r3, r3, #16
 801327a:	eba1 0808 	sub.w	r8, r1, r8
 801327e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013286:	fa1f f888 	uxth.w	r8, r8
 801328a:	1419      	asrs	r1, r3, #16
 801328c:	454e      	cmp	r6, r9
 801328e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013292:	f84a 3b04 	str.w	r3, [sl], #4
 8013296:	d8e7      	bhi.n	8013268 <__mdiff+0x80>
 8013298:	1b33      	subs	r3, r6, r4
 801329a:	3b15      	subs	r3, #21
 801329c:	f023 0303 	bic.w	r3, r3, #3
 80132a0:	3304      	adds	r3, #4
 80132a2:	3415      	adds	r4, #21
 80132a4:	42a6      	cmp	r6, r4
 80132a6:	bf38      	it	cc
 80132a8:	2304      	movcc	r3, #4
 80132aa:	441d      	add	r5, r3
 80132ac:	4473      	add	r3, lr
 80132ae:	469e      	mov	lr, r3
 80132b0:	462e      	mov	r6, r5
 80132b2:	4566      	cmp	r6, ip
 80132b4:	d30e      	bcc.n	80132d4 <__mdiff+0xec>
 80132b6:	f10c 0203 	add.w	r2, ip, #3
 80132ba:	1b52      	subs	r2, r2, r5
 80132bc:	f022 0203 	bic.w	r2, r2, #3
 80132c0:	3d03      	subs	r5, #3
 80132c2:	45ac      	cmp	ip, r5
 80132c4:	bf38      	it	cc
 80132c6:	2200      	movcc	r2, #0
 80132c8:	441a      	add	r2, r3
 80132ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80132ce:	b17b      	cbz	r3, 80132f0 <__mdiff+0x108>
 80132d0:	6107      	str	r7, [r0, #16]
 80132d2:	e7a3      	b.n	801321c <__mdiff+0x34>
 80132d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80132d8:	fa11 f288 	uxtah	r2, r1, r8
 80132dc:	1414      	asrs	r4, r2, #16
 80132de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132e2:	b292      	uxth	r2, r2
 80132e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80132e8:	f84e 2b04 	str.w	r2, [lr], #4
 80132ec:	1421      	asrs	r1, r4, #16
 80132ee:	e7e0      	b.n	80132b2 <__mdiff+0xca>
 80132f0:	3f01      	subs	r7, #1
 80132f2:	e7ea      	b.n	80132ca <__mdiff+0xe2>
 80132f4:	08014040 	.word	0x08014040
 80132f8:	080140cc 	.word	0x080140cc

080132fc <__ulp>:
 80132fc:	b082      	sub	sp, #8
 80132fe:	ed8d 0b00 	vstr	d0, [sp]
 8013302:	9b01      	ldr	r3, [sp, #4]
 8013304:	4912      	ldr	r1, [pc, #72]	; (8013350 <__ulp+0x54>)
 8013306:	4019      	ands	r1, r3
 8013308:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801330c:	2900      	cmp	r1, #0
 801330e:	dd05      	ble.n	801331c <__ulp+0x20>
 8013310:	2200      	movs	r2, #0
 8013312:	460b      	mov	r3, r1
 8013314:	ec43 2b10 	vmov	d0, r2, r3
 8013318:	b002      	add	sp, #8
 801331a:	4770      	bx	lr
 801331c:	4249      	negs	r1, r1
 801331e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013322:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013326:	f04f 0200 	mov.w	r2, #0
 801332a:	f04f 0300 	mov.w	r3, #0
 801332e:	da04      	bge.n	801333a <__ulp+0x3e>
 8013330:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013334:	fa41 f300 	asr.w	r3, r1, r0
 8013338:	e7ec      	b.n	8013314 <__ulp+0x18>
 801333a:	f1a0 0114 	sub.w	r1, r0, #20
 801333e:	291e      	cmp	r1, #30
 8013340:	bfda      	itte	le
 8013342:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013346:	fa20 f101 	lsrle.w	r1, r0, r1
 801334a:	2101      	movgt	r1, #1
 801334c:	460a      	mov	r2, r1
 801334e:	e7e1      	b.n	8013314 <__ulp+0x18>
 8013350:	7ff00000 	.word	0x7ff00000

08013354 <__b2d>:
 8013354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013356:	6905      	ldr	r5, [r0, #16]
 8013358:	f100 0714 	add.w	r7, r0, #20
 801335c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013360:	1f2e      	subs	r6, r5, #4
 8013362:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013366:	4620      	mov	r0, r4
 8013368:	f7ff fd48 	bl	8012dfc <__hi0bits>
 801336c:	f1c0 0320 	rsb	r3, r0, #32
 8013370:	280a      	cmp	r0, #10
 8013372:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80133f0 <__b2d+0x9c>
 8013376:	600b      	str	r3, [r1, #0]
 8013378:	dc14      	bgt.n	80133a4 <__b2d+0x50>
 801337a:	f1c0 0e0b 	rsb	lr, r0, #11
 801337e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013382:	42b7      	cmp	r7, r6
 8013384:	ea41 030c 	orr.w	r3, r1, ip
 8013388:	bf34      	ite	cc
 801338a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801338e:	2100      	movcs	r1, #0
 8013390:	3015      	adds	r0, #21
 8013392:	fa04 f000 	lsl.w	r0, r4, r0
 8013396:	fa21 f10e 	lsr.w	r1, r1, lr
 801339a:	ea40 0201 	orr.w	r2, r0, r1
 801339e:	ec43 2b10 	vmov	d0, r2, r3
 80133a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a4:	42b7      	cmp	r7, r6
 80133a6:	bf3a      	itte	cc
 80133a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80133ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80133b0:	2100      	movcs	r1, #0
 80133b2:	380b      	subs	r0, #11
 80133b4:	d017      	beq.n	80133e6 <__b2d+0x92>
 80133b6:	f1c0 0c20 	rsb	ip, r0, #32
 80133ba:	fa04 f500 	lsl.w	r5, r4, r0
 80133be:	42be      	cmp	r6, r7
 80133c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80133c4:	ea45 0504 	orr.w	r5, r5, r4
 80133c8:	bf8c      	ite	hi
 80133ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80133ce:	2400      	movls	r4, #0
 80133d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80133d4:	fa01 f000 	lsl.w	r0, r1, r0
 80133d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80133dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80133e0:	ea40 0204 	orr.w	r2, r0, r4
 80133e4:	e7db      	b.n	801339e <__b2d+0x4a>
 80133e6:	ea44 030c 	orr.w	r3, r4, ip
 80133ea:	460a      	mov	r2, r1
 80133ec:	e7d7      	b.n	801339e <__b2d+0x4a>
 80133ee:	bf00      	nop
 80133f0:	3ff00000 	.word	0x3ff00000

080133f4 <__d2b>:
 80133f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80133f8:	4689      	mov	r9, r1
 80133fa:	2101      	movs	r1, #1
 80133fc:	ec57 6b10 	vmov	r6, r7, d0
 8013400:	4690      	mov	r8, r2
 8013402:	f7ff fc09 	bl	8012c18 <_Balloc>
 8013406:	4604      	mov	r4, r0
 8013408:	b930      	cbnz	r0, 8013418 <__d2b+0x24>
 801340a:	4602      	mov	r2, r0
 801340c:	4b25      	ldr	r3, [pc, #148]	; (80134a4 <__d2b+0xb0>)
 801340e:	4826      	ldr	r0, [pc, #152]	; (80134a8 <__d2b+0xb4>)
 8013410:	f240 310a 	movw	r1, #778	; 0x30a
 8013414:	f7fe fa10 	bl	8011838 <__assert_func>
 8013418:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801341c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013420:	bb35      	cbnz	r5, 8013470 <__d2b+0x7c>
 8013422:	2e00      	cmp	r6, #0
 8013424:	9301      	str	r3, [sp, #4]
 8013426:	d028      	beq.n	801347a <__d2b+0x86>
 8013428:	4668      	mov	r0, sp
 801342a:	9600      	str	r6, [sp, #0]
 801342c:	f7ff fd06 	bl	8012e3c <__lo0bits>
 8013430:	9900      	ldr	r1, [sp, #0]
 8013432:	b300      	cbz	r0, 8013476 <__d2b+0x82>
 8013434:	9a01      	ldr	r2, [sp, #4]
 8013436:	f1c0 0320 	rsb	r3, r0, #32
 801343a:	fa02 f303 	lsl.w	r3, r2, r3
 801343e:	430b      	orrs	r3, r1
 8013440:	40c2      	lsrs	r2, r0
 8013442:	6163      	str	r3, [r4, #20]
 8013444:	9201      	str	r2, [sp, #4]
 8013446:	9b01      	ldr	r3, [sp, #4]
 8013448:	61a3      	str	r3, [r4, #24]
 801344a:	2b00      	cmp	r3, #0
 801344c:	bf14      	ite	ne
 801344e:	2202      	movne	r2, #2
 8013450:	2201      	moveq	r2, #1
 8013452:	6122      	str	r2, [r4, #16]
 8013454:	b1d5      	cbz	r5, 801348c <__d2b+0x98>
 8013456:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801345a:	4405      	add	r5, r0
 801345c:	f8c9 5000 	str.w	r5, [r9]
 8013460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013464:	f8c8 0000 	str.w	r0, [r8]
 8013468:	4620      	mov	r0, r4
 801346a:	b003      	add	sp, #12
 801346c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013474:	e7d5      	b.n	8013422 <__d2b+0x2e>
 8013476:	6161      	str	r1, [r4, #20]
 8013478:	e7e5      	b.n	8013446 <__d2b+0x52>
 801347a:	a801      	add	r0, sp, #4
 801347c:	f7ff fcde 	bl	8012e3c <__lo0bits>
 8013480:	9b01      	ldr	r3, [sp, #4]
 8013482:	6163      	str	r3, [r4, #20]
 8013484:	2201      	movs	r2, #1
 8013486:	6122      	str	r2, [r4, #16]
 8013488:	3020      	adds	r0, #32
 801348a:	e7e3      	b.n	8013454 <__d2b+0x60>
 801348c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013490:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013494:	f8c9 0000 	str.w	r0, [r9]
 8013498:	6918      	ldr	r0, [r3, #16]
 801349a:	f7ff fcaf 	bl	8012dfc <__hi0bits>
 801349e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134a2:	e7df      	b.n	8013464 <__d2b+0x70>
 80134a4:	08014040 	.word	0x08014040
 80134a8:	080140cc 	.word	0x080140cc

080134ac <__ratio>:
 80134ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b0:	4688      	mov	r8, r1
 80134b2:	4669      	mov	r1, sp
 80134b4:	4681      	mov	r9, r0
 80134b6:	f7ff ff4d 	bl	8013354 <__b2d>
 80134ba:	a901      	add	r1, sp, #4
 80134bc:	4640      	mov	r0, r8
 80134be:	ec55 4b10 	vmov	r4, r5, d0
 80134c2:	ee10 aa10 	vmov	sl, s0
 80134c6:	f7ff ff45 	bl	8013354 <__b2d>
 80134ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80134ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80134d2:	1a59      	subs	r1, r3, r1
 80134d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80134de:	ec57 6b10 	vmov	r6, r7, d0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	bfd6      	itet	le
 80134e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80134ea:	462a      	movgt	r2, r5
 80134ec:	463a      	movle	r2, r7
 80134ee:	46ab      	mov	fp, r5
 80134f0:	bfd6      	itet	le
 80134f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80134f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80134fa:	ee00 3a90 	vmovle	s1, r3
 80134fe:	ec4b ab17 	vmov	d7, sl, fp
 8013502:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013506:	b003      	add	sp, #12
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350c <__copybits>:
 801350c:	3901      	subs	r1, #1
 801350e:	b570      	push	{r4, r5, r6, lr}
 8013510:	1149      	asrs	r1, r1, #5
 8013512:	6914      	ldr	r4, [r2, #16]
 8013514:	3101      	adds	r1, #1
 8013516:	f102 0314 	add.w	r3, r2, #20
 801351a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801351e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013522:	1f05      	subs	r5, r0, #4
 8013524:	42a3      	cmp	r3, r4
 8013526:	d30c      	bcc.n	8013542 <__copybits+0x36>
 8013528:	1aa3      	subs	r3, r4, r2
 801352a:	3b11      	subs	r3, #17
 801352c:	f023 0303 	bic.w	r3, r3, #3
 8013530:	3211      	adds	r2, #17
 8013532:	42a2      	cmp	r2, r4
 8013534:	bf88      	it	hi
 8013536:	2300      	movhi	r3, #0
 8013538:	4418      	add	r0, r3
 801353a:	2300      	movs	r3, #0
 801353c:	4288      	cmp	r0, r1
 801353e:	d305      	bcc.n	801354c <__copybits+0x40>
 8013540:	bd70      	pop	{r4, r5, r6, pc}
 8013542:	f853 6b04 	ldr.w	r6, [r3], #4
 8013546:	f845 6f04 	str.w	r6, [r5, #4]!
 801354a:	e7eb      	b.n	8013524 <__copybits+0x18>
 801354c:	f840 3b04 	str.w	r3, [r0], #4
 8013550:	e7f4      	b.n	801353c <__copybits+0x30>

08013552 <__any_on>:
 8013552:	f100 0214 	add.w	r2, r0, #20
 8013556:	6900      	ldr	r0, [r0, #16]
 8013558:	114b      	asrs	r3, r1, #5
 801355a:	4298      	cmp	r0, r3
 801355c:	b510      	push	{r4, lr}
 801355e:	db11      	blt.n	8013584 <__any_on+0x32>
 8013560:	dd0a      	ble.n	8013578 <__any_on+0x26>
 8013562:	f011 011f 	ands.w	r1, r1, #31
 8013566:	d007      	beq.n	8013578 <__any_on+0x26>
 8013568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801356c:	fa24 f001 	lsr.w	r0, r4, r1
 8013570:	fa00 f101 	lsl.w	r1, r0, r1
 8013574:	428c      	cmp	r4, r1
 8013576:	d10b      	bne.n	8013590 <__any_on+0x3e>
 8013578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801357c:	4293      	cmp	r3, r2
 801357e:	d803      	bhi.n	8013588 <__any_on+0x36>
 8013580:	2000      	movs	r0, #0
 8013582:	bd10      	pop	{r4, pc}
 8013584:	4603      	mov	r3, r0
 8013586:	e7f7      	b.n	8013578 <__any_on+0x26>
 8013588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801358c:	2900      	cmp	r1, #0
 801358e:	d0f5      	beq.n	801357c <__any_on+0x2a>
 8013590:	2001      	movs	r0, #1
 8013592:	e7f6      	b.n	8013582 <__any_on+0x30>

08013594 <_calloc_r>:
 8013594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013596:	fba1 2402 	umull	r2, r4, r1, r2
 801359a:	b94c      	cbnz	r4, 80135b0 <_calloc_r+0x1c>
 801359c:	4611      	mov	r1, r2
 801359e:	9201      	str	r2, [sp, #4]
 80135a0:	f7fc fbc6 	bl	800fd30 <_malloc_r>
 80135a4:	9a01      	ldr	r2, [sp, #4]
 80135a6:	4605      	mov	r5, r0
 80135a8:	b930      	cbnz	r0, 80135b8 <_calloc_r+0x24>
 80135aa:	4628      	mov	r0, r5
 80135ac:	b003      	add	sp, #12
 80135ae:	bd30      	pop	{r4, r5, pc}
 80135b0:	220c      	movs	r2, #12
 80135b2:	6002      	str	r2, [r0, #0]
 80135b4:	2500      	movs	r5, #0
 80135b6:	e7f8      	b.n	80135aa <_calloc_r+0x16>
 80135b8:	4621      	mov	r1, r4
 80135ba:	f7fc fb45 	bl	800fc48 <memset>
 80135be:	e7f4      	b.n	80135aa <_calloc_r+0x16>

080135c0 <_read_r>:
 80135c0:	b538      	push	{r3, r4, r5, lr}
 80135c2:	4d07      	ldr	r5, [pc, #28]	; (80135e0 <_read_r+0x20>)
 80135c4:	4604      	mov	r4, r0
 80135c6:	4608      	mov	r0, r1
 80135c8:	4611      	mov	r1, r2
 80135ca:	2200      	movs	r2, #0
 80135cc:	602a      	str	r2, [r5, #0]
 80135ce:	461a      	mov	r2, r3
 80135d0:	f7ee fdf2 	bl	80021b8 <_read>
 80135d4:	1c43      	adds	r3, r0, #1
 80135d6:	d102      	bne.n	80135de <_read_r+0x1e>
 80135d8:	682b      	ldr	r3, [r5, #0]
 80135da:	b103      	cbz	r3, 80135de <_read_r+0x1e>
 80135dc:	6023      	str	r3, [r4, #0]
 80135de:	bd38      	pop	{r3, r4, r5, pc}
 80135e0:	240011d4 	.word	0x240011d4
 80135e4:	00000000 	.word	0x00000000

080135e8 <nan>:
 80135e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80135f0 <nan+0x8>
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	00000000 	.word	0x00000000
 80135f4:	7ff80000 	.word	0x7ff80000

080135f8 <__ascii_wctomb>:
 80135f8:	b149      	cbz	r1, 801360e <__ascii_wctomb+0x16>
 80135fa:	2aff      	cmp	r2, #255	; 0xff
 80135fc:	bf85      	ittet	hi
 80135fe:	238a      	movhi	r3, #138	; 0x8a
 8013600:	6003      	strhi	r3, [r0, #0]
 8013602:	700a      	strbls	r2, [r1, #0]
 8013604:	f04f 30ff 	movhi.w	r0, #4294967295
 8013608:	bf98      	it	ls
 801360a:	2001      	movls	r0, #1
 801360c:	4770      	bx	lr
 801360e:	4608      	mov	r0, r1
 8013610:	4770      	bx	lr

08013612 <abort>:
 8013612:	b508      	push	{r3, lr}
 8013614:	2006      	movs	r0, #6
 8013616:	f000 f82b 	bl	8013670 <raise>
 801361a:	2001      	movs	r0, #1
 801361c:	f7ee fdc2 	bl	80021a4 <_exit>

08013620 <_raise_r>:
 8013620:	291f      	cmp	r1, #31
 8013622:	b538      	push	{r3, r4, r5, lr}
 8013624:	4604      	mov	r4, r0
 8013626:	460d      	mov	r5, r1
 8013628:	d904      	bls.n	8013634 <_raise_r+0x14>
 801362a:	2316      	movs	r3, #22
 801362c:	6003      	str	r3, [r0, #0]
 801362e:	f04f 30ff 	mov.w	r0, #4294967295
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013636:	b112      	cbz	r2, 801363e <_raise_r+0x1e>
 8013638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801363c:	b94b      	cbnz	r3, 8013652 <_raise_r+0x32>
 801363e:	4620      	mov	r0, r4
 8013640:	f000 f830 	bl	80136a4 <_getpid_r>
 8013644:	462a      	mov	r2, r5
 8013646:	4601      	mov	r1, r0
 8013648:	4620      	mov	r0, r4
 801364a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801364e:	f000 b817 	b.w	8013680 <_kill_r>
 8013652:	2b01      	cmp	r3, #1
 8013654:	d00a      	beq.n	801366c <_raise_r+0x4c>
 8013656:	1c59      	adds	r1, r3, #1
 8013658:	d103      	bne.n	8013662 <_raise_r+0x42>
 801365a:	2316      	movs	r3, #22
 801365c:	6003      	str	r3, [r0, #0]
 801365e:	2001      	movs	r0, #1
 8013660:	e7e7      	b.n	8013632 <_raise_r+0x12>
 8013662:	2400      	movs	r4, #0
 8013664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013668:	4628      	mov	r0, r5
 801366a:	4798      	blx	r3
 801366c:	2000      	movs	r0, #0
 801366e:	e7e0      	b.n	8013632 <_raise_r+0x12>

08013670 <raise>:
 8013670:	4b02      	ldr	r3, [pc, #8]	; (801367c <raise+0xc>)
 8013672:	4601      	mov	r1, r0
 8013674:	6818      	ldr	r0, [r3, #0]
 8013676:	f7ff bfd3 	b.w	8013620 <_raise_r>
 801367a:	bf00      	nop
 801367c:	24000010 	.word	0x24000010

08013680 <_kill_r>:
 8013680:	b538      	push	{r3, r4, r5, lr}
 8013682:	4d07      	ldr	r5, [pc, #28]	; (80136a0 <_kill_r+0x20>)
 8013684:	2300      	movs	r3, #0
 8013686:	4604      	mov	r4, r0
 8013688:	4608      	mov	r0, r1
 801368a:	4611      	mov	r1, r2
 801368c:	602b      	str	r3, [r5, #0]
 801368e:	f7ee fd79 	bl	8002184 <_kill>
 8013692:	1c43      	adds	r3, r0, #1
 8013694:	d102      	bne.n	801369c <_kill_r+0x1c>
 8013696:	682b      	ldr	r3, [r5, #0]
 8013698:	b103      	cbz	r3, 801369c <_kill_r+0x1c>
 801369a:	6023      	str	r3, [r4, #0]
 801369c:	bd38      	pop	{r3, r4, r5, pc}
 801369e:	bf00      	nop
 80136a0:	240011d4 	.word	0x240011d4

080136a4 <_getpid_r>:
 80136a4:	f7ee bd66 	b.w	8002174 <_getpid>

080136a8 <_init>:
 80136a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136aa:	bf00      	nop
 80136ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ae:	bc08      	pop	{r3}
 80136b0:	469e      	mov	lr, r3
 80136b2:	4770      	bx	lr

080136b4 <_fini>:
 80136b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136b6:	bf00      	nop
 80136b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ba:	bc08      	pop	{r3}
 80136bc:	469e      	mov	lr, r3
 80136be:	4770      	bx	lr
